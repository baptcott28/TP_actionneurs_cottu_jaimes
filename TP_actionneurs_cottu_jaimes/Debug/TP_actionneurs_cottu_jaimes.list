
TP_actionneurs_cottu_jaimes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007da0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08007f80  08007f80  00017f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008438  08008438  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08008438  08008438  00018438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008440  08008440  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008440  08008440  00018440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008444  08008444  00018444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08008448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000010c  08008554  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08008554  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d5a  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f0  00000000  00000000  00034e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00037688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  000387d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027624  00000000  00000000  00039830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fd1  00000000  00000000  00060e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd4c8  00000000  00000000  00074e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001722ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055e8  00000000  00000000  00172340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000010c 	.word	0x2000010c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007f68 	.word	0x08007f68

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000110 	.word	0x20000110
 800021c:	08007f68 	.word	0x08007f68

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
  * @brief  The application entry point.
  * Fonction de gestion de l'interface utilisateur : gestion du shell et du traitement des commandes.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09e      	sub	sp, #120	; 0x78
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];		//!< Contient la commande reconstruite apres chaque interruption UART
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 feb0 	bl	8001356 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f97d 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fb03 	bl	8000c04 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005fe:	f000 f9c5 	bl	800098c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000602:	f000 fab3 	bl	8000b6c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000606:	f000 fa65 	bl	8000ad4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	memset(argv,(int)NULL,MAX_ARGS*sizeof(char*));
 800060a:	463b      	mov	r3, r7
 800060c:	2224      	movs	r2, #36	; 0x24
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f006 f955 	bl	80068c0 <memset>
	memset(cmdBuffer,(int)NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061a:	2240      	movs	r2, #64	; 0x40
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 f94e 	bl	80068c0 <memset>
 8000624:	4b9b      	ldr	r3, [pc, #620]	; (8000894 <main+0x2b0>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,(int)NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,(int)NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 800062a:	2240      	movs	r2, #64	; 0x40
 800062c:	2100      	movs	r1, #0
 800062e:	489a      	ldr	r0, [pc, #616]	; (8000898 <main+0x2b4>)
 8000630:	f006 f946 	bl	80068c0 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000634:	2201      	movs	r2, #1
 8000636:	4997      	ldr	r1, [pc, #604]	; (8000894 <main+0x2b0>)
 8000638:	4898      	ldr	r0, [pc, #608]	; (800089c <main+0x2b8>)
 800063a:	f004 f983 	bl	8004944 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 800063e:	200a      	movs	r0, #10
 8000640:	f000 fefa 	bl	8001438 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2266      	movs	r2, #102	; 0x66
 800064a:	4995      	ldr	r1, [pc, #596]	; (80008a0 <main+0x2bc>)
 800064c:	4893      	ldr	r0, [pc, #588]	; (800089c <main+0x2b8>)
 800064e:	f004 f8e2 	bl	8004816 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	2218      	movs	r2, #24
 8000658:	4992      	ldr	r1, [pc, #584]	; (80008a4 <main+0x2c0>)
 800065a:	4890      	ldr	r0, [pc, #576]	; (800089c <main+0x2b8>)
 800065c:	f004 f8db 	bl	8004816 <HAL_UART_Transmit>

	//valeur de rapport cyclique initial
	TIM1->CCR1=660;
 8000660:	4b91      	ldr	r3, [pc, #580]	; (80008a8 <main+0x2c4>)
 8000662:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=SPEED_MAX-660;
 8000668:	4b8f      	ldr	r3, [pc, #572]	; (80008a8 <main+0x2c4>)
 800066a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800066e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 8000670:	4b8e      	ldr	r3, [pc, #568]	; (80008ac <main+0x2c8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d056      	beq.n	8000726 <main+0x142>
			switch(uartRxBuffer[0]){
 8000678:	4b86      	ldr	r3, [pc, #536]	; (8000894 <main+0x2b0>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b0d      	cmp	r3, #13
 800067e:	d002      	beq.n	8000686 <main+0xa2>
 8000680:	2b7f      	cmp	r3, #127	; 0x7f
 8000682:	d02d      	beq.n	80006e0 <main+0xfc>
 8000684:	e03c      	b.n	8000700 <main+0x11c>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	2203      	movs	r2, #3
 800068c:	4988      	ldr	r1, [pc, #544]	; (80008b0 <main+0x2cc>)
 800068e:	4883      	ldr	r0, [pc, #524]	; (800089c <main+0x2b8>)
 8000690:	f004 f8c1 	bl	8004816 <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 8000694:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800069a:	4413      	add	r3, r2
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
				argc = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, " ");
 80006a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a8:	4982      	ldr	r1, [pc, #520]	; (80008b4 <main+0x2d0>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f006 f9be 	bl	8006a2c <strtok>
 80006b0:	66f8      	str	r0, [r7, #108]	; 0x6c
				while(token!=NULL){
 80006b2:	e00d      	b.n	80006d0 <main+0xec>
					argv[argc++] = token;
 80006b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	673a      	str	r2, [r7, #112]	; 0x70
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	3378      	adds	r3, #120	; 0x78
 80006be:	443b      	add	r3, r7
 80006c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80006c2:	f843 2c78 	str.w	r2, [r3, #-120]
					token = strtok(NULL, " ");
 80006c6:	497b      	ldr	r1, [pc, #492]	; (80008b4 <main+0x2d0>)
 80006c8:	2000      	movs	r0, #0
 80006ca:	f006 f9af 	bl	8006a2c <strtok>
 80006ce:	66f8      	str	r0, [r7, #108]	; 0x6c
				while(token!=NULL){
 80006d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1ee      	bne.n	80006b4 <main+0xd0>
				}

				idx_cmd = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 80006da:	2301      	movs	r3, #1
 80006dc:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 80006de:	e01f      	b.n	8000720 <main+0x13c>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 80006e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006e2:	1e5a      	subs	r2, r3, #1
 80006e4:	677a      	str	r2, [r7, #116]	; 0x74
 80006e6:	3378      	adds	r3, #120	; 0x78
 80006e8:	443b      	add	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	2201      	movs	r2, #1
 80006f6:	4967      	ldr	r1, [pc, #412]	; (8000894 <main+0x2b0>)
 80006f8:	4868      	ldr	r0, [pc, #416]	; (800089c <main+0x2b8>)
 80006fa:	f004 f88c 	bl	8004816 <HAL_UART_Transmit>
				break;
 80006fe:	e00f      	b.n	8000720 <main+0x13c>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	677a      	str	r2, [r7, #116]	; 0x74
 8000706:	4a63      	ldr	r2, [pc, #396]	; (8000894 <main+0x2b0>)
 8000708:	7812      	ldrb	r2, [r2, #0]
 800070a:	3378      	adds	r3, #120	; 0x78
 800070c:	443b      	add	r3, r7
 800070e:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	2201      	movs	r2, #1
 8000718:	495e      	ldr	r1, [pc, #376]	; (8000894 <main+0x2b0>)
 800071a:	4860      	ldr	r0, [pc, #384]	; (800089c <main+0x2b8>)
 800071c:	f004 f87b 	bl	8004816 <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 8000720:	4b62      	ldr	r3, [pc, #392]	; (80008ac <main+0x2c8>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 8000726:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000728:	2b00      	cmp	r3, #0
 800072a:	d0a1      	beq.n	8000670 <main+0x8c>
			if(strcmp(argv[0],"set")==0){
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	4962      	ldr	r1, [pc, #392]	; (80008b8 <main+0x2d4>)
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd75 	bl	8000220 <strcmp>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d12d      	bne.n	8000798 <main+0x1b4>
				if(strcmp(argv[1],"PA5")==0){
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	495f      	ldr	r1, [pc, #380]	; (80008bc <main+0x2d8>)
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fd6d 	bl	8000220 <strcmp>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d11d      	bne.n	8000788 <main+0x1a4>
					HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	4618      	mov	r0, r3
 8000750:	f006 f888 	bl	8006864 <atoi>
 8000754:	4603      	mov	r3, r0
 8000756:	b2db      	uxtb	r3, r3
 8000758:	461a      	mov	r2, r3
 800075a:	2120      	movs	r1, #32
 800075c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000760:	f001 f9de 	bl	8001b20 <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	4618      	mov	r0, r3
 8000768:	f006 f87c 	bl	8006864 <atoi>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	4953      	ldr	r1, [pc, #332]	; (80008c0 <main+0x2dc>)
 8000772:	4849      	ldr	r0, [pc, #292]	; (8000898 <main+0x2b4>)
 8000774:	f006 f93a 	bl	80069ec <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	2220      	movs	r2, #32
 800077e:	4946      	ldr	r1, [pc, #280]	; (8000898 <main+0x2b4>)
 8000780:	4846      	ldr	r0, [pc, #280]	; (800089c <main+0x2b8>)
 8000782:	f004 f848 	bl	8004816 <HAL_UART_Transmit>
 8000786:	e07a      	b.n	800087e <main+0x29a>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
 800078c:	2215      	movs	r2, #21
 800078e:	494d      	ldr	r1, [pc, #308]	; (80008c4 <main+0x2e0>)
 8000790:	4842      	ldr	r0, [pc, #264]	; (800089c <main+0x2b8>)
 8000792:	f004 f840 	bl	8004816 <HAL_UART_Transmit>
 8000796:	e072      	b.n	800087e <main+0x29a>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	494b      	ldr	r1, [pc, #300]	; (80008c8 <main+0x2e4>)
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fd3f 	bl	8000220 <strcmp>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d107      	bne.n	80007b8 <main+0x1d4>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	2215      	movs	r2, #21
 80007ae:	4945      	ldr	r1, [pc, #276]	; (80008c4 <main+0x2e0>)
 80007b0:	483a      	ldr	r0, [pc, #232]	; (800089c <main+0x2b8>)
 80007b2:	f004 f830 	bl	8004816 <HAL_UART_Transmit>
 80007b6:	e062      	b.n	800087e <main+0x29a>
			}
			else if(strcmp(argv[0],"pinout")==0)
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	4944      	ldr	r1, [pc, #272]	; (80008cc <main+0x2e8>)
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fd2f 	bl	8000220 <strcmp>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d107      	bne.n	80007d8 <main+0x1f4>
			{
				HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	223d      	movs	r2, #61	; 0x3d
 80007ce:	4940      	ldr	r1, [pc, #256]	; (80008d0 <main+0x2ec>)
 80007d0:	4832      	ldr	r0, [pc, #200]	; (800089c <main+0x2b8>)
 80007d2:	f004 f820 	bl	8004816 <HAL_UART_Transmit>
 80007d6:	e052      	b.n	800087e <main+0x29a>
			}
			else if(strcmp(argv[0],"start")==0)
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	493e      	ldr	r1, [pc, #248]	; (80008d4 <main+0x2f0>)
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fd1f 	bl	8000220 <strcmp>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d109      	bne.n	80007fc <main+0x218>
			{
				HAL_UART_Transmit(&huart2, start, sizeof(start), HAL_MAX_DELAY);
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	220c      	movs	r2, #12
 80007ee:	493a      	ldr	r1, [pc, #232]	; (80008d8 <main+0x2f4>)
 80007f0:	482a      	ldr	r0, [pc, #168]	; (800089c <main+0x2b8>)
 80007f2:	f004 f810 	bl	8004816 <HAL_UART_Transmit>
				motor_start();
 80007f6:	f000 fad3 	bl	8000da0 <motor_start>
 80007fa:	e040      	b.n	800087e <main+0x29a>
			}
			else if(strcmp(argv[0],"stop")==0)
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	4937      	ldr	r1, [pc, #220]	; (80008dc <main+0x2f8>)
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fd0d 	bl	8000220 <strcmp>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d109      	bne.n	8000820 <main+0x23c>
			{
				HAL_UART_Transmit(&huart2, stop, sizeof(stop), HAL_MAX_DELAY);
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	220d      	movs	r2, #13
 8000812:	4933      	ldr	r1, [pc, #204]	; (80008e0 <main+0x2fc>)
 8000814:	4821      	ldr	r0, [pc, #132]	; (800089c <main+0x2b8>)
 8000816:	f003 fffe 	bl	8004816 <HAL_UART_Transmit>
				motor_stop_PWM();
 800081a:	f000 fadd 	bl	8000dd8 <motor_stop_PWM>
 800081e:	e02e      	b.n	800087e <main+0x29a>
			}
			else if(strcmp(argv[0],"help")==0)
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	4930      	ldr	r1, [pc, #192]	; (80008e4 <main+0x300>)
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fcfb 	bl	8000220 <strcmp>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d107      	bne.n	8000840 <main+0x25c>
			{
				HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	22f9      	movs	r2, #249	; 0xf9
 8000836:	492c      	ldr	r1, [pc, #176]	; (80008e8 <main+0x304>)
 8000838:	4818      	ldr	r0, [pc, #96]	; (800089c <main+0x2b8>)
 800083a:	f003 ffec 	bl	8004816 <HAL_UART_Transmit>
 800083e:	e01e      	b.n	800087e <main+0x29a>
			}
			else if(strcmp(argv[0],"speed")==0)
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	492a      	ldr	r1, [pc, #168]	; (80008ec <main+0x308>)
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fceb 	bl	8000220 <strcmp>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d10f      	bne.n	8000870 <main+0x28c>
			{
				HAL_UART_Transmit(&huart2,speed_msg, sizeof(speed_msg), HAL_MAX_DELAY);
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	2210      	movs	r2, #16
 8000856:	4926      	ldr	r1, [pc, #152]	; (80008f0 <main+0x30c>)
 8000858:	4810      	ldr	r0, [pc, #64]	; (800089c <main+0x2b8>)
 800085a:	f003 ffdc 	bl	8004816 <HAL_UART_Transmit>
				int speed;
				speed=atoi(argv[1]);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4618      	mov	r0, r3
 8000862:	f005 ffff 	bl	8006864 <atoi>
 8000866:	6678      	str	r0, [r7, #100]	; 0x64
				motor_set_speed(speed);
 8000868:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800086a:	f000 faf9 	bl	8000e60 <motor_set_speed>
 800086e:	e006      	b.n	800087e <main+0x29a>
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	2215      	movs	r2, #21
 8000876:	4913      	ldr	r1, [pc, #76]	; (80008c4 <main+0x2e0>)
 8000878:	4808      	ldr	r0, [pc, #32]	; (800089c <main+0x2b8>)
 800087a:	f003 ffcc 	bl	8004816 <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	2218      	movs	r2, #24
 8000884:	4907      	ldr	r1, [pc, #28]	; (80008a4 <main+0x2c0>)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <main+0x2b8>)
 8000888:	f003 ffc5 	bl	8004816 <HAL_UART_Transmit>
			newCmdReady = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	66bb      	str	r3, [r7, #104]	; 0x68
		if(uartRxReceived){
 8000890:	e6ee      	b.n	8000670 <main+0x8c>
 8000892:	bf00      	nop
 8000894:	20000254 	.word	0x20000254
 8000898:	20000258 	.word	0x20000258
 800089c:	200001c0 	.word	0x200001c0
 80008a0:	20000018 	.word	0x20000018
 80008a4:	20000000 	.word	0x20000000
 80008a8:	40012c00 	.word	0x40012c00
 80008ac:	20000250 	.word	0x20000250
 80008b0:	20000080 	.word	0x20000080
 80008b4:	08007f80 	.word	0x08007f80
 80008b8:	08007f84 	.word	0x08007f84
 80008bc:	08007f88 	.word	0x08007f88
 80008c0:	08007f8c 	.word	0x08007f8c
 80008c4:	20000084 	.word	0x20000084
 80008c8:	08007fa8 	.word	0x08007fa8
 80008cc:	08007fac 	.word	0x08007fac
 80008d0:	08008140 	.word	0x08008140
 80008d4:	08007fb4 	.word	0x08007fb4
 80008d8:	08008180 	.word	0x08008180
 80008dc:	08007fbc 	.word	0x08007fbc
 80008e0:	0800818c 	.word	0x0800818c
 80008e4:	08007fc4 	.word	0x08007fc4
 80008e8:	08008044 	.word	0x08008044
 80008ec:	08007fcc 	.word	0x08007fcc
 80008f0:	0800819c 	.word	0x0800819c

080008f4 <SystemClock_Config>:
/*
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	; 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0318 	add.w	r3, r7, #24
 80008fe:	2238      	movs	r2, #56	; 0x38
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f005 ffdc 	bl	80068c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000916:	2000      	movs	r0, #0
 8000918:	f001 f932 	bl	8001b80 <HAL_PWREx_ControlVoltageScaling>

  /* Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091c:	2302      	movs	r3, #2
 800091e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000926:	2340      	movs	r3, #64	; 0x40
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092a:	2302      	movs	r3, #2
 800092c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800092e:	2302      	movs	r3, #2
 8000930:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000932:	2304      	movs	r3, #4
 8000934:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000936:	2355      	movs	r3, #85	; 0x55
 8000938:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800093a:	2302      	movs	r3, #2
 800093c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800093e:	2302      	movs	r3, #2
 8000940:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000942:	2302      	movs	r3, #2
 8000944:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000946:	f107 0318 	add.w	r3, r7, #24
 800094a:	4618      	mov	r0, r3
 800094c:	f001 f9cc 	bl	8001ce8 <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000956:	f000 f9e1 	bl	8000d1c <Error_Handler>
  }

  /* Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	230f      	movs	r3, #15
 800095c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2303      	movs	r3, #3
 8000960:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2104      	movs	r1, #4
 8000972:	4618      	mov	r0, r3
 8000974:	f001 fcd0 	bl	8002318 <HAL_RCC_ClockConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800097e:	f000 f9cd 	bl	8000d1c <Error_Handler>
  }
}
 8000982:	bf00      	nop
 8000984:	3750      	adds	r7, #80	; 0x50
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b098      	sub	sp, #96	; 0x60
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000992:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
 80009ae:	615a      	str	r2, [r3, #20]
 80009b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2234      	movs	r2, #52	; 0x34
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f005 ff81 	bl	80068c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009be:	4b43      	ldr	r3, [pc, #268]	; (8000acc <MX_TIM1_Init+0x140>)
 80009c0:	4a43      	ldr	r2, [pc, #268]	; (8000ad0 <MX_TIM1_Init+0x144>)
 80009c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3-1;
 80009c4:	4b41      	ldr	r3, [pc, #260]	; (8000acc <MX_TIM1_Init+0x140>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80009ca:	4b40      	ldr	r3, [pc, #256]	; (8000acc <MX_TIM1_Init+0x140>)
 80009cc:	2220      	movs	r2, #32
 80009ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1749;
 80009d0:	4b3e      	ldr	r3, [pc, #248]	; (8000acc <MX_TIM1_Init+0x140>)
 80009d2:	f240 62d5 	movw	r2, #1749	; 0x6d5
 80009d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b3c      	ldr	r3, [pc, #240]	; (8000acc <MX_TIM1_Init+0x140>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009de:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <MX_TIM1_Init+0x140>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b39      	ldr	r3, [pc, #228]	; (8000acc <MX_TIM1_Init+0x140>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009ea:	4838      	ldr	r0, [pc, #224]	; (8000acc <MX_TIM1_Init+0x140>)
 80009ec:	f002 f984 	bl	8002cf8 <HAL_TIM_PWM_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80009f6:	f000 f991 	bl	8000d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fa:	2300      	movs	r3, #0
 80009fc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009fe:	2300      	movs	r3, #0
 8000a00:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	482f      	ldr	r0, [pc, #188]	; (8000acc <MX_TIM1_Init+0x140>)
 8000a0e:	f003 fcff 	bl	8004410 <HAL_TIMEx_MasterConfigSynchronization>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a18:	f000 f980 	bl	8000d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a1c:	2360      	movs	r3, #96	; 0x60
 8000a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1050;
 8000a20:	f240 431a 	movw	r3, #1050	; 0x41a
 8000a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a26:	2300      	movs	r3, #0
 8000a28:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4619      	mov	r1, r3
 8000a42:	4822      	ldr	r0, [pc, #136]	; (8000acc <MX_TIM1_Init+0x140>)
 8000a44:	f002 fcde 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000a4e:	f000 f965 	bl	8000d1c <Error_Handler>
  }
  sConfigOC.Pulse = 700;
 8000a52:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	481a      	ldr	r0, [pc, #104]	; (8000acc <MX_TIM1_Init+0x140>)
 8000a62:	f002 fccf 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000a6c:	f000 f956 	bl	8000d1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 200;
 8000a7c:	23c8      	movs	r3, #200	; 0xc8
 8000a7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000aa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	4807      	ldr	r0, [pc, #28]	; (8000acc <MX_TIM1_Init+0x140>)
 8000ab0:	f003 fd44 	bl	800453c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8000aba:	f000 f92f 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000abe:	4803      	ldr	r0, [pc, #12]	; (8000acc <MX_TIM1_Init+0x140>)
 8000ac0:	f000 fa6a 	bl	8000f98 <HAL_TIM_MspPostInit>

}
 8000ac4:	bf00      	nop
 8000ac6:	3760      	adds	r7, #96	; 0x60
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000128 	.word	0x20000128
 8000ad0:	40012c00 	.word	0x40012c00

08000ad4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170;
 8000afa:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000afc:	22aa      	movs	r2, #170	; 0xaa
 8000afe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b08:	2202      	movs	r2, #2
 8000b0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b18:	4813      	ldr	r0, [pc, #76]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b1a:	f002 f867 	bl	8002bec <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b24:	f000 f8fa 	bl	8000d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	4619      	mov	r1, r3
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b36:	f002 fd79 	bl	800362c <HAL_TIM_ConfigClockSource>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b40:	f000 f8ec 	bl	8000d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b52:	f003 fc5d 	bl	8004410 <HAL_TIMEx_MasterConfigSynchronization>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b5c:	f000 f8de 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	3720      	adds	r7, #32
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000174 	.word	0x20000174

08000b6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b70:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b72:	4a23      	ldr	r2, [pc, #140]	; (8000c00 <MX_USART2_UART_Init+0x94>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb4:	4811      	ldr	r0, [pc, #68]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000bb6:	f003 fdde 	bl	8004776 <HAL_UART_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bc0:	f000 f8ac 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	480d      	ldr	r0, [pc, #52]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000bc8:	f005 fd81 	bl	80066ce <HAL_UARTEx_SetTxFifoThreshold>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bd2:	f000 f8a3 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4808      	ldr	r0, [pc, #32]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000bda:	f005 fdb6 	bl	800674a <HAL_UARTEx_SetRxFifoThreshold>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000be4:	f000 f89a 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000bea:	f005 fd37 	bl	800665c <HAL_UARTEx_DisableFifoMode>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bf4:	f000 f892 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200001c0 	.word	0x200001c0
 8000c00:	40004400 	.word	0x40004400

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	4a32      	ldr	r2, [pc, #200]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c26:	4b30      	ldr	r3, [pc, #192]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c32:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a2c      	ldr	r2, [pc, #176]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c38:	f043 0320 	orr.w	r3, r3, #32
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0320 	and.w	r3, r3, #32
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c56:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2108      	movs	r1, #8
 8000c66:	4821      	ldr	r0, [pc, #132]	; (8000cec <MX_GPIO_Init+0xe8>)
 8000c68:	f000 ff5a 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2120      	movs	r1, #32
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c74:	f000 ff54 	bl	8001b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4817      	ldr	r0, [pc, #92]	; (8000cec <MX_GPIO_Init+0xe8>)
 8000c90:	f000 fdc4 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : ISO_RESET_Pin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8000c94:	2308      	movs	r3, #8
 8000c96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4810      	ldr	r0, [pc, #64]	; (8000cec <MX_GPIO_Init+0xe8>)
 8000cac:	f000 fdb6 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000cb0:	2320      	movs	r3, #32
 8000cb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cca:	f000 fda7 	bl	800181c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2028      	movs	r0, #40	; 0x28
 8000cd4:	f000 fcad 	bl	8001632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cd8:	2028      	movs	r0, #40	; 0x28
 8000cda:	f000 fcc4 	bl	8001666 <HAL_NVIC_EnableIRQ>

}
 8000cde:	bf00      	nop
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	48000800 	.word	0x48000800

08000cf0 <HAL_UART_RxCpltCallback>:
/**
 * \fn void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
 * \brief Gestion des interruptions des périphériques UART:
 * Met le flag de réception a 1 et met le caractère reçu dans uartRxBuffer
 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_UART_RxCpltCallback+0x20>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4904      	ldr	r1, [pc, #16]	; (8000d14 <HAL_UART_RxCpltCallback+0x24>)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <HAL_UART_RxCpltCallback+0x28>)
 8000d04:	f003 fe1e 	bl	8004944 <HAL_UART_Receive_IT>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000250 	.word	0x20000250
 8000d14:	20000254 	.word	0x20000254
 8000d18:	200001c0 	.word	0x200001c0

08000d1c <Error_Handler>:
/*
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x8>
	...

08000d28 <HAL_TIM_PeriodElapsedCallback>:
 * \fn void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 * \brief Gestion des interruptions des timers :
 * Désactive le timer 2 et remet la Pin ISO_RESET lorsque le tim2 déclenche son interruption.
 * Termine la séquence d'allumage en démarrant les PWM
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	if(htim==&htim2){
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d109      	bne.n	8000d4c <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d3a:	f001 ffae 	bl	8002c9a <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(ISO_RESET_GPIO_Port,ISO_RESET_Pin,0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2108      	movs	r1, #8
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d44:	f000 feec 	bl	8001b20 <HAL_GPIO_WritePin>

		//Start les PWM moteurs
		motor_start_PWM();
 8000d48:	f000 f86e 	bl	8000e28 <motor_start_PWM>
	}

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000174 	.word	0x20000174
 8000d58:	48000800 	.word	0x48000800

08000d5c <HAL_GPIO_EXTI_Callback>:
/**
 * \fn void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 * \brief Gestion des interruptions GPÏO_EXTI :
 * Déclenche la procédure d'allumage du moteur sur appui du bouton utilisateur
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==BUTTON_Pin){
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d6c:	d101      	bne.n	8000d72 <HAL_GPIO_EXTI_Callback+0x16>
		motor_start();
 8000d6e:	f000 f817 	bl	8000da0 <motor_start>
	}
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <__io_putchar>:

int __io_putchar(int ch){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000d84:	1d39      	adds	r1, r7, #4
 8000d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <__io_putchar+0x20>)
 8000d8e:	f003 fd42 	bl	8004816 <HAL_UART_Transmit>
	return ch;
 8000d92:	687b      	ldr	r3, [r7, #4]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200001c0 	.word	0x200001c0

08000da0 <motor_start>:

/**
 * \fn void motor_start(void)
 * \brief Démarre le timer 2 et met la Pin ISO_RESET à 1 pendant le temps requis (2us). Le reset de ISO_RESET se fait dans l'interruption de tim2
 */
void motor_start(void){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	motor_stop_PWM();
 8000da4:	f000 f818 	bl	8000dd8 <motor_stop_PWM>
	printf("moteur start entered\r\n");
 8000da8:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <motor_start+0x30>)
 8000daa:	f005 fe17 	bl	80069dc <puts>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port,ISO_RESET_Pin,1);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2108      	movs	r1, #8
 8000db2:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <motor_start+0x34>)
 8000db4:	f000 feb4 	bl	8001b20 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f000 fb3d 	bl	8001438 <HAL_Delay>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port,ISO_RESET_Pin,0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2108      	movs	r1, #8
 8000dc2:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <motor_start+0x34>)
 8000dc4:	f000 feac 	bl	8001b20 <HAL_GPIO_WritePin>
	motor_start_PWM();
 8000dc8:	f000 f82e 	bl	8000e28 <motor_start_PWM>
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	08007fd4 	.word	0x08007fd4
 8000dd4:	48000800 	.word	0x48000800

08000dd8 <motor_stop_PWM>:

void motor_stop_PWM(void){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	printf("moteur_stop_entered\r\n");
 8000ddc:	480f      	ldr	r0, [pc, #60]	; (8000e1c <motor_stop_PWM+0x44>)
 8000dde:	f005 fdfd 	bl	80069dc <puts>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000de2:	2100      	movs	r1, #0
 8000de4:	480e      	ldr	r0, [pc, #56]	; (8000e20 <motor_stop_PWM+0x48>)
 8000de6:	f002 f8f1 	bl	8002fcc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000dea:	2104      	movs	r1, #4
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <motor_stop_PWM+0x48>)
 8000dee:	f002 f8ed 	bl	8002fcc <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000df2:	2100      	movs	r1, #0
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <motor_stop_PWM+0x48>)
 8000df6:	f003 faad 	bl	8004354 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	4808      	ldr	r0, [pc, #32]	; (8000e20 <motor_stop_PWM+0x48>)
 8000dfe:	f003 faa9 	bl	8004354 <HAL_TIMEx_PWMN_Stop>
	TIM1->CCR1=660;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <motor_stop_PWM+0x4c>)
 8000e04:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000e08:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=SPEED_MAX-660;
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <motor_stop_PWM+0x4c>)
 8000e0c:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8000e10:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Init(&htim1);
 8000e12:	4803      	ldr	r0, [pc, #12]	; (8000e20 <motor_stop_PWM+0x48>)
 8000e14:	f001 ff70 	bl	8002cf8 <HAL_TIM_PWM_Init>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	08007fec 	.word	0x08007fec
 8000e20:	20000128 	.word	0x20000128
 8000e24:	40012c00 	.word	0x40012c00

08000e28 <motor_start_PWM>:

/**
 * \fn void motor_start_PWM(void)
 * \brief Fonction de racourci pour éviter de réécrire le redémarage des PWM à chaque fois
 */
void motor_start_PWM(void){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	printf("start_PWM\r\n");
 8000e2c:	480a      	ldr	r0, [pc, #40]	; (8000e58 <motor_start_PWM+0x30>)
 8000e2e:	f005 fdd5 	bl	80069dc <puts>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e32:	2100      	movs	r1, #0
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <motor_start_PWM+0x34>)
 8000e36:	f001 ffb7 	bl	8002da8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <motor_start_PWM+0x34>)
 8000e3e:	f001 ffb3 	bl	8002da8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000e42:	2100      	movs	r1, #0
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <motor_start_PWM+0x34>)
 8000e46:	f003 f9c3 	bl	80041d0 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <motor_start_PWM+0x34>)
 8000e4e:	f003 f9bf 	bl	80041d0 <HAL_TIMEx_PWMN_Start>
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	08008004 	.word	0x08008004
 8000e5c:	20000128 	.word	0x20000128

08000e60 <motor_set_speed>:

/**
 * \fn void motor_set_speed(int *speed)
 * \brief Récupère et traite la commande de vitesse du moteur
 */
void motor_set_speed(int speed){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	printf("motor_speed_entered\r\n");
 8000e68:	4813      	ldr	r0, [pc, #76]	; (8000eb8 <motor_set_speed+0x58>)
 8000e6a:	f005 fdb7 	bl	80069dc <puts>
	if(speed>SPEED_MAX){
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8000e74:	4293      	cmp	r3, r2
 8000e76:	dd03      	ble.n	8000e80 <motor_set_speed+0x20>
		speed=SPEED_MAX;
 8000e78:	f240 63cc 	movw	r3, #1740	; 0x6cc
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	e004      	b.n	8000e8a <motor_set_speed+0x2a>
	}
	else if (speed<0){
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	da01      	bge.n	8000e8a <motor_set_speed+0x2a>
		speed=0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
	}
	printf("consigne appliquée : %d\r\n",speed);								// verification de res dans la console
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	480b      	ldr	r0, [pc, #44]	; (8000ebc <motor_set_speed+0x5c>)
 8000e8e:	f005 fd1f 	bl	80068d0 <iprintf>

	//methode bourin
	TIM1->CCR1=speed;
 8000e92:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <motor_set_speed+0x60>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2=SPEED_MAX-speed;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f5c3 63d9 	rsb	r3, r3, #1736	; 0x6c8
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <motor_set_speed+0x60>)
 8000ea2:	6393      	str	r3, [r2, #56]	; 0x38
	HAL_TIM_PWM_Init(&htim1);
 8000ea4:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <motor_set_speed+0x64>)
 8000ea6:	f001 ff27 	bl	8002cf8 <HAL_TIM_PWM_Init>
	motor_start_PWM();
 8000eaa:	f7ff ffbd 	bl	8000e28 <motor_start_PWM>
	TIM1->CCR2=SPEED_MAX-res;
	HAL_TIM_PWM_Init(&htim1);
	motor_start_PWM();
	 */

}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	08008010 	.word	0x08008010
 8000ebc:	08008028 	.word	0x08008028
 8000ec0:	40012c00 	.word	0x40012c00
 8000ec4:	20000128 	.word	0x20000128

08000ec8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_MspInit+0x44>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <HAL_MspInit+0x44>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <HAL_MspInit+0x44>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_MspInit+0x44>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <HAL_MspInit+0x44>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_MspInit+0x44>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000efe:	f000 fee3 	bl	8001cc8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <HAL_TIM_PWM_MspInit+0x38>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d10b      	bne.n	8000f3a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_TIM_PWM_MspInit+0x3c>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <HAL_TIM_PWM_MspInit+0x3c>)
 8000f28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <HAL_TIM_PWM_MspInit+0x3c>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40012c00 	.word	0x40012c00
 8000f4c:	40021000 	.word	0x40021000

08000f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f60:	d113      	bne.n	8000f8a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <HAL_TIM_Base_MspInit+0x44>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <HAL_TIM_Base_MspInit+0x44>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_TIM_Base_MspInit+0x44>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	201c      	movs	r0, #28
 8000f80:	f000 fb57 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f84:	201c      	movs	r0, #28
 8000f86:	f000 fb6e 	bl	8001666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000

08000f98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a12      	ldr	r2, [pc, #72]	; (8001000 <HAL_TIM_MspPostInit+0x68>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d11d      	bne.n	8000ff6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_TIM_MspPostInit+0x6c>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a11      	ldr	r2, [pc, #68]	; (8001004 <HAL_TIM_MspPostInit+0x6c>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_TIM_MspPostInit+0x6c>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000fd2:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000fd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4619      	mov	r1, r3
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff2:	f000 fc13 	bl	800181c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3720      	adds	r7, #32
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40012c00 	.word	0x40012c00
 8001004:	40021000 	.word	0x40021000

08001008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b09e      	sub	sp, #120	; 0x78
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	2254      	movs	r2, #84	; 0x54
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f005 fc49 	bl	80068c0 <memset>
  if(huart->Instance==USART2)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a23      	ldr	r2, [pc, #140]	; (80010c0 <HAL_UART_MspInit+0xb8>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d13e      	bne.n	80010b6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001038:	2302      	movs	r3, #2
 800103a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	4618      	mov	r0, r3
 8001046:	f001 fb83 	bl	8002750 <HAL_RCCEx_PeriphCLKConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001050:	f7ff fe64 	bl	8000d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_UART_MspInit+0xbc>)
 8001056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001058:	4a1a      	ldr	r2, [pc, #104]	; (80010c4 <HAL_UART_MspInit+0xbc>)
 800105a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105e:	6593      	str	r3, [r2, #88]	; 0x58
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <HAL_UART_MspInit+0xbc>)
 8001062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <HAL_UART_MspInit+0xbc>)
 800106e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001070:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <HAL_UART_MspInit+0xbc>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_UART_MspInit+0xbc>)
 800107a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001084:	230c      	movs	r3, #12
 8001086:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001094:	2307      	movs	r3, #7
 8001096:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800109c:	4619      	mov	r1, r3
 800109e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a2:	f000 fbbb 	bl	800181c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	2026      	movs	r0, #38	; 0x26
 80010ac:	f000 fac1 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010b0:	2026      	movs	r0, #38	; 0x26
 80010b2:	f000 fad8 	bl	8001666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010b6:	bf00      	nop
 80010b8:	3778      	adds	r7, #120	; 0x78
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40004400 	.word	0x40004400
 80010c4:	40021000 	.word	0x40021000

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <MemManage_Handler+0x4>

080010da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001114:	f000 f972 	bl	80013fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <TIM2_IRQHandler+0x10>)
 8001122:	f001 ffef 	bl	8003104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000174 	.word	0x20000174

08001130 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <USART2_IRQHandler+0x10>)
 8001136:	f003 fc5b 	bl	80049f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200001c0 	.word	0x200001c0

08001144 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001148:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800114c:	f000 fd00 	bl	8001b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
	return 1;
 8001158:	2301      	movs	r3, #1
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <_kill>:

int _kill(int pid, int sig)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800116e:	f005 fb7d 	bl	800686c <__errno>
 8001172:	4603      	mov	r3, r0
 8001174:	2216      	movs	r2, #22
 8001176:	601a      	str	r2, [r3, #0]
	return -1;
 8001178:	f04f 33ff 	mov.w	r3, #4294967295
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <_exit>:

void _exit (int status)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ffe7 	bl	8001164 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001196:	e7fe      	b.n	8001196 <_exit+0x12>

08001198 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	e00a      	b.n	80011c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011aa:	f3af 8000 	nop.w
 80011ae:	4601      	mov	r1, r0
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	60ba      	str	r2, [r7, #8]
 80011b6:	b2ca      	uxtb	r2, r1
 80011b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3301      	adds	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	dbf0      	blt.n	80011aa <_read+0x12>
	}

return len;
 80011c8:	687b      	ldr	r3, [r7, #4]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	e009      	b.n	80011f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	1c5a      	adds	r2, r3, #1
 80011e8:	60ba      	str	r2, [r7, #8]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fdc5 	bl	8000d7c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3301      	adds	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	dbf1      	blt.n	80011e4 <_write+0x12>
	}
	return len;
 8001200:	687b      	ldr	r3, [r7, #4]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <_close>:

int _close(int file)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
	return -1;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001232:	605a      	str	r2, [r3, #4]
	return 0;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <_isatty>:

int _isatty(int file)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
	return 1;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
	return 0;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800127c:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <_sbrk+0x5c>)
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <_sbrk+0x60>)
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <_sbrk+0x64>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d102      	bne.n	8001296 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <_sbrk+0x64>)
 8001292:	4a12      	ldr	r2, [pc, #72]	; (80012dc <_sbrk+0x68>)
 8001294:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <_sbrk+0x64>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d207      	bcs.n	80012b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a4:	f005 fae2 	bl	800686c <__errno>
 80012a8:	4603      	mov	r3, r0
 80012aa:	220c      	movs	r2, #12
 80012ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	e009      	b.n	80012c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <_sbrk+0x64>)
 80012c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c6:	68fb      	ldr	r3, [r7, #12]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20020000 	.word	0x20020000
 80012d4:	00000400 	.word	0x00000400
 80012d8:	20000298 	.word	0x20000298
 80012dc:	200002b0 	.word	0x200002b0

080012e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <SystemInit+0x20>)
 80012e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <SystemInit+0x20>)
 80012ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001306:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <LoopForever+0x6>)
  ldr r1, =_edata
 800130a:	490e      	ldr	r1, [pc, #56]	; (8001344 <LoopForever+0xa>)
  ldr r2, =_sidata
 800130c:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <LoopForever+0xe>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001320:	4c0b      	ldr	r4, [pc, #44]	; (8001350 <LoopForever+0x16>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800132e:	f7ff ffd7 	bl	80012e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001332:	f005 faa1 	bl	8006878 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001336:	f7ff f955 	bl	80005e4 <main>

0800133a <LoopForever>:

LoopForever:
    b LoopForever
 800133a:	e7fe      	b.n	800133a <LoopForever>
  ldr   r0, =_estack
 800133c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001344:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8001348:	08008448 	.word	0x08008448
  ldr r2, =_sbss
 800134c:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8001350:	200002b0 	.word	0x200002b0

08001354 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001354:	e7fe      	b.n	8001354 <ADC1_2_IRQHandler>

08001356 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f000 f95b 	bl	800161c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001366:	2000      	movs	r0, #0
 8001368:	f000 f80e 	bl	8001388 <HAL_InitTick>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	71fb      	strb	r3, [r7, #7]
 8001376:	e001      	b.n	800137c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001378:	f7ff fda6 	bl	8000ec8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800137c:	79fb      	ldrb	r3, [r7, #7]

}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <HAL_InitTick+0x68>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d022      	beq.n	80013e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_InitTick+0x6c>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <HAL_InitTick+0x68>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80013ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f966 	bl	8001682 <HAL_SYSTICK_Config>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d10f      	bne.n	80013dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b0f      	cmp	r3, #15
 80013c0:	d809      	bhi.n	80013d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c2:	2200      	movs	r2, #0
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ca:	f000 f932 	bl	8001632 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <HAL_InitTick+0x70>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	e007      	b.n	80013e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	e004      	b.n	80013e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	e001      	b.n	80013e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200000a4 	.word	0x200000a4
 80013f4:	2000009c 	.word	0x2000009c
 80013f8:	200000a0 	.word	0x200000a0

080013fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_IncTick+0x1c>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_IncTick+0x20>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4413      	add	r3, r2
 800140a:	4a03      	ldr	r2, [pc, #12]	; (8001418 <HAL_IncTick+0x1c>)
 800140c:	6013      	str	r3, [r2, #0]
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	2000029c 	.word	0x2000029c
 800141c:	200000a4 	.word	0x200000a4

08001420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return uwTick;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <HAL_GetTick+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	2000029c 	.word	0x2000029c

08001438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001440:	f7ff ffee 	bl	8001420 <HAL_GetTick>
 8001444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001450:	d004      	beq.n	800145c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_Delay+0x40>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	4413      	add	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800145c:	bf00      	nop
 800145e:	f7ff ffdf 	bl	8001420 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	429a      	cmp	r2, r3
 800146c:	d8f7      	bhi.n	800145e <HAL_Delay+0x26>
  {
  }
}
 800146e:	bf00      	nop
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200000a4 	.word	0x200000a4

0800147c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <__NVIC_GetPriorityGrouping+0x18>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	f003 0307 	and.w	r3, r3, #7
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	db0b      	blt.n	800150a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 021f 	and.w	r2, r3, #31
 80014f8:	4907      	ldr	r1, [pc, #28]	; (8001518 <__NVIC_EnableIRQ+0x38>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	2001      	movs	r0, #1
 8001502:	fa00 f202 	lsl.w	r2, r0, r2
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000e100 	.word	0xe000e100

0800151c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	6039      	str	r1, [r7, #0]
 8001526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	2b00      	cmp	r3, #0
 800152e:	db0a      	blt.n	8001546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	490c      	ldr	r1, [pc, #48]	; (8001568 <__NVIC_SetPriority+0x4c>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	0112      	lsls	r2, r2, #4
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	440b      	add	r3, r1
 8001540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001544:	e00a      	b.n	800155c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4908      	ldr	r1, [pc, #32]	; (800156c <__NVIC_SetPriority+0x50>)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	3b04      	subs	r3, #4
 8001554:	0112      	lsls	r2, r2, #4
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	440b      	add	r3, r1
 800155a:	761a      	strb	r2, [r3, #24]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000e100 	.word	0xe000e100
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f1c3 0307 	rsb	r3, r3, #7
 800158a:	2b04      	cmp	r3, #4
 800158c:	bf28      	it	cs
 800158e:	2304      	movcs	r3, #4
 8001590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3304      	adds	r3, #4
 8001596:	2b06      	cmp	r3, #6
 8001598:	d902      	bls.n	80015a0 <NVIC_EncodePriority+0x30>
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3b03      	subs	r3, #3
 800159e:	e000      	b.n	80015a2 <NVIC_EncodePriority+0x32>
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	f04f 32ff 	mov.w	r2, #4294967295
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43da      	mvns	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	401a      	ands	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b8:	f04f 31ff 	mov.w	r1, #4294967295
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fa01 f303 	lsl.w	r3, r1, r3
 80015c2:	43d9      	mvns	r1, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	4313      	orrs	r3, r2
         );
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3724      	adds	r7, #36	; 0x24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
	...

080015d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e8:	d301      	bcc.n	80015ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00f      	b.n	800160e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <SysTick_Config+0x40>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f6:	210f      	movs	r1, #15
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f7ff ff8e 	bl	800151c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <SysTick_Config+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <SysTick_Config+0x40>)
 8001608:	2207      	movs	r2, #7
 800160a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	e000e010 	.word	0xe000e010

0800161c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff29 	bl	800147c <__NVIC_SetPriorityGrouping>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001640:	f7ff ff40 	bl	80014c4 <__NVIC_GetPriorityGrouping>
 8001644:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	6978      	ldr	r0, [r7, #20]
 800164c:	f7ff ff90 	bl	8001570 <NVIC_EncodePriority>
 8001650:	4602      	mov	r2, r0
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff5f 	bl	800151c <__NVIC_SetPriority>
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff33 	bl	80014e0 <__NVIC_EnableIRQ>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffa4 	bl	80015d8 <SysTick_Config>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d005      	beq.n	80016be <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2204      	movs	r2, #4
 80016b6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	e037      	b.n	800172e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 020e 	bic.w	r2, r2, #14
 80016cc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016dc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0201 	bic.w	r2, r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f003 021f 	and.w	r2, r3, #31
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	2101      	movs	r1, #1
 80016fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001700:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800170a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00c      	beq.n	800172e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001722:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800172c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d00d      	beq.n	8001780 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2204      	movs	r2, #4
 8001768:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	73fb      	strb	r3, [r7, #15]
 800177e:	e047      	b.n	8001810 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 020e 	bic.w	r2, r2, #14
 800178e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	f003 021f 	and.w	r2, r3, #31
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	2101      	movs	r1, #1
 80017be:	fa01 f202 	lsl.w	r2, r1, r2
 80017c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00c      	beq.n	80017f0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80017ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	4798      	blx	r3
    }
  }
  return status;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800182a:	e15a      	b.n	8001ae2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2101      	movs	r1, #1
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 814c 	beq.w	8001adc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b01      	cmp	r3, #1
 800184e:	d005      	beq.n	800185c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001858:	2b02      	cmp	r3, #2
 800185a:	d130      	bne.n	80018be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001892:	2201      	movs	r2, #1
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	f003 0201 	and.w	r2, r3, #1
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d017      	beq.n	80018fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d123      	bne.n	800194e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	08da      	lsrs	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3208      	adds	r2, #8
 800190e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	6939      	ldr	r1, [r7, #16]
 800194a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 0203 	and.w	r2, r3, #3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 80a6 	beq.w	8001adc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001990:	4b5b      	ldr	r3, [pc, #364]	; (8001b00 <HAL_GPIO_Init+0x2e4>)
 8001992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001994:	4a5a      	ldr	r2, [pc, #360]	; (8001b00 <HAL_GPIO_Init+0x2e4>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6613      	str	r3, [r2, #96]	; 0x60
 800199c:	4b58      	ldr	r3, [pc, #352]	; (8001b00 <HAL_GPIO_Init+0x2e4>)
 800199e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a8:	4a56      	ldr	r2, [pc, #344]	; (8001b04 <HAL_GPIO_Init+0x2e8>)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019d2:	d01f      	beq.n	8001a14 <HAL_GPIO_Init+0x1f8>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a4c      	ldr	r2, [pc, #304]	; (8001b08 <HAL_GPIO_Init+0x2ec>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d019      	beq.n	8001a10 <HAL_GPIO_Init+0x1f4>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a4b      	ldr	r2, [pc, #300]	; (8001b0c <HAL_GPIO_Init+0x2f0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d013      	beq.n	8001a0c <HAL_GPIO_Init+0x1f0>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a4a      	ldr	r2, [pc, #296]	; (8001b10 <HAL_GPIO_Init+0x2f4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d00d      	beq.n	8001a08 <HAL_GPIO_Init+0x1ec>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a49      	ldr	r2, [pc, #292]	; (8001b14 <HAL_GPIO_Init+0x2f8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d007      	beq.n	8001a04 <HAL_GPIO_Init+0x1e8>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a48      	ldr	r2, [pc, #288]	; (8001b18 <HAL_GPIO_Init+0x2fc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d101      	bne.n	8001a00 <HAL_GPIO_Init+0x1e4>
 80019fc:	2305      	movs	r3, #5
 80019fe:	e00a      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a00:	2306      	movs	r3, #6
 8001a02:	e008      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a04:	2304      	movs	r3, #4
 8001a06:	e006      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e004      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e002      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a14:	2300      	movs	r3, #0
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	f002 0203 	and.w	r2, r2, #3
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	4093      	lsls	r3, r2
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a26:	4937      	ldr	r1, [pc, #220]	; (8001b04 <HAL_GPIO_Init+0x2e8>)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a34:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a58:	4a30      	ldr	r2, [pc, #192]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a82:	4a26      	ldr	r2, [pc, #152]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a88:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aac:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ad6:	4a11      	ldr	r2, [pc, #68]	; (8001b1c <HAL_GPIO_Init+0x300>)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f47f ae9d 	bne.w	800182c <HAL_GPIO_Init+0x10>
  }
}
 8001af2:	bf00      	nop
 8001af4:	bf00      	nop
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010000 	.word	0x40010000
 8001b08:	48000400 	.word	0x48000400
 8001b0c:	48000800 	.word	0x48000800
 8001b10:	48000c00 	.word	0x48000c00
 8001b14:	48001000 	.word	0x48001000
 8001b18:	48001400 	.word	0x48001400
 8001b1c:	40010400 	.word	0x40010400

08001b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b30:	787b      	ldrb	r3, [r7, #1]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b36:	887a      	ldrh	r2, [r7, #2]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b3c:	e002      	b.n	8001b44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b3e:	887a      	ldrh	r2, [r7, #2]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b6c:	88fb      	ldrh	r3, [r7, #6]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff f8f4 	bl	8000d5c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40010400 	.word	0x40010400

08001b80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d141      	bne.n	8001c12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b8e:	4b4b      	ldr	r3, [pc, #300]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b9a:	d131      	bne.n	8001c00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b9c:	4b47      	ldr	r3, [pc, #284]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ba2:	4a46      	ldr	r2, [pc, #280]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ba8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bac:	4b43      	ldr	r3, [pc, #268]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bb4:	4a41      	ldr	r2, [pc, #260]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bbc:	4b40      	ldr	r3, [pc, #256]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2232      	movs	r2, #50	; 0x32
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	4a3f      	ldr	r2, [pc, #252]	; (8001cc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	0c9b      	lsrs	r3, r3, #18
 8001bce:	3301      	adds	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd2:	e002      	b.n	8001bda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bda:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be6:	d102      	bne.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f2      	bne.n	8001bd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bee:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfa:	d158      	bne.n	8001cae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e057      	b.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c00:	4b2e      	ldr	r3, [pc, #184]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c06:	4a2d      	ldr	r2, [pc, #180]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c10:	e04d      	b.n	8001cae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c18:	d141      	bne.n	8001c9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c1a:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c26:	d131      	bne.n	8001c8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c2e:	4a23      	ldr	r2, [pc, #140]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c38:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c40:	4a1e      	ldr	r2, [pc, #120]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2232      	movs	r2, #50	; 0x32
 8001c4e:	fb02 f303 	mul.w	r3, r2, r3
 8001c52:	4a1c      	ldr	r2, [pc, #112]	; (8001cc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	0c9b      	lsrs	r3, r3, #18
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c5e:	e002      	b.n	8001c66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c72:	d102      	bne.n	8001c7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f2      	bne.n	8001c60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c86:	d112      	bne.n	8001cae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e011      	b.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c9c:	e007      	b.n	8001cae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ca6:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	2000009c 	.word	0x2000009c
 8001cc4:	431bde83 	.word	0x431bde83

08001cc8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd6:	6093      	str	r3, [r2, #8]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40007000 	.word	0x40007000

08001ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e306      	b.n	8002308 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d075      	beq.n	8001df2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d06:	4b97      	ldr	r3, [pc, #604]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d10:	4b94      	ldr	r3, [pc, #592]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	d102      	bne.n	8001d26 <HAL_RCC_OscConfig+0x3e>
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d002      	beq.n	8001d2c <HAL_RCC_OscConfig+0x44>
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d10b      	bne.n	8001d44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2c:	4b8d      	ldr	r3, [pc, #564]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d05b      	beq.n	8001df0 <HAL_RCC_OscConfig+0x108>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d157      	bne.n	8001df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e2e1      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4c:	d106      	bne.n	8001d5c <HAL_RCC_OscConfig+0x74>
 8001d4e:	4b85      	ldr	r3, [pc, #532]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a84      	ldr	r2, [pc, #528]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e01d      	b.n	8001d98 <HAL_RCC_OscConfig+0xb0>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x98>
 8001d66:	4b7f      	ldr	r3, [pc, #508]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a7e      	ldr	r2, [pc, #504]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4b7c      	ldr	r3, [pc, #496]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a7b      	ldr	r2, [pc, #492]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e00b      	b.n	8001d98 <HAL_RCC_OscConfig+0xb0>
 8001d80:	4b78      	ldr	r3, [pc, #480]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a77      	ldr	r2, [pc, #476]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b75      	ldr	r3, [pc, #468]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a74      	ldr	r2, [pc, #464]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d013      	beq.n	8001dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff fb3e 	bl	8001420 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff fb3a 	bl	8001420 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e2a6      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dba:	4b6a      	ldr	r3, [pc, #424]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0xc0>
 8001dc6:	e014      	b.n	8001df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fb2a 	bl	8001420 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff fb26 	bl	8001420 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e292      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001de2:	4b60      	ldr	r3, [pc, #384]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0xe8>
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d075      	beq.n	8001eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfe:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 030c 	and.w	r3, r3, #12
 8001e06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e08:	4b56      	ldr	r3, [pc, #344]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	2b0c      	cmp	r3, #12
 8001e16:	d102      	bne.n	8001e1e <HAL_RCC_OscConfig+0x136>
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d002      	beq.n	8001e24 <HAL_RCC_OscConfig+0x13c>
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d11f      	bne.n	8001e64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e24:	4b4f      	ldr	r3, [pc, #316]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_RCC_OscConfig+0x154>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e265      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3c:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	061b      	lsls	r3, r3, #24
 8001e4a:	4946      	ldr	r1, [pc, #280]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e50:	4b45      	ldr	r3, [pc, #276]	; (8001f68 <HAL_RCC_OscConfig+0x280>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fa97 	bl	8001388 <HAL_InitTick>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d043      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e251      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d023      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e6c:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a3c      	ldr	r2, [pc, #240]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e78:	f7ff fad2 	bl	8001420 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e80:	f7ff face 	bl	8001420 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e23a      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e92:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9e:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	061b      	lsls	r3, r3, #24
 8001eac:	492d      	ldr	r1, [pc, #180]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	604b      	str	r3, [r1, #4]
 8001eb2:	e01a      	b.n	8001eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a2a      	ldr	r2, [pc, #168]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff faae 	bl	8001420 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff faaa 	bl	8001420 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e216      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eda:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x1e0>
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ee8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d041      	beq.n	8001f7a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d01c      	beq.n	8001f38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efe:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f04:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7ff fa87 	bl	8001420 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f16:	f7ff fa83 	bl	8001420 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e1ef      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0ef      	beq.n	8001f16 <HAL_RCC_OscConfig+0x22e>
 8001f36:	e020      	b.n	8001f7a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3e:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <HAL_RCC_OscConfig+0x27c>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f48:	f7ff fa6a 	bl	8001420 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f4e:	e00d      	b.n	8001f6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f50:	f7ff fa66 	bl	8001420 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d906      	bls.n	8001f6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e1d2      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	200000a0 	.word	0x200000a0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f6c:	4b8c      	ldr	r3, [pc, #560]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8001f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1ea      	bne.n	8001f50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80a6 	beq.w	80020d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f8c:	4b84      	ldr	r3, [pc, #528]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_OscConfig+0x2b4>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_RCC_OscConfig+0x2b6>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00d      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	4b7f      	ldr	r3, [pc, #508]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	4a7e      	ldr	r2, [pc, #504]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fac:	6593      	str	r3, [r2, #88]	; 0x58
 8001fae:	4b7c      	ldr	r3, [pc, #496]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fbe:	4b79      	ldr	r3, [pc, #484]	; (80021a4 <HAL_RCC_OscConfig+0x4bc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d118      	bne.n	8001ffc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fca:	4b76      	ldr	r3, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x4bc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a75      	ldr	r2, [pc, #468]	; (80021a4 <HAL_RCC_OscConfig+0x4bc>)
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd6:	f7ff fa23 	bl	8001420 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fde:	f7ff fa1f 	bl	8001420 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e18b      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff0:	4b6c      	ldr	r3, [pc, #432]	; (80021a4 <HAL_RCC_OscConfig+0x4bc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d108      	bne.n	8002016 <HAL_RCC_OscConfig+0x32e>
 8002004:	4b66      	ldr	r3, [pc, #408]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200a:	4a65      	ldr	r2, [pc, #404]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002014:	e024      	b.n	8002060 <HAL_RCC_OscConfig+0x378>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b05      	cmp	r3, #5
 800201c:	d110      	bne.n	8002040 <HAL_RCC_OscConfig+0x358>
 800201e:	4b60      	ldr	r3, [pc, #384]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002024:	4a5e      	ldr	r2, [pc, #376]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800202e:	4b5c      	ldr	r3, [pc, #368]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002034:	4a5a      	ldr	r2, [pc, #360]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800203e:	e00f      	b.n	8002060 <HAL_RCC_OscConfig+0x378>
 8002040:	4b57      	ldr	r3, [pc, #348]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	4a56      	ldr	r2, [pc, #344]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002048:	f023 0301 	bic.w	r3, r3, #1
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002050:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	4a52      	ldr	r2, [pc, #328]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002058:	f023 0304 	bic.w	r3, r3, #4
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d016      	beq.n	8002096 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7ff f9da 	bl	8001420 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800206e:	e00a      	b.n	8002086 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f7ff f9d6 	bl	8001420 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	; 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e140      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002086:	4b46      	ldr	r3, [pc, #280]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ed      	beq.n	8002070 <HAL_RCC_OscConfig+0x388>
 8002094:	e015      	b.n	80020c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002096:	f7ff f9c3 	bl	8001420 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800209c:	e00a      	b.n	80020b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7ff f9bf 	bl	8001420 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e129      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020b4:	4b3a      	ldr	r3, [pc, #232]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1ed      	bne.n	800209e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020c2:	7ffb      	ldrb	r3, [r7, #31]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d105      	bne.n	80020d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c8:	4b35      	ldr	r3, [pc, #212]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 80020ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020cc:	4a34      	ldr	r2, [pc, #208]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 80020ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d03c      	beq.n	800215a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01c      	beq.n	8002122 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 80020ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020ee:	4a2c      	ldr	r2, [pc, #176]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7ff f992 	bl	8001420 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002100:	f7ff f98e 	bl	8001420 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e0fa      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002112:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002114:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0ef      	beq.n	8002100 <HAL_RCC_OscConfig+0x418>
 8002120:	e01b      	b.n	800215a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002122:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002124:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002128:	4a1d      	ldr	r2, [pc, #116]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 800212a:	f023 0301 	bic.w	r3, r3, #1
 800212e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002132:	f7ff f975 	bl	8001420 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800213a:	f7ff f971 	bl	8001420 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e0dd      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 800214e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1ef      	bne.n	800213a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80d1 	beq.w	8002306 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b0c      	cmp	r3, #12
 800216e:	f000 808b 	beq.w	8002288 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d15e      	bne.n	8002238 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <HAL_RCC_OscConfig+0x4b8>)
 8002180:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7ff f94b 	bl	8001420 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800218c:	e00c      	b.n	80021a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218e:	f7ff f947 	bl	8001420 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d905      	bls.n	80021a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0b3      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a8:	4b59      	ldr	r3, [pc, #356]	; (8002310 <HAL_RCC_OscConfig+0x628>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1ec      	bne.n	800218e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021b4:	4b56      	ldr	r3, [pc, #344]	; (8002310 <HAL_RCC_OscConfig+0x628>)
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	4b56      	ldr	r3, [pc, #344]	; (8002314 <HAL_RCC_OscConfig+0x62c>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6a11      	ldr	r1, [r2, #32]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021c4:	3a01      	subs	r2, #1
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	4311      	orrs	r1, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80021ce:	0212      	lsls	r2, r2, #8
 80021d0:	4311      	orrs	r1, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021d6:	0852      	lsrs	r2, r2, #1
 80021d8:	3a01      	subs	r2, #1
 80021da:	0552      	lsls	r2, r2, #21
 80021dc:	4311      	orrs	r1, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021e2:	0852      	lsrs	r2, r2, #1
 80021e4:	3a01      	subs	r2, #1
 80021e6:	0652      	lsls	r2, r2, #25
 80021e8:	4311      	orrs	r1, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021ee:	06d2      	lsls	r2, r2, #27
 80021f0:	430a      	orrs	r2, r1
 80021f2:	4947      	ldr	r1, [pc, #284]	; (8002310 <HAL_RCC_OscConfig+0x628>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f8:	4b45      	ldr	r3, [pc, #276]	; (8002310 <HAL_RCC_OscConfig+0x628>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a44      	ldr	r2, [pc, #272]	; (8002310 <HAL_RCC_OscConfig+0x628>)
 80021fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002202:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002204:	4b42      	ldr	r3, [pc, #264]	; (8002310 <HAL_RCC_OscConfig+0x628>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4a41      	ldr	r2, [pc, #260]	; (8002310 <HAL_RCC_OscConfig+0x628>)
 800220a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7ff f906 	bl	8001420 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002218:	f7ff f902 	bl	8001420 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e06e      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222a:	4b39      	ldr	r3, [pc, #228]	; (8002310 <HAL_RCC_OscConfig+0x628>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x530>
 8002236:	e066      	b.n	8002306 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002238:	4b35      	ldr	r3, [pc, #212]	; (8002310 <HAL_RCC_OscConfig+0x628>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a34      	ldr	r2, [pc, #208]	; (8002310 <HAL_RCC_OscConfig+0x628>)
 800223e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002242:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002244:	4b32      	ldr	r3, [pc, #200]	; (8002310 <HAL_RCC_OscConfig+0x628>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a31      	ldr	r2, [pc, #196]	; (8002310 <HAL_RCC_OscConfig+0x628>)
 800224a:	f023 0303 	bic.w	r3, r3, #3
 800224e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002250:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <HAL_RCC_OscConfig+0x628>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a2e      	ldr	r2, [pc, #184]	; (8002310 <HAL_RCC_OscConfig+0x628>)
 8002256:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800225a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	f7ff f8de 	bl	8001420 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002268:	f7ff f8da 	bl	8001420 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e046      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227a:	4b25      	ldr	r3, [pc, #148]	; (8002310 <HAL_RCC_OscConfig+0x628>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x580>
 8002286:	e03e      	b.n	8002306 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e039      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002294:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <HAL_RCC_OscConfig+0x628>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f003 0203 	and.w	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d12c      	bne.n	8002302 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	3b01      	subs	r3, #1
 80022b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d123      	bne.n	8002302 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d11b      	bne.n	8002302 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d113      	bne.n	8002302 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	085b      	lsrs	r3, r3, #1
 80022e6:	3b01      	subs	r3, #1
 80022e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d109      	bne.n	8002302 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f8:	085b      	lsrs	r3, r3, #1
 80022fa:	3b01      	subs	r3, #1
 80022fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d001      	beq.n	8002306 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000
 8002314:	019f800c 	.word	0x019f800c

08002318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e11e      	b.n	800256e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002330:	4b91      	ldr	r3, [pc, #580]	; (8002578 <HAL_RCC_ClockConfig+0x260>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d910      	bls.n	8002360 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b8e      	ldr	r3, [pc, #568]	; (8002578 <HAL_RCC_ClockConfig+0x260>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 020f 	bic.w	r2, r3, #15
 8002346:	498c      	ldr	r1, [pc, #560]	; (8002578 <HAL_RCC_ClockConfig+0x260>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b8a      	ldr	r3, [pc, #552]	; (8002578 <HAL_RCC_ClockConfig+0x260>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e106      	b.n	800256e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d073      	beq.n	8002454 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d129      	bne.n	80023c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002374:	4b81      	ldr	r3, [pc, #516]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0f4      	b.n	800256e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002384:	f000 f99e 	bl	80026c4 <RCC_GetSysClockFreqFromPLLSource>
 8002388:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4a7c      	ldr	r2, [pc, #496]	; (8002580 <HAL_RCC_ClockConfig+0x268>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d93f      	bls.n	8002412 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002392:	4b7a      	ldr	r3, [pc, #488]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d033      	beq.n	8002412 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d12f      	bne.n	8002412 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023b2:	4b72      	ldr	r3, [pc, #456]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023ba:	4a70      	ldr	r2, [pc, #448]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 80023bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	e024      	b.n	8002412 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d107      	bne.n	80023e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d0:	4b6a      	ldr	r3, [pc, #424]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d109      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0c6      	b.n	800256e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023e0:	4b66      	ldr	r3, [pc, #408]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0be      	b.n	800256e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023f0:	f000 f8ce 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4a61      	ldr	r2, [pc, #388]	; (8002580 <HAL_RCC_ClockConfig+0x268>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d909      	bls.n	8002412 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023fe:	4b5f      	ldr	r3, [pc, #380]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002406:	4a5d      	ldr	r2, [pc, #372]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 8002408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800240c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002412:	4b5a      	ldr	r3, [pc, #360]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f023 0203 	bic.w	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4957      	ldr	r1, [pc, #348]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 8002420:	4313      	orrs	r3, r2
 8002422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002424:	f7fe fffc 	bl	8001420 <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	e00a      	b.n	8002442 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242c:	f7fe fff8 	bl	8001420 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	; 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e095      	b.n	800256e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	4b4e      	ldr	r3, [pc, #312]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 020c 	and.w	r2, r3, #12
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	429a      	cmp	r2, r3
 8002452:	d1eb      	bne.n	800242c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d023      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800246c:	4b43      	ldr	r3, [pc, #268]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4a42      	ldr	r2, [pc, #264]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 8002472:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002476:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d007      	beq.n	8002494 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002484:	4b3d      	ldr	r3, [pc, #244]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800248c:	4a3b      	ldr	r2, [pc, #236]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 800248e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002492:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002494:	4b39      	ldr	r3, [pc, #228]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	4936      	ldr	r1, [pc, #216]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
 80024a6:	e008      	b.n	80024ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2b80      	cmp	r3, #128	; 0x80
 80024ac:	d105      	bne.n	80024ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024ae:	4b33      	ldr	r3, [pc, #204]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	4a32      	ldr	r2, [pc, #200]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 80024b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024ba:	4b2f      	ldr	r3, [pc, #188]	; (8002578 <HAL_RCC_ClockConfig+0x260>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d21d      	bcs.n	8002504 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c8:	4b2b      	ldr	r3, [pc, #172]	; (8002578 <HAL_RCC_ClockConfig+0x260>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 020f 	bic.w	r2, r3, #15
 80024d0:	4929      	ldr	r1, [pc, #164]	; (8002578 <HAL_RCC_ClockConfig+0x260>)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024d8:	f7fe ffa2 	bl	8001420 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7fe ff9e 	bl	8001420 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e03b      	b.n	800256e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b20      	ldr	r3, [pc, #128]	; (8002578 <HAL_RCC_ClockConfig+0x260>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d1ed      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002510:	4b1a      	ldr	r3, [pc, #104]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4917      	ldr	r1, [pc, #92]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 800251e:	4313      	orrs	r3, r2
 8002520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	490f      	ldr	r1, [pc, #60]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002542:	f000 f825 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 8002546:	4602      	mov	r2, r0
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <HAL_RCC_ClockConfig+0x264>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	490c      	ldr	r1, [pc, #48]	; (8002584 <HAL_RCC_ClockConfig+0x26c>)
 8002554:	5ccb      	ldrb	r3, [r1, r3]
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	fa22 f303 	lsr.w	r3, r2, r3
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <HAL_RCC_ClockConfig+0x270>)
 8002560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <HAL_RCC_ClockConfig+0x274>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe ff0e 	bl	8001388 <HAL_InitTick>
 800256c:	4603      	mov	r3, r0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40022000 	.word	0x40022000
 800257c:	40021000 	.word	0x40021000
 8002580:	04c4b400 	.word	0x04c4b400
 8002584:	080081ac 	.word	0x080081ac
 8002588:	2000009c 	.word	0x2000009c
 800258c:	200000a0 	.word	0x200000a0

08002590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002596:	4b2c      	ldr	r3, [pc, #176]	; (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d102      	bne.n	80025a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025a2:	4b2a      	ldr	r3, [pc, #168]	; (800264c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	e047      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025a8:	4b27      	ldr	r3, [pc, #156]	; (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 030c 	and.w	r3, r3, #12
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d102      	bne.n	80025ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025b4:	4b26      	ldr	r3, [pc, #152]	; (8002650 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	e03e      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025ba:	4b23      	ldr	r3, [pc, #140]	; (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d136      	bne.n	8002634 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025c6:	4b20      	ldr	r3, [pc, #128]	; (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	3301      	adds	r3, #1
 80025dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d10c      	bne.n	80025fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025e4:	4a1a      	ldr	r2, [pc, #104]	; (8002650 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ec:	4a16      	ldr	r2, [pc, #88]	; (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ee:	68d2      	ldr	r2, [r2, #12]
 80025f0:	0a12      	lsrs	r2, r2, #8
 80025f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	617b      	str	r3, [r7, #20]
      break;
 80025fc:	e00c      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025fe:	4a13      	ldr	r2, [pc, #76]	; (800264c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	fbb2 f3f3 	udiv	r3, r2, r3
 8002606:	4a10      	ldr	r2, [pc, #64]	; (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002608:	68d2      	ldr	r2, [r2, #12]
 800260a:	0a12      	lsrs	r2, r2, #8
 800260c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002610:	fb02 f303 	mul.w	r3, r2, r3
 8002614:	617b      	str	r3, [r7, #20]
      break;
 8002616:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0e5b      	lsrs	r3, r3, #25
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	3301      	adds	r3, #1
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	e001      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002638:	693b      	ldr	r3, [r7, #16]
}
 800263a:	4618      	mov	r0, r3
 800263c:	371c      	adds	r7, #28
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
 800264c:	00f42400 	.word	0x00f42400
 8002650:	016e3600 	.word	0x016e3600

08002654 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <HAL_RCC_GetHCLKFreq+0x14>)
 800265a:	681b      	ldr	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	2000009c 	.word	0x2000009c

0800266c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002670:	f7ff fff0 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 8002674:	4602      	mov	r2, r0
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	4904      	ldr	r1, [pc, #16]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002682:	5ccb      	ldrb	r3, [r1, r3]
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800268c:	4618      	mov	r0, r3
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000
 8002694:	080081bc 	.word	0x080081bc

08002698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800269c:	f7ff ffda 	bl	8002654 <HAL_RCC_GetHCLKFreq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	0adb      	lsrs	r3, r3, #11
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	4904      	ldr	r1, [pc, #16]	; (80026c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026ae:	5ccb      	ldrb	r3, [r1, r3]
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000
 80026c0:	080081bc 	.word	0x080081bc

080026c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026ca:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026d4:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	3301      	adds	r3, #1
 80026e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d10c      	bne.n	8002702 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026e8:	4a17      	ldr	r2, [pc, #92]	; (8002748 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f0:	4a14      	ldr	r2, [pc, #80]	; (8002744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026f2:	68d2      	ldr	r2, [r2, #12]
 80026f4:	0a12      	lsrs	r2, r2, #8
 80026f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	617b      	str	r3, [r7, #20]
    break;
 8002700:	e00c      	b.n	800271c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	fbb2 f3f3 	udiv	r3, r2, r3
 800270a:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800270c:	68d2      	ldr	r2, [r2, #12]
 800270e:	0a12      	lsrs	r2, r2, #8
 8002710:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002714:	fb02 f303 	mul.w	r3, r2, r3
 8002718:	617b      	str	r3, [r7, #20]
    break;
 800271a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	0e5b      	lsrs	r3, r3, #25
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	3301      	adds	r3, #1
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002736:	687b      	ldr	r3, [r7, #4]
}
 8002738:	4618      	mov	r0, r3
 800273a:	371c      	adds	r7, #28
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	40021000 	.word	0x40021000
 8002748:	016e3600 	.word	0x016e3600
 800274c:	00f42400 	.word	0x00f42400

08002750 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002758:	2300      	movs	r3, #0
 800275a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800275c:	2300      	movs	r3, #0
 800275e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8098 	beq.w	800289e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002772:	4b43      	ldr	r3, [pc, #268]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10d      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	4b40      	ldr	r3, [pc, #256]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002782:	4a3f      	ldr	r2, [pc, #252]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	6593      	str	r3, [r2, #88]	; 0x58
 800278a:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002796:	2301      	movs	r3, #1
 8002798:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800279a:	4b3a      	ldr	r3, [pc, #232]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a39      	ldr	r2, [pc, #228]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027a6:	f7fe fe3b 	bl	8001420 <HAL_GetTick>
 80027aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ac:	e009      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ae:	f7fe fe37 	bl	8001420 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d902      	bls.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	74fb      	strb	r3, [r7, #19]
        break;
 80027c0:	e005      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027c2:	4b30      	ldr	r3, [pc, #192]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0ef      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80027ce:	7cfb      	ldrb	r3, [r7, #19]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d159      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027d4:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d01e      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d019      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027f0:	4b23      	ldr	r3, [pc, #140]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027fc:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002802:	4a1f      	ldr	r2, [pc, #124]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800280c:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	4a1b      	ldr	r2, [pc, #108]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800281c:	4a18      	ldr	r2, [pc, #96]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d016      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7fe fdf7 	bl	8001420 <HAL_GetTick>
 8002832:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002834:	e00b      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fe fdf3 	bl	8001420 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	; 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d902      	bls.n	800284e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	74fb      	strb	r3, [r7, #19]
            break;
 800284c:	e006      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800284e:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ec      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800285c:	7cfb      	ldrb	r3, [r7, #19]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10b      	bne.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002862:	4b07      	ldr	r3, [pc, #28]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002870:	4903      	ldr	r1, [pc, #12]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002878:	e008      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800287a:	7cfb      	ldrb	r3, [r7, #19]
 800287c:	74bb      	strb	r3, [r7, #18]
 800287e:	e005      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002880:	40021000 	.word	0x40021000
 8002884:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800288c:	7c7b      	ldrb	r3, [r7, #17]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d105      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002892:	4ba7      	ldr	r3, [pc, #668]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002896:	4aa6      	ldr	r2, [pc, #664]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800289c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028aa:	4ba1      	ldr	r3, [pc, #644]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b0:	f023 0203 	bic.w	r2, r3, #3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	499d      	ldr	r1, [pc, #628]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028cc:	4b98      	ldr	r3, [pc, #608]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	f023 020c 	bic.w	r2, r3, #12
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4995      	ldr	r1, [pc, #596]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028ee:	4b90      	ldr	r3, [pc, #576]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	498c      	ldr	r1, [pc, #560]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002910:	4b87      	ldr	r3, [pc, #540]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	4984      	ldr	r1, [pc, #528]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0310 	and.w	r3, r3, #16
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002932:	4b7f      	ldr	r3, [pc, #508]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002938:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	497b      	ldr	r1, [pc, #492]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002954:	4b76      	ldr	r3, [pc, #472]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	4973      	ldr	r1, [pc, #460]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002976:	4b6e      	ldr	r3, [pc, #440]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	496a      	ldr	r1, [pc, #424]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00a      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002998:	4b65      	ldr	r3, [pc, #404]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4962      	ldr	r1, [pc, #392]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029ba:	4b5d      	ldr	r3, [pc, #372]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	4959      	ldr	r1, [pc, #356]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00a      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029dc:	4b54      	ldr	r3, [pc, #336]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029e2:	f023 0203 	bic.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ea:	4951      	ldr	r1, [pc, #324]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029fe:	4b4c      	ldr	r3, [pc, #304]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	4948      	ldr	r1, [pc, #288]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d015      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a20:	4b43      	ldr	r3, [pc, #268]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	4940      	ldr	r1, [pc, #256]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a40:	4b3b      	ldr	r3, [pc, #236]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4a3a      	ldr	r2, [pc, #232]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d015      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a58:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	4932      	ldr	r1, [pc, #200]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a76:	d105      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a78:	4b2d      	ldr	r3, [pc, #180]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4a2c      	ldr	r2, [pc, #176]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a82:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d015      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a90:	4b27      	ldr	r3, [pc, #156]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9e:	4924      	ldr	r1, [pc, #144]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aae:	d105      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab0:	4b1f      	ldr	r3, [pc, #124]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4a1e      	ldr	r2, [pc, #120]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d015      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ace:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad6:	4916      	ldr	r1, [pc, #88]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a10      	ldr	r2, [pc, #64]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d019      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	4908      	ldr	r1, [pc, #32]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b1e:	d109      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4a02      	ldr	r2, [pc, #8]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b2a:	60d3      	str	r3, [r2, #12]
 8002b2c:	e002      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d015      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b40:	4b29      	ldr	r3, [pc, #164]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	4926      	ldr	r1, [pc, #152]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b5e:	d105      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b60:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4a20      	ldr	r2, [pc, #128]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d015      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b78:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b86:	4918      	ldr	r1, [pc, #96]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b96:	d105      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b98:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d015      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bbe:	490a      	ldr	r1, [pc, #40]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bce:	d105      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bda:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002bdc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40021000 	.word	0x40021000

08002bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e049      	b.n	8002c92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fe f99c 	bl	8000f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3304      	adds	r3, #4
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	f000 fe3c 	bl	80038a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0201 	bic.w	r2, r2, #1
 8002cb0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6a1a      	ldr	r2, [r3, #32]
 8002cb8:	f241 1311 	movw	r3, #4369	; 0x1111
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10f      	bne.n	8002ce2 <HAL_TIM_Base_Stop_IT+0x48>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6a1a      	ldr	r2, [r3, #32]
 8002cc8:	f244 4344 	movw	r3, #17476	; 0x4444
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d107      	bne.n	8002ce2 <HAL_TIM_Base_Stop_IT+0x48>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0201 	bic.w	r2, r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e049      	b.n	8002d9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7fe f8f6 	bl	8000f10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3304      	adds	r3, #4
 8002d34:	4619      	mov	r1, r3
 8002d36:	4610      	mov	r0, r2
 8002d38:	f000 fdb6 	bl	80038a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d109      	bne.n	8002dcc <HAL_TIM_PWM_Start+0x24>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	bf14      	ite	ne
 8002dc4:	2301      	movne	r3, #1
 8002dc6:	2300      	moveq	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	e03c      	b.n	8002e46 <HAL_TIM_PWM_Start+0x9e>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d109      	bne.n	8002de6 <HAL_TIM_PWM_Start+0x3e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	bf14      	ite	ne
 8002dde:	2301      	movne	r3, #1
 8002de0:	2300      	moveq	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	e02f      	b.n	8002e46 <HAL_TIM_PWM_Start+0x9e>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d109      	bne.n	8002e00 <HAL_TIM_PWM_Start+0x58>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	e022      	b.n	8002e46 <HAL_TIM_PWM_Start+0x9e>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2b0c      	cmp	r3, #12
 8002e04:	d109      	bne.n	8002e1a <HAL_TIM_PWM_Start+0x72>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	bf14      	ite	ne
 8002e12:	2301      	movne	r3, #1
 8002e14:	2300      	moveq	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	e015      	b.n	8002e46 <HAL_TIM_PWM_Start+0x9e>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d109      	bne.n	8002e34 <HAL_TIM_PWM_Start+0x8c>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	bf14      	ite	ne
 8002e2c:	2301      	movne	r3, #1
 8002e2e:	2300      	moveq	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	e008      	b.n	8002e46 <HAL_TIM_PWM_Start+0x9e>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	bf14      	ite	ne
 8002e40:	2301      	movne	r3, #1
 8002e42:	2300      	moveq	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0a6      	b.n	8002f9c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d104      	bne.n	8002e5e <HAL_TIM_PWM_Start+0xb6>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e5c:	e023      	b.n	8002ea6 <HAL_TIM_PWM_Start+0xfe>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d104      	bne.n	8002e6e <HAL_TIM_PWM_Start+0xc6>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e6c:	e01b      	b.n	8002ea6 <HAL_TIM_PWM_Start+0xfe>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d104      	bne.n	8002e7e <HAL_TIM_PWM_Start+0xd6>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e7c:	e013      	b.n	8002ea6 <HAL_TIM_PWM_Start+0xfe>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b0c      	cmp	r3, #12
 8002e82:	d104      	bne.n	8002e8e <HAL_TIM_PWM_Start+0xe6>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e8c:	e00b      	b.n	8002ea6 <HAL_TIM_PWM_Start+0xfe>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	d104      	bne.n	8002e9e <HAL_TIM_PWM_Start+0xf6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e9c:	e003      	b.n	8002ea6 <HAL_TIM_PWM_Start+0xfe>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	6839      	ldr	r1, [r7, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f001 f968 	bl	8004184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a3a      	ldr	r2, [pc, #232]	; (8002fa4 <HAL_TIM_PWM_Start+0x1fc>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d018      	beq.n	8002ef0 <HAL_TIM_PWM_Start+0x148>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a39      	ldr	r2, [pc, #228]	; (8002fa8 <HAL_TIM_PWM_Start+0x200>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d013      	beq.n	8002ef0 <HAL_TIM_PWM_Start+0x148>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a37      	ldr	r2, [pc, #220]	; (8002fac <HAL_TIM_PWM_Start+0x204>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_TIM_PWM_Start+0x148>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a36      	ldr	r2, [pc, #216]	; (8002fb0 <HAL_TIM_PWM_Start+0x208>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_TIM_PWM_Start+0x148>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a34      	ldr	r2, [pc, #208]	; (8002fb4 <HAL_TIM_PWM_Start+0x20c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_TIM_PWM_Start+0x148>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a33      	ldr	r2, [pc, #204]	; (8002fb8 <HAL_TIM_PWM_Start+0x210>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_TIM_PWM_Start+0x14c>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <HAL_TIM_PWM_Start+0x14e>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d007      	beq.n	8002f0a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a25      	ldr	r2, [pc, #148]	; (8002fa4 <HAL_TIM_PWM_Start+0x1fc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d022      	beq.n	8002f5a <HAL_TIM_PWM_Start+0x1b2>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1c:	d01d      	beq.n	8002f5a <HAL_TIM_PWM_Start+0x1b2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a26      	ldr	r2, [pc, #152]	; (8002fbc <HAL_TIM_PWM_Start+0x214>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d018      	beq.n	8002f5a <HAL_TIM_PWM_Start+0x1b2>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a24      	ldr	r2, [pc, #144]	; (8002fc0 <HAL_TIM_PWM_Start+0x218>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d013      	beq.n	8002f5a <HAL_TIM_PWM_Start+0x1b2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a23      	ldr	r2, [pc, #140]	; (8002fc4 <HAL_TIM_PWM_Start+0x21c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00e      	beq.n	8002f5a <HAL_TIM_PWM_Start+0x1b2>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <HAL_TIM_PWM_Start+0x200>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d009      	beq.n	8002f5a <HAL_TIM_PWM_Start+0x1b2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a18      	ldr	r2, [pc, #96]	; (8002fac <HAL_TIM_PWM_Start+0x204>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d004      	beq.n	8002f5a <HAL_TIM_PWM_Start+0x1b2>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <HAL_TIM_PWM_Start+0x210>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d115      	bne.n	8002f86 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_TIM_PWM_Start+0x220>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b06      	cmp	r3, #6
 8002f6a:	d015      	beq.n	8002f98 <HAL_TIM_PWM_Start+0x1f0>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f72:	d011      	beq.n	8002f98 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f84:	e008      	b.n	8002f98 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0201 	orr.w	r2, r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e000      	b.n	8002f9a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40012c00 	.word	0x40012c00
 8002fa8:	40013400 	.word	0x40013400
 8002fac:	40014000 	.word	0x40014000
 8002fb0:	40014400 	.word	0x40014400
 8002fb4:	40014800 	.word	0x40014800
 8002fb8:	40015000 	.word	0x40015000
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800
 8002fc4:	40000c00 	.word	0x40000c00
 8002fc8:	00010007 	.word	0x00010007

08002fcc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	6839      	ldr	r1, [r7, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f001 f8d0 	bl	8004184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a40      	ldr	r2, [pc, #256]	; (80030ec <HAL_TIM_PWM_Stop+0x120>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d018      	beq.n	8003020 <HAL_TIM_PWM_Stop+0x54>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a3f      	ldr	r2, [pc, #252]	; (80030f0 <HAL_TIM_PWM_Stop+0x124>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d013      	beq.n	8003020 <HAL_TIM_PWM_Stop+0x54>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a3d      	ldr	r2, [pc, #244]	; (80030f4 <HAL_TIM_PWM_Stop+0x128>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00e      	beq.n	8003020 <HAL_TIM_PWM_Stop+0x54>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a3c      	ldr	r2, [pc, #240]	; (80030f8 <HAL_TIM_PWM_Stop+0x12c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d009      	beq.n	8003020 <HAL_TIM_PWM_Stop+0x54>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a3a      	ldr	r2, [pc, #232]	; (80030fc <HAL_TIM_PWM_Stop+0x130>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d004      	beq.n	8003020 <HAL_TIM_PWM_Stop+0x54>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a39      	ldr	r2, [pc, #228]	; (8003100 <HAL_TIM_PWM_Stop+0x134>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d101      	bne.n	8003024 <HAL_TIM_PWM_Stop+0x58>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_TIM_PWM_Stop+0x5a>
 8003024:	2300      	movs	r3, #0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d017      	beq.n	800305a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6a1a      	ldr	r2, [r3, #32]
 8003030:	f241 1311 	movw	r3, #4369	; 0x1111
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10f      	bne.n	800305a <HAL_TIM_PWM_Stop+0x8e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6a1a      	ldr	r2, [r3, #32]
 8003040:	f244 4344 	movw	r3, #17476	; 0x4444
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d107      	bne.n	800305a <HAL_TIM_PWM_Stop+0x8e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003058:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6a1a      	ldr	r2, [r3, #32]
 8003060:	f241 1311 	movw	r3, #4369	; 0x1111
 8003064:	4013      	ands	r3, r2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10f      	bne.n	800308a <HAL_TIM_PWM_Stop+0xbe>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a1a      	ldr	r2, [r3, #32]
 8003070:	f244 4344 	movw	r3, #17476	; 0x4444
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d107      	bne.n	800308a <HAL_TIM_PWM_Stop+0xbe>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0201 	bic.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d104      	bne.n	800309a <HAL_TIM_PWM_Stop+0xce>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003098:	e023      	b.n	80030e2 <HAL_TIM_PWM_Stop+0x116>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b04      	cmp	r3, #4
 800309e:	d104      	bne.n	80030aa <HAL_TIM_PWM_Stop+0xde>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030a8:	e01b      	b.n	80030e2 <HAL_TIM_PWM_Stop+0x116>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d104      	bne.n	80030ba <HAL_TIM_PWM_Stop+0xee>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b8:	e013      	b.n	80030e2 <HAL_TIM_PWM_Stop+0x116>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b0c      	cmp	r3, #12
 80030be:	d104      	bne.n	80030ca <HAL_TIM_PWM_Stop+0xfe>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030c8:	e00b      	b.n	80030e2 <HAL_TIM_PWM_Stop+0x116>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d104      	bne.n	80030da <HAL_TIM_PWM_Stop+0x10e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030d8:	e003      	b.n	80030e2 <HAL_TIM_PWM_Stop+0x116>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40013400 	.word	0x40013400
 80030f4:	40014000 	.word	0x40014000
 80030f8:	40014400 	.word	0x40014400
 80030fc:	40014800 	.word	0x40014800
 8003100:	40015000 	.word	0x40015000

08003104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b02      	cmp	r3, #2
 8003118:	d122      	bne.n	8003160 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b02      	cmp	r3, #2
 8003126:	d11b      	bne.n	8003160 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0202 	mvn.w	r2, #2
 8003130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fb90 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 800314c:	e005      	b.n	800315a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fb82 	bl	8003858 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fb93 	bl	8003880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b04      	cmp	r3, #4
 800316c:	d122      	bne.n	80031b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b04      	cmp	r3, #4
 800317a:	d11b      	bne.n	80031b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0204 	mvn.w	r2, #4
 8003184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2202      	movs	r2, #2
 800318a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fb66 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 80031a0:	e005      	b.n	80031ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fb58 	bl	8003858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fb69 	bl	8003880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d122      	bne.n	8003208 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d11b      	bne.n	8003208 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0208 	mvn.w	r2, #8
 80031d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2204      	movs	r2, #4
 80031de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fb3c 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fb2e 	bl	8003858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fb3f 	bl	8003880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b10      	cmp	r3, #16
 8003214:	d122      	bne.n	800325c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b10      	cmp	r3, #16
 8003222:	d11b      	bne.n	800325c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0210 	mvn.w	r2, #16
 800322c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2208      	movs	r2, #8
 8003232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fb12 	bl	800386c <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fb04 	bl	8003858 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fb15 	bl	8003880 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b01      	cmp	r3, #1
 8003268:	d10e      	bne.n	8003288 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d107      	bne.n	8003288 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0201 	mvn.w	r2, #1
 8003280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fd fd50 	bl	8000d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003292:	2b80      	cmp	r3, #128	; 0x80
 8003294:	d10e      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a0:	2b80      	cmp	r3, #128	; 0x80
 80032a2:	d107      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f001 fa00 	bl	80046b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c2:	d10e      	bne.n	80032e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ce:	2b80      	cmp	r3, #128	; 0x80
 80032d0:	d107      	bne.n	80032e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f001 f9f3 	bl	80046c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ec:	2b40      	cmp	r3, #64	; 0x40
 80032ee:	d10e      	bne.n	800330e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fa:	2b40      	cmp	r3, #64	; 0x40
 80032fc:	d107      	bne.n	800330e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fac3 	bl	8003894 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b20      	cmp	r3, #32
 800331a:	d10e      	bne.n	800333a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b20      	cmp	r3, #32
 8003328:	d107      	bne.n	800333a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f06f 0220 	mvn.w	r2, #32
 8003332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f001 f9b3 	bl	80046a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003348:	d10f      	bne.n	800336a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003354:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003358:	d107      	bne.n	800336a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f001 f9b9 	bl	80046dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003374:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003378:	d10f      	bne.n	800339a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003384:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003388:	d107      	bne.n	800339a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f001 f9ab 	bl	80046f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033a8:	d10f      	bne.n	80033ca <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b8:	d107      	bne.n	80033ca <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80033c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f001 f99d 	bl	8004704 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033d8:	d10f      	bne.n	80033fa <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033e8:	d107      	bne.n	80033fa <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80033f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f001 f98f 	bl	8004718 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800341e:	2302      	movs	r3, #2
 8003420:	e0ff      	b.n	8003622 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b14      	cmp	r3, #20
 800342e:	f200 80f0 	bhi.w	8003612 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003432:	a201      	add	r2, pc, #4	; (adr r2, 8003438 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003438:	0800348d 	.word	0x0800348d
 800343c:	08003613 	.word	0x08003613
 8003440:	08003613 	.word	0x08003613
 8003444:	08003613 	.word	0x08003613
 8003448:	080034cd 	.word	0x080034cd
 800344c:	08003613 	.word	0x08003613
 8003450:	08003613 	.word	0x08003613
 8003454:	08003613 	.word	0x08003613
 8003458:	0800350f 	.word	0x0800350f
 800345c:	08003613 	.word	0x08003613
 8003460:	08003613 	.word	0x08003613
 8003464:	08003613 	.word	0x08003613
 8003468:	0800354f 	.word	0x0800354f
 800346c:	08003613 	.word	0x08003613
 8003470:	08003613 	.word	0x08003613
 8003474:	08003613 	.word	0x08003613
 8003478:	08003591 	.word	0x08003591
 800347c:	08003613 	.word	0x08003613
 8003480:	08003613 	.word	0x08003613
 8003484:	08003613 	.word	0x08003613
 8003488:	080035d1 	.word	0x080035d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fab0 	bl	80039f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699a      	ldr	r2, [r3, #24]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0208 	orr.w	r2, r2, #8
 80034a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0204 	bic.w	r2, r2, #4
 80034b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6999      	ldr	r1, [r3, #24]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	691a      	ldr	r2, [r3, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	619a      	str	r2, [r3, #24]
      break;
 80034ca:	e0a5      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fb2a 	bl	8003b2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6999      	ldr	r1, [r3, #24]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	021a      	lsls	r2, r3, #8
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	619a      	str	r2, [r3, #24]
      break;
 800350c:	e084      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68b9      	ldr	r1, [r7, #8]
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fb9d 	bl	8003c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69da      	ldr	r2, [r3, #28]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0208 	orr.w	r2, r2, #8
 8003528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0204 	bic.w	r2, r2, #4
 8003538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69d9      	ldr	r1, [r3, #28]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	61da      	str	r2, [r3, #28]
      break;
 800354c:	e064      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fc0f 	bl	8003d78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003568:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003578:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69d9      	ldr	r1, [r3, #28]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	021a      	lsls	r2, r3, #8
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	61da      	str	r2, [r3, #28]
      break;
 800358e:	e043      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fc82 	bl	8003ea0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0208 	orr.w	r2, r2, #8
 80035aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0204 	bic.w	r2, r2, #4
 80035ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80035ce:	e023      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fccc 	bl	8003f74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	021a      	lsls	r2, r3, #8
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003610:	e002      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	75fb      	strb	r3, [r7, #23]
      break;
 8003616:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003620:	7dfb      	ldrb	r3, [r7, #23]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop

0800362c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_TIM_ConfigClockSource+0x1c>
 8003644:	2302      	movs	r3, #2
 8003646:	e0f6      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x20a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003666:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800366a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003672:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a6f      	ldr	r2, [pc, #444]	; (8003840 <HAL_TIM_ConfigClockSource+0x214>)
 8003682:	4293      	cmp	r3, r2
 8003684:	f000 80c1 	beq.w	800380a <HAL_TIM_ConfigClockSource+0x1de>
 8003688:	4a6d      	ldr	r2, [pc, #436]	; (8003840 <HAL_TIM_ConfigClockSource+0x214>)
 800368a:	4293      	cmp	r3, r2
 800368c:	f200 80c6 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 8003690:	4a6c      	ldr	r2, [pc, #432]	; (8003844 <HAL_TIM_ConfigClockSource+0x218>)
 8003692:	4293      	cmp	r3, r2
 8003694:	f000 80b9 	beq.w	800380a <HAL_TIM_ConfigClockSource+0x1de>
 8003698:	4a6a      	ldr	r2, [pc, #424]	; (8003844 <HAL_TIM_ConfigClockSource+0x218>)
 800369a:	4293      	cmp	r3, r2
 800369c:	f200 80be 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 80036a0:	4a69      	ldr	r2, [pc, #420]	; (8003848 <HAL_TIM_ConfigClockSource+0x21c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	f000 80b1 	beq.w	800380a <HAL_TIM_ConfigClockSource+0x1de>
 80036a8:	4a67      	ldr	r2, [pc, #412]	; (8003848 <HAL_TIM_ConfigClockSource+0x21c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	f200 80b6 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 80036b0:	4a66      	ldr	r2, [pc, #408]	; (800384c <HAL_TIM_ConfigClockSource+0x220>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	f000 80a9 	beq.w	800380a <HAL_TIM_ConfigClockSource+0x1de>
 80036b8:	4a64      	ldr	r2, [pc, #400]	; (800384c <HAL_TIM_ConfigClockSource+0x220>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	f200 80ae 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 80036c0:	4a63      	ldr	r2, [pc, #396]	; (8003850 <HAL_TIM_ConfigClockSource+0x224>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	f000 80a1 	beq.w	800380a <HAL_TIM_ConfigClockSource+0x1de>
 80036c8:	4a61      	ldr	r2, [pc, #388]	; (8003850 <HAL_TIM_ConfigClockSource+0x224>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	f200 80a6 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 80036d0:	4a60      	ldr	r2, [pc, #384]	; (8003854 <HAL_TIM_ConfigClockSource+0x228>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	f000 8099 	beq.w	800380a <HAL_TIM_ConfigClockSource+0x1de>
 80036d8:	4a5e      	ldr	r2, [pc, #376]	; (8003854 <HAL_TIM_ConfigClockSource+0x228>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	f200 809e 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 80036e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80036e4:	f000 8091 	beq.w	800380a <HAL_TIM_ConfigClockSource+0x1de>
 80036e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80036ec:	f200 8096 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 80036f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036f4:	f000 8089 	beq.w	800380a <HAL_TIM_ConfigClockSource+0x1de>
 80036f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036fc:	f200 808e 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 8003700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003704:	d03e      	beq.n	8003784 <HAL_TIM_ConfigClockSource+0x158>
 8003706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370a:	f200 8087 	bhi.w	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 800370e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003712:	f000 8086 	beq.w	8003822 <HAL_TIM_ConfigClockSource+0x1f6>
 8003716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371a:	d87f      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 800371c:	2b70      	cmp	r3, #112	; 0x70
 800371e:	d01a      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x12a>
 8003720:	2b70      	cmp	r3, #112	; 0x70
 8003722:	d87b      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 8003724:	2b60      	cmp	r3, #96	; 0x60
 8003726:	d050      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0x19e>
 8003728:	2b60      	cmp	r3, #96	; 0x60
 800372a:	d877      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 800372c:	2b50      	cmp	r3, #80	; 0x50
 800372e:	d03c      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0x17e>
 8003730:	2b50      	cmp	r3, #80	; 0x50
 8003732:	d873      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 8003734:	2b40      	cmp	r3, #64	; 0x40
 8003736:	d058      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0x1be>
 8003738:	2b40      	cmp	r3, #64	; 0x40
 800373a:	d86f      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 800373c:	2b30      	cmp	r3, #48	; 0x30
 800373e:	d064      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x1de>
 8003740:	2b30      	cmp	r3, #48	; 0x30
 8003742:	d86b      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 8003744:	2b20      	cmp	r3, #32
 8003746:	d060      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x1de>
 8003748:	2b20      	cmp	r3, #32
 800374a:	d867      	bhi.n	800381c <HAL_TIM_ConfigClockSource+0x1f0>
 800374c:	2b00      	cmp	r3, #0
 800374e:	d05c      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x1de>
 8003750:	2b10      	cmp	r3, #16
 8003752:	d05a      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x1de>
 8003754:	e062      	b.n	800381c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6899      	ldr	r1, [r3, #8]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f000 fced 	bl	8004144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003778:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	609a      	str	r2, [r3, #8]
      break;
 8003782:	e04f      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	6899      	ldr	r1, [r3, #8]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f000 fcd6 	bl	8004144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037a6:	609a      	str	r2, [r3, #8]
      break;
 80037a8:	e03c      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	6859      	ldr	r1, [r3, #4]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	461a      	mov	r2, r3
 80037b8:	f000 fc48 	bl	800404c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2150      	movs	r1, #80	; 0x50
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fca1 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 80037c8:	e02c      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6859      	ldr	r1, [r3, #4]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	461a      	mov	r2, r3
 80037d8:	f000 fc67 	bl	80040aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2160      	movs	r1, #96	; 0x60
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fc91 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 80037e8:	e01c      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6859      	ldr	r1, [r3, #4]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f000 fc28 	bl	800404c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2140      	movs	r1, #64	; 0x40
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fc81 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 8003808:	e00c      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f000 fc78 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 800381a:	e003      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
      break;
 8003820:	e000      	b.n	8003824 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003822:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003834:	7bfb      	ldrb	r3, [r7, #15]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	00100070 	.word	0x00100070
 8003844:	00100060 	.word	0x00100060
 8003848:	00100050 	.word	0x00100050
 800384c:	00100040 	.word	0x00100040
 8003850:	00100030 	.word	0x00100030
 8003854:	00100020 	.word	0x00100020

08003858 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a46      	ldr	r2, [pc, #280]	; (80039d4 <TIM_Base_SetConfig+0x12c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d017      	beq.n	80038f0 <TIM_Base_SetConfig+0x48>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c6:	d013      	beq.n	80038f0 <TIM_Base_SetConfig+0x48>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a43      	ldr	r2, [pc, #268]	; (80039d8 <TIM_Base_SetConfig+0x130>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00f      	beq.n	80038f0 <TIM_Base_SetConfig+0x48>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a42      	ldr	r2, [pc, #264]	; (80039dc <TIM_Base_SetConfig+0x134>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00b      	beq.n	80038f0 <TIM_Base_SetConfig+0x48>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a41      	ldr	r2, [pc, #260]	; (80039e0 <TIM_Base_SetConfig+0x138>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d007      	beq.n	80038f0 <TIM_Base_SetConfig+0x48>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a40      	ldr	r2, [pc, #256]	; (80039e4 <TIM_Base_SetConfig+0x13c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d003      	beq.n	80038f0 <TIM_Base_SetConfig+0x48>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a3f      	ldr	r2, [pc, #252]	; (80039e8 <TIM_Base_SetConfig+0x140>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d108      	bne.n	8003902 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a33      	ldr	r2, [pc, #204]	; (80039d4 <TIM_Base_SetConfig+0x12c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d023      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003910:	d01f      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a30      	ldr	r2, [pc, #192]	; (80039d8 <TIM_Base_SetConfig+0x130>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d01b      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2f      	ldr	r2, [pc, #188]	; (80039dc <TIM_Base_SetConfig+0x134>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d017      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a2e      	ldr	r2, [pc, #184]	; (80039e0 <TIM_Base_SetConfig+0x138>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d013      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a2d      	ldr	r2, [pc, #180]	; (80039e4 <TIM_Base_SetConfig+0x13c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00f      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a2d      	ldr	r2, [pc, #180]	; (80039ec <TIM_Base_SetConfig+0x144>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00b      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a2c      	ldr	r2, [pc, #176]	; (80039f0 <TIM_Base_SetConfig+0x148>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d007      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a2b      	ldr	r2, [pc, #172]	; (80039f4 <TIM_Base_SetConfig+0x14c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d003      	beq.n	8003952 <TIM_Base_SetConfig+0xaa>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a26      	ldr	r2, [pc, #152]	; (80039e8 <TIM_Base_SetConfig+0x140>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d108      	bne.n	8003964 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4313      	orrs	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <TIM_Base_SetConfig+0x12c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <TIM_Base_SetConfig+0x110>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a14      	ldr	r2, [pc, #80]	; (80039e4 <TIM_Base_SetConfig+0x13c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00f      	beq.n	80039b8 <TIM_Base_SetConfig+0x110>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a14      	ldr	r2, [pc, #80]	; (80039ec <TIM_Base_SetConfig+0x144>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00b      	beq.n	80039b8 <TIM_Base_SetConfig+0x110>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a13      	ldr	r2, [pc, #76]	; (80039f0 <TIM_Base_SetConfig+0x148>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d007      	beq.n	80039b8 <TIM_Base_SetConfig+0x110>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a12      	ldr	r2, [pc, #72]	; (80039f4 <TIM_Base_SetConfig+0x14c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d003      	beq.n	80039b8 <TIM_Base_SetConfig+0x110>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a0d      	ldr	r2, [pc, #52]	; (80039e8 <TIM_Base_SetConfig+0x140>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d103      	bne.n	80039c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	615a      	str	r2, [r3, #20]
}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40012c00 	.word	0x40012c00
 80039d8:	40000400 	.word	0x40000400
 80039dc:	40000800 	.word	0x40000800
 80039e0:	40000c00 	.word	0x40000c00
 80039e4:	40013400 	.word	0x40013400
 80039e8:	40015000 	.word	0x40015000
 80039ec:	40014000 	.word	0x40014000
 80039f0:	40014400 	.word	0x40014400
 80039f4:	40014800 	.word	0x40014800

080039f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	f023 0201 	bic.w	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0303 	bic.w	r3, r3, #3
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f023 0302 	bic.w	r3, r3, #2
 8003a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a30      	ldr	r2, [pc, #192]	; (8003b14 <TIM_OC1_SetConfig+0x11c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d013      	beq.n	8003a80 <TIM_OC1_SetConfig+0x88>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a2f      	ldr	r2, [pc, #188]	; (8003b18 <TIM_OC1_SetConfig+0x120>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00f      	beq.n	8003a80 <TIM_OC1_SetConfig+0x88>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a2e      	ldr	r2, [pc, #184]	; (8003b1c <TIM_OC1_SetConfig+0x124>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00b      	beq.n	8003a80 <TIM_OC1_SetConfig+0x88>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a2d      	ldr	r2, [pc, #180]	; (8003b20 <TIM_OC1_SetConfig+0x128>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d007      	beq.n	8003a80 <TIM_OC1_SetConfig+0x88>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a2c      	ldr	r2, [pc, #176]	; (8003b24 <TIM_OC1_SetConfig+0x12c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d003      	beq.n	8003a80 <TIM_OC1_SetConfig+0x88>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a2b      	ldr	r2, [pc, #172]	; (8003b28 <TIM_OC1_SetConfig+0x130>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d10c      	bne.n	8003a9a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0308 	bic.w	r3, r3, #8
 8003a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f023 0304 	bic.w	r3, r3, #4
 8003a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <TIM_OC1_SetConfig+0x11c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d013      	beq.n	8003aca <TIM_OC1_SetConfig+0xd2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a1c      	ldr	r2, [pc, #112]	; (8003b18 <TIM_OC1_SetConfig+0x120>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00f      	beq.n	8003aca <TIM_OC1_SetConfig+0xd2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a1b      	ldr	r2, [pc, #108]	; (8003b1c <TIM_OC1_SetConfig+0x124>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00b      	beq.n	8003aca <TIM_OC1_SetConfig+0xd2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a1a      	ldr	r2, [pc, #104]	; (8003b20 <TIM_OC1_SetConfig+0x128>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d007      	beq.n	8003aca <TIM_OC1_SetConfig+0xd2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a19      	ldr	r2, [pc, #100]	; (8003b24 <TIM_OC1_SetConfig+0x12c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d003      	beq.n	8003aca <TIM_OC1_SetConfig+0xd2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a18      	ldr	r2, [pc, #96]	; (8003b28 <TIM_OC1_SetConfig+0x130>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d111      	bne.n	8003aee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	621a      	str	r2, [r3, #32]
}
 8003b08:	bf00      	nop
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40012c00 	.word	0x40012c00
 8003b18:	40013400 	.word	0x40013400
 8003b1c:	40014000 	.word	0x40014000
 8003b20:	40014400 	.word	0x40014400
 8003b24:	40014800 	.word	0x40014800
 8003b28:	40015000 	.word	0x40015000

08003b2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	f023 0210 	bic.w	r2, r3, #16
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f023 0320 	bic.w	r3, r3, #32
 8003b7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a2c      	ldr	r2, [pc, #176]	; (8003c3c <TIM_OC2_SetConfig+0x110>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d007      	beq.n	8003ba0 <TIM_OC2_SetConfig+0x74>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a2b      	ldr	r2, [pc, #172]	; (8003c40 <TIM_OC2_SetConfig+0x114>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <TIM_OC2_SetConfig+0x74>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a2a      	ldr	r2, [pc, #168]	; (8003c44 <TIM_OC2_SetConfig+0x118>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d10d      	bne.n	8003bbc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <TIM_OC2_SetConfig+0x110>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d013      	beq.n	8003bec <TIM_OC2_SetConfig+0xc0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a1e      	ldr	r2, [pc, #120]	; (8003c40 <TIM_OC2_SetConfig+0x114>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00f      	beq.n	8003bec <TIM_OC2_SetConfig+0xc0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a1e      	ldr	r2, [pc, #120]	; (8003c48 <TIM_OC2_SetConfig+0x11c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00b      	beq.n	8003bec <TIM_OC2_SetConfig+0xc0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a1d      	ldr	r2, [pc, #116]	; (8003c4c <TIM_OC2_SetConfig+0x120>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d007      	beq.n	8003bec <TIM_OC2_SetConfig+0xc0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a1c      	ldr	r2, [pc, #112]	; (8003c50 <TIM_OC2_SetConfig+0x124>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <TIM_OC2_SetConfig+0xc0>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <TIM_OC2_SetConfig+0x118>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d113      	bne.n	8003c14 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	621a      	str	r2, [r3, #32]
}
 8003c2e:	bf00      	nop
 8003c30:	371c      	adds	r7, #28
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40012c00 	.word	0x40012c00
 8003c40:	40013400 	.word	0x40013400
 8003c44:	40015000 	.word	0x40015000
 8003c48:	40014000 	.word	0x40014000
 8003c4c:	40014400 	.word	0x40014400
 8003c50:	40014800 	.word	0x40014800

08003c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0303 	bic.w	r3, r3, #3
 8003c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a2b      	ldr	r2, [pc, #172]	; (8003d60 <TIM_OC3_SetConfig+0x10c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d007      	beq.n	8003cc6 <TIM_OC3_SetConfig+0x72>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a2a      	ldr	r2, [pc, #168]	; (8003d64 <TIM_OC3_SetConfig+0x110>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d003      	beq.n	8003cc6 <TIM_OC3_SetConfig+0x72>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a29      	ldr	r2, [pc, #164]	; (8003d68 <TIM_OC3_SetConfig+0x114>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d10d      	bne.n	8003ce2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a1e      	ldr	r2, [pc, #120]	; (8003d60 <TIM_OC3_SetConfig+0x10c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <TIM_OC3_SetConfig+0xbe>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <TIM_OC3_SetConfig+0x110>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00f      	beq.n	8003d12 <TIM_OC3_SetConfig+0xbe>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <TIM_OC3_SetConfig+0x118>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00b      	beq.n	8003d12 <TIM_OC3_SetConfig+0xbe>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a1c      	ldr	r2, [pc, #112]	; (8003d70 <TIM_OC3_SetConfig+0x11c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d007      	beq.n	8003d12 <TIM_OC3_SetConfig+0xbe>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a1b      	ldr	r2, [pc, #108]	; (8003d74 <TIM_OC3_SetConfig+0x120>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d003      	beq.n	8003d12 <TIM_OC3_SetConfig+0xbe>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <TIM_OC3_SetConfig+0x114>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d113      	bne.n	8003d3a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	621a      	str	r2, [r3, #32]
}
 8003d54:	bf00      	nop
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	40012c00 	.word	0x40012c00
 8003d64:	40013400 	.word	0x40013400
 8003d68:	40015000 	.word	0x40015000
 8003d6c:	40014000 	.word	0x40014000
 8003d70:	40014400 	.word	0x40014400
 8003d74:	40014800 	.word	0x40014800

08003d78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	031b      	lsls	r3, r3, #12
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a2c      	ldr	r2, [pc, #176]	; (8003e88 <TIM_OC4_SetConfig+0x110>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d007      	beq.n	8003dec <TIM_OC4_SetConfig+0x74>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a2b      	ldr	r2, [pc, #172]	; (8003e8c <TIM_OC4_SetConfig+0x114>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_OC4_SetConfig+0x74>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a2a      	ldr	r2, [pc, #168]	; (8003e90 <TIM_OC4_SetConfig+0x118>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d10d      	bne.n	8003e08 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	031b      	lsls	r3, r3, #12
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a1f      	ldr	r2, [pc, #124]	; (8003e88 <TIM_OC4_SetConfig+0x110>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d013      	beq.n	8003e38 <TIM_OC4_SetConfig+0xc0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <TIM_OC4_SetConfig+0x114>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00f      	beq.n	8003e38 <TIM_OC4_SetConfig+0xc0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a1e      	ldr	r2, [pc, #120]	; (8003e94 <TIM_OC4_SetConfig+0x11c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00b      	beq.n	8003e38 <TIM_OC4_SetConfig+0xc0>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <TIM_OC4_SetConfig+0x120>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d007      	beq.n	8003e38 <TIM_OC4_SetConfig+0xc0>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <TIM_OC4_SetConfig+0x124>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d003      	beq.n	8003e38 <TIM_OC4_SetConfig+0xc0>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <TIM_OC4_SetConfig+0x118>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d113      	bne.n	8003e60 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e3e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e46:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	019b      	lsls	r3, r3, #6
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	019b      	lsls	r3, r3, #6
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40013400 	.word	0x40013400
 8003e90:	40015000 	.word	0x40015000
 8003e94:	40014000 	.word	0x40014000
 8003e98:	40014400 	.word	0x40014400
 8003e9c:	40014800 	.word	0x40014800

08003ea0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ee4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	041b      	lsls	r3, r3, #16
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a19      	ldr	r2, [pc, #100]	; (8003f5c <TIM_OC5_SetConfig+0xbc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <TIM_OC5_SetConfig+0x82>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a18      	ldr	r2, [pc, #96]	; (8003f60 <TIM_OC5_SetConfig+0xc0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00f      	beq.n	8003f22 <TIM_OC5_SetConfig+0x82>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a17      	ldr	r2, [pc, #92]	; (8003f64 <TIM_OC5_SetConfig+0xc4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00b      	beq.n	8003f22 <TIM_OC5_SetConfig+0x82>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a16      	ldr	r2, [pc, #88]	; (8003f68 <TIM_OC5_SetConfig+0xc8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d007      	beq.n	8003f22 <TIM_OC5_SetConfig+0x82>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a15      	ldr	r2, [pc, #84]	; (8003f6c <TIM_OC5_SetConfig+0xcc>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d003      	beq.n	8003f22 <TIM_OC5_SetConfig+0x82>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a14      	ldr	r2, [pc, #80]	; (8003f70 <TIM_OC5_SetConfig+0xd0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d109      	bne.n	8003f36 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	621a      	str	r2, [r3, #32]
}
 8003f50:	bf00      	nop
 8003f52:	371c      	adds	r7, #28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	40013400 	.word	0x40013400
 8003f64:	40014000 	.word	0x40014000
 8003f68:	40014400 	.word	0x40014400
 8003f6c:	40014800 	.word	0x40014800
 8003f70:	40015000 	.word	0x40015000

08003f74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	051b      	lsls	r3, r3, #20
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a1a      	ldr	r2, [pc, #104]	; (8004034 <TIM_OC6_SetConfig+0xc0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d013      	beq.n	8003ff8 <TIM_OC6_SetConfig+0x84>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a19      	ldr	r2, [pc, #100]	; (8004038 <TIM_OC6_SetConfig+0xc4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00f      	beq.n	8003ff8 <TIM_OC6_SetConfig+0x84>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a18      	ldr	r2, [pc, #96]	; (800403c <TIM_OC6_SetConfig+0xc8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00b      	beq.n	8003ff8 <TIM_OC6_SetConfig+0x84>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a17      	ldr	r2, [pc, #92]	; (8004040 <TIM_OC6_SetConfig+0xcc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d007      	beq.n	8003ff8 <TIM_OC6_SetConfig+0x84>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a16      	ldr	r2, [pc, #88]	; (8004044 <TIM_OC6_SetConfig+0xd0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d003      	beq.n	8003ff8 <TIM_OC6_SetConfig+0x84>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a15      	ldr	r2, [pc, #84]	; (8004048 <TIM_OC6_SetConfig+0xd4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d109      	bne.n	800400c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	029b      	lsls	r3, r3, #10
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	621a      	str	r2, [r3, #32]
}
 8004026:	bf00      	nop
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40012c00 	.word	0x40012c00
 8004038:	40013400 	.word	0x40013400
 800403c:	40014000 	.word	0x40014000
 8004040:	40014400 	.word	0x40014400
 8004044:	40014800 	.word	0x40014800
 8004048:	40015000 	.word	0x40015000

0800404c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	f023 0201 	bic.w	r2, r3, #1
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f023 030a 	bic.w	r3, r3, #10
 8004088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	621a      	str	r2, [r3, #32]
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b087      	sub	sp, #28
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	f023 0210 	bic.w	r2, r3, #16
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	031b      	lsls	r3, r3, #12
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800410a:	b480      	push	{r7}
 800410c:	b085      	sub	sp, #20
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	f043 0307 	orr.w	r3, r3, #7
 8004130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	609a      	str	r2, [r3, #8]
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800415e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	021a      	lsls	r2, r3, #8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	431a      	orrs	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4313      	orrs	r3, r2
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	609a      	str	r2, [r3, #8]
}
 8004178:	bf00      	nop
 800417a:	371c      	adds	r7, #28
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	2201      	movs	r2, #1
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1a      	ldr	r2, [r3, #32]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	401a      	ands	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a1a      	ldr	r2, [r3, #32]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	431a      	orrs	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	621a      	str	r2, [r3, #32]
}
 80041c2:	bf00      	nop
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
	...

080041d0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d109      	bne.n	80041f4 <HAL_TIMEx_PWMN_Start+0x24>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	bf14      	ite	ne
 80041ec:	2301      	movne	r3, #1
 80041ee:	2300      	moveq	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	e022      	b.n	800423a <HAL_TIMEx_PWMN_Start+0x6a>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d109      	bne.n	800420e <HAL_TIMEx_PWMN_Start+0x3e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b01      	cmp	r3, #1
 8004204:	bf14      	ite	ne
 8004206:	2301      	movne	r3, #1
 8004208:	2300      	moveq	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	e015      	b.n	800423a <HAL_TIMEx_PWMN_Start+0x6a>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d109      	bne.n	8004228 <HAL_TIMEx_PWMN_Start+0x58>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	bf14      	ite	ne
 8004220:	2301      	movne	r3, #1
 8004222:	2300      	moveq	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	e008      	b.n	800423a <HAL_TIMEx_PWMN_Start+0x6a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	bf14      	ite	ne
 8004234:	2301      	movne	r3, #1
 8004236:	2300      	moveq	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e073      	b.n	800432a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d104      	bne.n	8004252 <HAL_TIMEx_PWMN_Start+0x82>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004250:	e013      	b.n	800427a <HAL_TIMEx_PWMN_Start+0xaa>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b04      	cmp	r3, #4
 8004256:	d104      	bne.n	8004262 <HAL_TIMEx_PWMN_Start+0x92>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004260:	e00b      	b.n	800427a <HAL_TIMEx_PWMN_Start+0xaa>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b08      	cmp	r3, #8
 8004266:	d104      	bne.n	8004272 <HAL_TIMEx_PWMN_Start+0xa2>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004270:	e003      	b.n	800427a <HAL_TIMEx_PWMN_Start+0xaa>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2202      	movs	r2, #2
 8004276:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2204      	movs	r2, #4
 8004280:	6839      	ldr	r1, [r7, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fa52 	bl	800472c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004296:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a25      	ldr	r2, [pc, #148]	; (8004334 <HAL_TIMEx_PWMN_Start+0x164>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d022      	beq.n	80042e8 <HAL_TIMEx_PWMN_Start+0x118>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042aa:	d01d      	beq.n	80042e8 <HAL_TIMEx_PWMN_Start+0x118>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a21      	ldr	r2, [pc, #132]	; (8004338 <HAL_TIMEx_PWMN_Start+0x168>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d018      	beq.n	80042e8 <HAL_TIMEx_PWMN_Start+0x118>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a20      	ldr	r2, [pc, #128]	; (800433c <HAL_TIMEx_PWMN_Start+0x16c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d013      	beq.n	80042e8 <HAL_TIMEx_PWMN_Start+0x118>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1e      	ldr	r2, [pc, #120]	; (8004340 <HAL_TIMEx_PWMN_Start+0x170>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00e      	beq.n	80042e8 <HAL_TIMEx_PWMN_Start+0x118>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1d      	ldr	r2, [pc, #116]	; (8004344 <HAL_TIMEx_PWMN_Start+0x174>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d009      	beq.n	80042e8 <HAL_TIMEx_PWMN_Start+0x118>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1b      	ldr	r2, [pc, #108]	; (8004348 <HAL_TIMEx_PWMN_Start+0x178>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d004      	beq.n	80042e8 <HAL_TIMEx_PWMN_Start+0x118>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1a      	ldr	r2, [pc, #104]	; (800434c <HAL_TIMEx_PWMN_Start+0x17c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d115      	bne.n	8004314 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	4b18      	ldr	r3, [pc, #96]	; (8004350 <HAL_TIMEx_PWMN_Start+0x180>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b06      	cmp	r3, #6
 80042f8:	d015      	beq.n	8004326 <HAL_TIMEx_PWMN_Start+0x156>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004300:	d011      	beq.n	8004326 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004312:	e008      	b.n	8004326 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	e000      	b.n	8004328 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004326:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40012c00 	.word	0x40012c00
 8004338:	40000400 	.word	0x40000400
 800433c:	40000800 	.word	0x40000800
 8004340:	40000c00 	.word	0x40000c00
 8004344:	40013400 	.word	0x40013400
 8004348:	40014000 	.word	0x40014000
 800434c:	40015000 	.word	0x40015000
 8004350:	00010007 	.word	0x00010007

08004354 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2200      	movs	r2, #0
 8004364:	6839      	ldr	r1, [r7, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f000 f9e0 	bl	800472c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6a1a      	ldr	r2, [r3, #32]
 8004372:	f241 1311 	movw	r3, #4369	; 0x1111
 8004376:	4013      	ands	r3, r2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10f      	bne.n	800439c <HAL_TIMEx_PWMN_Stop+0x48>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6a1a      	ldr	r2, [r3, #32]
 8004382:	f244 4344 	movw	r3, #17476	; 0x4444
 8004386:	4013      	ands	r3, r2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d107      	bne.n	800439c <HAL_TIMEx_PWMN_Stop+0x48>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800439a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6a1a      	ldr	r2, [r3, #32]
 80043a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80043a6:	4013      	ands	r3, r2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10f      	bne.n	80043cc <HAL_TIMEx_PWMN_Stop+0x78>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6a1a      	ldr	r2, [r3, #32]
 80043b2:	f244 4344 	movw	r3, #17476	; 0x4444
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d107      	bne.n	80043cc <HAL_TIMEx_PWMN_Stop+0x78>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0201 	bic.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d104      	bne.n	80043dc <HAL_TIMEx_PWMN_Stop+0x88>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043da:	e013      	b.n	8004404 <HAL_TIMEx_PWMN_Stop+0xb0>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d104      	bne.n	80043ec <HAL_TIMEx_PWMN_Stop+0x98>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043ea:	e00b      	b.n	8004404 <HAL_TIMEx_PWMN_Stop+0xb0>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d104      	bne.n	80043fc <HAL_TIMEx_PWMN_Stop+0xa8>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043fa:	e003      	b.n	8004404 <HAL_TIMEx_PWMN_Stop+0xb0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004424:	2302      	movs	r3, #2
 8004426:	e074      	b.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a34      	ldr	r2, [pc, #208]	; (8004520 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d009      	beq.n	8004466 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a33      	ldr	r2, [pc, #204]	; (8004524 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d004      	beq.n	8004466 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a31      	ldr	r2, [pc, #196]	; (8004528 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d108      	bne.n	8004478 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800446c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4313      	orrs	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800447e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a21      	ldr	r2, [pc, #132]	; (8004520 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d022      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a8:	d01d      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1f      	ldr	r2, [pc, #124]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d018      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1d      	ldr	r2, [pc, #116]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d013      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1c      	ldr	r2, [pc, #112]	; (8004534 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00e      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a15      	ldr	r2, [pc, #84]	; (8004524 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d009      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a18      	ldr	r2, [pc, #96]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a11      	ldr	r2, [pc, #68]	; (8004528 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d10c      	bne.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40012c00 	.word	0x40012c00
 8004524:	40013400 	.word	0x40013400
 8004528:	40015000 	.word	0x40015000
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	40000c00 	.word	0x40000c00
 8004538:	40014000 	.word	0x40014000

0800453c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004554:	2302      	movs	r3, #2
 8004556:	e096      	b.n	8004686 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4313      	orrs	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	041b      	lsls	r3, r3, #16
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a2f      	ldr	r2, [pc, #188]	; (8004694 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d009      	beq.n	80045f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a2d      	ldr	r2, [pc, #180]	; (8004698 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d004      	beq.n	80045f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a2c      	ldr	r2, [pc, #176]	; (800469c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d106      	bne.n	80045fe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a24      	ldr	r2, [pc, #144]	; (8004694 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d009      	beq.n	800461c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a22      	ldr	r2, [pc, #136]	; (8004698 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d004      	beq.n	800461c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a21      	ldr	r2, [pc, #132]	; (800469c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d12b      	bne.n	8004674 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	051b      	lsls	r3, r3, #20
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a11      	ldr	r2, [pc, #68]	; (8004694 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d009      	beq.n	8004666 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a10      	ldr	r2, [pc, #64]	; (8004698 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d004      	beq.n	8004666 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a0e      	ldr	r2, [pc, #56]	; (800469c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d106      	bne.n	8004674 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40012c00 	.word	0x40012c00
 8004698:	40013400 	.word	0x40013400
 800469c:	40015000 	.word	0x40015000

080046a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f003 031f 	and.w	r3, r3, #31
 800473e:	2204      	movs	r2, #4
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a1a      	ldr	r2, [r3, #32]
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	43db      	mvns	r3, r3
 800474e:	401a      	ands	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a1a      	ldr	r2, [r3, #32]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 031f 	and.w	r3, r3, #31
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	fa01 f303 	lsl.w	r3, r1, r3
 8004764:	431a      	orrs	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	621a      	str	r2, [r3, #32]
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b082      	sub	sp, #8
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e042      	b.n	800480e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7fc fc34 	bl	8001008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2224      	movs	r2, #36	; 0x24
 80047a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0201 	bic.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fc51 	bl	8005060 <UART_SetConfig>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e022      	b.n	800480e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 ff41 	bl	8005658 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0201 	orr.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 ffc8 	bl	800579c <UART_CheckIdleState>
 800480c:	4603      	mov	r3, r0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b08a      	sub	sp, #40	; 0x28
 800481a:	af02      	add	r7, sp, #8
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	603b      	str	r3, [r7, #0]
 8004822:	4613      	mov	r3, r2
 8004824:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482c:	2b20      	cmp	r3, #32
 800482e:	f040 8083 	bne.w	8004938 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <HAL_UART_Transmit+0x28>
 8004838:	88fb      	ldrh	r3, [r7, #6]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e07b      	b.n	800493a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_UART_Transmit+0x3a>
 800484c:	2302      	movs	r3, #2
 800484e:	e074      	b.n	800493a <HAL_UART_Transmit+0x124>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2221      	movs	r2, #33	; 0x21
 8004864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004868:	f7fc fdda 	bl	8001420 <HAL_GetTick>
 800486c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	88fa      	ldrh	r2, [r7, #6]
 8004872:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	88fa      	ldrh	r2, [r7, #6]
 800487a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004886:	d108      	bne.n	800489a <HAL_UART_Transmit+0x84>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d104      	bne.n	800489a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004890:	2300      	movs	r3, #0
 8004892:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	61bb      	str	r3, [r7, #24]
 8004898:	e003      	b.n	80048a2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80048aa:	e02c      	b.n	8004906 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2200      	movs	r2, #0
 80048b4:	2180      	movs	r1, #128	; 0x80
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 ffbb 	bl	8005832 <UART_WaitOnFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e039      	b.n	800493a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10b      	bne.n	80048e4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	3302      	adds	r3, #2
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	e007      	b.n	80048f4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	781a      	ldrb	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	3301      	adds	r3, #1
 80048f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1cc      	bne.n	80048ac <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2200      	movs	r2, #0
 800491a:	2140      	movs	r1, #64	; 0x40
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 ff88 	bl	8005832 <UART_WaitOnFlagUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e006      	b.n	800493a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	e000      	b.n	800493a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004938:	2302      	movs	r3, #2
  }
}
 800493a:	4618      	mov	r0, r3
 800493c:	3720      	adds	r7, #32
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08a      	sub	sp, #40	; 0x28
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	4613      	mov	r3, r2
 8004950:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	2b20      	cmp	r3, #32
 800495a:	d142      	bne.n	80049e2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_UART_Receive_IT+0x24>
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e03b      	b.n	80049e4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_UART_Receive_IT+0x36>
 8004976:	2302      	movs	r3, #2
 8004978:	e034      	b.n	80049e4 <HAL_UART_Receive_IT+0xa0>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a17      	ldr	r2, [pc, #92]	; (80049ec <HAL_UART_Receive_IT+0xa8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d01f      	beq.n	80049d2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d018      	beq.n	80049d2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	e853 3f00 	ldrex	r3, [r3]
 80049ac:	613b      	str	r3, [r7, #16]
   return(result);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	623b      	str	r3, [r7, #32]
 80049c0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c2:	69f9      	ldr	r1, [r7, #28]
 80049c4:	6a3a      	ldr	r2, [r7, #32]
 80049c6:	e841 2300 	strex	r3, r2, [r1]
 80049ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1e6      	bne.n	80049a0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	461a      	mov	r2, r3
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 fff3 	bl	80059c4 <UART_Start_Receive_IT>
 80049de:	4603      	mov	r3, r0
 80049e0:	e000      	b.n	80049e4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80049e2:	2302      	movs	r3, #2
  }
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3728      	adds	r7, #40	; 0x28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40008000 	.word	0x40008000

080049f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b0ba      	sub	sp, #232	; 0xe8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004a1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a1e:	4013      	ands	r3, r2
 8004a20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d11b      	bne.n	8004a64 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a30:	f003 0320 	and.w	r3, r3, #32
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d015      	beq.n	8004a64 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d105      	bne.n	8004a50 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d009      	beq.n	8004a64 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 82d6 	beq.w	8005006 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	4798      	blx	r3
      }
      return;
 8004a62:	e2d0      	b.n	8005006 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 811f 	beq.w	8004cac <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004a6e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004a72:	4b8b      	ldr	r3, [pc, #556]	; (8004ca0 <HAL_UART_IRQHandler+0x2b0>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004a7a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a7e:	4b89      	ldr	r3, [pc, #548]	; (8004ca4 <HAL_UART_IRQHandler+0x2b4>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 8112 	beq.w	8004cac <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d011      	beq.n	8004ab8 <HAL_UART_IRQHandler+0xc8>
 8004a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00b      	beq.n	8004ab8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aae:	f043 0201 	orr.w	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d011      	beq.n	8004ae8 <HAL_UART_IRQHandler+0xf8>
 8004ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00b      	beq.n	8004ae8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ade:	f043 0204 	orr.w	r2, r3, #4
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d011      	beq.n	8004b18 <HAL_UART_IRQHandler+0x128>
 8004af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00b      	beq.n	8004b18 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2204      	movs	r2, #4
 8004b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b0e:	f043 0202 	orr.w	r2, r3, #2
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d017      	beq.n	8004b54 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d105      	bne.n	8004b3c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004b30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004b34:	4b5a      	ldr	r3, [pc, #360]	; (8004ca0 <HAL_UART_IRQHandler+0x2b0>)
 8004b36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00b      	beq.n	8004b54 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2208      	movs	r2, #8
 8004b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b4a:	f043 0208 	orr.w	r2, r3, #8
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d012      	beq.n	8004b86 <HAL_UART_IRQHandler+0x196>
 8004b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00c      	beq.n	8004b86 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b7c:	f043 0220 	orr.w	r2, r3, #32
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 823c 	beq.w	800500a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d013      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d105      	bne.n	8004bb6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d007      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bda:	2b40      	cmp	r3, #64	; 0x40
 8004bdc:	d005      	beq.n	8004bea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004be2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d04f      	beq.n	8004c8a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f001 f814 	bl	8005c18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfa:	2b40      	cmp	r3, #64	; 0x40
 8004bfc:	d141      	bne.n	8004c82 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3308      	adds	r3, #8
 8004c04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3308      	adds	r3, #8
 8004c26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1d9      	bne.n	8004bfe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d013      	beq.n	8004c7a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c56:	4a14      	ldr	r2, [pc, #80]	; (8004ca8 <HAL_UART_IRQHandler+0x2b8>)
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fc fd74 	bl	800174c <HAL_DMA_Abort_IT>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d017      	beq.n	8004c9a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004c74:	4610      	mov	r0, r2
 8004c76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c78:	e00f      	b.n	8004c9a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f9da 	bl	8005034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c80:	e00b      	b.n	8004c9a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f9d6 	bl	8005034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c88:	e007      	b.n	8004c9a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f9d2 	bl	8005034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004c98:	e1b7      	b.n	800500a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c9a:	bf00      	nop
    return;
 8004c9c:	e1b5      	b.n	800500a <HAL_UART_IRQHandler+0x61a>
 8004c9e:	bf00      	nop
 8004ca0:	10000001 	.word	0x10000001
 8004ca4:	04000120 	.word	0x04000120
 8004ca8:	08005ce5 	.word	0x08005ce5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	f040 814a 	bne.w	8004f4a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cba:	f003 0310 	and.w	r3, r3, #16
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 8143 	beq.w	8004f4a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc8:	f003 0310 	and.w	r3, r3, #16
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 813c 	beq.w	8004f4a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2210      	movs	r2, #16
 8004cd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce4:	2b40      	cmp	r3, #64	; 0x40
 8004ce6:	f040 80b5 	bne.w	8004e54 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cf6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 8187 	beq.w	800500e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	f080 817f 	bcs.w	800500e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f040 8086 	bne.w	8004e38 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	461a      	mov	r2, r3
 8004d52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d5a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1da      	bne.n	8004d2c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d88:	f023 0301 	bic.w	r3, r3, #1
 8004d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3308      	adds	r3, #8
 8004d96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004da2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e1      	bne.n	8004d76 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3308      	adds	r3, #8
 8004db8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004dd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004dd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ddc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1e3      	bne.n	8004db2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e00:	e853 3f00 	ldrex	r3, [r3]
 8004e04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e08:	f023 0310 	bic.w	r3, r3, #16
 8004e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e1c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e4      	bne.n	8004df8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fc fc31 	bl	800169a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f8fb 	bl	8005048 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e52:	e0dc      	b.n	800500e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 80ce 	beq.w	8005012 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004e76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 80c9 	beq.w	8005012 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ea4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eaa:	e841 2300 	strex	r3, r2, [r1]
 8004eae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d1e4      	bne.n	8004e80 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3308      	adds	r3, #8
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	e853 3f00 	ldrex	r3, [r3]
 8004ec4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ecc:	f023 0301 	bic.w	r3, r3, #1
 8004ed0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3308      	adds	r3, #8
 8004eda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ede:	633a      	str	r2, [r7, #48]	; 0x30
 8004ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e1      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0310 	bic.w	r3, r3, #16
 8004f1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f28:	61fb      	str	r3, [r7, #28]
 8004f2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2c:	69b9      	ldr	r1, [r7, #24]
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	e841 2300 	strex	r3, r2, [r1]
 8004f34:	617b      	str	r3, [r7, #20]
   return(result);
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e4      	bne.n	8004f06 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f40:	4619      	mov	r1, r3
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f880 	bl	8005048 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f48:	e063      	b.n	8005012 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00e      	beq.n	8004f74 <HAL_UART_IRQHandler+0x584>
 8004f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d008      	beq.n	8004f74 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f001 fb57 	bl	8006620 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f72:	e051      	b.n	8005018 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d014      	beq.n	8004faa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d105      	bne.n	8004f98 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d03a      	beq.n	8005016 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	4798      	blx	r3
    }
    return;
 8004fa8:	e035      	b.n	8005016 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d009      	beq.n	8004fca <HAL_UART_IRQHandler+0x5da>
 8004fb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fea4 	bl	8005d10 <UART_EndTransmit_IT>
    return;
 8004fc8:	e026      	b.n	8005018 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d009      	beq.n	8004fea <HAL_UART_IRQHandler+0x5fa>
 8004fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f001 fb30 	bl	8006648 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fe8:	e016      	b.n	8005018 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d010      	beq.n	8005018 <HAL_UART_IRQHandler+0x628>
 8004ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	da0c      	bge.n	8005018 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f001 fb18 	bl	8006634 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005004:	e008      	b.n	8005018 <HAL_UART_IRQHandler+0x628>
      return;
 8005006:	bf00      	nop
 8005008:	e006      	b.n	8005018 <HAL_UART_IRQHandler+0x628>
    return;
 800500a:	bf00      	nop
 800500c:	e004      	b.n	8005018 <HAL_UART_IRQHandler+0x628>
      return;
 800500e:	bf00      	nop
 8005010:	e002      	b.n	8005018 <HAL_UART_IRQHandler+0x628>
      return;
 8005012:	bf00      	nop
 8005014:	e000      	b.n	8005018 <HAL_UART_IRQHandler+0x628>
    return;
 8005016:	bf00      	nop
  }
}
 8005018:	37e8      	adds	r7, #232	; 0xe8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop

08005020 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	460b      	mov	r3, r1
 8005052:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005064:	b08c      	sub	sp, #48	; 0x30
 8005066:	af00      	add	r7, sp, #0
 8005068:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	431a      	orrs	r2, r3
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	431a      	orrs	r2, r3
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	4313      	orrs	r3, r2
 8005086:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4baa      	ldr	r3, [pc, #680]	; (8005338 <UART_SetConfig+0x2d8>)
 8005090:	4013      	ands	r3, r2
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	6812      	ldr	r2, [r2, #0]
 8005096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005098:	430b      	orrs	r3, r1
 800509a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a9f      	ldr	r2, [pc, #636]	; (800533c <UART_SetConfig+0x2dc>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d004      	beq.n	80050cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c8:	4313      	orrs	r3, r2
 80050ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80050d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	6812      	ldr	r2, [r2, #0]
 80050de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050e0:	430b      	orrs	r3, r1
 80050e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	f023 010f 	bic.w	r1, r3, #15
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a90      	ldr	r2, [pc, #576]	; (8005340 <UART_SetConfig+0x2e0>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d125      	bne.n	8005150 <UART_SetConfig+0xf0>
 8005104:	4b8f      	ldr	r3, [pc, #572]	; (8005344 <UART_SetConfig+0x2e4>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b03      	cmp	r3, #3
 8005110:	d81a      	bhi.n	8005148 <UART_SetConfig+0xe8>
 8005112:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <UART_SetConfig+0xb8>)
 8005114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005118:	08005129 	.word	0x08005129
 800511c:	08005139 	.word	0x08005139
 8005120:	08005131 	.word	0x08005131
 8005124:	08005141 	.word	0x08005141
 8005128:	2301      	movs	r3, #1
 800512a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800512e:	e116      	b.n	800535e <UART_SetConfig+0x2fe>
 8005130:	2302      	movs	r3, #2
 8005132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005136:	e112      	b.n	800535e <UART_SetConfig+0x2fe>
 8005138:	2304      	movs	r3, #4
 800513a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800513e:	e10e      	b.n	800535e <UART_SetConfig+0x2fe>
 8005140:	2308      	movs	r3, #8
 8005142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005146:	e10a      	b.n	800535e <UART_SetConfig+0x2fe>
 8005148:	2310      	movs	r3, #16
 800514a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800514e:	e106      	b.n	800535e <UART_SetConfig+0x2fe>
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a7c      	ldr	r2, [pc, #496]	; (8005348 <UART_SetConfig+0x2e8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d138      	bne.n	80051cc <UART_SetConfig+0x16c>
 800515a:	4b7a      	ldr	r3, [pc, #488]	; (8005344 <UART_SetConfig+0x2e4>)
 800515c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005160:	f003 030c 	and.w	r3, r3, #12
 8005164:	2b0c      	cmp	r3, #12
 8005166:	d82d      	bhi.n	80051c4 <UART_SetConfig+0x164>
 8005168:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <UART_SetConfig+0x110>)
 800516a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516e:	bf00      	nop
 8005170:	080051a5 	.word	0x080051a5
 8005174:	080051c5 	.word	0x080051c5
 8005178:	080051c5 	.word	0x080051c5
 800517c:	080051c5 	.word	0x080051c5
 8005180:	080051b5 	.word	0x080051b5
 8005184:	080051c5 	.word	0x080051c5
 8005188:	080051c5 	.word	0x080051c5
 800518c:	080051c5 	.word	0x080051c5
 8005190:	080051ad 	.word	0x080051ad
 8005194:	080051c5 	.word	0x080051c5
 8005198:	080051c5 	.word	0x080051c5
 800519c:	080051c5 	.word	0x080051c5
 80051a0:	080051bd 	.word	0x080051bd
 80051a4:	2300      	movs	r3, #0
 80051a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051aa:	e0d8      	b.n	800535e <UART_SetConfig+0x2fe>
 80051ac:	2302      	movs	r3, #2
 80051ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051b2:	e0d4      	b.n	800535e <UART_SetConfig+0x2fe>
 80051b4:	2304      	movs	r3, #4
 80051b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ba:	e0d0      	b.n	800535e <UART_SetConfig+0x2fe>
 80051bc:	2308      	movs	r3, #8
 80051be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051c2:	e0cc      	b.n	800535e <UART_SetConfig+0x2fe>
 80051c4:	2310      	movs	r3, #16
 80051c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ca:	e0c8      	b.n	800535e <UART_SetConfig+0x2fe>
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a5e      	ldr	r2, [pc, #376]	; (800534c <UART_SetConfig+0x2ec>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d125      	bne.n	8005222 <UART_SetConfig+0x1c2>
 80051d6:	4b5b      	ldr	r3, [pc, #364]	; (8005344 <UART_SetConfig+0x2e4>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051e0:	2b30      	cmp	r3, #48	; 0x30
 80051e2:	d016      	beq.n	8005212 <UART_SetConfig+0x1b2>
 80051e4:	2b30      	cmp	r3, #48	; 0x30
 80051e6:	d818      	bhi.n	800521a <UART_SetConfig+0x1ba>
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d00a      	beq.n	8005202 <UART_SetConfig+0x1a2>
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d814      	bhi.n	800521a <UART_SetConfig+0x1ba>
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <UART_SetConfig+0x19a>
 80051f4:	2b10      	cmp	r3, #16
 80051f6:	d008      	beq.n	800520a <UART_SetConfig+0x1aa>
 80051f8:	e00f      	b.n	800521a <UART_SetConfig+0x1ba>
 80051fa:	2300      	movs	r3, #0
 80051fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005200:	e0ad      	b.n	800535e <UART_SetConfig+0x2fe>
 8005202:	2302      	movs	r3, #2
 8005204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005208:	e0a9      	b.n	800535e <UART_SetConfig+0x2fe>
 800520a:	2304      	movs	r3, #4
 800520c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005210:	e0a5      	b.n	800535e <UART_SetConfig+0x2fe>
 8005212:	2308      	movs	r3, #8
 8005214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005218:	e0a1      	b.n	800535e <UART_SetConfig+0x2fe>
 800521a:	2310      	movs	r3, #16
 800521c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005220:	e09d      	b.n	800535e <UART_SetConfig+0x2fe>
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a4a      	ldr	r2, [pc, #296]	; (8005350 <UART_SetConfig+0x2f0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d125      	bne.n	8005278 <UART_SetConfig+0x218>
 800522c:	4b45      	ldr	r3, [pc, #276]	; (8005344 <UART_SetConfig+0x2e4>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005232:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005236:	2bc0      	cmp	r3, #192	; 0xc0
 8005238:	d016      	beq.n	8005268 <UART_SetConfig+0x208>
 800523a:	2bc0      	cmp	r3, #192	; 0xc0
 800523c:	d818      	bhi.n	8005270 <UART_SetConfig+0x210>
 800523e:	2b80      	cmp	r3, #128	; 0x80
 8005240:	d00a      	beq.n	8005258 <UART_SetConfig+0x1f8>
 8005242:	2b80      	cmp	r3, #128	; 0x80
 8005244:	d814      	bhi.n	8005270 <UART_SetConfig+0x210>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <UART_SetConfig+0x1f0>
 800524a:	2b40      	cmp	r3, #64	; 0x40
 800524c:	d008      	beq.n	8005260 <UART_SetConfig+0x200>
 800524e:	e00f      	b.n	8005270 <UART_SetConfig+0x210>
 8005250:	2300      	movs	r3, #0
 8005252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005256:	e082      	b.n	800535e <UART_SetConfig+0x2fe>
 8005258:	2302      	movs	r3, #2
 800525a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525e:	e07e      	b.n	800535e <UART_SetConfig+0x2fe>
 8005260:	2304      	movs	r3, #4
 8005262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005266:	e07a      	b.n	800535e <UART_SetConfig+0x2fe>
 8005268:	2308      	movs	r3, #8
 800526a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800526e:	e076      	b.n	800535e <UART_SetConfig+0x2fe>
 8005270:	2310      	movs	r3, #16
 8005272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005276:	e072      	b.n	800535e <UART_SetConfig+0x2fe>
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a35      	ldr	r2, [pc, #212]	; (8005354 <UART_SetConfig+0x2f4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d12a      	bne.n	80052d8 <UART_SetConfig+0x278>
 8005282:	4b30      	ldr	r3, [pc, #192]	; (8005344 <UART_SetConfig+0x2e4>)
 8005284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800528c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005290:	d01a      	beq.n	80052c8 <UART_SetConfig+0x268>
 8005292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005296:	d81b      	bhi.n	80052d0 <UART_SetConfig+0x270>
 8005298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800529c:	d00c      	beq.n	80052b8 <UART_SetConfig+0x258>
 800529e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a2:	d815      	bhi.n	80052d0 <UART_SetConfig+0x270>
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <UART_SetConfig+0x250>
 80052a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ac:	d008      	beq.n	80052c0 <UART_SetConfig+0x260>
 80052ae:	e00f      	b.n	80052d0 <UART_SetConfig+0x270>
 80052b0:	2300      	movs	r3, #0
 80052b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052b6:	e052      	b.n	800535e <UART_SetConfig+0x2fe>
 80052b8:	2302      	movs	r3, #2
 80052ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052be:	e04e      	b.n	800535e <UART_SetConfig+0x2fe>
 80052c0:	2304      	movs	r3, #4
 80052c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052c6:	e04a      	b.n	800535e <UART_SetConfig+0x2fe>
 80052c8:	2308      	movs	r3, #8
 80052ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ce:	e046      	b.n	800535e <UART_SetConfig+0x2fe>
 80052d0:	2310      	movs	r3, #16
 80052d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052d6:	e042      	b.n	800535e <UART_SetConfig+0x2fe>
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a17      	ldr	r2, [pc, #92]	; (800533c <UART_SetConfig+0x2dc>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d13a      	bne.n	8005358 <UART_SetConfig+0x2f8>
 80052e2:	4b18      	ldr	r3, [pc, #96]	; (8005344 <UART_SetConfig+0x2e4>)
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052f0:	d01a      	beq.n	8005328 <UART_SetConfig+0x2c8>
 80052f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052f6:	d81b      	bhi.n	8005330 <UART_SetConfig+0x2d0>
 80052f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052fc:	d00c      	beq.n	8005318 <UART_SetConfig+0x2b8>
 80052fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005302:	d815      	bhi.n	8005330 <UART_SetConfig+0x2d0>
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <UART_SetConfig+0x2b0>
 8005308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530c:	d008      	beq.n	8005320 <UART_SetConfig+0x2c0>
 800530e:	e00f      	b.n	8005330 <UART_SetConfig+0x2d0>
 8005310:	2300      	movs	r3, #0
 8005312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005316:	e022      	b.n	800535e <UART_SetConfig+0x2fe>
 8005318:	2302      	movs	r3, #2
 800531a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800531e:	e01e      	b.n	800535e <UART_SetConfig+0x2fe>
 8005320:	2304      	movs	r3, #4
 8005322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005326:	e01a      	b.n	800535e <UART_SetConfig+0x2fe>
 8005328:	2308      	movs	r3, #8
 800532a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800532e:	e016      	b.n	800535e <UART_SetConfig+0x2fe>
 8005330:	2310      	movs	r3, #16
 8005332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005336:	e012      	b.n	800535e <UART_SetConfig+0x2fe>
 8005338:	cfff69f3 	.word	0xcfff69f3
 800533c:	40008000 	.word	0x40008000
 8005340:	40013800 	.word	0x40013800
 8005344:	40021000 	.word	0x40021000
 8005348:	40004400 	.word	0x40004400
 800534c:	40004800 	.word	0x40004800
 8005350:	40004c00 	.word	0x40004c00
 8005354:	40005000 	.word	0x40005000
 8005358:	2310      	movs	r3, #16
 800535a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4aae      	ldr	r2, [pc, #696]	; (800561c <UART_SetConfig+0x5bc>)
 8005364:	4293      	cmp	r3, r2
 8005366:	f040 8097 	bne.w	8005498 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800536a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800536e:	2b08      	cmp	r3, #8
 8005370:	d823      	bhi.n	80053ba <UART_SetConfig+0x35a>
 8005372:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <UART_SetConfig+0x318>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	0800539d 	.word	0x0800539d
 800537c:	080053bb 	.word	0x080053bb
 8005380:	080053a5 	.word	0x080053a5
 8005384:	080053bb 	.word	0x080053bb
 8005388:	080053ab 	.word	0x080053ab
 800538c:	080053bb 	.word	0x080053bb
 8005390:	080053bb 	.word	0x080053bb
 8005394:	080053bb 	.word	0x080053bb
 8005398:	080053b3 	.word	0x080053b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800539c:	f7fd f966 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 80053a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053a2:	e010      	b.n	80053c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a4:	4b9e      	ldr	r3, [pc, #632]	; (8005620 <UART_SetConfig+0x5c0>)
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053a8:	e00d      	b.n	80053c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053aa:	f7fd f8f1 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 80053ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053b0:	e009      	b.n	80053c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053b8:	e005      	b.n	80053c6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80053c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8130 	beq.w	800562e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	4a94      	ldr	r2, [pc, #592]	; (8005624 <UART_SetConfig+0x5c4>)
 80053d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053d8:	461a      	mov	r2, r3
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	4613      	mov	r3, r2
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	4413      	add	r3, r2
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d305      	bcc.n	80053fe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d903      	bls.n	8005406 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005404:	e113      	b.n	800562e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	2200      	movs	r2, #0
 800540a:	60bb      	str	r3, [r7, #8]
 800540c:	60fa      	str	r2, [r7, #12]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	4a84      	ldr	r2, [pc, #528]	; (8005624 <UART_SetConfig+0x5c4>)
 8005414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005418:	b29b      	uxth	r3, r3
 800541a:	2200      	movs	r2, #0
 800541c:	603b      	str	r3, [r7, #0]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005424:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005428:	f7fa ff5a 	bl	80002e0 <__aeabi_uldivmod>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	4610      	mov	r0, r2
 8005432:	4619      	mov	r1, r3
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	f04f 0300 	mov.w	r3, #0
 800543c:	020b      	lsls	r3, r1, #8
 800543e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005442:	0202      	lsls	r2, r0, #8
 8005444:	6979      	ldr	r1, [r7, #20]
 8005446:	6849      	ldr	r1, [r1, #4]
 8005448:	0849      	lsrs	r1, r1, #1
 800544a:	2000      	movs	r0, #0
 800544c:	460c      	mov	r4, r1
 800544e:	4605      	mov	r5, r0
 8005450:	eb12 0804 	adds.w	r8, r2, r4
 8005454:	eb43 0905 	adc.w	r9, r3, r5
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	469a      	mov	sl, r3
 8005460:	4693      	mov	fp, r2
 8005462:	4652      	mov	r2, sl
 8005464:	465b      	mov	r3, fp
 8005466:	4640      	mov	r0, r8
 8005468:	4649      	mov	r1, r9
 800546a:	f7fa ff39 	bl	80002e0 <__aeabi_uldivmod>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	4613      	mov	r3, r2
 8005474:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800547c:	d308      	bcc.n	8005490 <UART_SetConfig+0x430>
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005484:	d204      	bcs.n	8005490 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6a3a      	ldr	r2, [r7, #32]
 800548c:	60da      	str	r2, [r3, #12]
 800548e:	e0ce      	b.n	800562e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005496:	e0ca      	b.n	800562e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a0:	d166      	bne.n	8005570 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80054a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d827      	bhi.n	80054fa <UART_SetConfig+0x49a>
 80054aa:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <UART_SetConfig+0x450>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054d5 	.word	0x080054d5
 80054b4:	080054dd 	.word	0x080054dd
 80054b8:	080054e5 	.word	0x080054e5
 80054bc:	080054fb 	.word	0x080054fb
 80054c0:	080054eb 	.word	0x080054eb
 80054c4:	080054fb 	.word	0x080054fb
 80054c8:	080054fb 	.word	0x080054fb
 80054cc:	080054fb 	.word	0x080054fb
 80054d0:	080054f3 	.word	0x080054f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d4:	f7fd f8ca 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 80054d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054da:	e014      	b.n	8005506 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054dc:	f7fd f8dc 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 80054e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054e2:	e010      	b.n	8005506 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054e4:	4b4e      	ldr	r3, [pc, #312]	; (8005620 <UART_SetConfig+0x5c0>)
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054e8:	e00d      	b.n	8005506 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ea:	f7fd f851 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 80054ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054f0:	e009      	b.n	8005506 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054f8:	e005      	b.n	8005506 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005504:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 8090 	beq.w	800562e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	4a44      	ldr	r2, [pc, #272]	; (8005624 <UART_SetConfig+0x5c4>)
 8005514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005518:	461a      	mov	r2, r3
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005520:	005a      	lsls	r2, r3, #1
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	085b      	lsrs	r3, r3, #1
 8005528:	441a      	add	r2, r3
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005532:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	2b0f      	cmp	r3, #15
 8005538:	d916      	bls.n	8005568 <UART_SetConfig+0x508>
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005540:	d212      	bcs.n	8005568 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	b29b      	uxth	r3, r3
 8005546:	f023 030f 	bic.w	r3, r3, #15
 800554a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	085b      	lsrs	r3, r3, #1
 8005550:	b29b      	uxth	r3, r3
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	b29a      	uxth	r2, r3
 8005558:	8bfb      	ldrh	r3, [r7, #30]
 800555a:	4313      	orrs	r3, r2
 800555c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	8bfa      	ldrh	r2, [r7, #30]
 8005564:	60da      	str	r2, [r3, #12]
 8005566:	e062      	b.n	800562e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800556e:	e05e      	b.n	800562e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005570:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005574:	2b08      	cmp	r3, #8
 8005576:	d828      	bhi.n	80055ca <UART_SetConfig+0x56a>
 8005578:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <UART_SetConfig+0x520>)
 800557a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557e:	bf00      	nop
 8005580:	080055a5 	.word	0x080055a5
 8005584:	080055ad 	.word	0x080055ad
 8005588:	080055b5 	.word	0x080055b5
 800558c:	080055cb 	.word	0x080055cb
 8005590:	080055bb 	.word	0x080055bb
 8005594:	080055cb 	.word	0x080055cb
 8005598:	080055cb 	.word	0x080055cb
 800559c:	080055cb 	.word	0x080055cb
 80055a0:	080055c3 	.word	0x080055c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055a4:	f7fd f862 	bl	800266c <HAL_RCC_GetPCLK1Freq>
 80055a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055aa:	e014      	b.n	80055d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055ac:	f7fd f874 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 80055b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055b2:	e010      	b.n	80055d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055b4:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <UART_SetConfig+0x5c0>)
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055b8:	e00d      	b.n	80055d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ba:	f7fc ffe9 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 80055be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055c0:	e009      	b.n	80055d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80055c8:	e005      	b.n	80055d6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80055d4:	bf00      	nop
    }

    if (pclk != 0U)
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d028      	beq.n	800562e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	4a10      	ldr	r2, [pc, #64]	; (8005624 <UART_SetConfig+0x5c4>)
 80055e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055e6:	461a      	mov	r2, r3
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	085b      	lsrs	r3, r3, #1
 80055f4:	441a      	add	r2, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	2b0f      	cmp	r3, #15
 8005604:	d910      	bls.n	8005628 <UART_SetConfig+0x5c8>
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800560c:	d20c      	bcs.n	8005628 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	b29a      	uxth	r2, r3
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	60da      	str	r2, [r3, #12]
 8005618:	e009      	b.n	800562e <UART_SetConfig+0x5ce>
 800561a:	bf00      	nop
 800561c:	40008000 	.word	0x40008000
 8005620:	00f42400 	.word	0x00f42400
 8005624:	080081c4 	.word	0x080081c4
      }
      else
      {
        ret = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2201      	movs	r2, #1
 8005632:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2201      	movs	r2, #1
 800563a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2200      	movs	r2, #0
 8005642:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2200      	movs	r2, #0
 8005648:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800564a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800564e:	4618      	mov	r0, r3
 8005650:	3730      	adds	r7, #48	; 0x30
 8005652:	46bd      	mov	sp, r7
 8005654:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00a      	beq.n	800570a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01a      	beq.n	800576e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005756:	d10a      	bne.n	800576e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	605a      	str	r2, [r3, #4]
  }
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af02      	add	r7, sp, #8
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057ac:	f7fb fe38 	bl	8001420 <HAL_GetTick>
 80057b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d10e      	bne.n	80057de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f82f 	bl	8005832 <UART_WaitOnFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e025      	b.n	800582a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d10e      	bne.n	800580a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f819 	bl	8005832 <UART_WaitOnFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e00f      	b.n	800582a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2220      	movs	r2, #32
 8005816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b09c      	sub	sp, #112	; 0x70
 8005836:	af00      	add	r7, sp, #0
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	603b      	str	r3, [r7, #0]
 800583e:	4613      	mov	r3, r2
 8005840:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005842:	e0a9      	b.n	8005998 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	f000 80a5 	beq.w	8005998 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584e:	f7fb fde7 	bl	8001420 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800585a:	429a      	cmp	r2, r3
 800585c:	d302      	bcc.n	8005864 <UART_WaitOnFlagUntilTimeout+0x32>
 800585e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005860:	2b00      	cmp	r3, #0
 8005862:	d140      	bne.n	80058e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005874:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005878:	667b      	str	r3, [r7, #100]	; 0x64
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005882:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005884:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005888:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e6      	bne.n	8005864 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3308      	adds	r3, #8
 800589c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	f023 0301 	bic.w	r3, r3, #1
 80058ac:	663b      	str	r3, [r7, #96]	; 0x60
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3308      	adds	r3, #8
 80058b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80058b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80058b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80058c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e5      	bne.n	8005896 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e069      	b.n	80059ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d051      	beq.n	8005998 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005902:	d149      	bne.n	8005998 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800590c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	e853 3f00 	ldrex	r3, [r3]
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005922:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592c:	637b      	str	r3, [r7, #52]	; 0x34
 800592e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005930:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005934:	e841 2300 	strex	r3, r2, [r1]
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1e6      	bne.n	800590e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3308      	adds	r3, #8
 8005946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	e853 3f00 	ldrex	r3, [r3]
 800594e:	613b      	str	r3, [r7, #16]
   return(result);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f023 0301 	bic.w	r3, r3, #1
 8005956:	66bb      	str	r3, [r7, #104]	; 0x68
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3308      	adds	r3, #8
 800595e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005960:	623a      	str	r2, [r7, #32]
 8005962:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005964:	69f9      	ldr	r1, [r7, #28]
 8005966:	6a3a      	ldr	r2, [r7, #32]
 8005968:	e841 2300 	strex	r3, r2, [r1]
 800596c:	61bb      	str	r3, [r7, #24]
   return(result);
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1e5      	bne.n	8005940 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2220      	movs	r2, #32
 8005978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2220      	movs	r2, #32
 8005980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e010      	b.n	80059ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	69da      	ldr	r2, [r3, #28]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	4013      	ands	r3, r2
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	bf0c      	ite	eq
 80059a8:	2301      	moveq	r3, #1
 80059aa:	2300      	movne	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	f43f af46 	beq.w	8005844 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3770      	adds	r7, #112	; 0x70
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b0a3      	sub	sp, #140	; 0x8c
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	4613      	mov	r3, r2
 80059d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	88fa      	ldrh	r2, [r7, #6]
 80059dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	88fa      	ldrh	r2, [r7, #6]
 80059e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f6:	d10e      	bne.n	8005a16 <UART_Start_Receive_IT+0x52>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d105      	bne.n	8005a0c <UART_Start_Receive_IT+0x48>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a0a:	e02d      	b.n	8005a68 <UART_Start_Receive_IT+0xa4>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	22ff      	movs	r2, #255	; 0xff
 8005a10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a14:	e028      	b.n	8005a68 <UART_Start_Receive_IT+0xa4>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10d      	bne.n	8005a3a <UART_Start_Receive_IT+0x76>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d104      	bne.n	8005a30 <UART_Start_Receive_IT+0x6c>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	22ff      	movs	r2, #255	; 0xff
 8005a2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a2e:	e01b      	b.n	8005a68 <UART_Start_Receive_IT+0xa4>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	227f      	movs	r2, #127	; 0x7f
 8005a34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a38:	e016      	b.n	8005a68 <UART_Start_Receive_IT+0xa4>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a42:	d10d      	bne.n	8005a60 <UART_Start_Receive_IT+0x9c>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <UART_Start_Receive_IT+0x92>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	227f      	movs	r2, #127	; 0x7f
 8005a50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a54:	e008      	b.n	8005a68 <UART_Start_Receive_IT+0xa4>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	223f      	movs	r2, #63	; 0x3f
 8005a5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a5e:	e003      	b.n	8005a68 <UART_Start_Receive_IT+0xa4>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2222      	movs	r2, #34	; 0x22
 8005a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a82:	e853 3f00 	ldrex	r3, [r3]
 8005a86:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a8a:	f043 0301 	orr.w	r3, r3, #1
 8005a8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3308      	adds	r3, #8
 8005a98:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005a9c:	673a      	str	r2, [r7, #112]	; 0x70
 8005a9e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005aa2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005aa4:	e841 2300 	strex	r3, r2, [r1]
 8005aa8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005aaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e3      	bne.n	8005a78 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ab8:	d153      	bne.n	8005b62 <UART_Start_Receive_IT+0x19e>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005ac0:	88fa      	ldrh	r2, [r7, #6]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d34d      	bcc.n	8005b62 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ace:	d107      	bne.n	8005ae0 <UART_Start_Receive_IT+0x11c>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d103      	bne.n	8005ae0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4a4b      	ldr	r2, [pc, #300]	; (8005c08 <UART_Start_Receive_IT+0x244>)
 8005adc:	671a      	str	r2, [r3, #112]	; 0x70
 8005ade:	e002      	b.n	8005ae6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4a4a      	ldr	r2, [pc, #296]	; (8005c0c <UART_Start_Receive_IT+0x248>)
 8005ae4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d01a      	beq.n	8005b2c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005afe:	e853 3f00 	ldrex	r3, [r3]
 8005b02:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	461a      	mov	r2, r3
 8005b14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b1a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b20:	e841 2300 	strex	r3, r2, [r1]
 8005b24:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e4      	bne.n	8005af6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3308      	adds	r3, #8
 8005b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b36:	e853 3f00 	ldrex	r3, [r3]
 8005b3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3308      	adds	r3, #8
 8005b4a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005b4c:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b4e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b54:	e841 2300 	strex	r3, r2, [r1]
 8005b58:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e5      	bne.n	8005b2c <UART_Start_Receive_IT+0x168>
 8005b60:	e04a      	b.n	8005bf8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6a:	d107      	bne.n	8005b7c <UART_Start_Receive_IT+0x1b8>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d103      	bne.n	8005b7c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4a26      	ldr	r2, [pc, #152]	; (8005c10 <UART_Start_Receive_IT+0x24c>)
 8005b78:	671a      	str	r2, [r3, #112]	; 0x70
 8005b7a:	e002      	b.n	8005b82 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4a25      	ldr	r2, [pc, #148]	; (8005c14 <UART_Start_Receive_IT+0x250>)
 8005b80:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d019      	beq.n	8005bc6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	e853 3f00 	ldrex	r3, [r3]
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005ba6:	677b      	str	r3, [r7, #116]	; 0x74
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	461a      	mov	r2, r3
 8005bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bb8:	e841 2300 	strex	r3, r2, [r1]
 8005bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1e6      	bne.n	8005b92 <UART_Start_Receive_IT+0x1ce>
 8005bc4:	e018      	b.n	8005bf8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f043 0320 	orr.w	r3, r3, #32
 8005bda:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	461a      	mov	r2, r3
 8005be2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005be4:	623b      	str	r3, [r7, #32]
 8005be6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	69f9      	ldr	r1, [r7, #28]
 8005bea:	6a3a      	ldr	r2, [r7, #32]
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e6      	bne.n	8005bc6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	378c      	adds	r7, #140	; 0x8c
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	08006321 	.word	0x08006321
 8005c0c:	08006029 	.word	0x08006029
 8005c10:	08005ec7 	.word	0x08005ec7
 8005c14:	08005d67 	.word	0x08005d67

08005c18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b095      	sub	sp, #84	; 0x54
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8005c40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e6      	bne.n	8005c20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3308      	adds	r3, #8
 8005c58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c68:	f023 0301 	bic.w	r3, r3, #1
 8005c6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3308      	adds	r3, #8
 8005c74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c7e:	e841 2300 	strex	r3, r2, [r1]
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1e3      	bne.n	8005c52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d118      	bne.n	8005cc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	e853 3f00 	ldrex	r3, [r3]
 8005c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f023 0310 	bic.w	r3, r3, #16
 8005ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	461a      	mov	r2, r3
 8005cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb0:	61bb      	str	r3, [r7, #24]
 8005cb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	6979      	ldr	r1, [r7, #20]
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	e841 2300 	strex	r3, r2, [r1]
 8005cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e6      	bne.n	8005c92 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005cd8:	bf00      	nop
 8005cda:	3754      	adds	r7, #84	; 0x54
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f7ff f996 	bl	8005034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d2c:	61fb      	str	r3, [r7, #28]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	61bb      	str	r3, [r7, #24]
 8005d38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6979      	ldr	r1, [r7, #20]
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	613b      	str	r3, [r7, #16]
   return(result);
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e6      	bne.n	8005d18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7ff f961 	bl	8005020 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d5e:	bf00      	nop
 8005d60:	3720      	adds	r7, #32
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b096      	sub	sp, #88	; 0x58
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7e:	2b22      	cmp	r3, #34	; 0x22
 8005d80:	f040 8095 	bne.w	8005eae <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d8e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005d92:	b2d9      	uxtb	r1, r3
 8005d94:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9e:	400a      	ands	r2, r1
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d178      	bne.n	8005ebe <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	e853 3f00 	ldrex	r3, [r3]
 8005dd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005de0:	653b      	str	r3, [r7, #80]	; 0x50
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dea:	647b      	str	r3, [r7, #68]	; 0x44
 8005dec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005df0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005df2:	e841 2300 	strex	r3, r2, [r1]
 8005df6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1e6      	bne.n	8005dcc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3308      	adds	r3, #8
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	e853 3f00 	ldrex	r3, [r3]
 8005e0c:	623b      	str	r3, [r7, #32]
   return(result);
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	f023 0301 	bic.w	r3, r3, #1
 8005e14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3308      	adds	r3, #8
 8005e1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e1e:	633a      	str	r2, [r7, #48]	; 0x30
 8005e20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1e5      	bne.n	8005dfe <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d12e      	bne.n	8005ea6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0310 	bic.w	r3, r3, #16
 8005e62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e6c:	61fb      	str	r3, [r7, #28]
 8005e6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	69b9      	ldr	r1, [r7, #24]
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	617b      	str	r3, [r7, #20]
   return(result);
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e6      	bne.n	8005e4e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	f003 0310 	and.w	r3, r3, #16
 8005e8a:	2b10      	cmp	r3, #16
 8005e8c:	d103      	bne.n	8005e96 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2210      	movs	r2, #16
 8005e94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff f8d2 	bl	8005048 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ea4:	e00b      	b.n	8005ebe <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fa ff22 	bl	8000cf0 <HAL_UART_RxCpltCallback>
}
 8005eac:	e007      	b.n	8005ebe <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699a      	ldr	r2, [r3, #24]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0208 	orr.w	r2, r2, #8
 8005ebc:	619a      	str	r2, [r3, #24]
}
 8005ebe:	bf00      	nop
 8005ec0:	3758      	adds	r7, #88	; 0x58
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b096      	sub	sp, #88	; 0x58
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005ed4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ede:	2b22      	cmp	r3, #34	; 0x22
 8005ee0:	f040 8095 	bne.w	800600e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005ef4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005ef8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005efc:	4013      	ands	r3, r2
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f02:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f08:	1c9a      	adds	r2, r3, #2
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d178      	bne.n	800601e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	461a      	mov	r2, r3
 8005f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f4a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e6      	bne.n	8005f2c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3308      	adds	r3, #8
 8005f64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	e853 3f00 	ldrex	r3, [r3]
 8005f6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f023 0301 	bic.w	r3, r3, #1
 8005f74:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3308      	adds	r3, #8
 8005f7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f86:	e841 2300 	strex	r3, r2, [r1]
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1e5      	bne.n	8005f5e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d12e      	bne.n	8006006 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f023 0310 	bic.w	r3, r3, #16
 8005fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	6979      	ldr	r1, [r7, #20]
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e6      	bne.n	8005fae <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f003 0310 	and.w	r3, r3, #16
 8005fea:	2b10      	cmp	r3, #16
 8005fec:	d103      	bne.n	8005ff6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2210      	movs	r2, #16
 8005ff4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7ff f822 	bl	8005048 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006004:	e00b      	b.n	800601e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7fa fe72 	bl	8000cf0 <HAL_UART_RxCpltCallback>
}
 800600c:	e007      	b.n	800601e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	699a      	ldr	r2, [r3, #24]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f042 0208 	orr.w	r2, r2, #8
 800601c:	619a      	str	r2, [r3, #24]
}
 800601e:	bf00      	nop
 8006020:	3758      	adds	r7, #88	; 0x58
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
	...

08006028 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b0a6      	sub	sp, #152	; 0x98
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006036:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69db      	ldr	r3, [r3, #28]
 8006040:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605e:	2b22      	cmp	r3, #34	; 0x22
 8006060:	f040 814f 	bne.w	8006302 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800606a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800606e:	e0f6      	b.n	800625e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800607a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800607e:	b2d9      	uxtb	r1, r3
 8006080:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006084:	b2da      	uxtb	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608a:	400a      	ands	r2, r1
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	3b01      	subs	r3, #1
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80060b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d053      	beq.n	800616a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060c6:	f003 0301 	and.w	r3, r3, #1
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d011      	beq.n	80060f2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80060ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00b      	beq.n	80060f2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2201      	movs	r2, #1
 80060e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060e8:	f043 0201 	orr.w	r2, r3, #1
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d011      	beq.n	8006122 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80060fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00b      	beq.n	8006122 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2202      	movs	r2, #2
 8006110:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006118:	f043 0204 	orr.w	r2, r3, #4
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006122:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b00      	cmp	r3, #0
 800612c:	d011      	beq.n	8006152 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800612e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00b      	beq.n	8006152 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2204      	movs	r2, #4
 8006140:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006148:	f043 0202 	orr.w	r2, r3, #2
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d006      	beq.n	800616a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7fe ff69 	bl	8005034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d173      	bne.n	800625e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006186:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800618a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006198:	66bb      	str	r3, [r7, #104]	; 0x68
 800619a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800619e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061a0:	e841 2300 	strex	r3, r2, [r1]
 80061a4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80061a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1e4      	bne.n	8006176 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3308      	adds	r3, #8
 80061b2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b6:	e853 3f00 	ldrex	r3, [r3]
 80061ba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80061bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061c2:	f023 0301 	bic.w	r3, r3, #1
 80061c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3308      	adds	r3, #8
 80061ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80061d0:	657a      	str	r2, [r7, #84]	; 0x54
 80061d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061d8:	e841 2300 	strex	r3, r2, [r1]
 80061dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80061de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1e3      	bne.n	80061ac <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d12e      	bne.n	8006258 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006208:	e853 3f00 	ldrex	r3, [r3]
 800620c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	f023 0310 	bic.w	r3, r3, #16
 8006214:	67bb      	str	r3, [r7, #120]	; 0x78
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800621e:	643b      	str	r3, [r7, #64]	; 0x40
 8006220:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006222:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006224:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006226:	e841 2300 	strex	r3, r2, [r1]
 800622a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800622c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1e6      	bne.n	8006200 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	f003 0310 	and.w	r3, r3, #16
 800623c:	2b10      	cmp	r3, #16
 800623e:	d103      	bne.n	8006248 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2210      	movs	r2, #16
 8006246:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7fe fef9 	bl	8005048 <HAL_UARTEx_RxEventCallback>
 8006256:	e002      	b.n	800625e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f7fa fd49 	bl	8000cf0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800625e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006262:	2b00      	cmp	r3, #0
 8006264:	d006      	beq.n	8006274 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8006266:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800626a:	f003 0320 	and.w	r3, r3, #32
 800626e:	2b00      	cmp	r3, #0
 8006270:	f47f aefe 	bne.w	8006070 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800627a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800627e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006282:	2b00      	cmp	r3, #0
 8006284:	d045      	beq.n	8006312 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800628c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006290:	429a      	cmp	r2, r3
 8006292:	d23e      	bcs.n	8006312 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3308      	adds	r3, #8
 800629a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	e853 3f00 	ldrex	r3, [r3]
 80062a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062aa:	673b      	str	r3, [r7, #112]	; 0x70
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3308      	adds	r3, #8
 80062b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80062b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062bc:	e841 2300 	strex	r3, r2, [r1]
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e5      	bne.n	8006294 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a14      	ldr	r2, [pc, #80]	; (800631c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80062cc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	e853 3f00 	ldrex	r3, [r3]
 80062da:	60bb      	str	r3, [r7, #8]
   return(result);
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f043 0320 	orr.w	r3, r3, #32
 80062e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	461a      	mov	r2, r3
 80062ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ec:	61bb      	str	r3, [r7, #24]
 80062ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f0:	6979      	ldr	r1, [r7, #20]
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	e841 2300 	strex	r3, r2, [r1]
 80062f8:	613b      	str	r3, [r7, #16]
   return(result);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1e6      	bne.n	80062ce <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006300:	e007      	b.n	8006312 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	699a      	ldr	r2, [r3, #24]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f042 0208 	orr.w	r2, r2, #8
 8006310:	619a      	str	r2, [r3, #24]
}
 8006312:	bf00      	nop
 8006314:	3798      	adds	r7, #152	; 0x98
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	08005d67 	.word	0x08005d67

08006320 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b0a8      	sub	sp, #160	; 0xa0
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800632e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006356:	2b22      	cmp	r3, #34	; 0x22
 8006358:	f040 8153 	bne.w	8006602 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006362:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006366:	e0fa      	b.n	800655e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006376:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800637a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800637e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006382:	4013      	ands	r3, r2
 8006384:	b29a      	uxth	r2, r3
 8006386:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800638a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006390:	1c9a      	adds	r2, r3, #2
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800639c:	b29b      	uxth	r3, r3
 800639e:	3b01      	subs	r3, #1
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80063b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063b6:	f003 0307 	and.w	r3, r3, #7
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d053      	beq.n	8006466 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d011      	beq.n	80063ee <UART_RxISR_16BIT_FIFOEN+0xce>
 80063ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80063ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00b      	beq.n	80063ee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2201      	movs	r2, #1
 80063dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063e4:	f043 0201 	orr.w	r2, r3, #1
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d011      	beq.n	800641e <UART_RxISR_16BIT_FIFOEN+0xfe>
 80063fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00b      	beq.n	800641e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2202      	movs	r2, #2
 800640c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006414:	f043 0204 	orr.w	r2, r3, #4
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800641e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006422:	f003 0304 	and.w	r3, r3, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	d011      	beq.n	800644e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800642a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00b      	beq.n	800644e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2204      	movs	r2, #4
 800643c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006444:	f043 0202 	orr.w	r2, r3, #2
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006454:	2b00      	cmp	r3, #0
 8006456:	d006      	beq.n	8006466 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7fe fdeb 	bl	8005034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d175      	bne.n	800655e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006480:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006482:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006486:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006494:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006496:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006498:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800649a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800649c:	e841 2300 	strex	r3, r2, [r1]
 80064a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e4      	bne.n	8006472 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3308      	adds	r3, #8
 80064ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064be:	f023 0301 	bic.w	r3, r3, #1
 80064c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3308      	adds	r3, #8
 80064cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80064d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064d8:	e841 2300 	strex	r3, r2, [r1]
 80064dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e1      	bne.n	80064a8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d12e      	bne.n	8006558 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800650e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006510:	f023 0310 	bic.w	r3, r3, #16
 8006514:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800651e:	647b      	str	r3, [r7, #68]	; 0x44
 8006520:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800652c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e6      	bne.n	8006500 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	f003 0310 	and.w	r3, r3, #16
 800653c:	2b10      	cmp	r3, #16
 800653e:	d103      	bne.n	8006548 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2210      	movs	r2, #16
 8006546:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7fe fd79 	bl	8005048 <HAL_UARTEx_RxEventCallback>
 8006556:	e002      	b.n	800655e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7fa fbc9 	bl	8000cf0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800655e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006562:	2b00      	cmp	r3, #0
 8006564:	d006      	beq.n	8006574 <UART_RxISR_16BIT_FIFOEN+0x254>
 8006566:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b00      	cmp	r3, #0
 8006570:	f47f aefa 	bne.w	8006368 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800657a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800657e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8006582:	2b00      	cmp	r3, #0
 8006584:	d045      	beq.n	8006612 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800658c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006590:	429a      	cmp	r2, r3
 8006592:	d23e      	bcs.n	8006612 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3308      	adds	r3, #8
 800659a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	e853 3f00 	ldrex	r3, [r3]
 80065a2:	623b      	str	r3, [r7, #32]
   return(result);
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065aa:	677b      	str	r3, [r7, #116]	; 0x74
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3308      	adds	r3, #8
 80065b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80065b4:	633a      	str	r2, [r7, #48]	; 0x30
 80065b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065bc:	e841 2300 	strex	r3, r2, [r1]
 80065c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1e5      	bne.n	8006594 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a14      	ldr	r2, [pc, #80]	; (800661c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80065cc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	e853 3f00 	ldrex	r3, [r3]
 80065da:	60fb      	str	r3, [r7, #12]
   return(result);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f043 0320 	orr.w	r3, r3, #32
 80065e2:	673b      	str	r3, [r7, #112]	; 0x70
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	461a      	mov	r2, r3
 80065ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065ec:	61fb      	str	r3, [r7, #28]
 80065ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f0:	69b9      	ldr	r1, [r7, #24]
 80065f2:	69fa      	ldr	r2, [r7, #28]
 80065f4:	e841 2300 	strex	r3, r2, [r1]
 80065f8:	617b      	str	r3, [r7, #20]
   return(result);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1e6      	bne.n	80065ce <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006600:	e007      	b.n	8006612 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	699a      	ldr	r2, [r3, #24]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f042 0208 	orr.w	r2, r2, #8
 8006610:	619a      	str	r2, [r3, #24]
}
 8006612:	bf00      	nop
 8006614:	37a0      	adds	r7, #160	; 0xa0
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	08005ec7 	.word	0x08005ec7

08006620 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800666a:	2b01      	cmp	r3, #1
 800666c:	d101      	bne.n	8006672 <HAL_UARTEx_DisableFifoMode+0x16>
 800666e:	2302      	movs	r3, #2
 8006670:	e027      	b.n	80066c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2224      	movs	r2, #36	; 0x24
 800667e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 0201 	bic.w	r2, r2, #1
 8006698:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d101      	bne.n	80066e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066e2:	2302      	movs	r3, #2
 80066e4:	e02d      	b.n	8006742 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2224      	movs	r2, #36	; 0x24
 80066f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0201 	bic.w	r2, r2, #1
 800670c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f850 	bl	80067c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2220      	movs	r2, #32
 8006734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800675e:	2302      	movs	r3, #2
 8006760:	e02d      	b.n	80067be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2224      	movs	r2, #36	; 0x24
 800676e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0201 	bic.w	r2, r2, #1
 8006788:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f812 	bl	80067c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
	...

080067c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d108      	bne.n	80067ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067e8:	e031      	b.n	800684e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067ea:	2308      	movs	r3, #8
 80067ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067ee:	2308      	movs	r3, #8
 80067f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	0e5b      	lsrs	r3, r3, #25
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	f003 0307 	and.w	r3, r3, #7
 8006800:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	0f5b      	lsrs	r3, r3, #29
 800680a:	b2db      	uxtb	r3, r3
 800680c:	f003 0307 	and.w	r3, r3, #7
 8006810:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006812:	7bbb      	ldrb	r3, [r7, #14]
 8006814:	7b3a      	ldrb	r2, [r7, #12]
 8006816:	4911      	ldr	r1, [pc, #68]	; (800685c <UARTEx_SetNbDataToProcess+0x94>)
 8006818:	5c8a      	ldrb	r2, [r1, r2]
 800681a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800681e:	7b3a      	ldrb	r2, [r7, #12]
 8006820:	490f      	ldr	r1, [pc, #60]	; (8006860 <UARTEx_SetNbDataToProcess+0x98>)
 8006822:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006824:	fb93 f3f2 	sdiv	r3, r3, r2
 8006828:	b29a      	uxth	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006830:	7bfb      	ldrb	r3, [r7, #15]
 8006832:	7b7a      	ldrb	r2, [r7, #13]
 8006834:	4909      	ldr	r1, [pc, #36]	; (800685c <UARTEx_SetNbDataToProcess+0x94>)
 8006836:	5c8a      	ldrb	r2, [r1, r2]
 8006838:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800683c:	7b7a      	ldrb	r2, [r7, #13]
 800683e:	4908      	ldr	r1, [pc, #32]	; (8006860 <UARTEx_SetNbDataToProcess+0x98>)
 8006840:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006842:	fb93 f3f2 	sdiv	r3, r3, r2
 8006846:	b29a      	uxth	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800684e:	bf00      	nop
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	080081dc 	.word	0x080081dc
 8006860:	080081e4 	.word	0x080081e4

08006864 <atoi>:
 8006864:	220a      	movs	r2, #10
 8006866:	2100      	movs	r1, #0
 8006868:	f000 b9be 	b.w	8006be8 <strtol>

0800686c <__errno>:
 800686c:	4b01      	ldr	r3, [pc, #4]	; (8006874 <__errno+0x8>)
 800686e:	6818      	ldr	r0, [r3, #0]
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	200000a8 	.word	0x200000a8

08006878 <__libc_init_array>:
 8006878:	b570      	push	{r4, r5, r6, lr}
 800687a:	4d0d      	ldr	r5, [pc, #52]	; (80068b0 <__libc_init_array+0x38>)
 800687c:	4c0d      	ldr	r4, [pc, #52]	; (80068b4 <__libc_init_array+0x3c>)
 800687e:	1b64      	subs	r4, r4, r5
 8006880:	10a4      	asrs	r4, r4, #2
 8006882:	2600      	movs	r6, #0
 8006884:	42a6      	cmp	r6, r4
 8006886:	d109      	bne.n	800689c <__libc_init_array+0x24>
 8006888:	4d0b      	ldr	r5, [pc, #44]	; (80068b8 <__libc_init_array+0x40>)
 800688a:	4c0c      	ldr	r4, [pc, #48]	; (80068bc <__libc_init_array+0x44>)
 800688c:	f001 fb6c 	bl	8007f68 <_init>
 8006890:	1b64      	subs	r4, r4, r5
 8006892:	10a4      	asrs	r4, r4, #2
 8006894:	2600      	movs	r6, #0
 8006896:	42a6      	cmp	r6, r4
 8006898:	d105      	bne.n	80068a6 <__libc_init_array+0x2e>
 800689a:	bd70      	pop	{r4, r5, r6, pc}
 800689c:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a0:	4798      	blx	r3
 80068a2:	3601      	adds	r6, #1
 80068a4:	e7ee      	b.n	8006884 <__libc_init_array+0xc>
 80068a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068aa:	4798      	blx	r3
 80068ac:	3601      	adds	r6, #1
 80068ae:	e7f2      	b.n	8006896 <__libc_init_array+0x1e>
 80068b0:	08008440 	.word	0x08008440
 80068b4:	08008440 	.word	0x08008440
 80068b8:	08008440 	.word	0x08008440
 80068bc:	08008444 	.word	0x08008444

080068c0 <memset>:
 80068c0:	4402      	add	r2, r0
 80068c2:	4603      	mov	r3, r0
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d100      	bne.n	80068ca <memset+0xa>
 80068c8:	4770      	bx	lr
 80068ca:	f803 1b01 	strb.w	r1, [r3], #1
 80068ce:	e7f9      	b.n	80068c4 <memset+0x4>

080068d0 <iprintf>:
 80068d0:	b40f      	push	{r0, r1, r2, r3}
 80068d2:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <iprintf+0x2c>)
 80068d4:	b513      	push	{r0, r1, r4, lr}
 80068d6:	681c      	ldr	r4, [r3, #0]
 80068d8:	b124      	cbz	r4, 80068e4 <iprintf+0x14>
 80068da:	69a3      	ldr	r3, [r4, #24]
 80068dc:	b913      	cbnz	r3, 80068e4 <iprintf+0x14>
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 fb84 	bl	8006fec <__sinit>
 80068e4:	ab05      	add	r3, sp, #20
 80068e6:	9a04      	ldr	r2, [sp, #16]
 80068e8:	68a1      	ldr	r1, [r4, #8]
 80068ea:	9301      	str	r3, [sp, #4]
 80068ec:	4620      	mov	r0, r4
 80068ee:	f000 ff03 	bl	80076f8 <_vfiprintf_r>
 80068f2:	b002      	add	sp, #8
 80068f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f8:	b004      	add	sp, #16
 80068fa:	4770      	bx	lr
 80068fc:	200000a8 	.word	0x200000a8

08006900 <_puts_r>:
 8006900:	b570      	push	{r4, r5, r6, lr}
 8006902:	460e      	mov	r6, r1
 8006904:	4605      	mov	r5, r0
 8006906:	b118      	cbz	r0, 8006910 <_puts_r+0x10>
 8006908:	6983      	ldr	r3, [r0, #24]
 800690a:	b90b      	cbnz	r3, 8006910 <_puts_r+0x10>
 800690c:	f000 fb6e 	bl	8006fec <__sinit>
 8006910:	69ab      	ldr	r3, [r5, #24]
 8006912:	68ac      	ldr	r4, [r5, #8]
 8006914:	b913      	cbnz	r3, 800691c <_puts_r+0x1c>
 8006916:	4628      	mov	r0, r5
 8006918:	f000 fb68 	bl	8006fec <__sinit>
 800691c:	4b2c      	ldr	r3, [pc, #176]	; (80069d0 <_puts_r+0xd0>)
 800691e:	429c      	cmp	r4, r3
 8006920:	d120      	bne.n	8006964 <_puts_r+0x64>
 8006922:	686c      	ldr	r4, [r5, #4]
 8006924:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006926:	07db      	lsls	r3, r3, #31
 8006928:	d405      	bmi.n	8006936 <_puts_r+0x36>
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	0598      	lsls	r0, r3, #22
 800692e:	d402      	bmi.n	8006936 <_puts_r+0x36>
 8006930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006932:	f000 fc0b 	bl	800714c <__retarget_lock_acquire_recursive>
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	0719      	lsls	r1, r3, #28
 800693a:	d51d      	bpl.n	8006978 <_puts_r+0x78>
 800693c:	6923      	ldr	r3, [r4, #16]
 800693e:	b1db      	cbz	r3, 8006978 <_puts_r+0x78>
 8006940:	3e01      	subs	r6, #1
 8006942:	68a3      	ldr	r3, [r4, #8]
 8006944:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006948:	3b01      	subs	r3, #1
 800694a:	60a3      	str	r3, [r4, #8]
 800694c:	bb39      	cbnz	r1, 800699e <_puts_r+0x9e>
 800694e:	2b00      	cmp	r3, #0
 8006950:	da38      	bge.n	80069c4 <_puts_r+0xc4>
 8006952:	4622      	mov	r2, r4
 8006954:	210a      	movs	r1, #10
 8006956:	4628      	mov	r0, r5
 8006958:	f000 f950 	bl	8006bfc <__swbuf_r>
 800695c:	3001      	adds	r0, #1
 800695e:	d011      	beq.n	8006984 <_puts_r+0x84>
 8006960:	250a      	movs	r5, #10
 8006962:	e011      	b.n	8006988 <_puts_r+0x88>
 8006964:	4b1b      	ldr	r3, [pc, #108]	; (80069d4 <_puts_r+0xd4>)
 8006966:	429c      	cmp	r4, r3
 8006968:	d101      	bne.n	800696e <_puts_r+0x6e>
 800696a:	68ac      	ldr	r4, [r5, #8]
 800696c:	e7da      	b.n	8006924 <_puts_r+0x24>
 800696e:	4b1a      	ldr	r3, [pc, #104]	; (80069d8 <_puts_r+0xd8>)
 8006970:	429c      	cmp	r4, r3
 8006972:	bf08      	it	eq
 8006974:	68ec      	ldreq	r4, [r5, #12]
 8006976:	e7d5      	b.n	8006924 <_puts_r+0x24>
 8006978:	4621      	mov	r1, r4
 800697a:	4628      	mov	r0, r5
 800697c:	f000 f990 	bl	8006ca0 <__swsetup_r>
 8006980:	2800      	cmp	r0, #0
 8006982:	d0dd      	beq.n	8006940 <_puts_r+0x40>
 8006984:	f04f 35ff 	mov.w	r5, #4294967295
 8006988:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800698a:	07da      	lsls	r2, r3, #31
 800698c:	d405      	bmi.n	800699a <_puts_r+0x9a>
 800698e:	89a3      	ldrh	r3, [r4, #12]
 8006990:	059b      	lsls	r3, r3, #22
 8006992:	d402      	bmi.n	800699a <_puts_r+0x9a>
 8006994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006996:	f000 fbda 	bl	800714e <__retarget_lock_release_recursive>
 800699a:	4628      	mov	r0, r5
 800699c:	bd70      	pop	{r4, r5, r6, pc}
 800699e:	2b00      	cmp	r3, #0
 80069a0:	da04      	bge.n	80069ac <_puts_r+0xac>
 80069a2:	69a2      	ldr	r2, [r4, #24]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	dc06      	bgt.n	80069b6 <_puts_r+0xb6>
 80069a8:	290a      	cmp	r1, #10
 80069aa:	d004      	beq.n	80069b6 <_puts_r+0xb6>
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	6022      	str	r2, [r4, #0]
 80069b2:	7019      	strb	r1, [r3, #0]
 80069b4:	e7c5      	b.n	8006942 <_puts_r+0x42>
 80069b6:	4622      	mov	r2, r4
 80069b8:	4628      	mov	r0, r5
 80069ba:	f000 f91f 	bl	8006bfc <__swbuf_r>
 80069be:	3001      	adds	r0, #1
 80069c0:	d1bf      	bne.n	8006942 <_puts_r+0x42>
 80069c2:	e7df      	b.n	8006984 <_puts_r+0x84>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	250a      	movs	r5, #10
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	6022      	str	r2, [r4, #0]
 80069cc:	701d      	strb	r5, [r3, #0]
 80069ce:	e7db      	b.n	8006988 <_puts_r+0x88>
 80069d0:	080083c4 	.word	0x080083c4
 80069d4:	080083e4 	.word	0x080083e4
 80069d8:	080083a4 	.word	0x080083a4

080069dc <puts>:
 80069dc:	4b02      	ldr	r3, [pc, #8]	; (80069e8 <puts+0xc>)
 80069de:	4601      	mov	r1, r0
 80069e0:	6818      	ldr	r0, [r3, #0]
 80069e2:	f7ff bf8d 	b.w	8006900 <_puts_r>
 80069e6:	bf00      	nop
 80069e8:	200000a8 	.word	0x200000a8

080069ec <siprintf>:
 80069ec:	b40e      	push	{r1, r2, r3}
 80069ee:	b500      	push	{lr}
 80069f0:	b09c      	sub	sp, #112	; 0x70
 80069f2:	ab1d      	add	r3, sp, #116	; 0x74
 80069f4:	9002      	str	r0, [sp, #8]
 80069f6:	9006      	str	r0, [sp, #24]
 80069f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069fc:	4809      	ldr	r0, [pc, #36]	; (8006a24 <siprintf+0x38>)
 80069fe:	9107      	str	r1, [sp, #28]
 8006a00:	9104      	str	r1, [sp, #16]
 8006a02:	4909      	ldr	r1, [pc, #36]	; (8006a28 <siprintf+0x3c>)
 8006a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a08:	9105      	str	r1, [sp, #20]
 8006a0a:	6800      	ldr	r0, [r0, #0]
 8006a0c:	9301      	str	r3, [sp, #4]
 8006a0e:	a902      	add	r1, sp, #8
 8006a10:	f000 fd48 	bl	80074a4 <_svfiprintf_r>
 8006a14:	9b02      	ldr	r3, [sp, #8]
 8006a16:	2200      	movs	r2, #0
 8006a18:	701a      	strb	r2, [r3, #0]
 8006a1a:	b01c      	add	sp, #112	; 0x70
 8006a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a20:	b003      	add	sp, #12
 8006a22:	4770      	bx	lr
 8006a24:	200000a8 	.word	0x200000a8
 8006a28:	ffff0208 	.word	0xffff0208

08006a2c <strtok>:
 8006a2c:	4b16      	ldr	r3, [pc, #88]	; (8006a88 <strtok+0x5c>)
 8006a2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a30:	681e      	ldr	r6, [r3, #0]
 8006a32:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006a34:	4605      	mov	r5, r0
 8006a36:	b9fc      	cbnz	r4, 8006a78 <strtok+0x4c>
 8006a38:	2050      	movs	r0, #80	; 0x50
 8006a3a:	9101      	str	r1, [sp, #4]
 8006a3c:	f000 fbee 	bl	800721c <malloc>
 8006a40:	9901      	ldr	r1, [sp, #4]
 8006a42:	65b0      	str	r0, [r6, #88]	; 0x58
 8006a44:	4602      	mov	r2, r0
 8006a46:	b920      	cbnz	r0, 8006a52 <strtok+0x26>
 8006a48:	4b10      	ldr	r3, [pc, #64]	; (8006a8c <strtok+0x60>)
 8006a4a:	4811      	ldr	r0, [pc, #68]	; (8006a90 <strtok+0x64>)
 8006a4c:	2157      	movs	r1, #87	; 0x57
 8006a4e:	f000 f995 	bl	8006d7c <__assert_func>
 8006a52:	e9c0 4400 	strd	r4, r4, [r0]
 8006a56:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006a5a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006a5e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006a62:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006a66:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006a6a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006a6e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006a72:	6184      	str	r4, [r0, #24]
 8006a74:	7704      	strb	r4, [r0, #28]
 8006a76:	6244      	str	r4, [r0, #36]	; 0x24
 8006a78:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	b002      	add	sp, #8
 8006a80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a84:	f000 b806 	b.w	8006a94 <__strtok_r>
 8006a88:	200000a8 	.word	0x200000a8
 8006a8c:	080081f0 	.word	0x080081f0
 8006a90:	08008207 	.word	0x08008207

08006a94 <__strtok_r>:
 8006a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a96:	b908      	cbnz	r0, 8006a9c <__strtok_r+0x8>
 8006a98:	6810      	ldr	r0, [r2, #0]
 8006a9a:	b188      	cbz	r0, 8006ac0 <__strtok_r+0x2c>
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006aa4:	460f      	mov	r7, r1
 8006aa6:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006aaa:	b91e      	cbnz	r6, 8006ab4 <__strtok_r+0x20>
 8006aac:	b965      	cbnz	r5, 8006ac8 <__strtok_r+0x34>
 8006aae:	6015      	str	r5, [r2, #0]
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	e005      	b.n	8006ac0 <__strtok_r+0x2c>
 8006ab4:	42b5      	cmp	r5, r6
 8006ab6:	d1f6      	bne.n	8006aa6 <__strtok_r+0x12>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1f0      	bne.n	8006a9e <__strtok_r+0xa>
 8006abc:	6014      	str	r4, [r2, #0]
 8006abe:	7003      	strb	r3, [r0, #0]
 8006ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ac2:	461c      	mov	r4, r3
 8006ac4:	e00c      	b.n	8006ae0 <__strtok_r+0x4c>
 8006ac6:	b915      	cbnz	r5, 8006ace <__strtok_r+0x3a>
 8006ac8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006acc:	460e      	mov	r6, r1
 8006ace:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006ad2:	42ab      	cmp	r3, r5
 8006ad4:	d1f7      	bne.n	8006ac6 <__strtok_r+0x32>
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0f3      	beq.n	8006ac2 <__strtok_r+0x2e>
 8006ada:	2300      	movs	r3, #0
 8006adc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006ae0:	6014      	str	r4, [r2, #0]
 8006ae2:	e7ed      	b.n	8006ac0 <__strtok_r+0x2c>

08006ae4 <_strtol_l.constprop.0>:
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aea:	d001      	beq.n	8006af0 <_strtol_l.constprop.0+0xc>
 8006aec:	2b24      	cmp	r3, #36	; 0x24
 8006aee:	d906      	bls.n	8006afe <_strtol_l.constprop.0+0x1a>
 8006af0:	f7ff febc 	bl	800686c <__errno>
 8006af4:	2316      	movs	r3, #22
 8006af6:	6003      	str	r3, [r0, #0]
 8006af8:	2000      	movs	r0, #0
 8006afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006be4 <_strtol_l.constprop.0+0x100>
 8006b02:	460d      	mov	r5, r1
 8006b04:	462e      	mov	r6, r5
 8006b06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b0a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006b0e:	f017 0708 	ands.w	r7, r7, #8
 8006b12:	d1f7      	bne.n	8006b04 <_strtol_l.constprop.0+0x20>
 8006b14:	2c2d      	cmp	r4, #45	; 0x2d
 8006b16:	d132      	bne.n	8006b7e <_strtol_l.constprop.0+0x9a>
 8006b18:	782c      	ldrb	r4, [r5, #0]
 8006b1a:	2701      	movs	r7, #1
 8006b1c:	1cb5      	adds	r5, r6, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d05b      	beq.n	8006bda <_strtol_l.constprop.0+0xf6>
 8006b22:	2b10      	cmp	r3, #16
 8006b24:	d109      	bne.n	8006b3a <_strtol_l.constprop.0+0x56>
 8006b26:	2c30      	cmp	r4, #48	; 0x30
 8006b28:	d107      	bne.n	8006b3a <_strtol_l.constprop.0+0x56>
 8006b2a:	782c      	ldrb	r4, [r5, #0]
 8006b2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006b30:	2c58      	cmp	r4, #88	; 0x58
 8006b32:	d14d      	bne.n	8006bd0 <_strtol_l.constprop.0+0xec>
 8006b34:	786c      	ldrb	r4, [r5, #1]
 8006b36:	2310      	movs	r3, #16
 8006b38:	3502      	adds	r5, #2
 8006b3a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006b3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b42:	f04f 0c00 	mov.w	ip, #0
 8006b46:	fbb8 f9f3 	udiv	r9, r8, r3
 8006b4a:	4666      	mov	r6, ip
 8006b4c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006b50:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006b54:	f1be 0f09 	cmp.w	lr, #9
 8006b58:	d816      	bhi.n	8006b88 <_strtol_l.constprop.0+0xa4>
 8006b5a:	4674      	mov	r4, lr
 8006b5c:	42a3      	cmp	r3, r4
 8006b5e:	dd24      	ble.n	8006baa <_strtol_l.constprop.0+0xc6>
 8006b60:	f1bc 0f00 	cmp.w	ip, #0
 8006b64:	db1e      	blt.n	8006ba4 <_strtol_l.constprop.0+0xc0>
 8006b66:	45b1      	cmp	r9, r6
 8006b68:	d31c      	bcc.n	8006ba4 <_strtol_l.constprop.0+0xc0>
 8006b6a:	d101      	bne.n	8006b70 <_strtol_l.constprop.0+0x8c>
 8006b6c:	45a2      	cmp	sl, r4
 8006b6e:	db19      	blt.n	8006ba4 <_strtol_l.constprop.0+0xc0>
 8006b70:	fb06 4603 	mla	r6, r6, r3, r4
 8006b74:	f04f 0c01 	mov.w	ip, #1
 8006b78:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b7c:	e7e8      	b.n	8006b50 <_strtol_l.constprop.0+0x6c>
 8006b7e:	2c2b      	cmp	r4, #43	; 0x2b
 8006b80:	bf04      	itt	eq
 8006b82:	782c      	ldrbeq	r4, [r5, #0]
 8006b84:	1cb5      	addeq	r5, r6, #2
 8006b86:	e7ca      	b.n	8006b1e <_strtol_l.constprop.0+0x3a>
 8006b88:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006b8c:	f1be 0f19 	cmp.w	lr, #25
 8006b90:	d801      	bhi.n	8006b96 <_strtol_l.constprop.0+0xb2>
 8006b92:	3c37      	subs	r4, #55	; 0x37
 8006b94:	e7e2      	b.n	8006b5c <_strtol_l.constprop.0+0x78>
 8006b96:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006b9a:	f1be 0f19 	cmp.w	lr, #25
 8006b9e:	d804      	bhi.n	8006baa <_strtol_l.constprop.0+0xc6>
 8006ba0:	3c57      	subs	r4, #87	; 0x57
 8006ba2:	e7db      	b.n	8006b5c <_strtol_l.constprop.0+0x78>
 8006ba4:	f04f 3cff 	mov.w	ip, #4294967295
 8006ba8:	e7e6      	b.n	8006b78 <_strtol_l.constprop.0+0x94>
 8006baa:	f1bc 0f00 	cmp.w	ip, #0
 8006bae:	da05      	bge.n	8006bbc <_strtol_l.constprop.0+0xd8>
 8006bb0:	2322      	movs	r3, #34	; 0x22
 8006bb2:	6003      	str	r3, [r0, #0]
 8006bb4:	4646      	mov	r6, r8
 8006bb6:	b942      	cbnz	r2, 8006bca <_strtol_l.constprop.0+0xe6>
 8006bb8:	4630      	mov	r0, r6
 8006bba:	e79e      	b.n	8006afa <_strtol_l.constprop.0+0x16>
 8006bbc:	b107      	cbz	r7, 8006bc0 <_strtol_l.constprop.0+0xdc>
 8006bbe:	4276      	negs	r6, r6
 8006bc0:	2a00      	cmp	r2, #0
 8006bc2:	d0f9      	beq.n	8006bb8 <_strtol_l.constprop.0+0xd4>
 8006bc4:	f1bc 0f00 	cmp.w	ip, #0
 8006bc8:	d000      	beq.n	8006bcc <_strtol_l.constprop.0+0xe8>
 8006bca:	1e69      	subs	r1, r5, #1
 8006bcc:	6011      	str	r1, [r2, #0]
 8006bce:	e7f3      	b.n	8006bb8 <_strtol_l.constprop.0+0xd4>
 8006bd0:	2430      	movs	r4, #48	; 0x30
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1b1      	bne.n	8006b3a <_strtol_l.constprop.0+0x56>
 8006bd6:	2308      	movs	r3, #8
 8006bd8:	e7af      	b.n	8006b3a <_strtol_l.constprop.0+0x56>
 8006bda:	2c30      	cmp	r4, #48	; 0x30
 8006bdc:	d0a5      	beq.n	8006b2a <_strtol_l.constprop.0+0x46>
 8006bde:	230a      	movs	r3, #10
 8006be0:	e7ab      	b.n	8006b3a <_strtol_l.constprop.0+0x56>
 8006be2:	bf00      	nop
 8006be4:	080082a1 	.word	0x080082a1

08006be8 <strtol>:
 8006be8:	4613      	mov	r3, r2
 8006bea:	460a      	mov	r2, r1
 8006bec:	4601      	mov	r1, r0
 8006bee:	4802      	ldr	r0, [pc, #8]	; (8006bf8 <strtol+0x10>)
 8006bf0:	6800      	ldr	r0, [r0, #0]
 8006bf2:	f7ff bf77 	b.w	8006ae4 <_strtol_l.constprop.0>
 8006bf6:	bf00      	nop
 8006bf8:	200000a8 	.word	0x200000a8

08006bfc <__swbuf_r>:
 8006bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfe:	460e      	mov	r6, r1
 8006c00:	4614      	mov	r4, r2
 8006c02:	4605      	mov	r5, r0
 8006c04:	b118      	cbz	r0, 8006c0e <__swbuf_r+0x12>
 8006c06:	6983      	ldr	r3, [r0, #24]
 8006c08:	b90b      	cbnz	r3, 8006c0e <__swbuf_r+0x12>
 8006c0a:	f000 f9ef 	bl	8006fec <__sinit>
 8006c0e:	4b21      	ldr	r3, [pc, #132]	; (8006c94 <__swbuf_r+0x98>)
 8006c10:	429c      	cmp	r4, r3
 8006c12:	d12b      	bne.n	8006c6c <__swbuf_r+0x70>
 8006c14:	686c      	ldr	r4, [r5, #4]
 8006c16:	69a3      	ldr	r3, [r4, #24]
 8006c18:	60a3      	str	r3, [r4, #8]
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	071a      	lsls	r2, r3, #28
 8006c1e:	d52f      	bpl.n	8006c80 <__swbuf_r+0x84>
 8006c20:	6923      	ldr	r3, [r4, #16]
 8006c22:	b36b      	cbz	r3, 8006c80 <__swbuf_r+0x84>
 8006c24:	6923      	ldr	r3, [r4, #16]
 8006c26:	6820      	ldr	r0, [r4, #0]
 8006c28:	1ac0      	subs	r0, r0, r3
 8006c2a:	6963      	ldr	r3, [r4, #20]
 8006c2c:	b2f6      	uxtb	r6, r6
 8006c2e:	4283      	cmp	r3, r0
 8006c30:	4637      	mov	r7, r6
 8006c32:	dc04      	bgt.n	8006c3e <__swbuf_r+0x42>
 8006c34:	4621      	mov	r1, r4
 8006c36:	4628      	mov	r0, r5
 8006c38:	f000 f944 	bl	8006ec4 <_fflush_r>
 8006c3c:	bb30      	cbnz	r0, 8006c8c <__swbuf_r+0x90>
 8006c3e:	68a3      	ldr	r3, [r4, #8]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	60a3      	str	r3, [r4, #8]
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	6022      	str	r2, [r4, #0]
 8006c4a:	701e      	strb	r6, [r3, #0]
 8006c4c:	6963      	ldr	r3, [r4, #20]
 8006c4e:	3001      	adds	r0, #1
 8006c50:	4283      	cmp	r3, r0
 8006c52:	d004      	beq.n	8006c5e <__swbuf_r+0x62>
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	07db      	lsls	r3, r3, #31
 8006c58:	d506      	bpl.n	8006c68 <__swbuf_r+0x6c>
 8006c5a:	2e0a      	cmp	r6, #10
 8006c5c:	d104      	bne.n	8006c68 <__swbuf_r+0x6c>
 8006c5e:	4621      	mov	r1, r4
 8006c60:	4628      	mov	r0, r5
 8006c62:	f000 f92f 	bl	8006ec4 <_fflush_r>
 8006c66:	b988      	cbnz	r0, 8006c8c <__swbuf_r+0x90>
 8006c68:	4638      	mov	r0, r7
 8006c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c6c:	4b0a      	ldr	r3, [pc, #40]	; (8006c98 <__swbuf_r+0x9c>)
 8006c6e:	429c      	cmp	r4, r3
 8006c70:	d101      	bne.n	8006c76 <__swbuf_r+0x7a>
 8006c72:	68ac      	ldr	r4, [r5, #8]
 8006c74:	e7cf      	b.n	8006c16 <__swbuf_r+0x1a>
 8006c76:	4b09      	ldr	r3, [pc, #36]	; (8006c9c <__swbuf_r+0xa0>)
 8006c78:	429c      	cmp	r4, r3
 8006c7a:	bf08      	it	eq
 8006c7c:	68ec      	ldreq	r4, [r5, #12]
 8006c7e:	e7ca      	b.n	8006c16 <__swbuf_r+0x1a>
 8006c80:	4621      	mov	r1, r4
 8006c82:	4628      	mov	r0, r5
 8006c84:	f000 f80c 	bl	8006ca0 <__swsetup_r>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d0cb      	beq.n	8006c24 <__swbuf_r+0x28>
 8006c8c:	f04f 37ff 	mov.w	r7, #4294967295
 8006c90:	e7ea      	b.n	8006c68 <__swbuf_r+0x6c>
 8006c92:	bf00      	nop
 8006c94:	080083c4 	.word	0x080083c4
 8006c98:	080083e4 	.word	0x080083e4
 8006c9c:	080083a4 	.word	0x080083a4

08006ca0 <__swsetup_r>:
 8006ca0:	4b32      	ldr	r3, [pc, #200]	; (8006d6c <__swsetup_r+0xcc>)
 8006ca2:	b570      	push	{r4, r5, r6, lr}
 8006ca4:	681d      	ldr	r5, [r3, #0]
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	460c      	mov	r4, r1
 8006caa:	b125      	cbz	r5, 8006cb6 <__swsetup_r+0x16>
 8006cac:	69ab      	ldr	r3, [r5, #24]
 8006cae:	b913      	cbnz	r3, 8006cb6 <__swsetup_r+0x16>
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	f000 f99b 	bl	8006fec <__sinit>
 8006cb6:	4b2e      	ldr	r3, [pc, #184]	; (8006d70 <__swsetup_r+0xd0>)
 8006cb8:	429c      	cmp	r4, r3
 8006cba:	d10f      	bne.n	8006cdc <__swsetup_r+0x3c>
 8006cbc:	686c      	ldr	r4, [r5, #4]
 8006cbe:	89a3      	ldrh	r3, [r4, #12]
 8006cc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cc4:	0719      	lsls	r1, r3, #28
 8006cc6:	d42c      	bmi.n	8006d22 <__swsetup_r+0x82>
 8006cc8:	06dd      	lsls	r5, r3, #27
 8006cca:	d411      	bmi.n	8006cf0 <__swsetup_r+0x50>
 8006ccc:	2309      	movs	r3, #9
 8006cce:	6033      	str	r3, [r6, #0]
 8006cd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cd4:	81a3      	strh	r3, [r4, #12]
 8006cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cda:	e03e      	b.n	8006d5a <__swsetup_r+0xba>
 8006cdc:	4b25      	ldr	r3, [pc, #148]	; (8006d74 <__swsetup_r+0xd4>)
 8006cde:	429c      	cmp	r4, r3
 8006ce0:	d101      	bne.n	8006ce6 <__swsetup_r+0x46>
 8006ce2:	68ac      	ldr	r4, [r5, #8]
 8006ce4:	e7eb      	b.n	8006cbe <__swsetup_r+0x1e>
 8006ce6:	4b24      	ldr	r3, [pc, #144]	; (8006d78 <__swsetup_r+0xd8>)
 8006ce8:	429c      	cmp	r4, r3
 8006cea:	bf08      	it	eq
 8006cec:	68ec      	ldreq	r4, [r5, #12]
 8006cee:	e7e6      	b.n	8006cbe <__swsetup_r+0x1e>
 8006cf0:	0758      	lsls	r0, r3, #29
 8006cf2:	d512      	bpl.n	8006d1a <__swsetup_r+0x7a>
 8006cf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cf6:	b141      	cbz	r1, 8006d0a <__swsetup_r+0x6a>
 8006cf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cfc:	4299      	cmp	r1, r3
 8006cfe:	d002      	beq.n	8006d06 <__swsetup_r+0x66>
 8006d00:	4630      	mov	r0, r6
 8006d02:	f000 fa93 	bl	800722c <_free_r>
 8006d06:	2300      	movs	r3, #0
 8006d08:	6363      	str	r3, [r4, #52]	; 0x34
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d10:	81a3      	strh	r3, [r4, #12]
 8006d12:	2300      	movs	r3, #0
 8006d14:	6063      	str	r3, [r4, #4]
 8006d16:	6923      	ldr	r3, [r4, #16]
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	89a3      	ldrh	r3, [r4, #12]
 8006d1c:	f043 0308 	orr.w	r3, r3, #8
 8006d20:	81a3      	strh	r3, [r4, #12]
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	b94b      	cbnz	r3, 8006d3a <__swsetup_r+0x9a>
 8006d26:	89a3      	ldrh	r3, [r4, #12]
 8006d28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d30:	d003      	beq.n	8006d3a <__swsetup_r+0x9a>
 8006d32:	4621      	mov	r1, r4
 8006d34:	4630      	mov	r0, r6
 8006d36:	f000 fa31 	bl	800719c <__smakebuf_r>
 8006d3a:	89a0      	ldrh	r0, [r4, #12]
 8006d3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d40:	f010 0301 	ands.w	r3, r0, #1
 8006d44:	d00a      	beq.n	8006d5c <__swsetup_r+0xbc>
 8006d46:	2300      	movs	r3, #0
 8006d48:	60a3      	str	r3, [r4, #8]
 8006d4a:	6963      	ldr	r3, [r4, #20]
 8006d4c:	425b      	negs	r3, r3
 8006d4e:	61a3      	str	r3, [r4, #24]
 8006d50:	6923      	ldr	r3, [r4, #16]
 8006d52:	b943      	cbnz	r3, 8006d66 <__swsetup_r+0xc6>
 8006d54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d58:	d1ba      	bne.n	8006cd0 <__swsetup_r+0x30>
 8006d5a:	bd70      	pop	{r4, r5, r6, pc}
 8006d5c:	0781      	lsls	r1, r0, #30
 8006d5e:	bf58      	it	pl
 8006d60:	6963      	ldrpl	r3, [r4, #20]
 8006d62:	60a3      	str	r3, [r4, #8]
 8006d64:	e7f4      	b.n	8006d50 <__swsetup_r+0xb0>
 8006d66:	2000      	movs	r0, #0
 8006d68:	e7f7      	b.n	8006d5a <__swsetup_r+0xba>
 8006d6a:	bf00      	nop
 8006d6c:	200000a8 	.word	0x200000a8
 8006d70:	080083c4 	.word	0x080083c4
 8006d74:	080083e4 	.word	0x080083e4
 8006d78:	080083a4 	.word	0x080083a4

08006d7c <__assert_func>:
 8006d7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d7e:	4614      	mov	r4, r2
 8006d80:	461a      	mov	r2, r3
 8006d82:	4b09      	ldr	r3, [pc, #36]	; (8006da8 <__assert_func+0x2c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4605      	mov	r5, r0
 8006d88:	68d8      	ldr	r0, [r3, #12]
 8006d8a:	b14c      	cbz	r4, 8006da0 <__assert_func+0x24>
 8006d8c:	4b07      	ldr	r3, [pc, #28]	; (8006dac <__assert_func+0x30>)
 8006d8e:	9100      	str	r1, [sp, #0]
 8006d90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d94:	4906      	ldr	r1, [pc, #24]	; (8006db0 <__assert_func+0x34>)
 8006d96:	462b      	mov	r3, r5
 8006d98:	f000 f9a6 	bl	80070e8 <fiprintf>
 8006d9c:	f000 ffd6 	bl	8007d4c <abort>
 8006da0:	4b04      	ldr	r3, [pc, #16]	; (8006db4 <__assert_func+0x38>)
 8006da2:	461c      	mov	r4, r3
 8006da4:	e7f3      	b.n	8006d8e <__assert_func+0x12>
 8006da6:	bf00      	nop
 8006da8:	200000a8 	.word	0x200000a8
 8006dac:	08008264 	.word	0x08008264
 8006db0:	08008271 	.word	0x08008271
 8006db4:	0800829f 	.word	0x0800829f

08006db8 <__sflush_r>:
 8006db8:	898a      	ldrh	r2, [r1, #12]
 8006dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	0710      	lsls	r0, r2, #28
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	d458      	bmi.n	8006e78 <__sflush_r+0xc0>
 8006dc6:	684b      	ldr	r3, [r1, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	dc05      	bgt.n	8006dd8 <__sflush_r+0x20>
 8006dcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	dc02      	bgt.n	8006dd8 <__sflush_r+0x20>
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dda:	2e00      	cmp	r6, #0
 8006ddc:	d0f9      	beq.n	8006dd2 <__sflush_r+0x1a>
 8006dde:	2300      	movs	r3, #0
 8006de0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006de4:	682f      	ldr	r7, [r5, #0]
 8006de6:	602b      	str	r3, [r5, #0]
 8006de8:	d032      	beq.n	8006e50 <__sflush_r+0x98>
 8006dea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006dec:	89a3      	ldrh	r3, [r4, #12]
 8006dee:	075a      	lsls	r2, r3, #29
 8006df0:	d505      	bpl.n	8006dfe <__sflush_r+0x46>
 8006df2:	6863      	ldr	r3, [r4, #4]
 8006df4:	1ac0      	subs	r0, r0, r3
 8006df6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006df8:	b10b      	cbz	r3, 8006dfe <__sflush_r+0x46>
 8006dfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dfc:	1ac0      	subs	r0, r0, r3
 8006dfe:	2300      	movs	r3, #0
 8006e00:	4602      	mov	r2, r0
 8006e02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e04:	6a21      	ldr	r1, [r4, #32]
 8006e06:	4628      	mov	r0, r5
 8006e08:	47b0      	blx	r6
 8006e0a:	1c43      	adds	r3, r0, #1
 8006e0c:	89a3      	ldrh	r3, [r4, #12]
 8006e0e:	d106      	bne.n	8006e1e <__sflush_r+0x66>
 8006e10:	6829      	ldr	r1, [r5, #0]
 8006e12:	291d      	cmp	r1, #29
 8006e14:	d82c      	bhi.n	8006e70 <__sflush_r+0xb8>
 8006e16:	4a2a      	ldr	r2, [pc, #168]	; (8006ec0 <__sflush_r+0x108>)
 8006e18:	40ca      	lsrs	r2, r1
 8006e1a:	07d6      	lsls	r6, r2, #31
 8006e1c:	d528      	bpl.n	8006e70 <__sflush_r+0xb8>
 8006e1e:	2200      	movs	r2, #0
 8006e20:	6062      	str	r2, [r4, #4]
 8006e22:	04d9      	lsls	r1, r3, #19
 8006e24:	6922      	ldr	r2, [r4, #16]
 8006e26:	6022      	str	r2, [r4, #0]
 8006e28:	d504      	bpl.n	8006e34 <__sflush_r+0x7c>
 8006e2a:	1c42      	adds	r2, r0, #1
 8006e2c:	d101      	bne.n	8006e32 <__sflush_r+0x7a>
 8006e2e:	682b      	ldr	r3, [r5, #0]
 8006e30:	b903      	cbnz	r3, 8006e34 <__sflush_r+0x7c>
 8006e32:	6560      	str	r0, [r4, #84]	; 0x54
 8006e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e36:	602f      	str	r7, [r5, #0]
 8006e38:	2900      	cmp	r1, #0
 8006e3a:	d0ca      	beq.n	8006dd2 <__sflush_r+0x1a>
 8006e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e40:	4299      	cmp	r1, r3
 8006e42:	d002      	beq.n	8006e4a <__sflush_r+0x92>
 8006e44:	4628      	mov	r0, r5
 8006e46:	f000 f9f1 	bl	800722c <_free_r>
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	6360      	str	r0, [r4, #52]	; 0x34
 8006e4e:	e7c1      	b.n	8006dd4 <__sflush_r+0x1c>
 8006e50:	6a21      	ldr	r1, [r4, #32]
 8006e52:	2301      	movs	r3, #1
 8006e54:	4628      	mov	r0, r5
 8006e56:	47b0      	blx	r6
 8006e58:	1c41      	adds	r1, r0, #1
 8006e5a:	d1c7      	bne.n	8006dec <__sflush_r+0x34>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0c4      	beq.n	8006dec <__sflush_r+0x34>
 8006e62:	2b1d      	cmp	r3, #29
 8006e64:	d001      	beq.n	8006e6a <__sflush_r+0xb2>
 8006e66:	2b16      	cmp	r3, #22
 8006e68:	d101      	bne.n	8006e6e <__sflush_r+0xb6>
 8006e6a:	602f      	str	r7, [r5, #0]
 8006e6c:	e7b1      	b.n	8006dd2 <__sflush_r+0x1a>
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e74:	81a3      	strh	r3, [r4, #12]
 8006e76:	e7ad      	b.n	8006dd4 <__sflush_r+0x1c>
 8006e78:	690f      	ldr	r7, [r1, #16]
 8006e7a:	2f00      	cmp	r7, #0
 8006e7c:	d0a9      	beq.n	8006dd2 <__sflush_r+0x1a>
 8006e7e:	0793      	lsls	r3, r2, #30
 8006e80:	680e      	ldr	r6, [r1, #0]
 8006e82:	bf08      	it	eq
 8006e84:	694b      	ldreq	r3, [r1, #20]
 8006e86:	600f      	str	r7, [r1, #0]
 8006e88:	bf18      	it	ne
 8006e8a:	2300      	movne	r3, #0
 8006e8c:	eba6 0807 	sub.w	r8, r6, r7
 8006e90:	608b      	str	r3, [r1, #8]
 8006e92:	f1b8 0f00 	cmp.w	r8, #0
 8006e96:	dd9c      	ble.n	8006dd2 <__sflush_r+0x1a>
 8006e98:	6a21      	ldr	r1, [r4, #32]
 8006e9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e9c:	4643      	mov	r3, r8
 8006e9e:	463a      	mov	r2, r7
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	47b0      	blx	r6
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	dc06      	bgt.n	8006eb6 <__sflush_r+0xfe>
 8006ea8:	89a3      	ldrh	r3, [r4, #12]
 8006eaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eae:	81a3      	strh	r3, [r4, #12]
 8006eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb4:	e78e      	b.n	8006dd4 <__sflush_r+0x1c>
 8006eb6:	4407      	add	r7, r0
 8006eb8:	eba8 0800 	sub.w	r8, r8, r0
 8006ebc:	e7e9      	b.n	8006e92 <__sflush_r+0xda>
 8006ebe:	bf00      	nop
 8006ec0:	20400001 	.word	0x20400001

08006ec4 <_fflush_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	690b      	ldr	r3, [r1, #16]
 8006ec8:	4605      	mov	r5, r0
 8006eca:	460c      	mov	r4, r1
 8006ecc:	b913      	cbnz	r3, 8006ed4 <_fflush_r+0x10>
 8006ece:	2500      	movs	r5, #0
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	b118      	cbz	r0, 8006ede <_fflush_r+0x1a>
 8006ed6:	6983      	ldr	r3, [r0, #24]
 8006ed8:	b90b      	cbnz	r3, 8006ede <_fflush_r+0x1a>
 8006eda:	f000 f887 	bl	8006fec <__sinit>
 8006ede:	4b14      	ldr	r3, [pc, #80]	; (8006f30 <_fflush_r+0x6c>)
 8006ee0:	429c      	cmp	r4, r3
 8006ee2:	d11b      	bne.n	8006f1c <_fflush_r+0x58>
 8006ee4:	686c      	ldr	r4, [r5, #4]
 8006ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0ef      	beq.n	8006ece <_fflush_r+0xa>
 8006eee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ef0:	07d0      	lsls	r0, r2, #31
 8006ef2:	d404      	bmi.n	8006efe <_fflush_r+0x3a>
 8006ef4:	0599      	lsls	r1, r3, #22
 8006ef6:	d402      	bmi.n	8006efe <_fflush_r+0x3a>
 8006ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006efa:	f000 f927 	bl	800714c <__retarget_lock_acquire_recursive>
 8006efe:	4628      	mov	r0, r5
 8006f00:	4621      	mov	r1, r4
 8006f02:	f7ff ff59 	bl	8006db8 <__sflush_r>
 8006f06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f08:	07da      	lsls	r2, r3, #31
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	d4e0      	bmi.n	8006ed0 <_fflush_r+0xc>
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	059b      	lsls	r3, r3, #22
 8006f12:	d4dd      	bmi.n	8006ed0 <_fflush_r+0xc>
 8006f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f16:	f000 f91a 	bl	800714e <__retarget_lock_release_recursive>
 8006f1a:	e7d9      	b.n	8006ed0 <_fflush_r+0xc>
 8006f1c:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <_fflush_r+0x70>)
 8006f1e:	429c      	cmp	r4, r3
 8006f20:	d101      	bne.n	8006f26 <_fflush_r+0x62>
 8006f22:	68ac      	ldr	r4, [r5, #8]
 8006f24:	e7df      	b.n	8006ee6 <_fflush_r+0x22>
 8006f26:	4b04      	ldr	r3, [pc, #16]	; (8006f38 <_fflush_r+0x74>)
 8006f28:	429c      	cmp	r4, r3
 8006f2a:	bf08      	it	eq
 8006f2c:	68ec      	ldreq	r4, [r5, #12]
 8006f2e:	e7da      	b.n	8006ee6 <_fflush_r+0x22>
 8006f30:	080083c4 	.word	0x080083c4
 8006f34:	080083e4 	.word	0x080083e4
 8006f38:	080083a4 	.word	0x080083a4

08006f3c <std>:
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	b510      	push	{r4, lr}
 8006f40:	4604      	mov	r4, r0
 8006f42:	e9c0 3300 	strd	r3, r3, [r0]
 8006f46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f4a:	6083      	str	r3, [r0, #8]
 8006f4c:	8181      	strh	r1, [r0, #12]
 8006f4e:	6643      	str	r3, [r0, #100]	; 0x64
 8006f50:	81c2      	strh	r2, [r0, #14]
 8006f52:	6183      	str	r3, [r0, #24]
 8006f54:	4619      	mov	r1, r3
 8006f56:	2208      	movs	r2, #8
 8006f58:	305c      	adds	r0, #92	; 0x5c
 8006f5a:	f7ff fcb1 	bl	80068c0 <memset>
 8006f5e:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <std+0x38>)
 8006f60:	6263      	str	r3, [r4, #36]	; 0x24
 8006f62:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <std+0x3c>)
 8006f64:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f66:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <std+0x40>)
 8006f68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f6a:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <std+0x44>)
 8006f6c:	6224      	str	r4, [r4, #32]
 8006f6e:	6323      	str	r3, [r4, #48]	; 0x30
 8006f70:	bd10      	pop	{r4, pc}
 8006f72:	bf00      	nop
 8006f74:	08007ca1 	.word	0x08007ca1
 8006f78:	08007cc3 	.word	0x08007cc3
 8006f7c:	08007cfb 	.word	0x08007cfb
 8006f80:	08007d1f 	.word	0x08007d1f

08006f84 <_cleanup_r>:
 8006f84:	4901      	ldr	r1, [pc, #4]	; (8006f8c <_cleanup_r+0x8>)
 8006f86:	f000 b8c1 	b.w	800710c <_fwalk_reent>
 8006f8a:	bf00      	nop
 8006f8c:	08006ec5 	.word	0x08006ec5

08006f90 <__sfmoreglue>:
 8006f90:	b570      	push	{r4, r5, r6, lr}
 8006f92:	2268      	movs	r2, #104	; 0x68
 8006f94:	1e4d      	subs	r5, r1, #1
 8006f96:	4355      	muls	r5, r2
 8006f98:	460e      	mov	r6, r1
 8006f9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f9e:	f000 f9b1 	bl	8007304 <_malloc_r>
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	b140      	cbz	r0, 8006fb8 <__sfmoreglue+0x28>
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	e9c0 1600 	strd	r1, r6, [r0]
 8006fac:	300c      	adds	r0, #12
 8006fae:	60a0      	str	r0, [r4, #8]
 8006fb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fb4:	f7ff fc84 	bl	80068c0 <memset>
 8006fb8:	4620      	mov	r0, r4
 8006fba:	bd70      	pop	{r4, r5, r6, pc}

08006fbc <__sfp_lock_acquire>:
 8006fbc:	4801      	ldr	r0, [pc, #4]	; (8006fc4 <__sfp_lock_acquire+0x8>)
 8006fbe:	f000 b8c5 	b.w	800714c <__retarget_lock_acquire_recursive>
 8006fc2:	bf00      	nop
 8006fc4:	200002a1 	.word	0x200002a1

08006fc8 <__sfp_lock_release>:
 8006fc8:	4801      	ldr	r0, [pc, #4]	; (8006fd0 <__sfp_lock_release+0x8>)
 8006fca:	f000 b8c0 	b.w	800714e <__retarget_lock_release_recursive>
 8006fce:	bf00      	nop
 8006fd0:	200002a1 	.word	0x200002a1

08006fd4 <__sinit_lock_acquire>:
 8006fd4:	4801      	ldr	r0, [pc, #4]	; (8006fdc <__sinit_lock_acquire+0x8>)
 8006fd6:	f000 b8b9 	b.w	800714c <__retarget_lock_acquire_recursive>
 8006fda:	bf00      	nop
 8006fdc:	200002a2 	.word	0x200002a2

08006fe0 <__sinit_lock_release>:
 8006fe0:	4801      	ldr	r0, [pc, #4]	; (8006fe8 <__sinit_lock_release+0x8>)
 8006fe2:	f000 b8b4 	b.w	800714e <__retarget_lock_release_recursive>
 8006fe6:	bf00      	nop
 8006fe8:	200002a2 	.word	0x200002a2

08006fec <__sinit>:
 8006fec:	b510      	push	{r4, lr}
 8006fee:	4604      	mov	r4, r0
 8006ff0:	f7ff fff0 	bl	8006fd4 <__sinit_lock_acquire>
 8006ff4:	69a3      	ldr	r3, [r4, #24]
 8006ff6:	b11b      	cbz	r3, 8007000 <__sinit+0x14>
 8006ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ffc:	f7ff bff0 	b.w	8006fe0 <__sinit_lock_release>
 8007000:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007004:	6523      	str	r3, [r4, #80]	; 0x50
 8007006:	4b13      	ldr	r3, [pc, #76]	; (8007054 <__sinit+0x68>)
 8007008:	4a13      	ldr	r2, [pc, #76]	; (8007058 <__sinit+0x6c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	62a2      	str	r2, [r4, #40]	; 0x28
 800700e:	42a3      	cmp	r3, r4
 8007010:	bf04      	itt	eq
 8007012:	2301      	moveq	r3, #1
 8007014:	61a3      	streq	r3, [r4, #24]
 8007016:	4620      	mov	r0, r4
 8007018:	f000 f820 	bl	800705c <__sfp>
 800701c:	6060      	str	r0, [r4, #4]
 800701e:	4620      	mov	r0, r4
 8007020:	f000 f81c 	bl	800705c <__sfp>
 8007024:	60a0      	str	r0, [r4, #8]
 8007026:	4620      	mov	r0, r4
 8007028:	f000 f818 	bl	800705c <__sfp>
 800702c:	2200      	movs	r2, #0
 800702e:	60e0      	str	r0, [r4, #12]
 8007030:	2104      	movs	r1, #4
 8007032:	6860      	ldr	r0, [r4, #4]
 8007034:	f7ff ff82 	bl	8006f3c <std>
 8007038:	68a0      	ldr	r0, [r4, #8]
 800703a:	2201      	movs	r2, #1
 800703c:	2109      	movs	r1, #9
 800703e:	f7ff ff7d 	bl	8006f3c <std>
 8007042:	68e0      	ldr	r0, [r4, #12]
 8007044:	2202      	movs	r2, #2
 8007046:	2112      	movs	r1, #18
 8007048:	f7ff ff78 	bl	8006f3c <std>
 800704c:	2301      	movs	r3, #1
 800704e:	61a3      	str	r3, [r4, #24]
 8007050:	e7d2      	b.n	8006ff8 <__sinit+0xc>
 8007052:	bf00      	nop
 8007054:	080081ec 	.word	0x080081ec
 8007058:	08006f85 	.word	0x08006f85

0800705c <__sfp>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	4607      	mov	r7, r0
 8007060:	f7ff ffac 	bl	8006fbc <__sfp_lock_acquire>
 8007064:	4b1e      	ldr	r3, [pc, #120]	; (80070e0 <__sfp+0x84>)
 8007066:	681e      	ldr	r6, [r3, #0]
 8007068:	69b3      	ldr	r3, [r6, #24]
 800706a:	b913      	cbnz	r3, 8007072 <__sfp+0x16>
 800706c:	4630      	mov	r0, r6
 800706e:	f7ff ffbd 	bl	8006fec <__sinit>
 8007072:	3648      	adds	r6, #72	; 0x48
 8007074:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007078:	3b01      	subs	r3, #1
 800707a:	d503      	bpl.n	8007084 <__sfp+0x28>
 800707c:	6833      	ldr	r3, [r6, #0]
 800707e:	b30b      	cbz	r3, 80070c4 <__sfp+0x68>
 8007080:	6836      	ldr	r6, [r6, #0]
 8007082:	e7f7      	b.n	8007074 <__sfp+0x18>
 8007084:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007088:	b9d5      	cbnz	r5, 80070c0 <__sfp+0x64>
 800708a:	4b16      	ldr	r3, [pc, #88]	; (80070e4 <__sfp+0x88>)
 800708c:	60e3      	str	r3, [r4, #12]
 800708e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007092:	6665      	str	r5, [r4, #100]	; 0x64
 8007094:	f000 f859 	bl	800714a <__retarget_lock_init_recursive>
 8007098:	f7ff ff96 	bl	8006fc8 <__sfp_lock_release>
 800709c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070a4:	6025      	str	r5, [r4, #0]
 80070a6:	61a5      	str	r5, [r4, #24]
 80070a8:	2208      	movs	r2, #8
 80070aa:	4629      	mov	r1, r5
 80070ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070b0:	f7ff fc06 	bl	80068c0 <memset>
 80070b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070bc:	4620      	mov	r0, r4
 80070be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070c0:	3468      	adds	r4, #104	; 0x68
 80070c2:	e7d9      	b.n	8007078 <__sfp+0x1c>
 80070c4:	2104      	movs	r1, #4
 80070c6:	4638      	mov	r0, r7
 80070c8:	f7ff ff62 	bl	8006f90 <__sfmoreglue>
 80070cc:	4604      	mov	r4, r0
 80070ce:	6030      	str	r0, [r6, #0]
 80070d0:	2800      	cmp	r0, #0
 80070d2:	d1d5      	bne.n	8007080 <__sfp+0x24>
 80070d4:	f7ff ff78 	bl	8006fc8 <__sfp_lock_release>
 80070d8:	230c      	movs	r3, #12
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	e7ee      	b.n	80070bc <__sfp+0x60>
 80070de:	bf00      	nop
 80070e0:	080081ec 	.word	0x080081ec
 80070e4:	ffff0001 	.word	0xffff0001

080070e8 <fiprintf>:
 80070e8:	b40e      	push	{r1, r2, r3}
 80070ea:	b503      	push	{r0, r1, lr}
 80070ec:	4601      	mov	r1, r0
 80070ee:	ab03      	add	r3, sp, #12
 80070f0:	4805      	ldr	r0, [pc, #20]	; (8007108 <fiprintf+0x20>)
 80070f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80070f6:	6800      	ldr	r0, [r0, #0]
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	f000 fafd 	bl	80076f8 <_vfiprintf_r>
 80070fe:	b002      	add	sp, #8
 8007100:	f85d eb04 	ldr.w	lr, [sp], #4
 8007104:	b003      	add	sp, #12
 8007106:	4770      	bx	lr
 8007108:	200000a8 	.word	0x200000a8

0800710c <_fwalk_reent>:
 800710c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007110:	4606      	mov	r6, r0
 8007112:	4688      	mov	r8, r1
 8007114:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007118:	2700      	movs	r7, #0
 800711a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800711e:	f1b9 0901 	subs.w	r9, r9, #1
 8007122:	d505      	bpl.n	8007130 <_fwalk_reent+0x24>
 8007124:	6824      	ldr	r4, [r4, #0]
 8007126:	2c00      	cmp	r4, #0
 8007128:	d1f7      	bne.n	800711a <_fwalk_reent+0xe>
 800712a:	4638      	mov	r0, r7
 800712c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007130:	89ab      	ldrh	r3, [r5, #12]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d907      	bls.n	8007146 <_fwalk_reent+0x3a>
 8007136:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800713a:	3301      	adds	r3, #1
 800713c:	d003      	beq.n	8007146 <_fwalk_reent+0x3a>
 800713e:	4629      	mov	r1, r5
 8007140:	4630      	mov	r0, r6
 8007142:	47c0      	blx	r8
 8007144:	4307      	orrs	r7, r0
 8007146:	3568      	adds	r5, #104	; 0x68
 8007148:	e7e9      	b.n	800711e <_fwalk_reent+0x12>

0800714a <__retarget_lock_init_recursive>:
 800714a:	4770      	bx	lr

0800714c <__retarget_lock_acquire_recursive>:
 800714c:	4770      	bx	lr

0800714e <__retarget_lock_release_recursive>:
 800714e:	4770      	bx	lr

08007150 <__swhatbuf_r>:
 8007150:	b570      	push	{r4, r5, r6, lr}
 8007152:	460e      	mov	r6, r1
 8007154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007158:	2900      	cmp	r1, #0
 800715a:	b096      	sub	sp, #88	; 0x58
 800715c:	4614      	mov	r4, r2
 800715e:	461d      	mov	r5, r3
 8007160:	da08      	bge.n	8007174 <__swhatbuf_r+0x24>
 8007162:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	602a      	str	r2, [r5, #0]
 800716a:	061a      	lsls	r2, r3, #24
 800716c:	d410      	bmi.n	8007190 <__swhatbuf_r+0x40>
 800716e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007172:	e00e      	b.n	8007192 <__swhatbuf_r+0x42>
 8007174:	466a      	mov	r2, sp
 8007176:	f000 fe01 	bl	8007d7c <_fstat_r>
 800717a:	2800      	cmp	r0, #0
 800717c:	dbf1      	blt.n	8007162 <__swhatbuf_r+0x12>
 800717e:	9a01      	ldr	r2, [sp, #4]
 8007180:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007184:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007188:	425a      	negs	r2, r3
 800718a:	415a      	adcs	r2, r3
 800718c:	602a      	str	r2, [r5, #0]
 800718e:	e7ee      	b.n	800716e <__swhatbuf_r+0x1e>
 8007190:	2340      	movs	r3, #64	; 0x40
 8007192:	2000      	movs	r0, #0
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	b016      	add	sp, #88	; 0x58
 8007198:	bd70      	pop	{r4, r5, r6, pc}
	...

0800719c <__smakebuf_r>:
 800719c:	898b      	ldrh	r3, [r1, #12]
 800719e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071a0:	079d      	lsls	r5, r3, #30
 80071a2:	4606      	mov	r6, r0
 80071a4:	460c      	mov	r4, r1
 80071a6:	d507      	bpl.n	80071b8 <__smakebuf_r+0x1c>
 80071a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	6123      	str	r3, [r4, #16]
 80071b0:	2301      	movs	r3, #1
 80071b2:	6163      	str	r3, [r4, #20]
 80071b4:	b002      	add	sp, #8
 80071b6:	bd70      	pop	{r4, r5, r6, pc}
 80071b8:	ab01      	add	r3, sp, #4
 80071ba:	466a      	mov	r2, sp
 80071bc:	f7ff ffc8 	bl	8007150 <__swhatbuf_r>
 80071c0:	9900      	ldr	r1, [sp, #0]
 80071c2:	4605      	mov	r5, r0
 80071c4:	4630      	mov	r0, r6
 80071c6:	f000 f89d 	bl	8007304 <_malloc_r>
 80071ca:	b948      	cbnz	r0, 80071e0 <__smakebuf_r+0x44>
 80071cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071d0:	059a      	lsls	r2, r3, #22
 80071d2:	d4ef      	bmi.n	80071b4 <__smakebuf_r+0x18>
 80071d4:	f023 0303 	bic.w	r3, r3, #3
 80071d8:	f043 0302 	orr.w	r3, r3, #2
 80071dc:	81a3      	strh	r3, [r4, #12]
 80071de:	e7e3      	b.n	80071a8 <__smakebuf_r+0xc>
 80071e0:	4b0d      	ldr	r3, [pc, #52]	; (8007218 <__smakebuf_r+0x7c>)
 80071e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80071e4:	89a3      	ldrh	r3, [r4, #12]
 80071e6:	6020      	str	r0, [r4, #0]
 80071e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ec:	81a3      	strh	r3, [r4, #12]
 80071ee:	9b00      	ldr	r3, [sp, #0]
 80071f0:	6163      	str	r3, [r4, #20]
 80071f2:	9b01      	ldr	r3, [sp, #4]
 80071f4:	6120      	str	r0, [r4, #16]
 80071f6:	b15b      	cbz	r3, 8007210 <__smakebuf_r+0x74>
 80071f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071fc:	4630      	mov	r0, r6
 80071fe:	f000 fdcf 	bl	8007da0 <_isatty_r>
 8007202:	b128      	cbz	r0, 8007210 <__smakebuf_r+0x74>
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	f023 0303 	bic.w	r3, r3, #3
 800720a:	f043 0301 	orr.w	r3, r3, #1
 800720e:	81a3      	strh	r3, [r4, #12]
 8007210:	89a0      	ldrh	r0, [r4, #12]
 8007212:	4305      	orrs	r5, r0
 8007214:	81a5      	strh	r5, [r4, #12]
 8007216:	e7cd      	b.n	80071b4 <__smakebuf_r+0x18>
 8007218:	08006f85 	.word	0x08006f85

0800721c <malloc>:
 800721c:	4b02      	ldr	r3, [pc, #8]	; (8007228 <malloc+0xc>)
 800721e:	4601      	mov	r1, r0
 8007220:	6818      	ldr	r0, [r3, #0]
 8007222:	f000 b86f 	b.w	8007304 <_malloc_r>
 8007226:	bf00      	nop
 8007228:	200000a8 	.word	0x200000a8

0800722c <_free_r>:
 800722c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800722e:	2900      	cmp	r1, #0
 8007230:	d044      	beq.n	80072bc <_free_r+0x90>
 8007232:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007236:	9001      	str	r0, [sp, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	f1a1 0404 	sub.w	r4, r1, #4
 800723e:	bfb8      	it	lt
 8007240:	18e4      	addlt	r4, r4, r3
 8007242:	f000 fdf7 	bl	8007e34 <__malloc_lock>
 8007246:	4a1e      	ldr	r2, [pc, #120]	; (80072c0 <_free_r+0x94>)
 8007248:	9801      	ldr	r0, [sp, #4]
 800724a:	6813      	ldr	r3, [r2, #0]
 800724c:	b933      	cbnz	r3, 800725c <_free_r+0x30>
 800724e:	6063      	str	r3, [r4, #4]
 8007250:	6014      	str	r4, [r2, #0]
 8007252:	b003      	add	sp, #12
 8007254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007258:	f000 bdf2 	b.w	8007e40 <__malloc_unlock>
 800725c:	42a3      	cmp	r3, r4
 800725e:	d908      	bls.n	8007272 <_free_r+0x46>
 8007260:	6825      	ldr	r5, [r4, #0]
 8007262:	1961      	adds	r1, r4, r5
 8007264:	428b      	cmp	r3, r1
 8007266:	bf01      	itttt	eq
 8007268:	6819      	ldreq	r1, [r3, #0]
 800726a:	685b      	ldreq	r3, [r3, #4]
 800726c:	1949      	addeq	r1, r1, r5
 800726e:	6021      	streq	r1, [r4, #0]
 8007270:	e7ed      	b.n	800724e <_free_r+0x22>
 8007272:	461a      	mov	r2, r3
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	b10b      	cbz	r3, 800727c <_free_r+0x50>
 8007278:	42a3      	cmp	r3, r4
 800727a:	d9fa      	bls.n	8007272 <_free_r+0x46>
 800727c:	6811      	ldr	r1, [r2, #0]
 800727e:	1855      	adds	r5, r2, r1
 8007280:	42a5      	cmp	r5, r4
 8007282:	d10b      	bne.n	800729c <_free_r+0x70>
 8007284:	6824      	ldr	r4, [r4, #0]
 8007286:	4421      	add	r1, r4
 8007288:	1854      	adds	r4, r2, r1
 800728a:	42a3      	cmp	r3, r4
 800728c:	6011      	str	r1, [r2, #0]
 800728e:	d1e0      	bne.n	8007252 <_free_r+0x26>
 8007290:	681c      	ldr	r4, [r3, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	6053      	str	r3, [r2, #4]
 8007296:	4421      	add	r1, r4
 8007298:	6011      	str	r1, [r2, #0]
 800729a:	e7da      	b.n	8007252 <_free_r+0x26>
 800729c:	d902      	bls.n	80072a4 <_free_r+0x78>
 800729e:	230c      	movs	r3, #12
 80072a0:	6003      	str	r3, [r0, #0]
 80072a2:	e7d6      	b.n	8007252 <_free_r+0x26>
 80072a4:	6825      	ldr	r5, [r4, #0]
 80072a6:	1961      	adds	r1, r4, r5
 80072a8:	428b      	cmp	r3, r1
 80072aa:	bf04      	itt	eq
 80072ac:	6819      	ldreq	r1, [r3, #0]
 80072ae:	685b      	ldreq	r3, [r3, #4]
 80072b0:	6063      	str	r3, [r4, #4]
 80072b2:	bf04      	itt	eq
 80072b4:	1949      	addeq	r1, r1, r5
 80072b6:	6021      	streq	r1, [r4, #0]
 80072b8:	6054      	str	r4, [r2, #4]
 80072ba:	e7ca      	b.n	8007252 <_free_r+0x26>
 80072bc:	b003      	add	sp, #12
 80072be:	bd30      	pop	{r4, r5, pc}
 80072c0:	200002a4 	.word	0x200002a4

080072c4 <sbrk_aligned>:
 80072c4:	b570      	push	{r4, r5, r6, lr}
 80072c6:	4e0e      	ldr	r6, [pc, #56]	; (8007300 <sbrk_aligned+0x3c>)
 80072c8:	460c      	mov	r4, r1
 80072ca:	6831      	ldr	r1, [r6, #0]
 80072cc:	4605      	mov	r5, r0
 80072ce:	b911      	cbnz	r1, 80072d6 <sbrk_aligned+0x12>
 80072d0:	f000 fcd6 	bl	8007c80 <_sbrk_r>
 80072d4:	6030      	str	r0, [r6, #0]
 80072d6:	4621      	mov	r1, r4
 80072d8:	4628      	mov	r0, r5
 80072da:	f000 fcd1 	bl	8007c80 <_sbrk_r>
 80072de:	1c43      	adds	r3, r0, #1
 80072e0:	d00a      	beq.n	80072f8 <sbrk_aligned+0x34>
 80072e2:	1cc4      	adds	r4, r0, #3
 80072e4:	f024 0403 	bic.w	r4, r4, #3
 80072e8:	42a0      	cmp	r0, r4
 80072ea:	d007      	beq.n	80072fc <sbrk_aligned+0x38>
 80072ec:	1a21      	subs	r1, r4, r0
 80072ee:	4628      	mov	r0, r5
 80072f0:	f000 fcc6 	bl	8007c80 <_sbrk_r>
 80072f4:	3001      	adds	r0, #1
 80072f6:	d101      	bne.n	80072fc <sbrk_aligned+0x38>
 80072f8:	f04f 34ff 	mov.w	r4, #4294967295
 80072fc:	4620      	mov	r0, r4
 80072fe:	bd70      	pop	{r4, r5, r6, pc}
 8007300:	200002a8 	.word	0x200002a8

08007304 <_malloc_r>:
 8007304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007308:	1ccd      	adds	r5, r1, #3
 800730a:	f025 0503 	bic.w	r5, r5, #3
 800730e:	3508      	adds	r5, #8
 8007310:	2d0c      	cmp	r5, #12
 8007312:	bf38      	it	cc
 8007314:	250c      	movcc	r5, #12
 8007316:	2d00      	cmp	r5, #0
 8007318:	4607      	mov	r7, r0
 800731a:	db01      	blt.n	8007320 <_malloc_r+0x1c>
 800731c:	42a9      	cmp	r1, r5
 800731e:	d905      	bls.n	800732c <_malloc_r+0x28>
 8007320:	230c      	movs	r3, #12
 8007322:	603b      	str	r3, [r7, #0]
 8007324:	2600      	movs	r6, #0
 8007326:	4630      	mov	r0, r6
 8007328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800732c:	4e2e      	ldr	r6, [pc, #184]	; (80073e8 <_malloc_r+0xe4>)
 800732e:	f000 fd81 	bl	8007e34 <__malloc_lock>
 8007332:	6833      	ldr	r3, [r6, #0]
 8007334:	461c      	mov	r4, r3
 8007336:	bb34      	cbnz	r4, 8007386 <_malloc_r+0x82>
 8007338:	4629      	mov	r1, r5
 800733a:	4638      	mov	r0, r7
 800733c:	f7ff ffc2 	bl	80072c4 <sbrk_aligned>
 8007340:	1c43      	adds	r3, r0, #1
 8007342:	4604      	mov	r4, r0
 8007344:	d14d      	bne.n	80073e2 <_malloc_r+0xde>
 8007346:	6834      	ldr	r4, [r6, #0]
 8007348:	4626      	mov	r6, r4
 800734a:	2e00      	cmp	r6, #0
 800734c:	d140      	bne.n	80073d0 <_malloc_r+0xcc>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	4631      	mov	r1, r6
 8007352:	4638      	mov	r0, r7
 8007354:	eb04 0803 	add.w	r8, r4, r3
 8007358:	f000 fc92 	bl	8007c80 <_sbrk_r>
 800735c:	4580      	cmp	r8, r0
 800735e:	d13a      	bne.n	80073d6 <_malloc_r+0xd2>
 8007360:	6821      	ldr	r1, [r4, #0]
 8007362:	3503      	adds	r5, #3
 8007364:	1a6d      	subs	r5, r5, r1
 8007366:	f025 0503 	bic.w	r5, r5, #3
 800736a:	3508      	adds	r5, #8
 800736c:	2d0c      	cmp	r5, #12
 800736e:	bf38      	it	cc
 8007370:	250c      	movcc	r5, #12
 8007372:	4629      	mov	r1, r5
 8007374:	4638      	mov	r0, r7
 8007376:	f7ff ffa5 	bl	80072c4 <sbrk_aligned>
 800737a:	3001      	adds	r0, #1
 800737c:	d02b      	beq.n	80073d6 <_malloc_r+0xd2>
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	442b      	add	r3, r5
 8007382:	6023      	str	r3, [r4, #0]
 8007384:	e00e      	b.n	80073a4 <_malloc_r+0xa0>
 8007386:	6822      	ldr	r2, [r4, #0]
 8007388:	1b52      	subs	r2, r2, r5
 800738a:	d41e      	bmi.n	80073ca <_malloc_r+0xc6>
 800738c:	2a0b      	cmp	r2, #11
 800738e:	d916      	bls.n	80073be <_malloc_r+0xba>
 8007390:	1961      	adds	r1, r4, r5
 8007392:	42a3      	cmp	r3, r4
 8007394:	6025      	str	r5, [r4, #0]
 8007396:	bf18      	it	ne
 8007398:	6059      	strne	r1, [r3, #4]
 800739a:	6863      	ldr	r3, [r4, #4]
 800739c:	bf08      	it	eq
 800739e:	6031      	streq	r1, [r6, #0]
 80073a0:	5162      	str	r2, [r4, r5]
 80073a2:	604b      	str	r3, [r1, #4]
 80073a4:	4638      	mov	r0, r7
 80073a6:	f104 060b 	add.w	r6, r4, #11
 80073aa:	f000 fd49 	bl	8007e40 <__malloc_unlock>
 80073ae:	f026 0607 	bic.w	r6, r6, #7
 80073b2:	1d23      	adds	r3, r4, #4
 80073b4:	1af2      	subs	r2, r6, r3
 80073b6:	d0b6      	beq.n	8007326 <_malloc_r+0x22>
 80073b8:	1b9b      	subs	r3, r3, r6
 80073ba:	50a3      	str	r3, [r4, r2]
 80073bc:	e7b3      	b.n	8007326 <_malloc_r+0x22>
 80073be:	6862      	ldr	r2, [r4, #4]
 80073c0:	42a3      	cmp	r3, r4
 80073c2:	bf0c      	ite	eq
 80073c4:	6032      	streq	r2, [r6, #0]
 80073c6:	605a      	strne	r2, [r3, #4]
 80073c8:	e7ec      	b.n	80073a4 <_malloc_r+0xa0>
 80073ca:	4623      	mov	r3, r4
 80073cc:	6864      	ldr	r4, [r4, #4]
 80073ce:	e7b2      	b.n	8007336 <_malloc_r+0x32>
 80073d0:	4634      	mov	r4, r6
 80073d2:	6876      	ldr	r6, [r6, #4]
 80073d4:	e7b9      	b.n	800734a <_malloc_r+0x46>
 80073d6:	230c      	movs	r3, #12
 80073d8:	603b      	str	r3, [r7, #0]
 80073da:	4638      	mov	r0, r7
 80073dc:	f000 fd30 	bl	8007e40 <__malloc_unlock>
 80073e0:	e7a1      	b.n	8007326 <_malloc_r+0x22>
 80073e2:	6025      	str	r5, [r4, #0]
 80073e4:	e7de      	b.n	80073a4 <_malloc_r+0xa0>
 80073e6:	bf00      	nop
 80073e8:	200002a4 	.word	0x200002a4

080073ec <__ssputs_r>:
 80073ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f0:	688e      	ldr	r6, [r1, #8]
 80073f2:	429e      	cmp	r6, r3
 80073f4:	4682      	mov	sl, r0
 80073f6:	460c      	mov	r4, r1
 80073f8:	4690      	mov	r8, r2
 80073fa:	461f      	mov	r7, r3
 80073fc:	d838      	bhi.n	8007470 <__ssputs_r+0x84>
 80073fe:	898a      	ldrh	r2, [r1, #12]
 8007400:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007404:	d032      	beq.n	800746c <__ssputs_r+0x80>
 8007406:	6825      	ldr	r5, [r4, #0]
 8007408:	6909      	ldr	r1, [r1, #16]
 800740a:	eba5 0901 	sub.w	r9, r5, r1
 800740e:	6965      	ldr	r5, [r4, #20]
 8007410:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007414:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007418:	3301      	adds	r3, #1
 800741a:	444b      	add	r3, r9
 800741c:	106d      	asrs	r5, r5, #1
 800741e:	429d      	cmp	r5, r3
 8007420:	bf38      	it	cc
 8007422:	461d      	movcc	r5, r3
 8007424:	0553      	lsls	r3, r2, #21
 8007426:	d531      	bpl.n	800748c <__ssputs_r+0xa0>
 8007428:	4629      	mov	r1, r5
 800742a:	f7ff ff6b 	bl	8007304 <_malloc_r>
 800742e:	4606      	mov	r6, r0
 8007430:	b950      	cbnz	r0, 8007448 <__ssputs_r+0x5c>
 8007432:	230c      	movs	r3, #12
 8007434:	f8ca 3000 	str.w	r3, [sl]
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800743e:	81a3      	strh	r3, [r4, #12]
 8007440:	f04f 30ff 	mov.w	r0, #4294967295
 8007444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007448:	6921      	ldr	r1, [r4, #16]
 800744a:	464a      	mov	r2, r9
 800744c:	f000 fcca 	bl	8007de4 <memcpy>
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745a:	81a3      	strh	r3, [r4, #12]
 800745c:	6126      	str	r6, [r4, #16]
 800745e:	6165      	str	r5, [r4, #20]
 8007460:	444e      	add	r6, r9
 8007462:	eba5 0509 	sub.w	r5, r5, r9
 8007466:	6026      	str	r6, [r4, #0]
 8007468:	60a5      	str	r5, [r4, #8]
 800746a:	463e      	mov	r6, r7
 800746c:	42be      	cmp	r6, r7
 800746e:	d900      	bls.n	8007472 <__ssputs_r+0x86>
 8007470:	463e      	mov	r6, r7
 8007472:	6820      	ldr	r0, [r4, #0]
 8007474:	4632      	mov	r2, r6
 8007476:	4641      	mov	r1, r8
 8007478:	f000 fcc2 	bl	8007e00 <memmove>
 800747c:	68a3      	ldr	r3, [r4, #8]
 800747e:	1b9b      	subs	r3, r3, r6
 8007480:	60a3      	str	r3, [r4, #8]
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	4433      	add	r3, r6
 8007486:	6023      	str	r3, [r4, #0]
 8007488:	2000      	movs	r0, #0
 800748a:	e7db      	b.n	8007444 <__ssputs_r+0x58>
 800748c:	462a      	mov	r2, r5
 800748e:	f000 fcdd 	bl	8007e4c <_realloc_r>
 8007492:	4606      	mov	r6, r0
 8007494:	2800      	cmp	r0, #0
 8007496:	d1e1      	bne.n	800745c <__ssputs_r+0x70>
 8007498:	6921      	ldr	r1, [r4, #16]
 800749a:	4650      	mov	r0, sl
 800749c:	f7ff fec6 	bl	800722c <_free_r>
 80074a0:	e7c7      	b.n	8007432 <__ssputs_r+0x46>
	...

080074a4 <_svfiprintf_r>:
 80074a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a8:	4698      	mov	r8, r3
 80074aa:	898b      	ldrh	r3, [r1, #12]
 80074ac:	061b      	lsls	r3, r3, #24
 80074ae:	b09d      	sub	sp, #116	; 0x74
 80074b0:	4607      	mov	r7, r0
 80074b2:	460d      	mov	r5, r1
 80074b4:	4614      	mov	r4, r2
 80074b6:	d50e      	bpl.n	80074d6 <_svfiprintf_r+0x32>
 80074b8:	690b      	ldr	r3, [r1, #16]
 80074ba:	b963      	cbnz	r3, 80074d6 <_svfiprintf_r+0x32>
 80074bc:	2140      	movs	r1, #64	; 0x40
 80074be:	f7ff ff21 	bl	8007304 <_malloc_r>
 80074c2:	6028      	str	r0, [r5, #0]
 80074c4:	6128      	str	r0, [r5, #16]
 80074c6:	b920      	cbnz	r0, 80074d2 <_svfiprintf_r+0x2e>
 80074c8:	230c      	movs	r3, #12
 80074ca:	603b      	str	r3, [r7, #0]
 80074cc:	f04f 30ff 	mov.w	r0, #4294967295
 80074d0:	e0d1      	b.n	8007676 <_svfiprintf_r+0x1d2>
 80074d2:	2340      	movs	r3, #64	; 0x40
 80074d4:	616b      	str	r3, [r5, #20]
 80074d6:	2300      	movs	r3, #0
 80074d8:	9309      	str	r3, [sp, #36]	; 0x24
 80074da:	2320      	movs	r3, #32
 80074dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80074e4:	2330      	movs	r3, #48	; 0x30
 80074e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007690 <_svfiprintf_r+0x1ec>
 80074ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074ee:	f04f 0901 	mov.w	r9, #1
 80074f2:	4623      	mov	r3, r4
 80074f4:	469a      	mov	sl, r3
 80074f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074fa:	b10a      	cbz	r2, 8007500 <_svfiprintf_r+0x5c>
 80074fc:	2a25      	cmp	r2, #37	; 0x25
 80074fe:	d1f9      	bne.n	80074f4 <_svfiprintf_r+0x50>
 8007500:	ebba 0b04 	subs.w	fp, sl, r4
 8007504:	d00b      	beq.n	800751e <_svfiprintf_r+0x7a>
 8007506:	465b      	mov	r3, fp
 8007508:	4622      	mov	r2, r4
 800750a:	4629      	mov	r1, r5
 800750c:	4638      	mov	r0, r7
 800750e:	f7ff ff6d 	bl	80073ec <__ssputs_r>
 8007512:	3001      	adds	r0, #1
 8007514:	f000 80aa 	beq.w	800766c <_svfiprintf_r+0x1c8>
 8007518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800751a:	445a      	add	r2, fp
 800751c:	9209      	str	r2, [sp, #36]	; 0x24
 800751e:	f89a 3000 	ldrb.w	r3, [sl]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80a2 	beq.w	800766c <_svfiprintf_r+0x1c8>
 8007528:	2300      	movs	r3, #0
 800752a:	f04f 32ff 	mov.w	r2, #4294967295
 800752e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007532:	f10a 0a01 	add.w	sl, sl, #1
 8007536:	9304      	str	r3, [sp, #16]
 8007538:	9307      	str	r3, [sp, #28]
 800753a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800753e:	931a      	str	r3, [sp, #104]	; 0x68
 8007540:	4654      	mov	r4, sl
 8007542:	2205      	movs	r2, #5
 8007544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007548:	4851      	ldr	r0, [pc, #324]	; (8007690 <_svfiprintf_r+0x1ec>)
 800754a:	f7f8 fe79 	bl	8000240 <memchr>
 800754e:	9a04      	ldr	r2, [sp, #16]
 8007550:	b9d8      	cbnz	r0, 800758a <_svfiprintf_r+0xe6>
 8007552:	06d0      	lsls	r0, r2, #27
 8007554:	bf44      	itt	mi
 8007556:	2320      	movmi	r3, #32
 8007558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800755c:	0711      	lsls	r1, r2, #28
 800755e:	bf44      	itt	mi
 8007560:	232b      	movmi	r3, #43	; 0x2b
 8007562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007566:	f89a 3000 	ldrb.w	r3, [sl]
 800756a:	2b2a      	cmp	r3, #42	; 0x2a
 800756c:	d015      	beq.n	800759a <_svfiprintf_r+0xf6>
 800756e:	9a07      	ldr	r2, [sp, #28]
 8007570:	4654      	mov	r4, sl
 8007572:	2000      	movs	r0, #0
 8007574:	f04f 0c0a 	mov.w	ip, #10
 8007578:	4621      	mov	r1, r4
 800757a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800757e:	3b30      	subs	r3, #48	; 0x30
 8007580:	2b09      	cmp	r3, #9
 8007582:	d94e      	bls.n	8007622 <_svfiprintf_r+0x17e>
 8007584:	b1b0      	cbz	r0, 80075b4 <_svfiprintf_r+0x110>
 8007586:	9207      	str	r2, [sp, #28]
 8007588:	e014      	b.n	80075b4 <_svfiprintf_r+0x110>
 800758a:	eba0 0308 	sub.w	r3, r0, r8
 800758e:	fa09 f303 	lsl.w	r3, r9, r3
 8007592:	4313      	orrs	r3, r2
 8007594:	9304      	str	r3, [sp, #16]
 8007596:	46a2      	mov	sl, r4
 8007598:	e7d2      	b.n	8007540 <_svfiprintf_r+0x9c>
 800759a:	9b03      	ldr	r3, [sp, #12]
 800759c:	1d19      	adds	r1, r3, #4
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	9103      	str	r1, [sp, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	bfbb      	ittet	lt
 80075a6:	425b      	neglt	r3, r3
 80075a8:	f042 0202 	orrlt.w	r2, r2, #2
 80075ac:	9307      	strge	r3, [sp, #28]
 80075ae:	9307      	strlt	r3, [sp, #28]
 80075b0:	bfb8      	it	lt
 80075b2:	9204      	strlt	r2, [sp, #16]
 80075b4:	7823      	ldrb	r3, [r4, #0]
 80075b6:	2b2e      	cmp	r3, #46	; 0x2e
 80075b8:	d10c      	bne.n	80075d4 <_svfiprintf_r+0x130>
 80075ba:	7863      	ldrb	r3, [r4, #1]
 80075bc:	2b2a      	cmp	r3, #42	; 0x2a
 80075be:	d135      	bne.n	800762c <_svfiprintf_r+0x188>
 80075c0:	9b03      	ldr	r3, [sp, #12]
 80075c2:	1d1a      	adds	r2, r3, #4
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	9203      	str	r2, [sp, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	bfb8      	it	lt
 80075cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80075d0:	3402      	adds	r4, #2
 80075d2:	9305      	str	r3, [sp, #20]
 80075d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80076a0 <_svfiprintf_r+0x1fc>
 80075d8:	7821      	ldrb	r1, [r4, #0]
 80075da:	2203      	movs	r2, #3
 80075dc:	4650      	mov	r0, sl
 80075de:	f7f8 fe2f 	bl	8000240 <memchr>
 80075e2:	b140      	cbz	r0, 80075f6 <_svfiprintf_r+0x152>
 80075e4:	2340      	movs	r3, #64	; 0x40
 80075e6:	eba0 000a 	sub.w	r0, r0, sl
 80075ea:	fa03 f000 	lsl.w	r0, r3, r0
 80075ee:	9b04      	ldr	r3, [sp, #16]
 80075f0:	4303      	orrs	r3, r0
 80075f2:	3401      	adds	r4, #1
 80075f4:	9304      	str	r3, [sp, #16]
 80075f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075fa:	4826      	ldr	r0, [pc, #152]	; (8007694 <_svfiprintf_r+0x1f0>)
 80075fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007600:	2206      	movs	r2, #6
 8007602:	f7f8 fe1d 	bl	8000240 <memchr>
 8007606:	2800      	cmp	r0, #0
 8007608:	d038      	beq.n	800767c <_svfiprintf_r+0x1d8>
 800760a:	4b23      	ldr	r3, [pc, #140]	; (8007698 <_svfiprintf_r+0x1f4>)
 800760c:	bb1b      	cbnz	r3, 8007656 <_svfiprintf_r+0x1b2>
 800760e:	9b03      	ldr	r3, [sp, #12]
 8007610:	3307      	adds	r3, #7
 8007612:	f023 0307 	bic.w	r3, r3, #7
 8007616:	3308      	adds	r3, #8
 8007618:	9303      	str	r3, [sp, #12]
 800761a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800761c:	4433      	add	r3, r6
 800761e:	9309      	str	r3, [sp, #36]	; 0x24
 8007620:	e767      	b.n	80074f2 <_svfiprintf_r+0x4e>
 8007622:	fb0c 3202 	mla	r2, ip, r2, r3
 8007626:	460c      	mov	r4, r1
 8007628:	2001      	movs	r0, #1
 800762a:	e7a5      	b.n	8007578 <_svfiprintf_r+0xd4>
 800762c:	2300      	movs	r3, #0
 800762e:	3401      	adds	r4, #1
 8007630:	9305      	str	r3, [sp, #20]
 8007632:	4619      	mov	r1, r3
 8007634:	f04f 0c0a 	mov.w	ip, #10
 8007638:	4620      	mov	r0, r4
 800763a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800763e:	3a30      	subs	r2, #48	; 0x30
 8007640:	2a09      	cmp	r2, #9
 8007642:	d903      	bls.n	800764c <_svfiprintf_r+0x1a8>
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0c5      	beq.n	80075d4 <_svfiprintf_r+0x130>
 8007648:	9105      	str	r1, [sp, #20]
 800764a:	e7c3      	b.n	80075d4 <_svfiprintf_r+0x130>
 800764c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007650:	4604      	mov	r4, r0
 8007652:	2301      	movs	r3, #1
 8007654:	e7f0      	b.n	8007638 <_svfiprintf_r+0x194>
 8007656:	ab03      	add	r3, sp, #12
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	462a      	mov	r2, r5
 800765c:	4b0f      	ldr	r3, [pc, #60]	; (800769c <_svfiprintf_r+0x1f8>)
 800765e:	a904      	add	r1, sp, #16
 8007660:	4638      	mov	r0, r7
 8007662:	f3af 8000 	nop.w
 8007666:	1c42      	adds	r2, r0, #1
 8007668:	4606      	mov	r6, r0
 800766a:	d1d6      	bne.n	800761a <_svfiprintf_r+0x176>
 800766c:	89ab      	ldrh	r3, [r5, #12]
 800766e:	065b      	lsls	r3, r3, #25
 8007670:	f53f af2c 	bmi.w	80074cc <_svfiprintf_r+0x28>
 8007674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007676:	b01d      	add	sp, #116	; 0x74
 8007678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767c:	ab03      	add	r3, sp, #12
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	462a      	mov	r2, r5
 8007682:	4b06      	ldr	r3, [pc, #24]	; (800769c <_svfiprintf_r+0x1f8>)
 8007684:	a904      	add	r1, sp, #16
 8007686:	4638      	mov	r0, r7
 8007688:	f000 f9d4 	bl	8007a34 <_printf_i>
 800768c:	e7eb      	b.n	8007666 <_svfiprintf_r+0x1c2>
 800768e:	bf00      	nop
 8007690:	08008404 	.word	0x08008404
 8007694:	0800840e 	.word	0x0800840e
 8007698:	00000000 	.word	0x00000000
 800769c:	080073ed 	.word	0x080073ed
 80076a0:	0800840a 	.word	0x0800840a

080076a4 <__sfputc_r>:
 80076a4:	6893      	ldr	r3, [r2, #8]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	b410      	push	{r4}
 80076ac:	6093      	str	r3, [r2, #8]
 80076ae:	da08      	bge.n	80076c2 <__sfputc_r+0x1e>
 80076b0:	6994      	ldr	r4, [r2, #24]
 80076b2:	42a3      	cmp	r3, r4
 80076b4:	db01      	blt.n	80076ba <__sfputc_r+0x16>
 80076b6:	290a      	cmp	r1, #10
 80076b8:	d103      	bne.n	80076c2 <__sfputc_r+0x1e>
 80076ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076be:	f7ff ba9d 	b.w	8006bfc <__swbuf_r>
 80076c2:	6813      	ldr	r3, [r2, #0]
 80076c4:	1c58      	adds	r0, r3, #1
 80076c6:	6010      	str	r0, [r2, #0]
 80076c8:	7019      	strb	r1, [r3, #0]
 80076ca:	4608      	mov	r0, r1
 80076cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <__sfputs_r>:
 80076d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d4:	4606      	mov	r6, r0
 80076d6:	460f      	mov	r7, r1
 80076d8:	4614      	mov	r4, r2
 80076da:	18d5      	adds	r5, r2, r3
 80076dc:	42ac      	cmp	r4, r5
 80076de:	d101      	bne.n	80076e4 <__sfputs_r+0x12>
 80076e0:	2000      	movs	r0, #0
 80076e2:	e007      	b.n	80076f4 <__sfputs_r+0x22>
 80076e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e8:	463a      	mov	r2, r7
 80076ea:	4630      	mov	r0, r6
 80076ec:	f7ff ffda 	bl	80076a4 <__sfputc_r>
 80076f0:	1c43      	adds	r3, r0, #1
 80076f2:	d1f3      	bne.n	80076dc <__sfputs_r+0xa>
 80076f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076f8 <_vfiprintf_r>:
 80076f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fc:	460d      	mov	r5, r1
 80076fe:	b09d      	sub	sp, #116	; 0x74
 8007700:	4614      	mov	r4, r2
 8007702:	4698      	mov	r8, r3
 8007704:	4606      	mov	r6, r0
 8007706:	b118      	cbz	r0, 8007710 <_vfiprintf_r+0x18>
 8007708:	6983      	ldr	r3, [r0, #24]
 800770a:	b90b      	cbnz	r3, 8007710 <_vfiprintf_r+0x18>
 800770c:	f7ff fc6e 	bl	8006fec <__sinit>
 8007710:	4b89      	ldr	r3, [pc, #548]	; (8007938 <_vfiprintf_r+0x240>)
 8007712:	429d      	cmp	r5, r3
 8007714:	d11b      	bne.n	800774e <_vfiprintf_r+0x56>
 8007716:	6875      	ldr	r5, [r6, #4]
 8007718:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800771a:	07d9      	lsls	r1, r3, #31
 800771c:	d405      	bmi.n	800772a <_vfiprintf_r+0x32>
 800771e:	89ab      	ldrh	r3, [r5, #12]
 8007720:	059a      	lsls	r2, r3, #22
 8007722:	d402      	bmi.n	800772a <_vfiprintf_r+0x32>
 8007724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007726:	f7ff fd11 	bl	800714c <__retarget_lock_acquire_recursive>
 800772a:	89ab      	ldrh	r3, [r5, #12]
 800772c:	071b      	lsls	r3, r3, #28
 800772e:	d501      	bpl.n	8007734 <_vfiprintf_r+0x3c>
 8007730:	692b      	ldr	r3, [r5, #16]
 8007732:	b9eb      	cbnz	r3, 8007770 <_vfiprintf_r+0x78>
 8007734:	4629      	mov	r1, r5
 8007736:	4630      	mov	r0, r6
 8007738:	f7ff fab2 	bl	8006ca0 <__swsetup_r>
 800773c:	b1c0      	cbz	r0, 8007770 <_vfiprintf_r+0x78>
 800773e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007740:	07dc      	lsls	r4, r3, #31
 8007742:	d50e      	bpl.n	8007762 <_vfiprintf_r+0x6a>
 8007744:	f04f 30ff 	mov.w	r0, #4294967295
 8007748:	b01d      	add	sp, #116	; 0x74
 800774a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774e:	4b7b      	ldr	r3, [pc, #492]	; (800793c <_vfiprintf_r+0x244>)
 8007750:	429d      	cmp	r5, r3
 8007752:	d101      	bne.n	8007758 <_vfiprintf_r+0x60>
 8007754:	68b5      	ldr	r5, [r6, #8]
 8007756:	e7df      	b.n	8007718 <_vfiprintf_r+0x20>
 8007758:	4b79      	ldr	r3, [pc, #484]	; (8007940 <_vfiprintf_r+0x248>)
 800775a:	429d      	cmp	r5, r3
 800775c:	bf08      	it	eq
 800775e:	68f5      	ldreq	r5, [r6, #12]
 8007760:	e7da      	b.n	8007718 <_vfiprintf_r+0x20>
 8007762:	89ab      	ldrh	r3, [r5, #12]
 8007764:	0598      	lsls	r0, r3, #22
 8007766:	d4ed      	bmi.n	8007744 <_vfiprintf_r+0x4c>
 8007768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800776a:	f7ff fcf0 	bl	800714e <__retarget_lock_release_recursive>
 800776e:	e7e9      	b.n	8007744 <_vfiprintf_r+0x4c>
 8007770:	2300      	movs	r3, #0
 8007772:	9309      	str	r3, [sp, #36]	; 0x24
 8007774:	2320      	movs	r3, #32
 8007776:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800777a:	f8cd 800c 	str.w	r8, [sp, #12]
 800777e:	2330      	movs	r3, #48	; 0x30
 8007780:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007944 <_vfiprintf_r+0x24c>
 8007784:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007788:	f04f 0901 	mov.w	r9, #1
 800778c:	4623      	mov	r3, r4
 800778e:	469a      	mov	sl, r3
 8007790:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007794:	b10a      	cbz	r2, 800779a <_vfiprintf_r+0xa2>
 8007796:	2a25      	cmp	r2, #37	; 0x25
 8007798:	d1f9      	bne.n	800778e <_vfiprintf_r+0x96>
 800779a:	ebba 0b04 	subs.w	fp, sl, r4
 800779e:	d00b      	beq.n	80077b8 <_vfiprintf_r+0xc0>
 80077a0:	465b      	mov	r3, fp
 80077a2:	4622      	mov	r2, r4
 80077a4:	4629      	mov	r1, r5
 80077a6:	4630      	mov	r0, r6
 80077a8:	f7ff ff93 	bl	80076d2 <__sfputs_r>
 80077ac:	3001      	adds	r0, #1
 80077ae:	f000 80aa 	beq.w	8007906 <_vfiprintf_r+0x20e>
 80077b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077b4:	445a      	add	r2, fp
 80077b6:	9209      	str	r2, [sp, #36]	; 0x24
 80077b8:	f89a 3000 	ldrb.w	r3, [sl]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 80a2 	beq.w	8007906 <_vfiprintf_r+0x20e>
 80077c2:	2300      	movs	r3, #0
 80077c4:	f04f 32ff 	mov.w	r2, #4294967295
 80077c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077cc:	f10a 0a01 	add.w	sl, sl, #1
 80077d0:	9304      	str	r3, [sp, #16]
 80077d2:	9307      	str	r3, [sp, #28]
 80077d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077d8:	931a      	str	r3, [sp, #104]	; 0x68
 80077da:	4654      	mov	r4, sl
 80077dc:	2205      	movs	r2, #5
 80077de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e2:	4858      	ldr	r0, [pc, #352]	; (8007944 <_vfiprintf_r+0x24c>)
 80077e4:	f7f8 fd2c 	bl	8000240 <memchr>
 80077e8:	9a04      	ldr	r2, [sp, #16]
 80077ea:	b9d8      	cbnz	r0, 8007824 <_vfiprintf_r+0x12c>
 80077ec:	06d1      	lsls	r1, r2, #27
 80077ee:	bf44      	itt	mi
 80077f0:	2320      	movmi	r3, #32
 80077f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077f6:	0713      	lsls	r3, r2, #28
 80077f8:	bf44      	itt	mi
 80077fa:	232b      	movmi	r3, #43	; 0x2b
 80077fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007800:	f89a 3000 	ldrb.w	r3, [sl]
 8007804:	2b2a      	cmp	r3, #42	; 0x2a
 8007806:	d015      	beq.n	8007834 <_vfiprintf_r+0x13c>
 8007808:	9a07      	ldr	r2, [sp, #28]
 800780a:	4654      	mov	r4, sl
 800780c:	2000      	movs	r0, #0
 800780e:	f04f 0c0a 	mov.w	ip, #10
 8007812:	4621      	mov	r1, r4
 8007814:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007818:	3b30      	subs	r3, #48	; 0x30
 800781a:	2b09      	cmp	r3, #9
 800781c:	d94e      	bls.n	80078bc <_vfiprintf_r+0x1c4>
 800781e:	b1b0      	cbz	r0, 800784e <_vfiprintf_r+0x156>
 8007820:	9207      	str	r2, [sp, #28]
 8007822:	e014      	b.n	800784e <_vfiprintf_r+0x156>
 8007824:	eba0 0308 	sub.w	r3, r0, r8
 8007828:	fa09 f303 	lsl.w	r3, r9, r3
 800782c:	4313      	orrs	r3, r2
 800782e:	9304      	str	r3, [sp, #16]
 8007830:	46a2      	mov	sl, r4
 8007832:	e7d2      	b.n	80077da <_vfiprintf_r+0xe2>
 8007834:	9b03      	ldr	r3, [sp, #12]
 8007836:	1d19      	adds	r1, r3, #4
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	9103      	str	r1, [sp, #12]
 800783c:	2b00      	cmp	r3, #0
 800783e:	bfbb      	ittet	lt
 8007840:	425b      	neglt	r3, r3
 8007842:	f042 0202 	orrlt.w	r2, r2, #2
 8007846:	9307      	strge	r3, [sp, #28]
 8007848:	9307      	strlt	r3, [sp, #28]
 800784a:	bfb8      	it	lt
 800784c:	9204      	strlt	r2, [sp, #16]
 800784e:	7823      	ldrb	r3, [r4, #0]
 8007850:	2b2e      	cmp	r3, #46	; 0x2e
 8007852:	d10c      	bne.n	800786e <_vfiprintf_r+0x176>
 8007854:	7863      	ldrb	r3, [r4, #1]
 8007856:	2b2a      	cmp	r3, #42	; 0x2a
 8007858:	d135      	bne.n	80078c6 <_vfiprintf_r+0x1ce>
 800785a:	9b03      	ldr	r3, [sp, #12]
 800785c:	1d1a      	adds	r2, r3, #4
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	9203      	str	r2, [sp, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	bfb8      	it	lt
 8007866:	f04f 33ff 	movlt.w	r3, #4294967295
 800786a:	3402      	adds	r4, #2
 800786c:	9305      	str	r3, [sp, #20]
 800786e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007954 <_vfiprintf_r+0x25c>
 8007872:	7821      	ldrb	r1, [r4, #0]
 8007874:	2203      	movs	r2, #3
 8007876:	4650      	mov	r0, sl
 8007878:	f7f8 fce2 	bl	8000240 <memchr>
 800787c:	b140      	cbz	r0, 8007890 <_vfiprintf_r+0x198>
 800787e:	2340      	movs	r3, #64	; 0x40
 8007880:	eba0 000a 	sub.w	r0, r0, sl
 8007884:	fa03 f000 	lsl.w	r0, r3, r0
 8007888:	9b04      	ldr	r3, [sp, #16]
 800788a:	4303      	orrs	r3, r0
 800788c:	3401      	adds	r4, #1
 800788e:	9304      	str	r3, [sp, #16]
 8007890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007894:	482c      	ldr	r0, [pc, #176]	; (8007948 <_vfiprintf_r+0x250>)
 8007896:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800789a:	2206      	movs	r2, #6
 800789c:	f7f8 fcd0 	bl	8000240 <memchr>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d03f      	beq.n	8007924 <_vfiprintf_r+0x22c>
 80078a4:	4b29      	ldr	r3, [pc, #164]	; (800794c <_vfiprintf_r+0x254>)
 80078a6:	bb1b      	cbnz	r3, 80078f0 <_vfiprintf_r+0x1f8>
 80078a8:	9b03      	ldr	r3, [sp, #12]
 80078aa:	3307      	adds	r3, #7
 80078ac:	f023 0307 	bic.w	r3, r3, #7
 80078b0:	3308      	adds	r3, #8
 80078b2:	9303      	str	r3, [sp, #12]
 80078b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b6:	443b      	add	r3, r7
 80078b8:	9309      	str	r3, [sp, #36]	; 0x24
 80078ba:	e767      	b.n	800778c <_vfiprintf_r+0x94>
 80078bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80078c0:	460c      	mov	r4, r1
 80078c2:	2001      	movs	r0, #1
 80078c4:	e7a5      	b.n	8007812 <_vfiprintf_r+0x11a>
 80078c6:	2300      	movs	r3, #0
 80078c8:	3401      	adds	r4, #1
 80078ca:	9305      	str	r3, [sp, #20]
 80078cc:	4619      	mov	r1, r3
 80078ce:	f04f 0c0a 	mov.w	ip, #10
 80078d2:	4620      	mov	r0, r4
 80078d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078d8:	3a30      	subs	r2, #48	; 0x30
 80078da:	2a09      	cmp	r2, #9
 80078dc:	d903      	bls.n	80078e6 <_vfiprintf_r+0x1ee>
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d0c5      	beq.n	800786e <_vfiprintf_r+0x176>
 80078e2:	9105      	str	r1, [sp, #20]
 80078e4:	e7c3      	b.n	800786e <_vfiprintf_r+0x176>
 80078e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80078ea:	4604      	mov	r4, r0
 80078ec:	2301      	movs	r3, #1
 80078ee:	e7f0      	b.n	80078d2 <_vfiprintf_r+0x1da>
 80078f0:	ab03      	add	r3, sp, #12
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	462a      	mov	r2, r5
 80078f6:	4b16      	ldr	r3, [pc, #88]	; (8007950 <_vfiprintf_r+0x258>)
 80078f8:	a904      	add	r1, sp, #16
 80078fa:	4630      	mov	r0, r6
 80078fc:	f3af 8000 	nop.w
 8007900:	4607      	mov	r7, r0
 8007902:	1c78      	adds	r0, r7, #1
 8007904:	d1d6      	bne.n	80078b4 <_vfiprintf_r+0x1bc>
 8007906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007908:	07d9      	lsls	r1, r3, #31
 800790a:	d405      	bmi.n	8007918 <_vfiprintf_r+0x220>
 800790c:	89ab      	ldrh	r3, [r5, #12]
 800790e:	059a      	lsls	r2, r3, #22
 8007910:	d402      	bmi.n	8007918 <_vfiprintf_r+0x220>
 8007912:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007914:	f7ff fc1b 	bl	800714e <__retarget_lock_release_recursive>
 8007918:	89ab      	ldrh	r3, [r5, #12]
 800791a:	065b      	lsls	r3, r3, #25
 800791c:	f53f af12 	bmi.w	8007744 <_vfiprintf_r+0x4c>
 8007920:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007922:	e711      	b.n	8007748 <_vfiprintf_r+0x50>
 8007924:	ab03      	add	r3, sp, #12
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	462a      	mov	r2, r5
 800792a:	4b09      	ldr	r3, [pc, #36]	; (8007950 <_vfiprintf_r+0x258>)
 800792c:	a904      	add	r1, sp, #16
 800792e:	4630      	mov	r0, r6
 8007930:	f000 f880 	bl	8007a34 <_printf_i>
 8007934:	e7e4      	b.n	8007900 <_vfiprintf_r+0x208>
 8007936:	bf00      	nop
 8007938:	080083c4 	.word	0x080083c4
 800793c:	080083e4 	.word	0x080083e4
 8007940:	080083a4 	.word	0x080083a4
 8007944:	08008404 	.word	0x08008404
 8007948:	0800840e 	.word	0x0800840e
 800794c:	00000000 	.word	0x00000000
 8007950:	080076d3 	.word	0x080076d3
 8007954:	0800840a 	.word	0x0800840a

08007958 <_printf_common>:
 8007958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800795c:	4616      	mov	r6, r2
 800795e:	4699      	mov	r9, r3
 8007960:	688a      	ldr	r2, [r1, #8]
 8007962:	690b      	ldr	r3, [r1, #16]
 8007964:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007968:	4293      	cmp	r3, r2
 800796a:	bfb8      	it	lt
 800796c:	4613      	movlt	r3, r2
 800796e:	6033      	str	r3, [r6, #0]
 8007970:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007974:	4607      	mov	r7, r0
 8007976:	460c      	mov	r4, r1
 8007978:	b10a      	cbz	r2, 800797e <_printf_common+0x26>
 800797a:	3301      	adds	r3, #1
 800797c:	6033      	str	r3, [r6, #0]
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	0699      	lsls	r1, r3, #26
 8007982:	bf42      	ittt	mi
 8007984:	6833      	ldrmi	r3, [r6, #0]
 8007986:	3302      	addmi	r3, #2
 8007988:	6033      	strmi	r3, [r6, #0]
 800798a:	6825      	ldr	r5, [r4, #0]
 800798c:	f015 0506 	ands.w	r5, r5, #6
 8007990:	d106      	bne.n	80079a0 <_printf_common+0x48>
 8007992:	f104 0a19 	add.w	sl, r4, #25
 8007996:	68e3      	ldr	r3, [r4, #12]
 8007998:	6832      	ldr	r2, [r6, #0]
 800799a:	1a9b      	subs	r3, r3, r2
 800799c:	42ab      	cmp	r3, r5
 800799e:	dc26      	bgt.n	80079ee <_printf_common+0x96>
 80079a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079a4:	1e13      	subs	r3, r2, #0
 80079a6:	6822      	ldr	r2, [r4, #0]
 80079a8:	bf18      	it	ne
 80079aa:	2301      	movne	r3, #1
 80079ac:	0692      	lsls	r2, r2, #26
 80079ae:	d42b      	bmi.n	8007a08 <_printf_common+0xb0>
 80079b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079b4:	4649      	mov	r1, r9
 80079b6:	4638      	mov	r0, r7
 80079b8:	47c0      	blx	r8
 80079ba:	3001      	adds	r0, #1
 80079bc:	d01e      	beq.n	80079fc <_printf_common+0xa4>
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	68e5      	ldr	r5, [r4, #12]
 80079c2:	6832      	ldr	r2, [r6, #0]
 80079c4:	f003 0306 	and.w	r3, r3, #6
 80079c8:	2b04      	cmp	r3, #4
 80079ca:	bf08      	it	eq
 80079cc:	1aad      	subeq	r5, r5, r2
 80079ce:	68a3      	ldr	r3, [r4, #8]
 80079d0:	6922      	ldr	r2, [r4, #16]
 80079d2:	bf0c      	ite	eq
 80079d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079d8:	2500      	movne	r5, #0
 80079da:	4293      	cmp	r3, r2
 80079dc:	bfc4      	itt	gt
 80079de:	1a9b      	subgt	r3, r3, r2
 80079e0:	18ed      	addgt	r5, r5, r3
 80079e2:	2600      	movs	r6, #0
 80079e4:	341a      	adds	r4, #26
 80079e6:	42b5      	cmp	r5, r6
 80079e8:	d11a      	bne.n	8007a20 <_printf_common+0xc8>
 80079ea:	2000      	movs	r0, #0
 80079ec:	e008      	b.n	8007a00 <_printf_common+0xa8>
 80079ee:	2301      	movs	r3, #1
 80079f0:	4652      	mov	r2, sl
 80079f2:	4649      	mov	r1, r9
 80079f4:	4638      	mov	r0, r7
 80079f6:	47c0      	blx	r8
 80079f8:	3001      	adds	r0, #1
 80079fa:	d103      	bne.n	8007a04 <_printf_common+0xac>
 80079fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a04:	3501      	adds	r5, #1
 8007a06:	e7c6      	b.n	8007996 <_printf_common+0x3e>
 8007a08:	18e1      	adds	r1, r4, r3
 8007a0a:	1c5a      	adds	r2, r3, #1
 8007a0c:	2030      	movs	r0, #48	; 0x30
 8007a0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a12:	4422      	add	r2, r4
 8007a14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a1c:	3302      	adds	r3, #2
 8007a1e:	e7c7      	b.n	80079b0 <_printf_common+0x58>
 8007a20:	2301      	movs	r3, #1
 8007a22:	4622      	mov	r2, r4
 8007a24:	4649      	mov	r1, r9
 8007a26:	4638      	mov	r0, r7
 8007a28:	47c0      	blx	r8
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	d0e6      	beq.n	80079fc <_printf_common+0xa4>
 8007a2e:	3601      	adds	r6, #1
 8007a30:	e7d9      	b.n	80079e6 <_printf_common+0x8e>
	...

08007a34 <_printf_i>:
 8007a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a38:	7e0f      	ldrb	r7, [r1, #24]
 8007a3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a3c:	2f78      	cmp	r7, #120	; 0x78
 8007a3e:	4691      	mov	r9, r2
 8007a40:	4680      	mov	r8, r0
 8007a42:	460c      	mov	r4, r1
 8007a44:	469a      	mov	sl, r3
 8007a46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a4a:	d807      	bhi.n	8007a5c <_printf_i+0x28>
 8007a4c:	2f62      	cmp	r7, #98	; 0x62
 8007a4e:	d80a      	bhi.n	8007a66 <_printf_i+0x32>
 8007a50:	2f00      	cmp	r7, #0
 8007a52:	f000 80d8 	beq.w	8007c06 <_printf_i+0x1d2>
 8007a56:	2f58      	cmp	r7, #88	; 0x58
 8007a58:	f000 80a3 	beq.w	8007ba2 <_printf_i+0x16e>
 8007a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a64:	e03a      	b.n	8007adc <_printf_i+0xa8>
 8007a66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a6a:	2b15      	cmp	r3, #21
 8007a6c:	d8f6      	bhi.n	8007a5c <_printf_i+0x28>
 8007a6e:	a101      	add	r1, pc, #4	; (adr r1, 8007a74 <_printf_i+0x40>)
 8007a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a74:	08007acd 	.word	0x08007acd
 8007a78:	08007ae1 	.word	0x08007ae1
 8007a7c:	08007a5d 	.word	0x08007a5d
 8007a80:	08007a5d 	.word	0x08007a5d
 8007a84:	08007a5d 	.word	0x08007a5d
 8007a88:	08007a5d 	.word	0x08007a5d
 8007a8c:	08007ae1 	.word	0x08007ae1
 8007a90:	08007a5d 	.word	0x08007a5d
 8007a94:	08007a5d 	.word	0x08007a5d
 8007a98:	08007a5d 	.word	0x08007a5d
 8007a9c:	08007a5d 	.word	0x08007a5d
 8007aa0:	08007bed 	.word	0x08007bed
 8007aa4:	08007b11 	.word	0x08007b11
 8007aa8:	08007bcf 	.word	0x08007bcf
 8007aac:	08007a5d 	.word	0x08007a5d
 8007ab0:	08007a5d 	.word	0x08007a5d
 8007ab4:	08007c0f 	.word	0x08007c0f
 8007ab8:	08007a5d 	.word	0x08007a5d
 8007abc:	08007b11 	.word	0x08007b11
 8007ac0:	08007a5d 	.word	0x08007a5d
 8007ac4:	08007a5d 	.word	0x08007a5d
 8007ac8:	08007bd7 	.word	0x08007bd7
 8007acc:	682b      	ldr	r3, [r5, #0]
 8007ace:	1d1a      	adds	r2, r3, #4
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	602a      	str	r2, [r5, #0]
 8007ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007adc:	2301      	movs	r3, #1
 8007ade:	e0a3      	b.n	8007c28 <_printf_i+0x1f4>
 8007ae0:	6820      	ldr	r0, [r4, #0]
 8007ae2:	6829      	ldr	r1, [r5, #0]
 8007ae4:	0606      	lsls	r6, r0, #24
 8007ae6:	f101 0304 	add.w	r3, r1, #4
 8007aea:	d50a      	bpl.n	8007b02 <_printf_i+0xce>
 8007aec:	680e      	ldr	r6, [r1, #0]
 8007aee:	602b      	str	r3, [r5, #0]
 8007af0:	2e00      	cmp	r6, #0
 8007af2:	da03      	bge.n	8007afc <_printf_i+0xc8>
 8007af4:	232d      	movs	r3, #45	; 0x2d
 8007af6:	4276      	negs	r6, r6
 8007af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007afc:	485e      	ldr	r0, [pc, #376]	; (8007c78 <_printf_i+0x244>)
 8007afe:	230a      	movs	r3, #10
 8007b00:	e019      	b.n	8007b36 <_printf_i+0x102>
 8007b02:	680e      	ldr	r6, [r1, #0]
 8007b04:	602b      	str	r3, [r5, #0]
 8007b06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b0a:	bf18      	it	ne
 8007b0c:	b236      	sxthne	r6, r6
 8007b0e:	e7ef      	b.n	8007af0 <_printf_i+0xbc>
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	6820      	ldr	r0, [r4, #0]
 8007b14:	1d19      	adds	r1, r3, #4
 8007b16:	6029      	str	r1, [r5, #0]
 8007b18:	0601      	lsls	r1, r0, #24
 8007b1a:	d501      	bpl.n	8007b20 <_printf_i+0xec>
 8007b1c:	681e      	ldr	r6, [r3, #0]
 8007b1e:	e002      	b.n	8007b26 <_printf_i+0xf2>
 8007b20:	0646      	lsls	r6, r0, #25
 8007b22:	d5fb      	bpl.n	8007b1c <_printf_i+0xe8>
 8007b24:	881e      	ldrh	r6, [r3, #0]
 8007b26:	4854      	ldr	r0, [pc, #336]	; (8007c78 <_printf_i+0x244>)
 8007b28:	2f6f      	cmp	r7, #111	; 0x6f
 8007b2a:	bf0c      	ite	eq
 8007b2c:	2308      	moveq	r3, #8
 8007b2e:	230a      	movne	r3, #10
 8007b30:	2100      	movs	r1, #0
 8007b32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b36:	6865      	ldr	r5, [r4, #4]
 8007b38:	60a5      	str	r5, [r4, #8]
 8007b3a:	2d00      	cmp	r5, #0
 8007b3c:	bfa2      	ittt	ge
 8007b3e:	6821      	ldrge	r1, [r4, #0]
 8007b40:	f021 0104 	bicge.w	r1, r1, #4
 8007b44:	6021      	strge	r1, [r4, #0]
 8007b46:	b90e      	cbnz	r6, 8007b4c <_printf_i+0x118>
 8007b48:	2d00      	cmp	r5, #0
 8007b4a:	d04d      	beq.n	8007be8 <_printf_i+0x1b4>
 8007b4c:	4615      	mov	r5, r2
 8007b4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b52:	fb03 6711 	mls	r7, r3, r1, r6
 8007b56:	5dc7      	ldrb	r7, [r0, r7]
 8007b58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b5c:	4637      	mov	r7, r6
 8007b5e:	42bb      	cmp	r3, r7
 8007b60:	460e      	mov	r6, r1
 8007b62:	d9f4      	bls.n	8007b4e <_printf_i+0x11a>
 8007b64:	2b08      	cmp	r3, #8
 8007b66:	d10b      	bne.n	8007b80 <_printf_i+0x14c>
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	07de      	lsls	r6, r3, #31
 8007b6c:	d508      	bpl.n	8007b80 <_printf_i+0x14c>
 8007b6e:	6923      	ldr	r3, [r4, #16]
 8007b70:	6861      	ldr	r1, [r4, #4]
 8007b72:	4299      	cmp	r1, r3
 8007b74:	bfde      	ittt	le
 8007b76:	2330      	movle	r3, #48	; 0x30
 8007b78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b80:	1b52      	subs	r2, r2, r5
 8007b82:	6122      	str	r2, [r4, #16]
 8007b84:	f8cd a000 	str.w	sl, [sp]
 8007b88:	464b      	mov	r3, r9
 8007b8a:	aa03      	add	r2, sp, #12
 8007b8c:	4621      	mov	r1, r4
 8007b8e:	4640      	mov	r0, r8
 8007b90:	f7ff fee2 	bl	8007958 <_printf_common>
 8007b94:	3001      	adds	r0, #1
 8007b96:	d14c      	bne.n	8007c32 <_printf_i+0x1fe>
 8007b98:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9c:	b004      	add	sp, #16
 8007b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba2:	4835      	ldr	r0, [pc, #212]	; (8007c78 <_printf_i+0x244>)
 8007ba4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ba8:	6829      	ldr	r1, [r5, #0]
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bb0:	6029      	str	r1, [r5, #0]
 8007bb2:	061d      	lsls	r5, r3, #24
 8007bb4:	d514      	bpl.n	8007be0 <_printf_i+0x1ac>
 8007bb6:	07df      	lsls	r7, r3, #31
 8007bb8:	bf44      	itt	mi
 8007bba:	f043 0320 	orrmi.w	r3, r3, #32
 8007bbe:	6023      	strmi	r3, [r4, #0]
 8007bc0:	b91e      	cbnz	r6, 8007bca <_printf_i+0x196>
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	f023 0320 	bic.w	r3, r3, #32
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	2310      	movs	r3, #16
 8007bcc:	e7b0      	b.n	8007b30 <_printf_i+0xfc>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	f043 0320 	orr.w	r3, r3, #32
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	2378      	movs	r3, #120	; 0x78
 8007bd8:	4828      	ldr	r0, [pc, #160]	; (8007c7c <_printf_i+0x248>)
 8007bda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bde:	e7e3      	b.n	8007ba8 <_printf_i+0x174>
 8007be0:	0659      	lsls	r1, r3, #25
 8007be2:	bf48      	it	mi
 8007be4:	b2b6      	uxthmi	r6, r6
 8007be6:	e7e6      	b.n	8007bb6 <_printf_i+0x182>
 8007be8:	4615      	mov	r5, r2
 8007bea:	e7bb      	b.n	8007b64 <_printf_i+0x130>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	6826      	ldr	r6, [r4, #0]
 8007bf0:	6961      	ldr	r1, [r4, #20]
 8007bf2:	1d18      	adds	r0, r3, #4
 8007bf4:	6028      	str	r0, [r5, #0]
 8007bf6:	0635      	lsls	r5, r6, #24
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	d501      	bpl.n	8007c00 <_printf_i+0x1cc>
 8007bfc:	6019      	str	r1, [r3, #0]
 8007bfe:	e002      	b.n	8007c06 <_printf_i+0x1d2>
 8007c00:	0670      	lsls	r0, r6, #25
 8007c02:	d5fb      	bpl.n	8007bfc <_printf_i+0x1c8>
 8007c04:	8019      	strh	r1, [r3, #0]
 8007c06:	2300      	movs	r3, #0
 8007c08:	6123      	str	r3, [r4, #16]
 8007c0a:	4615      	mov	r5, r2
 8007c0c:	e7ba      	b.n	8007b84 <_printf_i+0x150>
 8007c0e:	682b      	ldr	r3, [r5, #0]
 8007c10:	1d1a      	adds	r2, r3, #4
 8007c12:	602a      	str	r2, [r5, #0]
 8007c14:	681d      	ldr	r5, [r3, #0]
 8007c16:	6862      	ldr	r2, [r4, #4]
 8007c18:	2100      	movs	r1, #0
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	f7f8 fb10 	bl	8000240 <memchr>
 8007c20:	b108      	cbz	r0, 8007c26 <_printf_i+0x1f2>
 8007c22:	1b40      	subs	r0, r0, r5
 8007c24:	6060      	str	r0, [r4, #4]
 8007c26:	6863      	ldr	r3, [r4, #4]
 8007c28:	6123      	str	r3, [r4, #16]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c30:	e7a8      	b.n	8007b84 <_printf_i+0x150>
 8007c32:	6923      	ldr	r3, [r4, #16]
 8007c34:	462a      	mov	r2, r5
 8007c36:	4649      	mov	r1, r9
 8007c38:	4640      	mov	r0, r8
 8007c3a:	47d0      	blx	sl
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	d0ab      	beq.n	8007b98 <_printf_i+0x164>
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	079b      	lsls	r3, r3, #30
 8007c44:	d413      	bmi.n	8007c6e <_printf_i+0x23a>
 8007c46:	68e0      	ldr	r0, [r4, #12]
 8007c48:	9b03      	ldr	r3, [sp, #12]
 8007c4a:	4298      	cmp	r0, r3
 8007c4c:	bfb8      	it	lt
 8007c4e:	4618      	movlt	r0, r3
 8007c50:	e7a4      	b.n	8007b9c <_printf_i+0x168>
 8007c52:	2301      	movs	r3, #1
 8007c54:	4632      	mov	r2, r6
 8007c56:	4649      	mov	r1, r9
 8007c58:	4640      	mov	r0, r8
 8007c5a:	47d0      	blx	sl
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	d09b      	beq.n	8007b98 <_printf_i+0x164>
 8007c60:	3501      	adds	r5, #1
 8007c62:	68e3      	ldr	r3, [r4, #12]
 8007c64:	9903      	ldr	r1, [sp, #12]
 8007c66:	1a5b      	subs	r3, r3, r1
 8007c68:	42ab      	cmp	r3, r5
 8007c6a:	dcf2      	bgt.n	8007c52 <_printf_i+0x21e>
 8007c6c:	e7eb      	b.n	8007c46 <_printf_i+0x212>
 8007c6e:	2500      	movs	r5, #0
 8007c70:	f104 0619 	add.w	r6, r4, #25
 8007c74:	e7f5      	b.n	8007c62 <_printf_i+0x22e>
 8007c76:	bf00      	nop
 8007c78:	08008415 	.word	0x08008415
 8007c7c:	08008426 	.word	0x08008426

08007c80 <_sbrk_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4d06      	ldr	r5, [pc, #24]	; (8007c9c <_sbrk_r+0x1c>)
 8007c84:	2300      	movs	r3, #0
 8007c86:	4604      	mov	r4, r0
 8007c88:	4608      	mov	r0, r1
 8007c8a:	602b      	str	r3, [r5, #0]
 8007c8c:	f7f9 faf2 	bl	8001274 <_sbrk>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_sbrk_r+0x1a>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_sbrk_r+0x1a>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	200002ac 	.word	0x200002ac

08007ca0 <__sread>:
 8007ca0:	b510      	push	{r4, lr}
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca8:	f000 f900 	bl	8007eac <_read_r>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	bfab      	itete	ge
 8007cb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cb2:	89a3      	ldrhlt	r3, [r4, #12]
 8007cb4:	181b      	addge	r3, r3, r0
 8007cb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cba:	bfac      	ite	ge
 8007cbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cbe:	81a3      	strhlt	r3, [r4, #12]
 8007cc0:	bd10      	pop	{r4, pc}

08007cc2 <__swrite>:
 8007cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc6:	461f      	mov	r7, r3
 8007cc8:	898b      	ldrh	r3, [r1, #12]
 8007cca:	05db      	lsls	r3, r3, #23
 8007ccc:	4605      	mov	r5, r0
 8007cce:	460c      	mov	r4, r1
 8007cd0:	4616      	mov	r6, r2
 8007cd2:	d505      	bpl.n	8007ce0 <__swrite+0x1e>
 8007cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd8:	2302      	movs	r3, #2
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f000 f870 	bl	8007dc0 <_lseek_r>
 8007ce0:	89a3      	ldrh	r3, [r4, #12]
 8007ce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ce6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cea:	81a3      	strh	r3, [r4, #12]
 8007cec:	4632      	mov	r2, r6
 8007cee:	463b      	mov	r3, r7
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf6:	f000 b817 	b.w	8007d28 <_write_r>

08007cfa <__sseek>:
 8007cfa:	b510      	push	{r4, lr}
 8007cfc:	460c      	mov	r4, r1
 8007cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d02:	f000 f85d 	bl	8007dc0 <_lseek_r>
 8007d06:	1c43      	adds	r3, r0, #1
 8007d08:	89a3      	ldrh	r3, [r4, #12]
 8007d0a:	bf15      	itete	ne
 8007d0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d16:	81a3      	strheq	r3, [r4, #12]
 8007d18:	bf18      	it	ne
 8007d1a:	81a3      	strhne	r3, [r4, #12]
 8007d1c:	bd10      	pop	{r4, pc}

08007d1e <__sclose>:
 8007d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d22:	f000 b81b 	b.w	8007d5c <_close_r>
	...

08007d28 <_write_r>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	4d07      	ldr	r5, [pc, #28]	; (8007d48 <_write_r+0x20>)
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	4608      	mov	r0, r1
 8007d30:	4611      	mov	r1, r2
 8007d32:	2200      	movs	r2, #0
 8007d34:	602a      	str	r2, [r5, #0]
 8007d36:	461a      	mov	r2, r3
 8007d38:	f7f9 fa4b 	bl	80011d2 <_write>
 8007d3c:	1c43      	adds	r3, r0, #1
 8007d3e:	d102      	bne.n	8007d46 <_write_r+0x1e>
 8007d40:	682b      	ldr	r3, [r5, #0]
 8007d42:	b103      	cbz	r3, 8007d46 <_write_r+0x1e>
 8007d44:	6023      	str	r3, [r4, #0]
 8007d46:	bd38      	pop	{r3, r4, r5, pc}
 8007d48:	200002ac 	.word	0x200002ac

08007d4c <abort>:
 8007d4c:	b508      	push	{r3, lr}
 8007d4e:	2006      	movs	r0, #6
 8007d50:	f000 f8e6 	bl	8007f20 <raise>
 8007d54:	2001      	movs	r0, #1
 8007d56:	f7f9 fa15 	bl	8001184 <_exit>
	...

08007d5c <_close_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d06      	ldr	r5, [pc, #24]	; (8007d78 <_close_r+0x1c>)
 8007d60:	2300      	movs	r3, #0
 8007d62:	4604      	mov	r4, r0
 8007d64:	4608      	mov	r0, r1
 8007d66:	602b      	str	r3, [r5, #0]
 8007d68:	f7f9 fa4f 	bl	800120a <_close>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_close_r+0x1a>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_close_r+0x1a>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	200002ac 	.word	0x200002ac

08007d7c <_fstat_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4d07      	ldr	r5, [pc, #28]	; (8007d9c <_fstat_r+0x20>)
 8007d80:	2300      	movs	r3, #0
 8007d82:	4604      	mov	r4, r0
 8007d84:	4608      	mov	r0, r1
 8007d86:	4611      	mov	r1, r2
 8007d88:	602b      	str	r3, [r5, #0]
 8007d8a:	f7f9 fa4a 	bl	8001222 <_fstat>
 8007d8e:	1c43      	adds	r3, r0, #1
 8007d90:	d102      	bne.n	8007d98 <_fstat_r+0x1c>
 8007d92:	682b      	ldr	r3, [r5, #0]
 8007d94:	b103      	cbz	r3, 8007d98 <_fstat_r+0x1c>
 8007d96:	6023      	str	r3, [r4, #0]
 8007d98:	bd38      	pop	{r3, r4, r5, pc}
 8007d9a:	bf00      	nop
 8007d9c:	200002ac 	.word	0x200002ac

08007da0 <_isatty_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4d06      	ldr	r5, [pc, #24]	; (8007dbc <_isatty_r+0x1c>)
 8007da4:	2300      	movs	r3, #0
 8007da6:	4604      	mov	r4, r0
 8007da8:	4608      	mov	r0, r1
 8007daa:	602b      	str	r3, [r5, #0]
 8007dac:	f7f9 fa49 	bl	8001242 <_isatty>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d102      	bne.n	8007dba <_isatty_r+0x1a>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	b103      	cbz	r3, 8007dba <_isatty_r+0x1a>
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	200002ac 	.word	0x200002ac

08007dc0 <_lseek_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4d07      	ldr	r5, [pc, #28]	; (8007de0 <_lseek_r+0x20>)
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	4608      	mov	r0, r1
 8007dc8:	4611      	mov	r1, r2
 8007dca:	2200      	movs	r2, #0
 8007dcc:	602a      	str	r2, [r5, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f7f9 fa42 	bl	8001258 <_lseek>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d102      	bne.n	8007dde <_lseek_r+0x1e>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	b103      	cbz	r3, 8007dde <_lseek_r+0x1e>
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
 8007de0:	200002ac 	.word	0x200002ac

08007de4 <memcpy>:
 8007de4:	440a      	add	r2, r1
 8007de6:	4291      	cmp	r1, r2
 8007de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dec:	d100      	bne.n	8007df0 <memcpy+0xc>
 8007dee:	4770      	bx	lr
 8007df0:	b510      	push	{r4, lr}
 8007df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007df6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dfa:	4291      	cmp	r1, r2
 8007dfc:	d1f9      	bne.n	8007df2 <memcpy+0xe>
 8007dfe:	bd10      	pop	{r4, pc}

08007e00 <memmove>:
 8007e00:	4288      	cmp	r0, r1
 8007e02:	b510      	push	{r4, lr}
 8007e04:	eb01 0402 	add.w	r4, r1, r2
 8007e08:	d902      	bls.n	8007e10 <memmove+0x10>
 8007e0a:	4284      	cmp	r4, r0
 8007e0c:	4623      	mov	r3, r4
 8007e0e:	d807      	bhi.n	8007e20 <memmove+0x20>
 8007e10:	1e43      	subs	r3, r0, #1
 8007e12:	42a1      	cmp	r1, r4
 8007e14:	d008      	beq.n	8007e28 <memmove+0x28>
 8007e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e1e:	e7f8      	b.n	8007e12 <memmove+0x12>
 8007e20:	4402      	add	r2, r0
 8007e22:	4601      	mov	r1, r0
 8007e24:	428a      	cmp	r2, r1
 8007e26:	d100      	bne.n	8007e2a <memmove+0x2a>
 8007e28:	bd10      	pop	{r4, pc}
 8007e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e32:	e7f7      	b.n	8007e24 <memmove+0x24>

08007e34 <__malloc_lock>:
 8007e34:	4801      	ldr	r0, [pc, #4]	; (8007e3c <__malloc_lock+0x8>)
 8007e36:	f7ff b989 	b.w	800714c <__retarget_lock_acquire_recursive>
 8007e3a:	bf00      	nop
 8007e3c:	200002a0 	.word	0x200002a0

08007e40 <__malloc_unlock>:
 8007e40:	4801      	ldr	r0, [pc, #4]	; (8007e48 <__malloc_unlock+0x8>)
 8007e42:	f7ff b984 	b.w	800714e <__retarget_lock_release_recursive>
 8007e46:	bf00      	nop
 8007e48:	200002a0 	.word	0x200002a0

08007e4c <_realloc_r>:
 8007e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e50:	4680      	mov	r8, r0
 8007e52:	4614      	mov	r4, r2
 8007e54:	460e      	mov	r6, r1
 8007e56:	b921      	cbnz	r1, 8007e62 <_realloc_r+0x16>
 8007e58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	f7ff ba51 	b.w	8007304 <_malloc_r>
 8007e62:	b92a      	cbnz	r2, 8007e70 <_realloc_r+0x24>
 8007e64:	f7ff f9e2 	bl	800722c <_free_r>
 8007e68:	4625      	mov	r5, r4
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e70:	f000 f872 	bl	8007f58 <_malloc_usable_size_r>
 8007e74:	4284      	cmp	r4, r0
 8007e76:	4607      	mov	r7, r0
 8007e78:	d802      	bhi.n	8007e80 <_realloc_r+0x34>
 8007e7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e7e:	d812      	bhi.n	8007ea6 <_realloc_r+0x5a>
 8007e80:	4621      	mov	r1, r4
 8007e82:	4640      	mov	r0, r8
 8007e84:	f7ff fa3e 	bl	8007304 <_malloc_r>
 8007e88:	4605      	mov	r5, r0
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	d0ed      	beq.n	8007e6a <_realloc_r+0x1e>
 8007e8e:	42bc      	cmp	r4, r7
 8007e90:	4622      	mov	r2, r4
 8007e92:	4631      	mov	r1, r6
 8007e94:	bf28      	it	cs
 8007e96:	463a      	movcs	r2, r7
 8007e98:	f7ff ffa4 	bl	8007de4 <memcpy>
 8007e9c:	4631      	mov	r1, r6
 8007e9e:	4640      	mov	r0, r8
 8007ea0:	f7ff f9c4 	bl	800722c <_free_r>
 8007ea4:	e7e1      	b.n	8007e6a <_realloc_r+0x1e>
 8007ea6:	4635      	mov	r5, r6
 8007ea8:	e7df      	b.n	8007e6a <_realloc_r+0x1e>
	...

08007eac <_read_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	4d07      	ldr	r5, [pc, #28]	; (8007ecc <_read_r+0x20>)
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	4608      	mov	r0, r1
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	602a      	str	r2, [r5, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	f7f9 f96c 	bl	8001198 <_read>
 8007ec0:	1c43      	adds	r3, r0, #1
 8007ec2:	d102      	bne.n	8007eca <_read_r+0x1e>
 8007ec4:	682b      	ldr	r3, [r5, #0]
 8007ec6:	b103      	cbz	r3, 8007eca <_read_r+0x1e>
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	bd38      	pop	{r3, r4, r5, pc}
 8007ecc:	200002ac 	.word	0x200002ac

08007ed0 <_raise_r>:
 8007ed0:	291f      	cmp	r1, #31
 8007ed2:	b538      	push	{r3, r4, r5, lr}
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	460d      	mov	r5, r1
 8007ed8:	d904      	bls.n	8007ee4 <_raise_r+0x14>
 8007eda:	2316      	movs	r3, #22
 8007edc:	6003      	str	r3, [r0, #0]
 8007ede:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee2:	bd38      	pop	{r3, r4, r5, pc}
 8007ee4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ee6:	b112      	cbz	r2, 8007eee <_raise_r+0x1e>
 8007ee8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007eec:	b94b      	cbnz	r3, 8007f02 <_raise_r+0x32>
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f000 f830 	bl	8007f54 <_getpid_r>
 8007ef4:	462a      	mov	r2, r5
 8007ef6:	4601      	mov	r1, r0
 8007ef8:	4620      	mov	r0, r4
 8007efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007efe:	f000 b817 	b.w	8007f30 <_kill_r>
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d00a      	beq.n	8007f1c <_raise_r+0x4c>
 8007f06:	1c59      	adds	r1, r3, #1
 8007f08:	d103      	bne.n	8007f12 <_raise_r+0x42>
 8007f0a:	2316      	movs	r3, #22
 8007f0c:	6003      	str	r3, [r0, #0]
 8007f0e:	2001      	movs	r0, #1
 8007f10:	e7e7      	b.n	8007ee2 <_raise_r+0x12>
 8007f12:	2400      	movs	r4, #0
 8007f14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f18:	4628      	mov	r0, r5
 8007f1a:	4798      	blx	r3
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	e7e0      	b.n	8007ee2 <_raise_r+0x12>

08007f20 <raise>:
 8007f20:	4b02      	ldr	r3, [pc, #8]	; (8007f2c <raise+0xc>)
 8007f22:	4601      	mov	r1, r0
 8007f24:	6818      	ldr	r0, [r3, #0]
 8007f26:	f7ff bfd3 	b.w	8007ed0 <_raise_r>
 8007f2a:	bf00      	nop
 8007f2c:	200000a8 	.word	0x200000a8

08007f30 <_kill_r>:
 8007f30:	b538      	push	{r3, r4, r5, lr}
 8007f32:	4d07      	ldr	r5, [pc, #28]	; (8007f50 <_kill_r+0x20>)
 8007f34:	2300      	movs	r3, #0
 8007f36:	4604      	mov	r4, r0
 8007f38:	4608      	mov	r0, r1
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	602b      	str	r3, [r5, #0]
 8007f3e:	f7f9 f911 	bl	8001164 <_kill>
 8007f42:	1c43      	adds	r3, r0, #1
 8007f44:	d102      	bne.n	8007f4c <_kill_r+0x1c>
 8007f46:	682b      	ldr	r3, [r5, #0]
 8007f48:	b103      	cbz	r3, 8007f4c <_kill_r+0x1c>
 8007f4a:	6023      	str	r3, [r4, #0]
 8007f4c:	bd38      	pop	{r3, r4, r5, pc}
 8007f4e:	bf00      	nop
 8007f50:	200002ac 	.word	0x200002ac

08007f54 <_getpid_r>:
 8007f54:	f7f9 b8fe 	b.w	8001154 <_getpid>

08007f58 <_malloc_usable_size_r>:
 8007f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f5c:	1f18      	subs	r0, r3, #4
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	bfbc      	itt	lt
 8007f62:	580b      	ldrlt	r3, [r1, r0]
 8007f64:	18c0      	addlt	r0, r0, r3
 8007f66:	4770      	bx	lr

08007f68 <_init>:
 8007f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6a:	bf00      	nop
 8007f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f6e:	bc08      	pop	{r3}
 8007f70:	469e      	mov	lr, r3
 8007f72:	4770      	bx	lr

08007f74 <_fini>:
 8007f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f76:	bf00      	nop
 8007f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f7a:	bc08      	pop	{r3}
 8007f7c:	469e      	mov	lr, r3
 8007f7e:	4770      	bx	lr
