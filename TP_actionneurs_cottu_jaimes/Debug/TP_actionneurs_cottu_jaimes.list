
TP_actionneurs_cottu_jaimes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006184  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800635c  0800635c  0001635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800639c  0800639c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800639c  0800639c  0001639c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063a4  080063a4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063a4  080063a4  000163a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063a8  080063a8  000163a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080063ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000008c  08006438  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08006438  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144b0  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b0  00000000  00000000  0003456c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00036b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb0  00000000  00000000  00037ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026906  00000000  00000000  00038b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013258  00000000  00000000  0005f45e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbe0d  00000000  00000000  000726b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016e4c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004618  00000000  00000000  0016e514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000008c 	.word	0x2000008c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006344 	.word	0x08006344

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000090 	.word	0x20000090
 8000214:	08006344 	.word	0x08006344

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
  * @brief  The application entry point.
  * Fonction de gestion de l'interface utilisateur : gestion du shell et du traitement des commandes.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b09c      	sub	sp, #112	; 0x70
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];		//!< Contient la commande reconstruite apres chaque interruption UART
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 8000522:	2300      	movs	r3, #0
 8000524:	66fb      	str	r3, [r7, #108]	; 0x6c
	char*		token;
	int 		newCmdReady = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fc58 	bl	8000dde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f84f 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f9d5 	bl	80008e0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000536:	f000 f897 	bl	8000668 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800053a:	f000 f985 	bl	8000848 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800053e:	f000 f937 	bl	80007b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	memset(argv,(int)NULL,MAX_ARGS*sizeof(char*));
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2224      	movs	r2, #36	; 0x24
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f005 fef3 	bl	8006334 <memset>
	memset(cmdBuffer,(int)NULL,CMD_BUFFER_SIZE*sizeof(char));
 800054e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000552:	2240      	movs	r2, #64	; 0x40
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f005 feec 	bl	8006334 <memset>
 800055c:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <main+0x9c>)
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,(int)NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,(int)NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000562:	2240      	movs	r2, #64	; 0x40
 8000564:	2100      	movs	r1, #0
 8000566:	4815      	ldr	r0, [pc, #84]	; (80005bc <main+0xa0>)
 8000568:	f005 fee4 	bl	8006334 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800056c:	2201      	movs	r2, #1
 800056e:	4912      	ldr	r1, [pc, #72]	; (80005b8 <main+0x9c>)
 8000570:	4813      	ldr	r0, [pc, #76]	; (80005c0 <main+0xa4>)
 8000572:	f003 ff2b 	bl	80043cc <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8000576:	200a      	movs	r0, #10
 8000578:	f000 fca2 	bl	8000ec0 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 800057c:	f04f 33ff 	mov.w	r3, #4294967295
 8000580:	2266      	movs	r2, #102	; 0x66
 8000582:	4910      	ldr	r1, [pc, #64]	; (80005c4 <main+0xa8>)
 8000584:	480e      	ldr	r0, [pc, #56]	; (80005c0 <main+0xa4>)
 8000586:	f003 fe8a 	bl	800429e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
 800058e:	2218      	movs	r2, #24
 8000590:	490d      	ldr	r1, [pc, #52]	; (80005c8 <main+0xac>)
 8000592:	480b      	ldr	r0, [pc, #44]	; (80005c0 <main+0xa4>)
 8000594:	f003 fe83 	bl	800429e <HAL_UART_Transmit>

	TIM1->CCR1=870;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <main+0xb0>)
 800059a:	f240 3266 	movw	r2, #870	; 0x366
 800059e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=SPEED_MAX-870;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <main+0xb0>)
 80005a2:	f240 3266 	movw	r2, #870	; 0x366
 80005a6:	639a      	str	r2, [r3, #56]	; 0x38
	motor_start();
 80005a8:	f000 fa56 	bl	8000a58 <motor_start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		motor_start();
 80005ac:	f000 fa54 	bl	8000a58 <motor_start>
		HAL_Delay(100);
 80005b0:	2064      	movs	r0, #100	; 0x64
 80005b2:	f000 fc85 	bl	8000ec0 <HAL_Delay>
		motor_start();
 80005b6:	e7f9      	b.n	80005ac <main+0x90>
 80005b8:	200001d4 	.word	0x200001d4
 80005bc:	200001d8 	.word	0x200001d8
 80005c0:	20000140 	.word	0x20000140
 80005c4:	20000018 	.word	0x20000018
 80005c8:	20000000 	.word	0x20000000
 80005cc:	40012c00 	.word	0x40012c00

080005d0 <SystemClock_Config>:
/*
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0318 	add.w	r3, r7, #24
 80005da:	2238      	movs	r2, #56	; 0x38
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f005 fea8 	bl	8006334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f001 f808 	bl	8001608 <HAL_PWREx_ControlVoltageScaling>

  /* Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000602:	2340      	movs	r3, #64	; 0x40
 8000604:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060a:	2302      	movs	r3, #2
 800060c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800060e:	2304      	movs	r3, #4
 8000610:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000612:	2355      	movs	r3, #85	; 0x55
 8000614:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 0318 	add.w	r3, r7, #24
 8000626:	4618      	mov	r0, r3
 8000628:	f001 f8a2 	bl	8001770 <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000632:	f000 f9e1 	bl	80009f8 <Error_Handler>
  }

  /* Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2303      	movs	r3, #3
 800063c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2104      	movs	r1, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fba6 	bl	8001da0 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800065a:	f000 f9cd 	bl	80009f8 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3750      	adds	r7, #80	; 0x50
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b098      	sub	sp, #96	; 0x60
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800067a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]
 800068a:	615a      	str	r2, [r3, #20]
 800068c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2234      	movs	r2, #52	; 0x34
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f005 fe4d 	bl	8006334 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800069a:	4b43      	ldr	r3, [pc, #268]	; (80007a8 <MX_TIM1_Init+0x140>)
 800069c:	4a43      	ldr	r2, [pc, #268]	; (80007ac <MX_TIM1_Init+0x144>)
 800069e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3-1;
 80006a0:	4b41      	ldr	r3, [pc, #260]	; (80007a8 <MX_TIM1_Init+0x140>)
 80006a2:	2202      	movs	r2, #2
 80006a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80006a6:	4b40      	ldr	r3, [pc, #256]	; (80007a8 <MX_TIM1_Init+0x140>)
 80006a8:	2220      	movs	r2, #32
 80006aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1749;
 80006ac:	4b3e      	ldr	r3, [pc, #248]	; (80007a8 <MX_TIM1_Init+0x140>)
 80006ae:	f240 62d5 	movw	r2, #1749	; 0x6d5
 80006b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b4:	4b3c      	ldr	r3, [pc, #240]	; (80007a8 <MX_TIM1_Init+0x140>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ba:	4b3b      	ldr	r3, [pc, #236]	; (80007a8 <MX_TIM1_Init+0x140>)
 80006bc:	2200      	movs	r2, #0
 80006be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c0:	4b39      	ldr	r3, [pc, #228]	; (80007a8 <MX_TIM1_Init+0x140>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006c6:	4838      	ldr	r0, [pc, #224]	; (80007a8 <MX_TIM1_Init+0x140>)
 80006c8:	f002 f85a 	bl	8002780 <HAL_TIM_PWM_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80006d2:	f000 f991 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d6:	2300      	movs	r3, #0
 80006d8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006da:	2300      	movs	r3, #0
 80006dc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006e6:	4619      	mov	r1, r3
 80006e8:	482f      	ldr	r0, [pc, #188]	; (80007a8 <MX_TIM1_Init+0x140>)
 80006ea:	f003 fbd5 	bl	8003e98 <HAL_TIMEx_MasterConfigSynchronization>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006f4:	f000 f980 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006f8:	2360      	movs	r3, #96	; 0x60
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1050;
 80006fc:	f240 431a 	movw	r3, #1050	; 0x41a
 8000700:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000702:	2300      	movs	r3, #0
 8000704:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000706:	2300      	movs	r3, #0
 8000708:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800070e:	2300      	movs	r3, #0
 8000710:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000712:	2300      	movs	r3, #0
 8000714:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000716:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800071a:	2200      	movs	r2, #0
 800071c:	4619      	mov	r1, r3
 800071e:	4822      	ldr	r0, [pc, #136]	; (80007a8 <MX_TIM1_Init+0x140>)
 8000720:	f002 fbb4 	bl	8002e8c <HAL_TIM_PWM_ConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800072a:	f000 f965 	bl	80009f8 <Error_Handler>
  }
  sConfigOC.Pulse = 700;
 800072e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000734:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000738:	2204      	movs	r2, #4
 800073a:	4619      	mov	r1, r3
 800073c:	481a      	ldr	r0, [pc, #104]	; (80007a8 <MX_TIM1_Init+0x140>)
 800073e:	f002 fba5 	bl	8002e8c <HAL_TIM_PWM_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000748:	f000 f956 	bl	80009f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 200;
 8000758:	23c8      	movs	r3, #200	; 0xc8
 800075a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000764:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800077c:	2300      	movs	r3, #0
 800077e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000780:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4619      	mov	r1, r3
 800078a:	4807      	ldr	r0, [pc, #28]	; (80007a8 <MX_TIM1_Init+0x140>)
 800078c:	f003 fc1a 	bl	8003fc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8000796:	f000 f92f 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800079a:	4803      	ldr	r0, [pc, #12]	; (80007a8 <MX_TIM1_Init+0x140>)
 800079c:	f000 fa06 	bl	8000bac <HAL_TIM_MspPostInit>

}
 80007a0:	bf00      	nop
 80007a2:	3760      	adds	r7, #96	; 0x60
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000a8 	.word	0x200000a8
 80007ac:	40012c00 	.word	0x40012c00

080007b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b6:	f107 0310 	add.w	r3, r7, #16
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_TIM2_Init+0x94>)
 80007d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170;
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_TIM2_Init+0x94>)
 80007d8:	22aa      	movs	r2, #170	; 0xaa
 80007da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_TIM2_Init+0x94>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_TIM2_Init+0x94>)
 80007e4:	2202      	movs	r2, #2
 80007e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_TIM2_Init+0x94>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_TIM2_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f4:	4813      	ldr	r0, [pc, #76]	; (8000844 <MX_TIM2_Init+0x94>)
 80007f6:	f001 ff3d 	bl	8002674 <HAL_TIM_Base_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000800:	f000 f8fa 	bl	80009f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	4619      	mov	r1, r3
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <MX_TIM2_Init+0x94>)
 8000812:	f002 fc4f 	bl	80030b4 <HAL_TIM_ConfigClockSource>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800081c:	f000 f8ec 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_TIM2_Init+0x94>)
 800082e:	f003 fb33 	bl	8003e98 <HAL_TIMEx_MasterConfigSynchronization>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000838:	f000 f8de 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000f4 	.word	0x200000f4

08000848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800084c:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 800084e:	4a23      	ldr	r2, [pc, #140]	; (80008dc <MX_USART2_UART_Init+0x94>)
 8000850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000852:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000890:	4811      	ldr	r0, [pc, #68]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 8000892:	f003 fcb4 	bl	80041fe <HAL_UART_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800089c:	f000 f8ac 	bl	80009f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a0:	2100      	movs	r1, #0
 80008a2:	480d      	ldr	r0, [pc, #52]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 80008a4:	f005 fc57 	bl	8006156 <HAL_UARTEx_SetTxFifoThreshold>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008ae:	f000 f8a3 	bl	80009f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4808      	ldr	r0, [pc, #32]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 80008b6:	f005 fc8c 	bl	80061d2 <HAL_UARTEx_SetRxFifoThreshold>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008c0:	f000 f89a 	bl	80009f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_USART2_UART_Init+0x90>)
 80008c6:	f005 fc0d 	bl	80060e4 <HAL_UARTEx_DisableFifoMode>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008d0:	f000 f892 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000140 	.word	0x20000140
 80008dc:	40004400 	.word	0x40004400

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <MX_GPIO_Init+0xe4>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a32      	ldr	r2, [pc, #200]	; (80009c4 <MX_GPIO_Init+0xe4>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <MX_GPIO_Init+0xe4>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090e:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <MX_GPIO_Init+0xe4>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a2c      	ldr	r2, [pc, #176]	; (80009c4 <MX_GPIO_Init+0xe4>)
 8000914:	f043 0320 	orr.w	r3, r3, #32
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <MX_GPIO_Init+0xe4>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0320 	and.w	r3, r3, #32
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <MX_GPIO_Init+0xe4>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a26      	ldr	r2, [pc, #152]	; (80009c4 <MX_GPIO_Init+0xe4>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <MX_GPIO_Init+0xe4>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2108      	movs	r1, #8
 8000942:	4821      	ldr	r0, [pc, #132]	; (80009c8 <MX_GPIO_Init+0xe8>)
 8000944:	f000 fe30 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	2120      	movs	r1, #32
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f000 fe2a 	bl	80015a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800095e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	4619      	mov	r1, r3
 800096a:	4817      	ldr	r0, [pc, #92]	; (80009c8 <MX_GPIO_Init+0xe8>)
 800096c:	f000 fc9a 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISO_RESET_Pin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8000970:	2308      	movs	r3, #8
 8000972:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	4619      	mov	r1, r3
 8000986:	4810      	ldr	r0, [pc, #64]	; (80009c8 <MX_GPIO_Init+0xe8>)
 8000988:	f000 fc8c 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800098c:	2320      	movs	r3, #32
 800098e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	4619      	mov	r1, r3
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f000 fc7d 	bl	80012a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	2028      	movs	r0, #40	; 0x28
 80009b0:	f000 fb83 	bl	80010ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009b4:	2028      	movs	r0, #40	; 0x28
 80009b6:	f000 fb9a 	bl	80010ee <HAL_NVIC_EnableIRQ>

}
 80009ba:	bf00      	nop
 80009bc:	3720      	adds	r7, #32
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000
 80009c8:	48000800 	.word	0x48000800

080009cc <HAL_UART_RxCpltCallback>:
/**
 * \fn void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
 * \brief Gestion des interruptions des périphériques UART:
 * Met le flag de réception a 1 et met le caractère reçu dans uartRxBuffer
 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_UART_RxCpltCallback+0x20>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80009da:	2201      	movs	r2, #1
 80009dc:	4904      	ldr	r1, [pc, #16]	; (80009f0 <HAL_UART_RxCpltCallback+0x24>)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <HAL_UART_RxCpltCallback+0x28>)
 80009e0:	f003 fcf4 	bl	80043cc <HAL_UART_Receive_IT>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200001d0 	.word	0x200001d0
 80009f0:	200001d4 	.word	0x200001d4
 80009f4:	20000140 	.word	0x20000140

080009f8 <Error_Handler>:
/*
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <HAL_TIM_PeriodElapsedCallback>:
 * \fn void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 * \brief Gestion des interruptions des timers :
 * Désactive le timer 2 et remet la Pin ISO_RESET lorsque le tim2 déclenche son interruption.
 * Termine la séquence d'allumage en démarrant les PWM
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	if(htim==&htim2){
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d109      	bne.n	8000a28 <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000a14:	4806      	ldr	r0, [pc, #24]	; (8000a30 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a16:	f001 fe84 	bl	8002722 <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(ISO_RESET_GPIO_Port,ISO_RESET_Pin,0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2108      	movs	r1, #8
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a20:	f000 fdc2 	bl	80015a8 <HAL_GPIO_WritePin>

		//Start les PWM moteurs
		motor_start_PWM();
 8000a24:	f000 f844 	bl	8000ab0 <motor_start_PWM>
	}

}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200000f4 	.word	0x200000f4
 8000a34:	48000800 	.word	0x48000800

08000a38 <HAL_GPIO_EXTI_Callback>:
/**
 * \fn void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 * \brief Gestion des interruptions GPÏO_EXTI :
 * Déclenche la procédure d'allumage du moteur sur appui du bouton utilisateur
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==BUTTON_Pin){
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a48:	d101      	bne.n	8000a4e <HAL_GPIO_EXTI_Callback+0x16>
		motor_start();
 8000a4a:	f000 f805 	bl	8000a58 <motor_start>
	}
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <motor_start>:

/**
 * \fn void motor_start(void)
 * \brief Démarre le timer 2 et met la Pin ISO_RESET à 1 pendant le temps requis (2us). Le reset de ISO_RESET se fait dans l'interruption de tim2
 */
void motor_start(void){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	motor_stop_PWM();
 8000a5c:	f000 f812 	bl	8000a84 <motor_stop_PWM>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port,ISO_RESET_Pin,1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2108      	movs	r1, #8
 8000a64:	4806      	ldr	r0, [pc, #24]	; (8000a80 <motor_start+0x28>)
 8000a66:	f000 fd9f 	bl	80015a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f000 fa28 	bl	8000ec0 <HAL_Delay>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port,ISO_RESET_Pin,0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2108      	movs	r1, #8
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <motor_start+0x28>)
 8000a76:	f000 fd97 	bl	80015a8 <HAL_GPIO_WritePin>
	//motor_start_PWM();
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	48000800 	.word	0x48000800

08000a84 <motor_stop_PWM>:

void motor_stop_PWM(void){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4808      	ldr	r0, [pc, #32]	; (8000aac <motor_stop_PWM+0x28>)
 8000a8c:	f001 ffe2 	bl	8002a54 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000a90:	2104      	movs	r1, #4
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <motor_stop_PWM+0x28>)
 8000a94:	f001 ffde 	bl	8002a54 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4804      	ldr	r0, [pc, #16]	; (8000aac <motor_stop_PWM+0x28>)
 8000a9c:	f003 f99e 	bl	8003ddc <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	4802      	ldr	r0, [pc, #8]	; (8000aac <motor_stop_PWM+0x28>)
 8000aa4:	f003 f99a 	bl	8003ddc <HAL_TIMEx_PWMN_Stop>
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200000a8 	.word	0x200000a8

08000ab0 <motor_start_PWM>:

/**
 * \fn void motor_start_PWM(void)
 * \brief Fonction de racourci pour éviter de réécrire le redémarage des PWM à chaque fois
 */
void motor_start_PWM(void){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <motor_start_PWM+0x28>)
 8000ab8:	f001 feba 	bl	8002830 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000abc:	2104      	movs	r1, #4
 8000abe:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <motor_start_PWM+0x28>)
 8000ac0:	f001 feb6 	bl	8002830 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <motor_start_PWM+0x28>)
 8000ac8:	f003 f8c6 	bl	8003c58 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000acc:	2104      	movs	r1, #4
 8000ace:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <motor_start_PWM+0x28>)
 8000ad0:	f003 f8c2 	bl	8003c58 <HAL_TIMEx_PWMN_Start>
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200000a8 	.word	0x200000a8

08000adc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_MspInit+0x44>)
 8000ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_MspInit+0x44>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6613      	str	r3, [r2, #96]	; 0x60
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_MspInit+0x44>)
 8000af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x44>)
 8000afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x44>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6593      	str	r3, [r2, #88]	; 0x58
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x44>)
 8000b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b12:	f000 fe1d 	bl	8001750 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000

08000b24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_TIM_PWM_MspInit+0x38>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d10b      	bne.n	8000b4e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b3a:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b40:	6613      	str	r3, [r2, #96]	; 0x60
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40012c00 	.word	0x40012c00
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b74:	d113      	bne.n	8000b9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <HAL_TIM_Base_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <HAL_TIM_Base_MspInit+0x44>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6593      	str	r3, [r2, #88]	; 0x58
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_TIM_Base_MspInit+0x44>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	201c      	movs	r0, #28
 8000b94:	f000 fa91 	bl	80010ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b98:	201c      	movs	r0, #28
 8000b9a:	f000 faa8 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000

08000bac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <HAL_TIM_MspPostInit+0x68>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d11d      	bne.n	8000c0a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_TIM_MspPostInit+0x6c>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <HAL_TIM_MspPostInit+0x6c>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_TIM_MspPostInit+0x6c>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000be6:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000bea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000bf8:	2306      	movs	r3, #6
 8000bfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4619      	mov	r1, r3
 8000c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c06:	f000 fb4d 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3720      	adds	r7, #32
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40012c00 	.word	0x40012c00
 8000c18:	40021000 	.word	0x40021000

08000c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b09e      	sub	sp, #120	; 0x78
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	2254      	movs	r2, #84	; 0x54
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f005 fb79 	bl	8006334 <memset>
  if(huart->Instance==USART2)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a23      	ldr	r2, [pc, #140]	; (8000cd4 <HAL_UART_MspInit+0xb8>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d13e      	bne.n	8000cca <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f001 fabd 	bl	80021d8 <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c64:	f7ff fec8 	bl	80009f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <HAL_UART_MspInit+0xbc>)
 8000c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6c:	4a1a      	ldr	r2, [pc, #104]	; (8000cd8 <HAL_UART_MspInit+0xbc>)
 8000c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c72:	6593      	str	r3, [r2, #88]	; 0x58
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_UART_MspInit+0xbc>)
 8000c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_UART_MspInit+0xbc>)
 8000c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <HAL_UART_MspInit+0xbc>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_UART_MspInit+0xbc>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c98:	230c      	movs	r3, #12
 8000c9a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ca8:	2307      	movs	r3, #7
 8000caa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb6:	f000 faf5 	bl	80012a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2026      	movs	r0, #38	; 0x26
 8000cc0:	f000 f9fb 	bl	80010ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cc4:	2026      	movs	r0, #38	; 0x26
 8000cc6:	f000 fa12 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3778      	adds	r7, #120	; 0x78
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40004400 	.word	0x40004400
 8000cd8:	40021000 	.word	0x40021000

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d28:	f000 f8ac 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <TIM2_IRQHandler+0x10>)
 8000d36:	f001 ff29 	bl	8002b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000f4 	.word	0x200000f4

08000d44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <USART2_IRQHandler+0x10>)
 8000d4a:	f003 fb95 	bl	8004478 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000140 	.word	0x20000140

08000d58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000d5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d60:	f000 fc3a 	bl	80015d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d92:	490e      	ldr	r1, [pc, #56]	; (8000dcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d94:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <LoopForever+0xe>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da8:	4c0b      	ldr	r4, [pc, #44]	; (8000dd8 <LoopForever+0x16>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000db6:	f7ff ffd7 	bl	8000d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f005 fa97 	bl	80062ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dbe:	f7ff fbad 	bl	800051c <main>

08000dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc2:	e7fe      	b.n	8000dc2 <LoopForever>
  ldr   r0, =_estack
 8000dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000dd0:	080063ac 	.word	0x080063ac
  ldr r2, =_sbss
 8000dd4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000dd8:	2000021c 	.word	0x2000021c

08000ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_2_IRQHandler>

08000dde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de4:	2300      	movs	r3, #0
 8000de6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f95b 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dee:	2000      	movs	r0, #0
 8000df0:	f000 f80e 	bl	8000e10 <HAL_InitTick>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d002      	beq.n	8000e00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	e001      	b.n	8000e04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e00:	f7ff fe6c 	bl	8000adc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e04:	79fb      	ldrb	r3, [r7, #7]

}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HAL_InitTick+0x68>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d022      	beq.n	8000e6a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_InitTick+0x6c>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <HAL_InitTick+0x68>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e30:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 f966 	bl	800110a <HAL_SYSTICK_Config>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d10f      	bne.n	8000e64 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b0f      	cmp	r3, #15
 8000e48:	d809      	bhi.n	8000e5e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e52:	f000 f932 	bl	80010ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_InitTick+0x70>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	e007      	b.n	8000e6e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	e004      	b.n	8000e6e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	e001      	b.n	8000e6e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000088 	.word	0x20000088
 8000e7c:	20000080 	.word	0x20000080
 8000e80:	20000084 	.word	0x20000084

08000e84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_IncTick+0x1c>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4413      	add	r3, r2
 8000e92:	4a03      	ldr	r2, [pc, #12]	; (8000ea0 <HAL_IncTick+0x1c>)
 8000e94:	6013      	str	r3, [r2, #0]
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	20000218 	.word	0x20000218
 8000ea4:	20000088 	.word	0x20000088

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000218 	.word	0x20000218

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff ffee 	bl	8000ea8 <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d004      	beq.n	8000ee4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <HAL_Delay+0x40>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee4:	bf00      	nop
 8000ee6:	f7ff ffdf 	bl	8000ea8 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d8f7      	bhi.n	8000ee6 <HAL_Delay+0x26>
  {
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000088 	.word	0x20000088

08000f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <__NVIC_EnableIRQ+0x38>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f7ff ff8e 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff29 	bl	8000f04 <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff40 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff90 	bl	8000ff8 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5f 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff33 	bl	8000f68 <__NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffa4 	bl	8001060 <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001122:	b480      	push	{r7}
 8001124:	b085      	sub	sp, #20
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d005      	beq.n	8001146 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2204      	movs	r2, #4
 800113e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e037      	b.n	80011b6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 020e 	bic.w	r2, r2, #14
 8001154:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001164:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0201 	bic.w	r2, r2, #1
 8001174:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f003 021f 	and.w	r2, r3, #31
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	2101      	movs	r1, #1
 8001184:	fa01 f202 	lsl.w	r2, r1, r2
 8001188:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001192:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00c      	beq.n	80011b6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011aa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011b4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d00d      	beq.n	8001208 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2204      	movs	r2, #4
 80011f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]
 8001206:	e047      	b.n	8001298 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 020e 	bic.w	r2, r2, #14
 8001216:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0201 	bic.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001236:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123c:	f003 021f 	and.w	r2, r3, #31
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	2101      	movs	r1, #1
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001254:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00c      	beq.n	8001278 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800126c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001276:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	4798      	blx	r3
    }
  }
  return status;
 8001298:	7bfb      	ldrb	r3, [r7, #15]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012b2:	e15a      	b.n	800156a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	2101      	movs	r1, #1
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	4013      	ands	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 814c 	beq.w	8001564 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d005      	beq.n	80012e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d130      	bne.n	8001346 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800131a:	2201      	movs	r2, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	f003 0201 	and.w	r2, r3, #1
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b03      	cmp	r3, #3
 8001350:	d017      	beq.n	8001382 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	2203      	movs	r2, #3
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d123      	bne.n	80013d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	691a      	ldr	r2, [r3, #16]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	6939      	ldr	r1, [r7, #16]
 80013d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2203      	movs	r2, #3
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0203 	and.w	r2, r3, #3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 80a6 	beq.w	8001564 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001418:	4b5b      	ldr	r3, [pc, #364]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 800141a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141c:	4a5a      	ldr	r2, [pc, #360]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6613      	str	r3, [r2, #96]	; 0x60
 8001424:	4b58      	ldr	r3, [pc, #352]	; (8001588 <HAL_GPIO_Init+0x2e4>)
 8001426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001430:	4a56      	ldr	r2, [pc, #344]	; (800158c <HAL_GPIO_Init+0x2e8>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	220f      	movs	r2, #15
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800145a:	d01f      	beq.n	800149c <HAL_GPIO_Init+0x1f8>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a4c      	ldr	r2, [pc, #304]	; (8001590 <HAL_GPIO_Init+0x2ec>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d019      	beq.n	8001498 <HAL_GPIO_Init+0x1f4>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a4b      	ldr	r2, [pc, #300]	; (8001594 <HAL_GPIO_Init+0x2f0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d013      	beq.n	8001494 <HAL_GPIO_Init+0x1f0>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a4a      	ldr	r2, [pc, #296]	; (8001598 <HAL_GPIO_Init+0x2f4>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d00d      	beq.n	8001490 <HAL_GPIO_Init+0x1ec>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a49      	ldr	r2, [pc, #292]	; (800159c <HAL_GPIO_Init+0x2f8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d007      	beq.n	800148c <HAL_GPIO_Init+0x1e8>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a48      	ldr	r2, [pc, #288]	; (80015a0 <HAL_GPIO_Init+0x2fc>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d101      	bne.n	8001488 <HAL_GPIO_Init+0x1e4>
 8001484:	2305      	movs	r3, #5
 8001486:	e00a      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001488:	2306      	movs	r3, #6
 800148a:	e008      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 800148c:	2304      	movs	r3, #4
 800148e:	e006      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001490:	2303      	movs	r3, #3
 8001492:	e004      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001494:	2302      	movs	r3, #2
 8001496:	e002      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <HAL_GPIO_Init+0x1fa>
 800149c:	2300      	movs	r3, #0
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	f002 0203 	and.w	r2, r2, #3
 80014a4:	0092      	lsls	r2, r2, #2
 80014a6:	4093      	lsls	r3, r2
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ae:	4937      	ldr	r1, [pc, #220]	; (800158c <HAL_GPIO_Init+0x2e8>)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3302      	adds	r3, #2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014bc:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <HAL_GPIO_Init+0x300>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014e0:	4a30      	ldr	r2, [pc, #192]	; (80015a4 <HAL_GPIO_Init+0x300>)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014e6:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <HAL_GPIO_Init+0x300>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800150a:	4a26      	ldr	r2, [pc, #152]	; (80015a4 <HAL_GPIO_Init+0x300>)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <HAL_GPIO_Init+0x300>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001534:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <HAL_GPIO_Init+0x300>)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <HAL_GPIO_Init+0x300>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <HAL_GPIO_Init+0x300>)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	3301      	adds	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	f47f ae9d 	bne.w	80012b4 <HAL_GPIO_Init+0x10>
  }
}
 800157a:	bf00      	nop
 800157c:	bf00      	nop
 800157e:	371c      	adds	r7, #28
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	48000400 	.word	0x48000400
 8001594:	48000800 	.word	0x48000800
 8001598:	48000c00 	.word	0x48000c00
 800159c:	48001000 	.word	0x48001000
 80015a0:	48001400 	.word	0x48001400
 80015a4:	40010400 	.word	0x40010400

080015a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
 80015b4:	4613      	mov	r3, r2
 80015b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b8:	787b      	ldrb	r3, [r7, #1]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015be:	887a      	ldrh	r2, [r7, #2]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015c4:	e002      	b.n	80015cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d006      	beq.n	80015fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fa1e 	bl	8000a38 <HAL_GPIO_EXTI_Callback>
  }
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40010400 	.word	0x40010400

08001608 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d141      	bne.n	800169a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001616:	4b4b      	ldr	r3, [pc, #300]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800161e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001622:	d131      	bne.n	8001688 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001624:	4b47      	ldr	r3, [pc, #284]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800162a:	4a46      	ldr	r2, [pc, #280]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800162c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001630:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001634:	4b43      	ldr	r3, [pc, #268]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800163c:	4a41      	ldr	r2, [pc, #260]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001642:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001644:	4b40      	ldr	r3, [pc, #256]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2232      	movs	r2, #50	; 0x32
 800164a:	fb02 f303 	mul.w	r3, r2, r3
 800164e:	4a3f      	ldr	r2, [pc, #252]	; (800174c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001650:	fba2 2303 	umull	r2, r3, r2, r3
 8001654:	0c9b      	lsrs	r3, r3, #18
 8001656:	3301      	adds	r3, #1
 8001658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800165a:	e002      	b.n	8001662 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3b01      	subs	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166e:	d102      	bne.n	8001676 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f2      	bne.n	800165c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001676:	4b33      	ldr	r3, [pc, #204]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001682:	d158      	bne.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e057      	b.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001688:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800168e:	4a2d      	ldr	r2, [pc, #180]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001694:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001698:	e04d      	b.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016a0:	d141      	bne.n	8001726 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016a2:	4b28      	ldr	r3, [pc, #160]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ae:	d131      	bne.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016b0:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016b6:	4a23      	ldr	r2, [pc, #140]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c0:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016c8:	4a1e      	ldr	r2, [pc, #120]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016d0:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2232      	movs	r2, #50	; 0x32
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	4a1c      	ldr	r2, [pc, #112]	; (800174c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	0c9b      	lsrs	r3, r3, #18
 80016e2:	3301      	adds	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016e6:	e002      	b.n	80016ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fa:	d102      	bne.n	8001702 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f2      	bne.n	80016e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170e:	d112      	bne.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e011      	b.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001720:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001724:	e007      	b.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001730:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001734:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	40007000 	.word	0x40007000
 8001748:	20000080 	.word	0x20000080
 800174c:	431bde83 	.word	0x431bde83

08001750 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800175a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175e:	6093      	str	r3, [r2, #8]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40007000 	.word	0x40007000

08001770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e306      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d075      	beq.n	800187a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800178e:	4b97      	ldr	r3, [pc, #604]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001798:	4b94      	ldr	r3, [pc, #592]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	2b0c      	cmp	r3, #12
 80017a6:	d102      	bne.n	80017ae <HAL_RCC_OscConfig+0x3e>
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d002      	beq.n	80017b4 <HAL_RCC_OscConfig+0x44>
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d10b      	bne.n	80017cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b4:	4b8d      	ldr	r3, [pc, #564]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d05b      	beq.n	8001878 <HAL_RCC_OscConfig+0x108>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d157      	bne.n	8001878 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e2e1      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d4:	d106      	bne.n	80017e4 <HAL_RCC_OscConfig+0x74>
 80017d6:	4b85      	ldr	r3, [pc, #532]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a84      	ldr	r2, [pc, #528]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e01d      	b.n	8001820 <HAL_RCC_OscConfig+0xb0>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0x98>
 80017ee:	4b7f      	ldr	r3, [pc, #508]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a7e      	ldr	r2, [pc, #504]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 80017f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b7c      	ldr	r3, [pc, #496]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a7b      	ldr	r2, [pc, #492]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e00b      	b.n	8001820 <HAL_RCC_OscConfig+0xb0>
 8001808:	4b78      	ldr	r3, [pc, #480]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a77      	ldr	r2, [pc, #476]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 800180e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	4b75      	ldr	r3, [pc, #468]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a74      	ldr	r2, [pc, #464]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 800181a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d013      	beq.n	8001850 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fb3e 	bl	8000ea8 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff fb3a 	bl	8000ea8 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	; 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e2a6      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001842:	4b6a      	ldr	r3, [pc, #424]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0xc0>
 800184e:	e014      	b.n	800187a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fb2a 	bl	8000ea8 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff fb26 	bl	8000ea8 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	; 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e292      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800186a:	4b60      	ldr	r3, [pc, #384]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0xe8>
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d075      	beq.n	8001972 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001886:	4b59      	ldr	r3, [pc, #356]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001890:	4b56      	ldr	r3, [pc, #344]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	2b0c      	cmp	r3, #12
 800189e:	d102      	bne.n	80018a6 <HAL_RCC_OscConfig+0x136>
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d002      	beq.n	80018ac <HAL_RCC_OscConfig+0x13c>
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d11f      	bne.n	80018ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ac:	4b4f      	ldr	r3, [pc, #316]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_OscConfig+0x154>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e265      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c4:	4b49      	ldr	r3, [pc, #292]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	061b      	lsls	r3, r3, #24
 80018d2:	4946      	ldr	r1, [pc, #280]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018d8:	4b45      	ldr	r3, [pc, #276]	; (80019f0 <HAL_RCC_OscConfig+0x280>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fa97 	bl	8000e10 <HAL_InitTick>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d043      	beq.n	8001970 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e251      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d023      	beq.n	800193c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f4:	4b3d      	ldr	r3, [pc, #244]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a3c      	ldr	r2, [pc, #240]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 80018fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff fad2 	bl	8000ea8 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001908:	f7ff face 	bl	8000ea8 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e23a      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800191a:	4b34      	ldr	r3, [pc, #208]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001926:	4b31      	ldr	r3, [pc, #196]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	061b      	lsls	r3, r3, #24
 8001934:	492d      	ldr	r1, [pc, #180]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 8001936:	4313      	orrs	r3, r2
 8001938:	604b      	str	r3, [r1, #4]
 800193a:	e01a      	b.n	8001972 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193c:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a2a      	ldr	r2, [pc, #168]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 8001942:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff faae 	bl	8000ea8 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001950:	f7ff faaa 	bl	8000ea8 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e216      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001962:	4b22      	ldr	r3, [pc, #136]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x1e0>
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001970:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d041      	beq.n	8001a02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d01c      	beq.n	80019c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 8001988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198c:	4a17      	ldr	r2, [pc, #92]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001996:	f7ff fa87 	bl	8000ea8 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199e:	f7ff fa83 	bl	8000ea8 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e1ef      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 80019b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0ef      	beq.n	800199e <HAL_RCC_OscConfig+0x22e>
 80019be:	e020      	b.n	8001a02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c0:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 80019c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <HAL_RCC_OscConfig+0x27c>)
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff fa6a 	bl	8000ea8 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019d6:	e00d      	b.n	80019f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d8:	f7ff fa66 	bl	8000ea8 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d906      	bls.n	80019f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e1d2      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	20000084 	.word	0x20000084
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f4:	4b8c      	ldr	r3, [pc, #560]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 80019f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ea      	bne.n	80019d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80a6 	beq.w	8001b5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a14:	4b84      	ldr	r3, [pc, #528]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_RCC_OscConfig+0x2b4>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <HAL_RCC_OscConfig+0x2b6>
 8001a24:	2300      	movs	r3, #0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00d      	beq.n	8001a46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	4b7f      	ldr	r3, [pc, #508]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2e:	4a7e      	ldr	r2, [pc, #504]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a34:	6593      	str	r3, [r2, #88]	; 0x58
 8001a36:	4b7c      	ldr	r3, [pc, #496]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a42:	2301      	movs	r3, #1
 8001a44:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a46:	4b79      	ldr	r3, [pc, #484]	; (8001c2c <HAL_RCC_OscConfig+0x4bc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d118      	bne.n	8001a84 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a52:	4b76      	ldr	r3, [pc, #472]	; (8001c2c <HAL_RCC_OscConfig+0x4bc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a75      	ldr	r2, [pc, #468]	; (8001c2c <HAL_RCC_OscConfig+0x4bc>)
 8001a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5e:	f7ff fa23 	bl	8000ea8 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a66:	f7ff fa1f 	bl	8000ea8 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e18b      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a78:	4b6c      	ldr	r3, [pc, #432]	; (8001c2c <HAL_RCC_OscConfig+0x4bc>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d108      	bne.n	8001a9e <HAL_RCC_OscConfig+0x32e>
 8001a8c:	4b66      	ldr	r3, [pc, #408]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a92:	4a65      	ldr	r2, [pc, #404]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a9c:	e024      	b.n	8001ae8 <HAL_RCC_OscConfig+0x378>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	d110      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x358>
 8001aa6:	4b60      	ldr	r3, [pc, #384]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aac:	4a5e      	ldr	r2, [pc, #376]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab6:	4b5c      	ldr	r3, [pc, #368]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abc:	4a5a      	ldr	r2, [pc, #360]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac6:	e00f      	b.n	8001ae8 <HAL_RCC_OscConfig+0x378>
 8001ac8:	4b57      	ldr	r3, [pc, #348]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ace:	4a56      	ldr	r2, [pc, #344]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad8:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ade:	4a52      	ldr	r2, [pc, #328]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001ae0:	f023 0304 	bic.w	r3, r3, #4
 8001ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d016      	beq.n	8001b1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7ff f9da 	bl	8000ea8 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af8:	f7ff f9d6 	bl	8000ea8 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e140      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0e:	4b46      	ldr	r3, [pc, #280]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0ed      	beq.n	8001af8 <HAL_RCC_OscConfig+0x388>
 8001b1c:	e015      	b.n	8001b4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1e:	f7ff f9c3 	bl	8000ea8 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7ff f9bf 	bl	8000ea8 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e129      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b3c:	4b3a      	ldr	r3, [pc, #232]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1ed      	bne.n	8001b26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b4a:	7ffb      	ldrb	r3, [r7, #31]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b50:	4b35      	ldr	r3, [pc, #212]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	4a34      	ldr	r2, [pc, #208]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d03c      	beq.n	8001be2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d01c      	beq.n	8001baa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b70:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b76:	4a2c      	ldr	r2, [pc, #176]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff f992 	bl	8000ea8 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b88:	f7ff f98e 	bl	8000ea8 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e0fa      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b9a:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0ef      	beq.n	8001b88 <HAL_RCC_OscConfig+0x418>
 8001ba8:	e01b      	b.n	8001be2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001baa:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001bac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bb0:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001bb2:	f023 0301 	bic.w	r3, r3, #1
 8001bb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bba:	f7ff f975 	bl	8000ea8 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bc2:	f7ff f971 	bl	8000ea8 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e0dd      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1ef      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80d1 	beq.w	8001d8e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b0c      	cmp	r3, #12
 8001bf6:	f000 808b 	beq.w	8001d10 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d15e      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a08      	ldr	r2, [pc, #32]	; (8001c28 <HAL_RCC_OscConfig+0x4b8>)
 8001c08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0e:	f7ff f94b 	bl	8000ea8 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c14:	e00c      	b.n	8001c30 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c16:	f7ff f947 	bl	8000ea8 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d905      	bls.n	8001c30 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e0b3      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c30:	4b59      	ldr	r3, [pc, #356]	; (8001d98 <HAL_RCC_OscConfig+0x628>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1ec      	bne.n	8001c16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c3c:	4b56      	ldr	r3, [pc, #344]	; (8001d98 <HAL_RCC_OscConfig+0x628>)
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	4b56      	ldr	r3, [pc, #344]	; (8001d9c <HAL_RCC_OscConfig+0x62c>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6a11      	ldr	r1, [r2, #32]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c4c:	3a01      	subs	r2, #1
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	4311      	orrs	r1, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001c56:	0212      	lsls	r2, r2, #8
 8001c58:	4311      	orrs	r1, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c5e:	0852      	lsrs	r2, r2, #1
 8001c60:	3a01      	subs	r2, #1
 8001c62:	0552      	lsls	r2, r2, #21
 8001c64:	4311      	orrs	r1, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c6a:	0852      	lsrs	r2, r2, #1
 8001c6c:	3a01      	subs	r2, #1
 8001c6e:	0652      	lsls	r2, r2, #25
 8001c70:	4311      	orrs	r1, r2
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c76:	06d2      	lsls	r2, r2, #27
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	4947      	ldr	r1, [pc, #284]	; (8001d98 <HAL_RCC_OscConfig+0x628>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c80:	4b45      	ldr	r3, [pc, #276]	; (8001d98 <HAL_RCC_OscConfig+0x628>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a44      	ldr	r2, [pc, #272]	; (8001d98 <HAL_RCC_OscConfig+0x628>)
 8001c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c8c:	4b42      	ldr	r3, [pc, #264]	; (8001d98 <HAL_RCC_OscConfig+0x628>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4a41      	ldr	r2, [pc, #260]	; (8001d98 <HAL_RCC_OscConfig+0x628>)
 8001c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff f906 	bl	8000ea8 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7ff f902 	bl	8000ea8 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e06e      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb2:	4b39      	ldr	r3, [pc, #228]	; (8001d98 <HAL_RCC_OscConfig+0x628>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x530>
 8001cbe:	e066      	b.n	8001d8e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc0:	4b35      	ldr	r3, [pc, #212]	; (8001d98 <HAL_RCC_OscConfig+0x628>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a34      	ldr	r2, [pc, #208]	; (8001d98 <HAL_RCC_OscConfig+0x628>)
 8001cc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ccc:	4b32      	ldr	r3, [pc, #200]	; (8001d98 <HAL_RCC_OscConfig+0x628>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	4a31      	ldr	r2, [pc, #196]	; (8001d98 <HAL_RCC_OscConfig+0x628>)
 8001cd2:	f023 0303 	bic.w	r3, r3, #3
 8001cd6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001cd8:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <HAL_RCC_OscConfig+0x628>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4a2e      	ldr	r2, [pc, #184]	; (8001d98 <HAL_RCC_OscConfig+0x628>)
 8001cde:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f8de 	bl	8000ea8 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff f8da 	bl	8000ea8 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e046      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d02:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <HAL_RCC_OscConfig+0x628>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x580>
 8001d0e:	e03e      	b.n	8001d8e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e039      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d1c:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <HAL_RCC_OscConfig+0x628>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f003 0203 	and.w	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d12c      	bne.n	8001d8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d123      	bne.n	8001d8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d11b      	bne.n	8001d8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d113      	bne.n	8001d8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	085b      	lsrs	r3, r3, #1
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d109      	bne.n	8001d8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d80:	085b      	lsrs	r3, r3, #1
 8001d82:	3b01      	subs	r3, #1
 8001d84:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d001      	beq.n	8001d8e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	019f800c 	.word	0x019f800c

08001da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e11e      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001db8:	4b91      	ldr	r3, [pc, #580]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 030f 	and.w	r3, r3, #15
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d910      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc6:	4b8e      	ldr	r3, [pc, #568]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 020f 	bic.w	r2, r3, #15
 8001dce:	498c      	ldr	r1, [pc, #560]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd6:	4b8a      	ldr	r3, [pc, #552]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e106      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d073      	beq.n	8001edc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d129      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfc:	4b81      	ldr	r3, [pc, #516]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0f4      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e0c:	f000 f99e 	bl	800214c <RCC_GetSysClockFreqFromPLLSource>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4a7c      	ldr	r2, [pc, #496]	; (8002008 <HAL_RCC_ClockConfig+0x268>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d93f      	bls.n	8001e9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e1a:	4b7a      	ldr	r3, [pc, #488]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d009      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d033      	beq.n	8001e9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d12f      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e3a:	4b72      	ldr	r3, [pc, #456]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e42:	4a70      	ldr	r2, [pc, #448]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e4a:	2380      	movs	r3, #128	; 0x80
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	e024      	b.n	8001e9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e58:	4b6a      	ldr	r3, [pc, #424]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0c6      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e68:	4b66      	ldr	r3, [pc, #408]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0be      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e78:	f000 f8ce 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4a61      	ldr	r2, [pc, #388]	; (8002008 <HAL_RCC_ClockConfig+0x268>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d909      	bls.n	8001e9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e86:	4b5f      	ldr	r3, [pc, #380]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e8e:	4a5d      	ldr	r2, [pc, #372]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e9a:	4b5a      	ldr	r3, [pc, #360]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f023 0203 	bic.w	r2, r3, #3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	4957      	ldr	r1, [pc, #348]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eac:	f7fe fffc 	bl	8000ea8 <HAL_GetTick>
 8001eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb2:	e00a      	b.n	8001eca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb4:	f7fe fff8 	bl	8000ea8 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e095      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	4b4e      	ldr	r3, [pc, #312]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 020c 	and.w	r2, r3, #12
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d1eb      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d023      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef4:	4b43      	ldr	r3, [pc, #268]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	4a42      	ldr	r2, [pc, #264]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001efa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001efe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d007      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f0c:	4b3d      	ldr	r3, [pc, #244]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f14:	4a3b      	ldr	r2, [pc, #236]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001f16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f1c:	4b39      	ldr	r3, [pc, #228]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4936      	ldr	r1, [pc, #216]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b80      	cmp	r3, #128	; 0x80
 8001f34:	d105      	bne.n	8001f42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f36:	4b33      	ldr	r3, [pc, #204]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	4a32      	ldr	r2, [pc, #200]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001f3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f42:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d21d      	bcs.n	8001f8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f50:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f023 020f 	bic.w	r2, r3, #15
 8001f58:	4929      	ldr	r1, [pc, #164]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f60:	f7fe ffa2 	bl	8000ea8 <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f68:	f7fe ff9e 	bl	8000ea8 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e03b      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7e:	4b20      	ldr	r3, [pc, #128]	; (8002000 <HAL_RCC_ClockConfig+0x260>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d1ed      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f98:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4917      	ldr	r1, [pc, #92]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d009      	beq.n	8001fca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	490f      	ldr	r1, [pc, #60]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fca:	f000 f825 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <HAL_RCC_ClockConfig+0x264>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	490c      	ldr	r1, [pc, #48]	; (800200c <HAL_RCC_ClockConfig+0x26c>)
 8001fdc:	5ccb      	ldrb	r3, [r1, r3]
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <HAL_RCC_ClockConfig+0x270>)
 8001fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <HAL_RCC_ClockConfig+0x274>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe ff0e 	bl	8000e10 <HAL_InitTick>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40022000 	.word	0x40022000
 8002004:	40021000 	.word	0x40021000
 8002008:	04c4b400 	.word	0x04c4b400
 800200c:	0800635c 	.word	0x0800635c
 8002010:	20000080 	.word	0x20000080
 8002014:	20000084 	.word	0x20000084

08002018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800201e:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b04      	cmp	r3, #4
 8002028:	d102      	bne.n	8002030 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800202a:	4b2a      	ldr	r3, [pc, #168]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	e047      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002030:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b08      	cmp	r3, #8
 800203a:	d102      	bne.n	8002042 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800203c:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	e03e      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002042:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d136      	bne.n	80020bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800204e:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002058:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	3301      	adds	r3, #1
 8002064:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d10c      	bne.n	8002086 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800206c:	4a1a      	ldr	r2, [pc, #104]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	fbb2 f3f3 	udiv	r3, r2, r3
 8002074:	4a16      	ldr	r2, [pc, #88]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002076:	68d2      	ldr	r2, [r2, #12]
 8002078:	0a12      	lsrs	r2, r2, #8
 800207a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	617b      	str	r3, [r7, #20]
      break;
 8002084:	e00c      	b.n	80020a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002086:	4a13      	ldr	r2, [pc, #76]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	fbb2 f3f3 	udiv	r3, r2, r3
 800208e:	4a10      	ldr	r2, [pc, #64]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002090:	68d2      	ldr	r2, [r2, #12]
 8002092:	0a12      	lsrs	r2, r2, #8
 8002094:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002098:	fb02 f303 	mul.w	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
      break;
 800209e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0e5b      	lsrs	r3, r3, #25
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	3301      	adds	r3, #1
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	e001      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020c0:	693b      	ldr	r3, [r7, #16]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	371c      	adds	r7, #28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	00f42400 	.word	0x00f42400
 80020d8:	016e3600 	.word	0x016e3600

080020dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e0:	4b03      	ldr	r3, [pc, #12]	; (80020f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020e2:	681b      	ldr	r3, [r3, #0]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	20000080 	.word	0x20000080

080020f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020f8:	f7ff fff0 	bl	80020dc <HAL_RCC_GetHCLKFreq>
 80020fc:	4602      	mov	r2, r0
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	0a1b      	lsrs	r3, r3, #8
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	4904      	ldr	r1, [pc, #16]	; (800211c <HAL_RCC_GetPCLK1Freq+0x28>)
 800210a:	5ccb      	ldrb	r3, [r1, r3]
 800210c:	f003 031f 	and.w	r3, r3, #31
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40021000 	.word	0x40021000
 800211c:	0800636c 	.word	0x0800636c

08002120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002124:	f7ff ffda 	bl	80020dc <HAL_RCC_GetHCLKFreq>
 8002128:	4602      	mov	r2, r0
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_RCC_GetPCLK2Freq+0x24>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	0adb      	lsrs	r3, r3, #11
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	4904      	ldr	r1, [pc, #16]	; (8002148 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002136:	5ccb      	ldrb	r3, [r1, r3]
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	0800636c 	.word	0x0800636c

0800214c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002152:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3301      	adds	r3, #1
 8002168:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b03      	cmp	r3, #3
 800216e:	d10c      	bne.n	800218a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002170:	4a17      	ldr	r2, [pc, #92]	; (80021d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	fbb2 f3f3 	udiv	r3, r2, r3
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800217a:	68d2      	ldr	r2, [r2, #12]
 800217c:	0a12      	lsrs	r2, r2, #8
 800217e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	617b      	str	r3, [r7, #20]
    break;
 8002188:	e00c      	b.n	80021a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800218a:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002192:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002194:	68d2      	ldr	r2, [r2, #12]
 8002196:	0a12      	lsrs	r2, r2, #8
 8002198:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800219c:	fb02 f303 	mul.w	r3, r2, r3
 80021a0:	617b      	str	r3, [r7, #20]
    break;
 80021a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021a4:	4b09      	ldr	r3, [pc, #36]	; (80021cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	0e5b      	lsrs	r3, r3, #25
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	3301      	adds	r3, #1
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80021be:	687b      	ldr	r3, [r7, #4]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	371c      	adds	r7, #28
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	40021000 	.word	0x40021000
 80021d0:	016e3600 	.word	0x016e3600
 80021d4:	00f42400 	.word	0x00f42400

080021d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021e0:	2300      	movs	r3, #0
 80021e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021e4:	2300      	movs	r3, #0
 80021e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 8098 	beq.w	8002326 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fa:	4b43      	ldr	r3, [pc, #268]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10d      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b40      	ldr	r3, [pc, #256]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220a:	4a3f      	ldr	r2, [pc, #252]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	6593      	str	r3, [r2, #88]	; 0x58
 8002212:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221e:	2301      	movs	r3, #1
 8002220:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002222:	4b3a      	ldr	r3, [pc, #232]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a39      	ldr	r2, [pc, #228]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800222e:	f7fe fe3b 	bl	8000ea8 <HAL_GetTick>
 8002232:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002234:	e009      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002236:	f7fe fe37 	bl	8000ea8 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d902      	bls.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	74fb      	strb	r3, [r7, #19]
        break;
 8002248:	e005      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800224a:	4b30      	ldr	r3, [pc, #192]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0ef      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002256:	7cfb      	ldrb	r3, [r7, #19]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d159      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800225c:	4b2a      	ldr	r3, [pc, #168]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002266:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01e      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	429a      	cmp	r2, r3
 8002276:	d019      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002278:	4b23      	ldr	r3, [pc, #140]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002282:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002284:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	4a1f      	ldr	r2, [pc, #124]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002294:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229a:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800229c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022a4:	4a18      	ldr	r2, [pc, #96]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d016      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b6:	f7fe fdf7 	bl	8000ea8 <HAL_GetTick>
 80022ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022bc:	e00b      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f7fe fdf3 	bl	8000ea8 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d902      	bls.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	74fb      	strb	r3, [r7, #19]
            break;
 80022d4:	e006      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0ec      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80022e4:	7cfb      	ldrb	r3, [r7, #19]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10b      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f8:	4903      	ldr	r1, [pc, #12]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002300:	e008      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002302:	7cfb      	ldrb	r3, [r7, #19]
 8002304:	74bb      	strb	r3, [r7, #18]
 8002306:	e005      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002308:	40021000 	.word	0x40021000
 800230c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002314:	7c7b      	ldrb	r3, [r7, #17]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d105      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231a:	4ba7      	ldr	r3, [pc, #668]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	4aa6      	ldr	r2, [pc, #664]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002324:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002332:	4ba1      	ldr	r3, [pc, #644]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002338:	f023 0203 	bic.w	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	499d      	ldr	r1, [pc, #628]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002354:	4b98      	ldr	r3, [pc, #608]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	f023 020c 	bic.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	4995      	ldr	r1, [pc, #596]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002376:	4b90      	ldr	r3, [pc, #576]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	498c      	ldr	r1, [pc, #560]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002398:	4b87      	ldr	r3, [pc, #540]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	4984      	ldr	r1, [pc, #528]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023ba:	4b7f      	ldr	r3, [pc, #508]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	497b      	ldr	r1, [pc, #492]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023dc:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	4973      	ldr	r1, [pc, #460]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023fe:	4b6e      	ldr	r3, [pc, #440]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002404:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	496a      	ldr	r1, [pc, #424]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002420:	4b65      	ldr	r3, [pc, #404]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002426:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4962      	ldr	r1, [pc, #392]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002442:	4b5d      	ldr	r3, [pc, #372]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002448:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	4959      	ldr	r1, [pc, #356]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002464:	4b54      	ldr	r3, [pc, #336]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002466:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	4951      	ldr	r1, [pc, #324]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002486:	4b4c      	ldr	r3, [pc, #304]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	4948      	ldr	r1, [pc, #288]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d015      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024a8:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4940      	ldr	r1, [pc, #256]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024c6:	d105      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c8:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a3a      	ldr	r2, [pc, #232]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d015      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024e0:	4b35      	ldr	r3, [pc, #212]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ee:	4932      	ldr	r1, [pc, #200]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024fe:	d105      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002500:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4a2c      	ldr	r2, [pc, #176]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800250a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d015      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002518:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002526:	4924      	ldr	r1, [pc, #144]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002532:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002536:	d105      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002538:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a1e      	ldr	r2, [pc, #120]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800253e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002542:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d015      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255e:	4916      	ldr	r1, [pc, #88]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800256e:	d105      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800257a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d019      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	4908      	ldr	r1, [pc, #32]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025a6:	d109      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a02      	ldr	r2, [pc, #8]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b2:	60d3      	str	r3, [r2, #12]
 80025b4:	e002      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d015      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025c8:	4b29      	ldr	r3, [pc, #164]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	4926      	ldr	r1, [pc, #152]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025e6:	d105      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80025e8:	4b21      	ldr	r3, [pc, #132]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4a20      	ldr	r2, [pc, #128]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d015      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002600:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260e:	4918      	ldr	r1, [pc, #96]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261e:	d105      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4a12      	ldr	r2, [pc, #72]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d015      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002638:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800263a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800263e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	490a      	ldr	r1, [pc, #40]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002656:	d105      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4a04      	ldr	r2, [pc, #16]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800265e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002662:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002664:	7cbb      	ldrb	r3, [r7, #18]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40021000 	.word	0x40021000

08002674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e049      	b.n	800271a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d106      	bne.n	80026a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7fe fa62 	bl	8000b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3304      	adds	r3, #4
 80026b0:	4619      	mov	r1, r3
 80026b2:	4610      	mov	r0, r2
 80026b4:	f000 fe3c 	bl	8003330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0201 	bic.w	r2, r2, #1
 8002738:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6a1a      	ldr	r2, [r3, #32]
 8002740:	f241 1311 	movw	r3, #4369	; 0x1111
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10f      	bne.n	800276a <HAL_TIM_Base_Stop_IT+0x48>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6a1a      	ldr	r2, [r3, #32]
 8002750:	f244 4344 	movw	r3, #17476	; 0x4444
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d107      	bne.n	800276a <HAL_TIM_Base_Stop_IT+0x48>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e049      	b.n	8002826 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d106      	bne.n	80027ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe f9bc 	bl	8000b24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3304      	adds	r3, #4
 80027bc:	4619      	mov	r1, r3
 80027be:	4610      	mov	r0, r2
 80027c0:	f000 fdb6 	bl	8003330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d109      	bne.n	8002854 <HAL_TIM_PWM_Start+0x24>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b01      	cmp	r3, #1
 800284a:	bf14      	ite	ne
 800284c:	2301      	movne	r3, #1
 800284e:	2300      	moveq	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	e03c      	b.n	80028ce <HAL_TIM_PWM_Start+0x9e>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2b04      	cmp	r3, #4
 8002858:	d109      	bne.n	800286e <HAL_TIM_PWM_Start+0x3e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b01      	cmp	r3, #1
 8002864:	bf14      	ite	ne
 8002866:	2301      	movne	r3, #1
 8002868:	2300      	moveq	r3, #0
 800286a:	b2db      	uxtb	r3, r3
 800286c:	e02f      	b.n	80028ce <HAL_TIM_PWM_Start+0x9e>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d109      	bne.n	8002888 <HAL_TIM_PWM_Start+0x58>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b01      	cmp	r3, #1
 800287e:	bf14      	ite	ne
 8002880:	2301      	movne	r3, #1
 8002882:	2300      	moveq	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	e022      	b.n	80028ce <HAL_TIM_PWM_Start+0x9e>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d109      	bne.n	80028a2 <HAL_TIM_PWM_Start+0x72>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	bf14      	ite	ne
 800289a:	2301      	movne	r3, #1
 800289c:	2300      	moveq	r3, #0
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	e015      	b.n	80028ce <HAL_TIM_PWM_Start+0x9e>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b10      	cmp	r3, #16
 80028a6:	d109      	bne.n	80028bc <HAL_TIM_PWM_Start+0x8c>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	bf14      	ite	ne
 80028b4:	2301      	movne	r3, #1
 80028b6:	2300      	moveq	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	e008      	b.n	80028ce <HAL_TIM_PWM_Start+0x9e>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	bf14      	ite	ne
 80028c8:	2301      	movne	r3, #1
 80028ca:	2300      	moveq	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e0a6      	b.n	8002a24 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d104      	bne.n	80028e6 <HAL_TIM_PWM_Start+0xb6>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028e4:	e023      	b.n	800292e <HAL_TIM_PWM_Start+0xfe>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d104      	bne.n	80028f6 <HAL_TIM_PWM_Start+0xc6>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028f4:	e01b      	b.n	800292e <HAL_TIM_PWM_Start+0xfe>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d104      	bne.n	8002906 <HAL_TIM_PWM_Start+0xd6>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002904:	e013      	b.n	800292e <HAL_TIM_PWM_Start+0xfe>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b0c      	cmp	r3, #12
 800290a:	d104      	bne.n	8002916 <HAL_TIM_PWM_Start+0xe6>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002914:	e00b      	b.n	800292e <HAL_TIM_PWM_Start+0xfe>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b10      	cmp	r3, #16
 800291a:	d104      	bne.n	8002926 <HAL_TIM_PWM_Start+0xf6>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002924:	e003      	b.n	800292e <HAL_TIM_PWM_Start+0xfe>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2202      	movs	r2, #2
 800292a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2201      	movs	r2, #1
 8002934:	6839      	ldr	r1, [r7, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f001 f968 	bl	8003c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a3a      	ldr	r2, [pc, #232]	; (8002a2c <HAL_TIM_PWM_Start+0x1fc>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d018      	beq.n	8002978 <HAL_TIM_PWM_Start+0x148>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a39      	ldr	r2, [pc, #228]	; (8002a30 <HAL_TIM_PWM_Start+0x200>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d013      	beq.n	8002978 <HAL_TIM_PWM_Start+0x148>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a37      	ldr	r2, [pc, #220]	; (8002a34 <HAL_TIM_PWM_Start+0x204>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00e      	beq.n	8002978 <HAL_TIM_PWM_Start+0x148>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a36      	ldr	r2, [pc, #216]	; (8002a38 <HAL_TIM_PWM_Start+0x208>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d009      	beq.n	8002978 <HAL_TIM_PWM_Start+0x148>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a34      	ldr	r2, [pc, #208]	; (8002a3c <HAL_TIM_PWM_Start+0x20c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d004      	beq.n	8002978 <HAL_TIM_PWM_Start+0x148>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a33      	ldr	r2, [pc, #204]	; (8002a40 <HAL_TIM_PWM_Start+0x210>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d101      	bne.n	800297c <HAL_TIM_PWM_Start+0x14c>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_TIM_PWM_Start+0x14e>
 800297c:	2300      	movs	r3, #0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d007      	beq.n	8002992 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002990:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a25      	ldr	r2, [pc, #148]	; (8002a2c <HAL_TIM_PWM_Start+0x1fc>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d022      	beq.n	80029e2 <HAL_TIM_PWM_Start+0x1b2>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a4:	d01d      	beq.n	80029e2 <HAL_TIM_PWM_Start+0x1b2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a26      	ldr	r2, [pc, #152]	; (8002a44 <HAL_TIM_PWM_Start+0x214>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d018      	beq.n	80029e2 <HAL_TIM_PWM_Start+0x1b2>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a24      	ldr	r2, [pc, #144]	; (8002a48 <HAL_TIM_PWM_Start+0x218>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d013      	beq.n	80029e2 <HAL_TIM_PWM_Start+0x1b2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a23      	ldr	r2, [pc, #140]	; (8002a4c <HAL_TIM_PWM_Start+0x21c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00e      	beq.n	80029e2 <HAL_TIM_PWM_Start+0x1b2>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <HAL_TIM_PWM_Start+0x200>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d009      	beq.n	80029e2 <HAL_TIM_PWM_Start+0x1b2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a18      	ldr	r2, [pc, #96]	; (8002a34 <HAL_TIM_PWM_Start+0x204>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d004      	beq.n	80029e2 <HAL_TIM_PWM_Start+0x1b2>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a18      	ldr	r2, [pc, #96]	; (8002a40 <HAL_TIM_PWM_Start+0x210>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d115      	bne.n	8002a0e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <HAL_TIM_PWM_Start+0x220>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b06      	cmp	r3, #6
 80029f2:	d015      	beq.n	8002a20 <HAL_TIM_PWM_Start+0x1f0>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fa:	d011      	beq.n	8002a20 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0c:	e008      	b.n	8002a20 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0201 	orr.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	e000      	b.n	8002a22 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40012c00 	.word	0x40012c00
 8002a30:	40013400 	.word	0x40013400
 8002a34:	40014000 	.word	0x40014000
 8002a38:	40014400 	.word	0x40014400
 8002a3c:	40014800 	.word	0x40014800
 8002a40:	40015000 	.word	0x40015000
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40000800 	.word	0x40000800
 8002a4c:	40000c00 	.word	0x40000c00
 8002a50:	00010007 	.word	0x00010007

08002a54 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2200      	movs	r2, #0
 8002a64:	6839      	ldr	r1, [r7, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f001 f8d0 	bl	8003c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a40      	ldr	r2, [pc, #256]	; (8002b74 <HAL_TIM_PWM_Stop+0x120>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d018      	beq.n	8002aa8 <HAL_TIM_PWM_Stop+0x54>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a3f      	ldr	r2, [pc, #252]	; (8002b78 <HAL_TIM_PWM_Stop+0x124>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d013      	beq.n	8002aa8 <HAL_TIM_PWM_Stop+0x54>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a3d      	ldr	r2, [pc, #244]	; (8002b7c <HAL_TIM_PWM_Stop+0x128>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00e      	beq.n	8002aa8 <HAL_TIM_PWM_Stop+0x54>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a3c      	ldr	r2, [pc, #240]	; (8002b80 <HAL_TIM_PWM_Stop+0x12c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_TIM_PWM_Stop+0x54>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a3a      	ldr	r2, [pc, #232]	; (8002b84 <HAL_TIM_PWM_Stop+0x130>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_TIM_PWM_Stop+0x54>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a39      	ldr	r2, [pc, #228]	; (8002b88 <HAL_TIM_PWM_Stop+0x134>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d101      	bne.n	8002aac <HAL_TIM_PWM_Stop+0x58>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_TIM_PWM_Stop+0x5a>
 8002aac:	2300      	movs	r3, #0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d017      	beq.n	8002ae2 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6a1a      	ldr	r2, [r3, #32]
 8002ab8:	f241 1311 	movw	r3, #4369	; 0x1111
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10f      	bne.n	8002ae2 <HAL_TIM_PWM_Stop+0x8e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6a1a      	ldr	r2, [r3, #32]
 8002ac8:	f244 4344 	movw	r3, #17476	; 0x4444
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d107      	bne.n	8002ae2 <HAL_TIM_PWM_Stop+0x8e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6a1a      	ldr	r2, [r3, #32]
 8002ae8:	f241 1311 	movw	r3, #4369	; 0x1111
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10f      	bne.n	8002b12 <HAL_TIM_PWM_Stop+0xbe>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6a1a      	ldr	r2, [r3, #32]
 8002af8:	f244 4344 	movw	r3, #17476	; 0x4444
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d107      	bne.n	8002b12 <HAL_TIM_PWM_Stop+0xbe>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d104      	bne.n	8002b22 <HAL_TIM_PWM_Stop+0xce>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b20:	e023      	b.n	8002b6a <HAL_TIM_PWM_Stop+0x116>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d104      	bne.n	8002b32 <HAL_TIM_PWM_Stop+0xde>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b30:	e01b      	b.n	8002b6a <HAL_TIM_PWM_Stop+0x116>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d104      	bne.n	8002b42 <HAL_TIM_PWM_Stop+0xee>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b40:	e013      	b.n	8002b6a <HAL_TIM_PWM_Stop+0x116>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b0c      	cmp	r3, #12
 8002b46:	d104      	bne.n	8002b52 <HAL_TIM_PWM_Stop+0xfe>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b50:	e00b      	b.n	8002b6a <HAL_TIM_PWM_Stop+0x116>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b10      	cmp	r3, #16
 8002b56:	d104      	bne.n	8002b62 <HAL_TIM_PWM_Stop+0x10e>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b60:	e003      	b.n	8002b6a <HAL_TIM_PWM_Stop+0x116>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40012c00 	.word	0x40012c00
 8002b78:	40013400 	.word	0x40013400
 8002b7c:	40014000 	.word	0x40014000
 8002b80:	40014400 	.word	0x40014400
 8002b84:	40014800 	.word	0x40014800
 8002b88:	40015000 	.word	0x40015000

08002b8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d122      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d11b      	bne.n	8002be8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0202 	mvn.w	r2, #2
 8002bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fb90 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 8002bd4:	e005      	b.n	8002be2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fb82 	bl	80032e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 fb93 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d122      	bne.n	8002c3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d11b      	bne.n	8002c3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0204 	mvn.w	r2, #4
 8002c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2202      	movs	r2, #2
 8002c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fb66 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 8002c28:	e005      	b.n	8002c36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fb58 	bl	80032e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fb69 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d122      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d11b      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0208 	mvn.w	r2, #8
 8002c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2204      	movs	r2, #4
 8002c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fb3c 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 8002c7c:	e005      	b.n	8002c8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 fb2e 	bl	80032e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fb3f 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b10      	cmp	r3, #16
 8002c9c:	d122      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d11b      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0210 	mvn.w	r2, #16
 8002cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2208      	movs	r2, #8
 8002cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fb12 	bl	80032f4 <HAL_TIM_IC_CaptureCallback>
 8002cd0:	e005      	b.n	8002cde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fb04 	bl	80032e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fb15 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d10e      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d107      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0201 	mvn.w	r2, #1
 8002d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fd fe7a 	bl	8000a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1a:	2b80      	cmp	r3, #128	; 0x80
 8002d1c:	d10e      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d28:	2b80      	cmp	r3, #128	; 0x80
 8002d2a:	d107      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f001 fa00 	bl	800413c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d4a:	d10e      	bne.n	8002d6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	2b80      	cmp	r3, #128	; 0x80
 8002d58:	d107      	bne.n	8002d6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f001 f9f3 	bl	8004150 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	d10e      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d107      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fac3 	bl	800331c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	d10e      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d107      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f06f 0220 	mvn.w	r2, #32
 8002dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f001 f9b3 	bl	8004128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dd0:	d10f      	bne.n	8002df2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002de0:	d107      	bne.n	8002df2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f001 f9b9 	bl	8004164 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e00:	d10f      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e10:	d107      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f001 f9ab 	bl	8004178 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e30:	d10f      	bne.n	8002e52 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e40:	d107      	bne.n	8002e52 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f001 f99d 	bl	800418c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e60:	d10f      	bne.n	8002e82 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e70:	d107      	bne.n	8002e82 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f001 f98f 	bl	80041a0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e0ff      	b.n	80030aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b14      	cmp	r3, #20
 8002eb6:	f200 80f0 	bhi.w	800309a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002eba:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec0:	08002f15 	.word	0x08002f15
 8002ec4:	0800309b 	.word	0x0800309b
 8002ec8:	0800309b 	.word	0x0800309b
 8002ecc:	0800309b 	.word	0x0800309b
 8002ed0:	08002f55 	.word	0x08002f55
 8002ed4:	0800309b 	.word	0x0800309b
 8002ed8:	0800309b 	.word	0x0800309b
 8002edc:	0800309b 	.word	0x0800309b
 8002ee0:	08002f97 	.word	0x08002f97
 8002ee4:	0800309b 	.word	0x0800309b
 8002ee8:	0800309b 	.word	0x0800309b
 8002eec:	0800309b 	.word	0x0800309b
 8002ef0:	08002fd7 	.word	0x08002fd7
 8002ef4:	0800309b 	.word	0x0800309b
 8002ef8:	0800309b 	.word	0x0800309b
 8002efc:	0800309b 	.word	0x0800309b
 8002f00:	08003019 	.word	0x08003019
 8002f04:	0800309b 	.word	0x0800309b
 8002f08:	0800309b 	.word	0x0800309b
 8002f0c:	0800309b 	.word	0x0800309b
 8002f10:	08003059 	.word	0x08003059
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fab0 	bl	8003480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0208 	orr.w	r2, r2, #8
 8002f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699a      	ldr	r2, [r3, #24]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0204 	bic.w	r2, r2, #4
 8002f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6999      	ldr	r1, [r3, #24]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	691a      	ldr	r2, [r3, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	619a      	str	r2, [r3, #24]
      break;
 8002f52:	e0a5      	b.n	80030a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fb2a 	bl	80035b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6999      	ldr	r1, [r3, #24]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	021a      	lsls	r2, r3, #8
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	619a      	str	r2, [r3, #24]
      break;
 8002f94:	e084      	b.n	80030a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fb9d 	bl	80036dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69da      	ldr	r2, [r3, #28]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0208 	orr.w	r2, r2, #8
 8002fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0204 	bic.w	r2, r2, #4
 8002fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	69d9      	ldr	r1, [r3, #28]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	61da      	str	r2, [r3, #28]
      break;
 8002fd4:	e064      	b.n	80030a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fc0f 	bl	8003800 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69da      	ldr	r2, [r3, #28]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69d9      	ldr	r1, [r3, #28]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	021a      	lsls	r2, r3, #8
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	61da      	str	r2, [r3, #28]
      break;
 8003016:	e043      	b.n	80030a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fc82 	bl	8003928 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0208 	orr.w	r2, r2, #8
 8003032:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0204 	bic.w	r2, r2, #4
 8003042:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003056:	e023      	b.n	80030a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fccc 	bl	80039fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003072:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003082:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	021a      	lsls	r2, r3, #8
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003098:	e002      	b.n	80030a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	75fb      	strb	r3, [r7, #23]
      break;
 800309e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop

080030b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_TIM_ConfigClockSource+0x1c>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e0f6      	b.n	80032be <HAL_TIM_ConfigClockSource+0x20a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80030ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a6f      	ldr	r2, [pc, #444]	; (80032c8 <HAL_TIM_ConfigClockSource+0x214>)
 800310a:	4293      	cmp	r3, r2
 800310c:	f000 80c1 	beq.w	8003292 <HAL_TIM_ConfigClockSource+0x1de>
 8003110:	4a6d      	ldr	r2, [pc, #436]	; (80032c8 <HAL_TIM_ConfigClockSource+0x214>)
 8003112:	4293      	cmp	r3, r2
 8003114:	f200 80c6 	bhi.w	80032a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003118:	4a6c      	ldr	r2, [pc, #432]	; (80032cc <HAL_TIM_ConfigClockSource+0x218>)
 800311a:	4293      	cmp	r3, r2
 800311c:	f000 80b9 	beq.w	8003292 <HAL_TIM_ConfigClockSource+0x1de>
 8003120:	4a6a      	ldr	r2, [pc, #424]	; (80032cc <HAL_TIM_ConfigClockSource+0x218>)
 8003122:	4293      	cmp	r3, r2
 8003124:	f200 80be 	bhi.w	80032a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003128:	4a69      	ldr	r2, [pc, #420]	; (80032d0 <HAL_TIM_ConfigClockSource+0x21c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	f000 80b1 	beq.w	8003292 <HAL_TIM_ConfigClockSource+0x1de>
 8003130:	4a67      	ldr	r2, [pc, #412]	; (80032d0 <HAL_TIM_ConfigClockSource+0x21c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	f200 80b6 	bhi.w	80032a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003138:	4a66      	ldr	r2, [pc, #408]	; (80032d4 <HAL_TIM_ConfigClockSource+0x220>)
 800313a:	4293      	cmp	r3, r2
 800313c:	f000 80a9 	beq.w	8003292 <HAL_TIM_ConfigClockSource+0x1de>
 8003140:	4a64      	ldr	r2, [pc, #400]	; (80032d4 <HAL_TIM_ConfigClockSource+0x220>)
 8003142:	4293      	cmp	r3, r2
 8003144:	f200 80ae 	bhi.w	80032a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003148:	4a63      	ldr	r2, [pc, #396]	; (80032d8 <HAL_TIM_ConfigClockSource+0x224>)
 800314a:	4293      	cmp	r3, r2
 800314c:	f000 80a1 	beq.w	8003292 <HAL_TIM_ConfigClockSource+0x1de>
 8003150:	4a61      	ldr	r2, [pc, #388]	; (80032d8 <HAL_TIM_ConfigClockSource+0x224>)
 8003152:	4293      	cmp	r3, r2
 8003154:	f200 80a6 	bhi.w	80032a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003158:	4a60      	ldr	r2, [pc, #384]	; (80032dc <HAL_TIM_ConfigClockSource+0x228>)
 800315a:	4293      	cmp	r3, r2
 800315c:	f000 8099 	beq.w	8003292 <HAL_TIM_ConfigClockSource+0x1de>
 8003160:	4a5e      	ldr	r2, [pc, #376]	; (80032dc <HAL_TIM_ConfigClockSource+0x228>)
 8003162:	4293      	cmp	r3, r2
 8003164:	f200 809e 	bhi.w	80032a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003168:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800316c:	f000 8091 	beq.w	8003292 <HAL_TIM_ConfigClockSource+0x1de>
 8003170:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003174:	f200 8096 	bhi.w	80032a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800317c:	f000 8089 	beq.w	8003292 <HAL_TIM_ConfigClockSource+0x1de>
 8003180:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003184:	f200 808e 	bhi.w	80032a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800318c:	d03e      	beq.n	800320c <HAL_TIM_ConfigClockSource+0x158>
 800318e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003192:	f200 8087 	bhi.w	80032a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319a:	f000 8086 	beq.w	80032aa <HAL_TIM_ConfigClockSource+0x1f6>
 800319e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a2:	d87f      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80031a4:	2b70      	cmp	r3, #112	; 0x70
 80031a6:	d01a      	beq.n	80031de <HAL_TIM_ConfigClockSource+0x12a>
 80031a8:	2b70      	cmp	r3, #112	; 0x70
 80031aa:	d87b      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80031ac:	2b60      	cmp	r3, #96	; 0x60
 80031ae:	d050      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0x19e>
 80031b0:	2b60      	cmp	r3, #96	; 0x60
 80031b2:	d877      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80031b4:	2b50      	cmp	r3, #80	; 0x50
 80031b6:	d03c      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0x17e>
 80031b8:	2b50      	cmp	r3, #80	; 0x50
 80031ba:	d873      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80031bc:	2b40      	cmp	r3, #64	; 0x40
 80031be:	d058      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0x1be>
 80031c0:	2b40      	cmp	r3, #64	; 0x40
 80031c2:	d86f      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80031c4:	2b30      	cmp	r3, #48	; 0x30
 80031c6:	d064      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x1de>
 80031c8:	2b30      	cmp	r3, #48	; 0x30
 80031ca:	d86b      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d060      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x1de>
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d867      	bhi.n	80032a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d05c      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x1de>
 80031d8:	2b10      	cmp	r3, #16
 80031da:	d05a      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x1de>
 80031dc:	e062      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6899      	ldr	r1, [r3, #8]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f000 fced 	bl	8003bcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003200:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	609a      	str	r2, [r3, #8]
      break;
 800320a:	e04f      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	6899      	ldr	r1, [r3, #8]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f000 fcd6 	bl	8003bcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800322e:	609a      	str	r2, [r3, #8]
      break;
 8003230:	e03c      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	461a      	mov	r2, r3
 8003240:	f000 fc48 	bl	8003ad4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2150      	movs	r1, #80	; 0x50
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fca1 	bl	8003b92 <TIM_ITRx_SetConfig>
      break;
 8003250:	e02c      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6859      	ldr	r1, [r3, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	461a      	mov	r2, r3
 8003260:	f000 fc67 	bl	8003b32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2160      	movs	r1, #96	; 0x60
 800326a:	4618      	mov	r0, r3
 800326c:	f000 fc91 	bl	8003b92 <TIM_ITRx_SetConfig>
      break;
 8003270:	e01c      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	461a      	mov	r2, r3
 8003280:	f000 fc28 	bl	8003ad4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2140      	movs	r1, #64	; 0x40
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fc81 	bl	8003b92 <TIM_ITRx_SetConfig>
      break;
 8003290:	e00c      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4619      	mov	r1, r3
 800329c:	4610      	mov	r0, r2
 800329e:	f000 fc78 	bl	8003b92 <TIM_ITRx_SetConfig>
      break;
 80032a2:	e003      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
      break;
 80032a8:	e000      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80032aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	00100070 	.word	0x00100070
 80032cc:	00100060 	.word	0x00100060
 80032d0:	00100050 	.word	0x00100050
 80032d4:	00100040 	.word	0x00100040
 80032d8:	00100030 	.word	0x00100030
 80032dc:	00100020 	.word	0x00100020

080032e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a46      	ldr	r2, [pc, #280]	; (800345c <TIM_Base_SetConfig+0x12c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d017      	beq.n	8003378 <TIM_Base_SetConfig+0x48>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334e:	d013      	beq.n	8003378 <TIM_Base_SetConfig+0x48>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a43      	ldr	r2, [pc, #268]	; (8003460 <TIM_Base_SetConfig+0x130>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00f      	beq.n	8003378 <TIM_Base_SetConfig+0x48>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a42      	ldr	r2, [pc, #264]	; (8003464 <TIM_Base_SetConfig+0x134>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00b      	beq.n	8003378 <TIM_Base_SetConfig+0x48>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a41      	ldr	r2, [pc, #260]	; (8003468 <TIM_Base_SetConfig+0x138>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d007      	beq.n	8003378 <TIM_Base_SetConfig+0x48>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a40      	ldr	r2, [pc, #256]	; (800346c <TIM_Base_SetConfig+0x13c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d003      	beq.n	8003378 <TIM_Base_SetConfig+0x48>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a3f      	ldr	r2, [pc, #252]	; (8003470 <TIM_Base_SetConfig+0x140>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d108      	bne.n	800338a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a33      	ldr	r2, [pc, #204]	; (800345c <TIM_Base_SetConfig+0x12c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d023      	beq.n	80033da <TIM_Base_SetConfig+0xaa>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003398:	d01f      	beq.n	80033da <TIM_Base_SetConfig+0xaa>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a30      	ldr	r2, [pc, #192]	; (8003460 <TIM_Base_SetConfig+0x130>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d01b      	beq.n	80033da <TIM_Base_SetConfig+0xaa>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a2f      	ldr	r2, [pc, #188]	; (8003464 <TIM_Base_SetConfig+0x134>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d017      	beq.n	80033da <TIM_Base_SetConfig+0xaa>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a2e      	ldr	r2, [pc, #184]	; (8003468 <TIM_Base_SetConfig+0x138>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d013      	beq.n	80033da <TIM_Base_SetConfig+0xaa>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a2d      	ldr	r2, [pc, #180]	; (800346c <TIM_Base_SetConfig+0x13c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00f      	beq.n	80033da <TIM_Base_SetConfig+0xaa>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a2d      	ldr	r2, [pc, #180]	; (8003474 <TIM_Base_SetConfig+0x144>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00b      	beq.n	80033da <TIM_Base_SetConfig+0xaa>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a2c      	ldr	r2, [pc, #176]	; (8003478 <TIM_Base_SetConfig+0x148>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d007      	beq.n	80033da <TIM_Base_SetConfig+0xaa>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a2b      	ldr	r2, [pc, #172]	; (800347c <TIM_Base_SetConfig+0x14c>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d003      	beq.n	80033da <TIM_Base_SetConfig+0xaa>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a26      	ldr	r2, [pc, #152]	; (8003470 <TIM_Base_SetConfig+0x140>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d108      	bne.n	80033ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a12      	ldr	r2, [pc, #72]	; (800345c <TIM_Base_SetConfig+0x12c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d013      	beq.n	8003440 <TIM_Base_SetConfig+0x110>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a14      	ldr	r2, [pc, #80]	; (800346c <TIM_Base_SetConfig+0x13c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00f      	beq.n	8003440 <TIM_Base_SetConfig+0x110>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a14      	ldr	r2, [pc, #80]	; (8003474 <TIM_Base_SetConfig+0x144>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00b      	beq.n	8003440 <TIM_Base_SetConfig+0x110>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a13      	ldr	r2, [pc, #76]	; (8003478 <TIM_Base_SetConfig+0x148>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d007      	beq.n	8003440 <TIM_Base_SetConfig+0x110>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a12      	ldr	r2, [pc, #72]	; (800347c <TIM_Base_SetConfig+0x14c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d003      	beq.n	8003440 <TIM_Base_SetConfig+0x110>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a0d      	ldr	r2, [pc, #52]	; (8003470 <TIM_Base_SetConfig+0x140>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d103      	bne.n	8003448 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	615a      	str	r2, [r3, #20]
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40012c00 	.word	0x40012c00
 8003460:	40000400 	.word	0x40000400
 8003464:	40000800 	.word	0x40000800
 8003468:	40000c00 	.word	0x40000c00
 800346c:	40013400 	.word	0x40013400
 8003470:	40015000 	.word	0x40015000
 8003474:	40014000 	.word	0x40014000
 8003478:	40014400 	.word	0x40014400
 800347c:	40014800 	.word	0x40014800

08003480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	f023 0201 	bic.w	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0303 	bic.w	r3, r3, #3
 80034ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f023 0302 	bic.w	r3, r3, #2
 80034cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a30      	ldr	r2, [pc, #192]	; (800359c <TIM_OC1_SetConfig+0x11c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d013      	beq.n	8003508 <TIM_OC1_SetConfig+0x88>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a2f      	ldr	r2, [pc, #188]	; (80035a0 <TIM_OC1_SetConfig+0x120>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00f      	beq.n	8003508 <TIM_OC1_SetConfig+0x88>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a2e      	ldr	r2, [pc, #184]	; (80035a4 <TIM_OC1_SetConfig+0x124>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00b      	beq.n	8003508 <TIM_OC1_SetConfig+0x88>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a2d      	ldr	r2, [pc, #180]	; (80035a8 <TIM_OC1_SetConfig+0x128>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d007      	beq.n	8003508 <TIM_OC1_SetConfig+0x88>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a2c      	ldr	r2, [pc, #176]	; (80035ac <TIM_OC1_SetConfig+0x12c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_OC1_SetConfig+0x88>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a2b      	ldr	r2, [pc, #172]	; (80035b0 <TIM_OC1_SetConfig+0x130>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d10c      	bne.n	8003522 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f023 0308 	bic.w	r3, r3, #8
 800350e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f023 0304 	bic.w	r3, r3, #4
 8003520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a1d      	ldr	r2, [pc, #116]	; (800359c <TIM_OC1_SetConfig+0x11c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <TIM_OC1_SetConfig+0xd2>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <TIM_OC1_SetConfig+0x120>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00f      	beq.n	8003552 <TIM_OC1_SetConfig+0xd2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a1b      	ldr	r2, [pc, #108]	; (80035a4 <TIM_OC1_SetConfig+0x124>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00b      	beq.n	8003552 <TIM_OC1_SetConfig+0xd2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a1a      	ldr	r2, [pc, #104]	; (80035a8 <TIM_OC1_SetConfig+0x128>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d007      	beq.n	8003552 <TIM_OC1_SetConfig+0xd2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a19      	ldr	r2, [pc, #100]	; (80035ac <TIM_OC1_SetConfig+0x12c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d003      	beq.n	8003552 <TIM_OC1_SetConfig+0xd2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a18      	ldr	r2, [pc, #96]	; (80035b0 <TIM_OC1_SetConfig+0x130>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d111      	bne.n	8003576 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	621a      	str	r2, [r3, #32]
}
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40013400 	.word	0x40013400
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40014400 	.word	0x40014400
 80035ac:	40014800 	.word	0x40014800
 80035b0:	40015000 	.word	0x40015000

080035b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f023 0210 	bic.w	r2, r3, #16
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	021b      	lsls	r3, r3, #8
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f023 0320 	bic.w	r3, r3, #32
 8003602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a2c      	ldr	r2, [pc, #176]	; (80036c4 <TIM_OC2_SetConfig+0x110>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d007      	beq.n	8003628 <TIM_OC2_SetConfig+0x74>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a2b      	ldr	r2, [pc, #172]	; (80036c8 <TIM_OC2_SetConfig+0x114>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d003      	beq.n	8003628 <TIM_OC2_SetConfig+0x74>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a2a      	ldr	r2, [pc, #168]	; (80036cc <TIM_OC2_SetConfig+0x118>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d10d      	bne.n	8003644 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800362e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003642:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <TIM_OC2_SetConfig+0x110>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d013      	beq.n	8003674 <TIM_OC2_SetConfig+0xc0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a1e      	ldr	r2, [pc, #120]	; (80036c8 <TIM_OC2_SetConfig+0x114>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00f      	beq.n	8003674 <TIM_OC2_SetConfig+0xc0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a1e      	ldr	r2, [pc, #120]	; (80036d0 <TIM_OC2_SetConfig+0x11c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00b      	beq.n	8003674 <TIM_OC2_SetConfig+0xc0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a1d      	ldr	r2, [pc, #116]	; (80036d4 <TIM_OC2_SetConfig+0x120>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d007      	beq.n	8003674 <TIM_OC2_SetConfig+0xc0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a1c      	ldr	r2, [pc, #112]	; (80036d8 <TIM_OC2_SetConfig+0x124>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_OC2_SetConfig+0xc0>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a17      	ldr	r2, [pc, #92]	; (80036cc <TIM_OC2_SetConfig+0x118>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d113      	bne.n	800369c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800367a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	621a      	str	r2, [r3, #32]
}
 80036b6:	bf00      	nop
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40012c00 	.word	0x40012c00
 80036c8:	40013400 	.word	0x40013400
 80036cc:	40015000 	.word	0x40015000
 80036d0:	40014000 	.word	0x40014000
 80036d4:	40014400 	.word	0x40014400
 80036d8:	40014800 	.word	0x40014800

080036dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	021b      	lsls	r3, r3, #8
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a2b      	ldr	r2, [pc, #172]	; (80037e8 <TIM_OC3_SetConfig+0x10c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d007      	beq.n	800374e <TIM_OC3_SetConfig+0x72>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a2a      	ldr	r2, [pc, #168]	; (80037ec <TIM_OC3_SetConfig+0x110>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d003      	beq.n	800374e <TIM_OC3_SetConfig+0x72>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a29      	ldr	r2, [pc, #164]	; (80037f0 <TIM_OC3_SetConfig+0x114>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d10d      	bne.n	800376a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	021b      	lsls	r3, r3, #8
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a1e      	ldr	r2, [pc, #120]	; (80037e8 <TIM_OC3_SetConfig+0x10c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <TIM_OC3_SetConfig+0xbe>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a1d      	ldr	r2, [pc, #116]	; (80037ec <TIM_OC3_SetConfig+0x110>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00f      	beq.n	800379a <TIM_OC3_SetConfig+0xbe>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a1d      	ldr	r2, [pc, #116]	; (80037f4 <TIM_OC3_SetConfig+0x118>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00b      	beq.n	800379a <TIM_OC3_SetConfig+0xbe>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a1c      	ldr	r2, [pc, #112]	; (80037f8 <TIM_OC3_SetConfig+0x11c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d007      	beq.n	800379a <TIM_OC3_SetConfig+0xbe>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a1b      	ldr	r2, [pc, #108]	; (80037fc <TIM_OC3_SetConfig+0x120>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d003      	beq.n	800379a <TIM_OC3_SetConfig+0xbe>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a16      	ldr	r2, [pc, #88]	; (80037f0 <TIM_OC3_SetConfig+0x114>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d113      	bne.n	80037c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	621a      	str	r2, [r3, #32]
}
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	40012c00 	.word	0x40012c00
 80037ec:	40013400 	.word	0x40013400
 80037f0:	40015000 	.word	0x40015000
 80037f4:	40014000 	.word	0x40014000
 80037f8:	40014400 	.word	0x40014400
 80037fc:	40014800 	.word	0x40014800

08003800 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800382e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800384e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	031b      	lsls	r3, r3, #12
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a2c      	ldr	r2, [pc, #176]	; (8003910 <TIM_OC4_SetConfig+0x110>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d007      	beq.n	8003874 <TIM_OC4_SetConfig+0x74>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a2b      	ldr	r2, [pc, #172]	; (8003914 <TIM_OC4_SetConfig+0x114>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d003      	beq.n	8003874 <TIM_OC4_SetConfig+0x74>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a2a      	ldr	r2, [pc, #168]	; (8003918 <TIM_OC4_SetConfig+0x118>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d10d      	bne.n	8003890 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800387a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	031b      	lsls	r3, r3, #12
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800388e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a1f      	ldr	r2, [pc, #124]	; (8003910 <TIM_OC4_SetConfig+0x110>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d013      	beq.n	80038c0 <TIM_OC4_SetConfig+0xc0>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a1e      	ldr	r2, [pc, #120]	; (8003914 <TIM_OC4_SetConfig+0x114>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00f      	beq.n	80038c0 <TIM_OC4_SetConfig+0xc0>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a1e      	ldr	r2, [pc, #120]	; (800391c <TIM_OC4_SetConfig+0x11c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00b      	beq.n	80038c0 <TIM_OC4_SetConfig+0xc0>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a1d      	ldr	r2, [pc, #116]	; (8003920 <TIM_OC4_SetConfig+0x120>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d007      	beq.n	80038c0 <TIM_OC4_SetConfig+0xc0>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a1c      	ldr	r2, [pc, #112]	; (8003924 <TIM_OC4_SetConfig+0x124>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d003      	beq.n	80038c0 <TIM_OC4_SetConfig+0xc0>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a17      	ldr	r2, [pc, #92]	; (8003918 <TIM_OC4_SetConfig+0x118>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d113      	bne.n	80038e8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	019b      	lsls	r3, r3, #6
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	019b      	lsls	r3, r3, #6
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	621a      	str	r2, [r3, #32]
}
 8003902:	bf00      	nop
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40012c00 	.word	0x40012c00
 8003914:	40013400 	.word	0x40013400
 8003918:	40015000 	.word	0x40015000
 800391c:	40014000 	.word	0x40014000
 8003920:	40014400 	.word	0x40014400
 8003924:	40014800 	.word	0x40014800

08003928 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800396c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	041b      	lsls	r3, r3, #16
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a19      	ldr	r2, [pc, #100]	; (80039e4 <TIM_OC5_SetConfig+0xbc>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d013      	beq.n	80039aa <TIM_OC5_SetConfig+0x82>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a18      	ldr	r2, [pc, #96]	; (80039e8 <TIM_OC5_SetConfig+0xc0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00f      	beq.n	80039aa <TIM_OC5_SetConfig+0x82>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a17      	ldr	r2, [pc, #92]	; (80039ec <TIM_OC5_SetConfig+0xc4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00b      	beq.n	80039aa <TIM_OC5_SetConfig+0x82>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a16      	ldr	r2, [pc, #88]	; (80039f0 <TIM_OC5_SetConfig+0xc8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d007      	beq.n	80039aa <TIM_OC5_SetConfig+0x82>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a15      	ldr	r2, [pc, #84]	; (80039f4 <TIM_OC5_SetConfig+0xcc>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d003      	beq.n	80039aa <TIM_OC5_SetConfig+0x82>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a14      	ldr	r2, [pc, #80]	; (80039f8 <TIM_OC5_SetConfig+0xd0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d109      	bne.n	80039be <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	621a      	str	r2, [r3, #32]
}
 80039d8:	bf00      	nop
 80039da:	371c      	adds	r7, #28
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	40012c00 	.word	0x40012c00
 80039e8:	40013400 	.word	0x40013400
 80039ec:	40014000 	.word	0x40014000
 80039f0:	40014400 	.word	0x40014400
 80039f4:	40014800 	.word	0x40014800
 80039f8:	40015000 	.word	0x40015000

080039fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	051b      	lsls	r3, r3, #20
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a1a      	ldr	r2, [pc, #104]	; (8003abc <TIM_OC6_SetConfig+0xc0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d013      	beq.n	8003a80 <TIM_OC6_SetConfig+0x84>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a19      	ldr	r2, [pc, #100]	; (8003ac0 <TIM_OC6_SetConfig+0xc4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00f      	beq.n	8003a80 <TIM_OC6_SetConfig+0x84>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a18      	ldr	r2, [pc, #96]	; (8003ac4 <TIM_OC6_SetConfig+0xc8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00b      	beq.n	8003a80 <TIM_OC6_SetConfig+0x84>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a17      	ldr	r2, [pc, #92]	; (8003ac8 <TIM_OC6_SetConfig+0xcc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d007      	beq.n	8003a80 <TIM_OC6_SetConfig+0x84>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a16      	ldr	r2, [pc, #88]	; (8003acc <TIM_OC6_SetConfig+0xd0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d003      	beq.n	8003a80 <TIM_OC6_SetConfig+0x84>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a15      	ldr	r2, [pc, #84]	; (8003ad0 <TIM_OC6_SetConfig+0xd4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d109      	bne.n	8003a94 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	029b      	lsls	r3, r3, #10
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	621a      	str	r2, [r3, #32]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40012c00 	.word	0x40012c00
 8003ac0:	40013400 	.word	0x40013400
 8003ac4:	40014000 	.word	0x40014000
 8003ac8:	40014400 	.word	0x40014400
 8003acc:	40014800 	.word	0x40014800
 8003ad0:	40015000 	.word	0x40015000

08003ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	f023 0201 	bic.w	r2, r3, #1
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f023 030a 	bic.w	r3, r3, #10
 8003b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b087      	sub	sp, #28
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	f023 0210 	bic.w	r2, r3, #16
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	031b      	lsls	r3, r3, #12
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	621a      	str	r2, [r3, #32]
}
 8003b86:	bf00      	nop
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b085      	sub	sp, #20
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f043 0307 	orr.w	r3, r3, #7
 8003bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	609a      	str	r2, [r3, #8]
}
 8003bc0:	bf00      	nop
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003be6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	021a      	lsls	r2, r3, #8
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	609a      	str	r2, [r3, #8]
}
 8003c00:	bf00      	nop
 8003c02:	371c      	adds	r7, #28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	2201      	movs	r2, #1
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a1a      	ldr	r2, [r3, #32]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	401a      	ands	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a1a      	ldr	r2, [r3, #32]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f003 031f 	and.w	r3, r3, #31
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	fa01 f303 	lsl.w	r3, r1, r3
 8003c44:	431a      	orrs	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	621a      	str	r2, [r3, #32]
}
 8003c4a:	bf00      	nop
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d109      	bne.n	8003c7c <HAL_TIMEx_PWMN_Start+0x24>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	bf14      	ite	ne
 8003c74:	2301      	movne	r3, #1
 8003c76:	2300      	moveq	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	e022      	b.n	8003cc2 <HAL_TIMEx_PWMN_Start+0x6a>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d109      	bne.n	8003c96 <HAL_TIMEx_PWMN_Start+0x3e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	bf14      	ite	ne
 8003c8e:	2301      	movne	r3, #1
 8003c90:	2300      	moveq	r3, #0
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	e015      	b.n	8003cc2 <HAL_TIMEx_PWMN_Start+0x6a>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d109      	bne.n	8003cb0 <HAL_TIMEx_PWMN_Start+0x58>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	bf14      	ite	ne
 8003ca8:	2301      	movne	r3, #1
 8003caa:	2300      	moveq	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	e008      	b.n	8003cc2 <HAL_TIMEx_PWMN_Start+0x6a>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	bf14      	ite	ne
 8003cbc:	2301      	movne	r3, #1
 8003cbe:	2300      	moveq	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e073      	b.n	8003db2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d104      	bne.n	8003cda <HAL_TIMEx_PWMN_Start+0x82>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd8:	e013      	b.n	8003d02 <HAL_TIMEx_PWMN_Start+0xaa>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d104      	bne.n	8003cea <HAL_TIMEx_PWMN_Start+0x92>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ce8:	e00b      	b.n	8003d02 <HAL_TIMEx_PWMN_Start+0xaa>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d104      	bne.n	8003cfa <HAL_TIMEx_PWMN_Start+0xa2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cf8:	e003      	b.n	8003d02 <HAL_TIMEx_PWMN_Start+0xaa>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2204      	movs	r2, #4
 8003d08:	6839      	ldr	r1, [r7, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fa52 	bl	80041b4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a25      	ldr	r2, [pc, #148]	; (8003dbc <HAL_TIMEx_PWMN_Start+0x164>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d022      	beq.n	8003d70 <HAL_TIMEx_PWMN_Start+0x118>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d32:	d01d      	beq.n	8003d70 <HAL_TIMEx_PWMN_Start+0x118>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a21      	ldr	r2, [pc, #132]	; (8003dc0 <HAL_TIMEx_PWMN_Start+0x168>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d018      	beq.n	8003d70 <HAL_TIMEx_PWMN_Start+0x118>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a20      	ldr	r2, [pc, #128]	; (8003dc4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d013      	beq.n	8003d70 <HAL_TIMEx_PWMN_Start+0x118>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a1e      	ldr	r2, [pc, #120]	; (8003dc8 <HAL_TIMEx_PWMN_Start+0x170>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00e      	beq.n	8003d70 <HAL_TIMEx_PWMN_Start+0x118>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1d      	ldr	r2, [pc, #116]	; (8003dcc <HAL_TIMEx_PWMN_Start+0x174>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d009      	beq.n	8003d70 <HAL_TIMEx_PWMN_Start+0x118>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1b      	ldr	r2, [pc, #108]	; (8003dd0 <HAL_TIMEx_PWMN_Start+0x178>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d004      	beq.n	8003d70 <HAL_TIMEx_PWMN_Start+0x118>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1a      	ldr	r2, [pc, #104]	; (8003dd4 <HAL_TIMEx_PWMN_Start+0x17c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d115      	bne.n	8003d9c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	4b18      	ldr	r3, [pc, #96]	; (8003dd8 <HAL_TIMEx_PWMN_Start+0x180>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b06      	cmp	r3, #6
 8003d80:	d015      	beq.n	8003dae <HAL_TIMEx_PWMN_Start+0x156>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d88:	d011      	beq.n	8003dae <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0201 	orr.w	r2, r2, #1
 8003d98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d9a:	e008      	b.n	8003dae <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	e000      	b.n	8003db0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40012c00 	.word	0x40012c00
 8003dc0:	40000400 	.word	0x40000400
 8003dc4:	40000800 	.word	0x40000800
 8003dc8:	40000c00 	.word	0x40000c00
 8003dcc:	40013400 	.word	0x40013400
 8003dd0:	40014000 	.word	0x40014000
 8003dd4:	40015000 	.word	0x40015000
 8003dd8:	00010007 	.word	0x00010007

08003ddc <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2200      	movs	r2, #0
 8003dec:	6839      	ldr	r1, [r7, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 f9e0 	bl	80041b4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6a1a      	ldr	r2, [r3, #32]
 8003dfa:	f241 1311 	movw	r3, #4369	; 0x1111
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10f      	bne.n	8003e24 <HAL_TIMEx_PWMN_Stop+0x48>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6a1a      	ldr	r2, [r3, #32]
 8003e0a:	f244 4344 	movw	r3, #17476	; 0x4444
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d107      	bne.n	8003e24 <HAL_TIMEx_PWMN_Stop+0x48>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6a1a      	ldr	r2, [r3, #32]
 8003e2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10f      	bne.n	8003e54 <HAL_TIMEx_PWMN_Stop+0x78>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6a1a      	ldr	r2, [r3, #32]
 8003e3a:	f244 4344 	movw	r3, #17476	; 0x4444
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d107      	bne.n	8003e54 <HAL_TIMEx_PWMN_Stop+0x78>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d104      	bne.n	8003e64 <HAL_TIMEx_PWMN_Stop+0x88>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e62:	e013      	b.n	8003e8c <HAL_TIMEx_PWMN_Stop+0xb0>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d104      	bne.n	8003e74 <HAL_TIMEx_PWMN_Stop+0x98>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e72:	e00b      	b.n	8003e8c <HAL_TIMEx_PWMN_Stop+0xb0>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d104      	bne.n	8003e84 <HAL_TIMEx_PWMN_Stop+0xa8>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e82:	e003      	b.n	8003e8c <HAL_TIMEx_PWMN_Stop+0xb0>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e074      	b.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a34      	ldr	r2, [pc, #208]	; (8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d009      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a33      	ldr	r2, [pc, #204]	; (8003fac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d004      	beq.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a31      	ldr	r2, [pc, #196]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d108      	bne.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ef4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a21      	ldr	r2, [pc, #132]	; (8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d022      	beq.n	8003f6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f30:	d01d      	beq.n	8003f6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d018      	beq.n	8003f6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d013      	beq.n	8003f6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1c      	ldr	r2, [pc, #112]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00e      	beq.n	8003f6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a15      	ldr	r2, [pc, #84]	; (8003fac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d009      	beq.n	8003f6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d004      	beq.n	8003f6e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a11      	ldr	r2, [pc, #68]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d10c      	bne.n	8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40012c00 	.word	0x40012c00
 8003fac:	40013400 	.word	0x40013400
 8003fb0:	40015000 	.word	0x40015000
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40014000 	.word	0x40014000

08003fc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e096      	b.n	800410e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4313      	orrs	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	041b      	lsls	r3, r3, #16
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a2f      	ldr	r2, [pc, #188]	; (800411c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d009      	beq.n	8004078 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a2d      	ldr	r2, [pc, #180]	; (8004120 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d004      	beq.n	8004078 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a2c      	ldr	r2, [pc, #176]	; (8004124 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d106      	bne.n	8004086 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a24      	ldr	r2, [pc, #144]	; (800411c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d009      	beq.n	80040a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a22      	ldr	r2, [pc, #136]	; (8004120 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d004      	beq.n	80040a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a21      	ldr	r2, [pc, #132]	; (8004124 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d12b      	bne.n	80040fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	051b      	lsls	r3, r3, #20
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a11      	ldr	r2, [pc, #68]	; (800411c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d009      	beq.n	80040ee <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a10      	ldr	r2, [pc, #64]	; (8004120 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d004      	beq.n	80040ee <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a0e      	ldr	r2, [pc, #56]	; (8004124 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d106      	bne.n	80040fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40012c00 	.word	0x40012c00
 8004120:	40013400 	.word	0x40013400
 8004124:	40015000 	.word	0x40015000

08004128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f003 031f 	and.w	r3, r3, #31
 80041c6:	2204      	movs	r2, #4
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a1a      	ldr	r2, [r3, #32]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	43db      	mvns	r3, r3
 80041d6:	401a      	ands	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a1a      	ldr	r2, [r3, #32]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f003 031f 	and.w	r3, r3, #31
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ec:	431a      	orrs	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	621a      	str	r2, [r3, #32]
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e042      	b.n	8004296 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fc fcfa 	bl	8000c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2224      	movs	r2, #36	; 0x24
 800422c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fc51 	bl	8004ae8 <UART_SetConfig>
 8004246:	4603      	mov	r3, r0
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e022      	b.n	8004296 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 ff41 	bl	80050e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800426c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800427c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0201 	orr.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 ffc8 	bl	8005224 <UART_CheckIdleState>
 8004294:	4603      	mov	r3, r0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b08a      	sub	sp, #40	; 0x28
 80042a2:	af02      	add	r7, sp, #8
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	603b      	str	r3, [r7, #0]
 80042aa:	4613      	mov	r3, r2
 80042ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	f040 8083 	bne.w	80043c0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_UART_Transmit+0x28>
 80042c0:	88fb      	ldrh	r3, [r7, #6]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e07b      	b.n	80043c2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_UART_Transmit+0x3a>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e074      	b.n	80043c2 <HAL_UART_Transmit+0x124>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2221      	movs	r2, #33	; 0x21
 80042ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042f0:	f7fc fdda 	bl	8000ea8 <HAL_GetTick>
 80042f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	88fa      	ldrh	r2, [r7, #6]
 80042fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	88fa      	ldrh	r2, [r7, #6]
 8004302:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430e:	d108      	bne.n	8004322 <HAL_UART_Transmit+0x84>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d104      	bne.n	8004322 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004318:	2300      	movs	r3, #0
 800431a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	61bb      	str	r3, [r7, #24]
 8004320:	e003      	b.n	800432a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004326:	2300      	movs	r3, #0
 8004328:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004332:	e02c      	b.n	800438e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2200      	movs	r2, #0
 800433c:	2180      	movs	r1, #128	; 0x80
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 ffbb 	bl	80052ba <UART_WaitOnFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e039      	b.n	80043c2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10b      	bne.n	800436c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004362:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	3302      	adds	r3, #2
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	e007      	b.n	800437c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	781a      	ldrb	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	3301      	adds	r3, #1
 800437a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004382:	b29b      	uxth	r3, r3
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1cc      	bne.n	8004334 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2200      	movs	r2, #0
 80043a2:	2140      	movs	r1, #64	; 0x40
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 ff88 	bl	80052ba <UART_WaitOnFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e006      	b.n	80043c2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	e000      	b.n	80043c2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80043c0:	2302      	movs	r3, #2
  }
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3720      	adds	r7, #32
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08a      	sub	sp, #40	; 0x28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	4613      	mov	r3, r2
 80043d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d142      	bne.n	800446a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <HAL_UART_Receive_IT+0x24>
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e03b      	b.n	800446c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_UART_Receive_IT+0x36>
 80043fe:	2302      	movs	r3, #2
 8004400:	e034      	b.n	800446c <HAL_UART_Receive_IT+0xa0>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a17      	ldr	r2, [pc, #92]	; (8004474 <HAL_UART_Receive_IT+0xa8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d01f      	beq.n	800445a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d018      	beq.n	800445a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	613b      	str	r3, [r7, #16]
   return(result);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	623b      	str	r3, [r7, #32]
 8004448:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	69f9      	ldr	r1, [r7, #28]
 800444c:	6a3a      	ldr	r2, [r7, #32]
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	61bb      	str	r3, [r7, #24]
   return(result);
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e6      	bne.n	8004428 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800445a:	88fb      	ldrh	r3, [r7, #6]
 800445c:	461a      	mov	r2, r3
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 fff3 	bl	800544c <UART_Start_Receive_IT>
 8004466:	4603      	mov	r3, r0
 8004468:	e000      	b.n	800446c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800446a:	2302      	movs	r3, #2
  }
}
 800446c:	4618      	mov	r0, r3
 800446e:	3728      	adds	r7, #40	; 0x28
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40008000 	.word	0x40008000

08004478 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b0ba      	sub	sp, #232	; 0xe8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800449e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80044a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80044a6:	4013      	ands	r3, r2
 80044a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80044ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d11b      	bne.n	80044ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80044b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b8:	f003 0320 	and.w	r3, r3, #32
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d015      	beq.n	80044ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80044c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d105      	bne.n	80044d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80044cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d009      	beq.n	80044ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 82d6 	beq.w	8004a8e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	4798      	blx	r3
      }
      return;
 80044ea:	e2d0      	b.n	8004a8e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80044ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 811f 	beq.w	8004734 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80044f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80044fa:	4b8b      	ldr	r3, [pc, #556]	; (8004728 <HAL_UART_IRQHandler+0x2b0>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004502:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004506:	4b89      	ldr	r3, [pc, #548]	; (800472c <HAL_UART_IRQHandler+0x2b4>)
 8004508:	4013      	ands	r3, r2
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 8112 	beq.w	8004734 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d011      	beq.n	8004540 <HAL_UART_IRQHandler+0xc8>
 800451c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00b      	beq.n	8004540 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2201      	movs	r2, #1
 800452e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004536:	f043 0201 	orr.w	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d011      	beq.n	8004570 <HAL_UART_IRQHandler+0xf8>
 800454c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00b      	beq.n	8004570 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2202      	movs	r2, #2
 800455e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004566:	f043 0204 	orr.w	r2, r3, #4
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d011      	beq.n	80045a0 <HAL_UART_IRQHandler+0x128>
 800457c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00b      	beq.n	80045a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2204      	movs	r2, #4
 800458e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004596:	f043 0202 	orr.w	r2, r3, #2
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d017      	beq.n	80045dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80045ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d105      	bne.n	80045c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80045b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80045bc:	4b5a      	ldr	r3, [pc, #360]	; (8004728 <HAL_UART_IRQHandler+0x2b0>)
 80045be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00b      	beq.n	80045dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2208      	movs	r2, #8
 80045ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d2:	f043 0208 	orr.w	r2, r3, #8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80045dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d012      	beq.n	800460e <HAL_UART_IRQHandler+0x196>
 80045e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00c      	beq.n	800460e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004604:	f043 0220 	orr.w	r2, r3, #32
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 823c 	beq.w	8004a92 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800461a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800461e:	f003 0320 	and.w	r3, r3, #32
 8004622:	2b00      	cmp	r3, #0
 8004624:	d013      	beq.n	800464e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d105      	bne.n	800463e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004654:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004662:	2b40      	cmp	r3, #64	; 0x40
 8004664:	d005      	beq.n	8004672 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800466a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800466e:	2b00      	cmp	r3, #0
 8004670:	d04f      	beq.n	8004712 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f001 f814 	bl	80056a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004682:	2b40      	cmp	r3, #64	; 0x40
 8004684:	d141      	bne.n	800470a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3308      	adds	r3, #8
 800468c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800469c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3308      	adds	r3, #8
 80046ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1d9      	bne.n	8004686 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d013      	beq.n	8004702 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046de:	4a14      	ldr	r2, [pc, #80]	; (8004730 <HAL_UART_IRQHandler+0x2b8>)
 80046e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fc fd74 	bl	80011d4 <HAL_DMA_Abort_IT>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d017      	beq.n	8004722 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80046fc:	4610      	mov	r0, r2
 80046fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004700:	e00f      	b.n	8004722 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f9da 	bl	8004abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004708:	e00b      	b.n	8004722 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f9d6 	bl	8004abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004710:	e007      	b.n	8004722 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f9d2 	bl	8004abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004720:	e1b7      	b.n	8004a92 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004722:	bf00      	nop
    return;
 8004724:	e1b5      	b.n	8004a92 <HAL_UART_IRQHandler+0x61a>
 8004726:	bf00      	nop
 8004728:	10000001 	.word	0x10000001
 800472c:	04000120 	.word	0x04000120
 8004730:	0800576d 	.word	0x0800576d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004738:	2b01      	cmp	r3, #1
 800473a:	f040 814a 	bne.w	80049d2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800473e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004742:	f003 0310 	and.w	r3, r3, #16
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 8143 	beq.w	80049d2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800474c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 813c 	beq.w	80049d2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2210      	movs	r2, #16
 8004760:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476c:	2b40      	cmp	r3, #64	; 0x40
 800476e:	f040 80b5 	bne.w	80048dc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800477e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 8187 	beq.w	8004a96 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800478e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004792:	429a      	cmp	r2, r3
 8004794:	f080 817f 	bcs.w	8004a96 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800479e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f040 8086 	bne.w	80048c0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	461a      	mov	r2, r3
 80047da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80047de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80047e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80047ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80047f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1da      	bne.n	80047b4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3308      	adds	r3, #8
 8004804:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800480e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3308      	adds	r3, #8
 800481e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004822:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004826:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800482a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e1      	bne.n	80047fe <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3308      	adds	r3, #8
 8004840:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800484a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800484c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3308      	adds	r3, #8
 800485a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800485e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004860:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004864:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800486c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e3      	bne.n	800483a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800488e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004890:	f023 0310 	bic.w	r3, r3, #16
 8004894:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80048a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e4      	bne.n	8004880 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fc fc31 	bl	8001122 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	4619      	mov	r1, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f8fb 	bl	8004ad0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048da:	e0dc      	b.n	8004a96 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80ce 	beq.w	8004a9a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80048fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 80c9 	beq.w	8004a9a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004918:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800491c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800492a:	647b      	str	r3, [r7, #68]	; 0x44
 800492c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004930:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e4      	bne.n	8004908 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3308      	adds	r3, #8
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	623b      	str	r3, [r7, #32]
   return(result);
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004954:	f023 0301 	bic.w	r3, r3, #1
 8004958:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3308      	adds	r3, #8
 8004962:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004966:	633a      	str	r2, [r7, #48]	; 0x30
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800496c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e1      	bne.n	800493e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2220      	movs	r2, #32
 800497e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	60fb      	str	r3, [r7, #12]
   return(result);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0310 	bic.w	r3, r3, #16
 80049a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b4:	69b9      	ldr	r1, [r7, #24]
 80049b6:	69fa      	ldr	r2, [r7, #28]
 80049b8:	e841 2300 	strex	r3, r2, [r1]
 80049bc:	617b      	str	r3, [r7, #20]
   return(result);
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e4      	bne.n	800498e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049c8:	4619      	mov	r1, r3
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f880 	bl	8004ad0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049d0:	e063      	b.n	8004a9a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00e      	beq.n	80049fc <HAL_UART_IRQHandler+0x584>
 80049de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d008      	beq.n	80049fc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80049f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f001 fb57 	bl	80060a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049fa:	e051      	b.n	8004aa0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80049fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d014      	beq.n	8004a32 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d105      	bne.n	8004a20 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d03a      	beq.n	8004a9e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	4798      	blx	r3
    }
    return;
 8004a30:	e035      	b.n	8004a9e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d009      	beq.n	8004a52 <HAL_UART_IRQHandler+0x5da>
 8004a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fea4 	bl	8005798 <UART_EndTransmit_IT>
    return;
 8004a50:	e026      	b.n	8004aa0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <HAL_UART_IRQHandler+0x5fa>
 8004a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f001 fb30 	bl	80060d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a70:	e016      	b.n	8004aa0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d010      	beq.n	8004aa0 <HAL_UART_IRQHandler+0x628>
 8004a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	da0c      	bge.n	8004aa0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f001 fb18 	bl	80060bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a8c:	e008      	b.n	8004aa0 <HAL_UART_IRQHandler+0x628>
      return;
 8004a8e:	bf00      	nop
 8004a90:	e006      	b.n	8004aa0 <HAL_UART_IRQHandler+0x628>
    return;
 8004a92:	bf00      	nop
 8004a94:	e004      	b.n	8004aa0 <HAL_UART_IRQHandler+0x628>
      return;
 8004a96:	bf00      	nop
 8004a98:	e002      	b.n	8004aa0 <HAL_UART_IRQHandler+0x628>
      return;
 8004a9a:	bf00      	nop
 8004a9c:	e000      	b.n	8004aa0 <HAL_UART_IRQHandler+0x628>
    return;
 8004a9e:	bf00      	nop
  }
}
 8004aa0:	37e8      	adds	r7, #232	; 0xe8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop

08004aa8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aec:	b08c      	sub	sp, #48	; 0x30
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	431a      	orrs	r2, r3
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	431a      	orrs	r2, r3
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	4baa      	ldr	r3, [pc, #680]	; (8004dc0 <UART_SetConfig+0x2d8>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	6812      	ldr	r2, [r2, #0]
 8004b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b20:	430b      	orrs	r3, r1
 8004b22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a9f      	ldr	r2, [pc, #636]	; (8004dc4 <UART_SetConfig+0x2dc>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d004      	beq.n	8004b54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b50:	4313      	orrs	r3, r2
 8004b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004b5e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	f023 010f 	bic.w	r1, r3, #15
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a90      	ldr	r2, [pc, #576]	; (8004dc8 <UART_SetConfig+0x2e0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d125      	bne.n	8004bd8 <UART_SetConfig+0xf0>
 8004b8c:	4b8f      	ldr	r3, [pc, #572]	; (8004dcc <UART_SetConfig+0x2e4>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d81a      	bhi.n	8004bd0 <UART_SetConfig+0xe8>
 8004b9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <UART_SetConfig+0xb8>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004bb1 	.word	0x08004bb1
 8004ba4:	08004bc1 	.word	0x08004bc1
 8004ba8:	08004bb9 	.word	0x08004bb9
 8004bac:	08004bc9 	.word	0x08004bc9
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bb6:	e116      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bbe:	e112      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bc6:	e10e      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004bc8:	2308      	movs	r3, #8
 8004bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bce:	e10a      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bd6:	e106      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a7c      	ldr	r2, [pc, #496]	; (8004dd0 <UART_SetConfig+0x2e8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d138      	bne.n	8004c54 <UART_SetConfig+0x16c>
 8004be2:	4b7a      	ldr	r3, [pc, #488]	; (8004dcc <UART_SetConfig+0x2e4>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be8:	f003 030c 	and.w	r3, r3, #12
 8004bec:	2b0c      	cmp	r3, #12
 8004bee:	d82d      	bhi.n	8004c4c <UART_SetConfig+0x164>
 8004bf0:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <UART_SetConfig+0x110>)
 8004bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf6:	bf00      	nop
 8004bf8:	08004c2d 	.word	0x08004c2d
 8004bfc:	08004c4d 	.word	0x08004c4d
 8004c00:	08004c4d 	.word	0x08004c4d
 8004c04:	08004c4d 	.word	0x08004c4d
 8004c08:	08004c3d 	.word	0x08004c3d
 8004c0c:	08004c4d 	.word	0x08004c4d
 8004c10:	08004c4d 	.word	0x08004c4d
 8004c14:	08004c4d 	.word	0x08004c4d
 8004c18:	08004c35 	.word	0x08004c35
 8004c1c:	08004c4d 	.word	0x08004c4d
 8004c20:	08004c4d 	.word	0x08004c4d
 8004c24:	08004c4d 	.word	0x08004c4d
 8004c28:	08004c45 	.word	0x08004c45
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c32:	e0d8      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004c34:	2302      	movs	r3, #2
 8004c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c3a:	e0d4      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c42:	e0d0      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004c44:	2308      	movs	r3, #8
 8004c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c4a:	e0cc      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004c4c:	2310      	movs	r3, #16
 8004c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c52:	e0c8      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a5e      	ldr	r2, [pc, #376]	; (8004dd4 <UART_SetConfig+0x2ec>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d125      	bne.n	8004caa <UART_SetConfig+0x1c2>
 8004c5e:	4b5b      	ldr	r3, [pc, #364]	; (8004dcc <UART_SetConfig+0x2e4>)
 8004c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c68:	2b30      	cmp	r3, #48	; 0x30
 8004c6a:	d016      	beq.n	8004c9a <UART_SetConfig+0x1b2>
 8004c6c:	2b30      	cmp	r3, #48	; 0x30
 8004c6e:	d818      	bhi.n	8004ca2 <UART_SetConfig+0x1ba>
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d00a      	beq.n	8004c8a <UART_SetConfig+0x1a2>
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d814      	bhi.n	8004ca2 <UART_SetConfig+0x1ba>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <UART_SetConfig+0x19a>
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d008      	beq.n	8004c92 <UART_SetConfig+0x1aa>
 8004c80:	e00f      	b.n	8004ca2 <UART_SetConfig+0x1ba>
 8004c82:	2300      	movs	r3, #0
 8004c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c88:	e0ad      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c90:	e0a9      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004c92:	2304      	movs	r3, #4
 8004c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c98:	e0a5      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca0:	e0a1      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004ca2:	2310      	movs	r3, #16
 8004ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca8:	e09d      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a4a      	ldr	r2, [pc, #296]	; (8004dd8 <UART_SetConfig+0x2f0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d125      	bne.n	8004d00 <UART_SetConfig+0x218>
 8004cb4:	4b45      	ldr	r3, [pc, #276]	; (8004dcc <UART_SetConfig+0x2e4>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cbe:	2bc0      	cmp	r3, #192	; 0xc0
 8004cc0:	d016      	beq.n	8004cf0 <UART_SetConfig+0x208>
 8004cc2:	2bc0      	cmp	r3, #192	; 0xc0
 8004cc4:	d818      	bhi.n	8004cf8 <UART_SetConfig+0x210>
 8004cc6:	2b80      	cmp	r3, #128	; 0x80
 8004cc8:	d00a      	beq.n	8004ce0 <UART_SetConfig+0x1f8>
 8004cca:	2b80      	cmp	r3, #128	; 0x80
 8004ccc:	d814      	bhi.n	8004cf8 <UART_SetConfig+0x210>
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <UART_SetConfig+0x1f0>
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d008      	beq.n	8004ce8 <UART_SetConfig+0x200>
 8004cd6:	e00f      	b.n	8004cf8 <UART_SetConfig+0x210>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cde:	e082      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ce6:	e07e      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004ce8:	2304      	movs	r3, #4
 8004cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cee:	e07a      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004cf0:	2308      	movs	r3, #8
 8004cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cf6:	e076      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cfe:	e072      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a35      	ldr	r2, [pc, #212]	; (8004ddc <UART_SetConfig+0x2f4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d12a      	bne.n	8004d60 <UART_SetConfig+0x278>
 8004d0a:	4b30      	ldr	r3, [pc, #192]	; (8004dcc <UART_SetConfig+0x2e4>)
 8004d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d18:	d01a      	beq.n	8004d50 <UART_SetConfig+0x268>
 8004d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d1e:	d81b      	bhi.n	8004d58 <UART_SetConfig+0x270>
 8004d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d24:	d00c      	beq.n	8004d40 <UART_SetConfig+0x258>
 8004d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d2a:	d815      	bhi.n	8004d58 <UART_SetConfig+0x270>
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <UART_SetConfig+0x250>
 8004d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d34:	d008      	beq.n	8004d48 <UART_SetConfig+0x260>
 8004d36:	e00f      	b.n	8004d58 <UART_SetConfig+0x270>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d3e:	e052      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004d40:	2302      	movs	r3, #2
 8004d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d46:	e04e      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004d48:	2304      	movs	r3, #4
 8004d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d4e:	e04a      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004d50:	2308      	movs	r3, #8
 8004d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d56:	e046      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004d58:	2310      	movs	r3, #16
 8004d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d5e:	e042      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a17      	ldr	r2, [pc, #92]	; (8004dc4 <UART_SetConfig+0x2dc>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d13a      	bne.n	8004de0 <UART_SetConfig+0x2f8>
 8004d6a:	4b18      	ldr	r3, [pc, #96]	; (8004dcc <UART_SetConfig+0x2e4>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d78:	d01a      	beq.n	8004db0 <UART_SetConfig+0x2c8>
 8004d7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d7e:	d81b      	bhi.n	8004db8 <UART_SetConfig+0x2d0>
 8004d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d84:	d00c      	beq.n	8004da0 <UART_SetConfig+0x2b8>
 8004d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8a:	d815      	bhi.n	8004db8 <UART_SetConfig+0x2d0>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <UART_SetConfig+0x2b0>
 8004d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d94:	d008      	beq.n	8004da8 <UART_SetConfig+0x2c0>
 8004d96:	e00f      	b.n	8004db8 <UART_SetConfig+0x2d0>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d9e:	e022      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004da0:	2302      	movs	r3, #2
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da6:	e01e      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004da8:	2304      	movs	r3, #4
 8004daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dae:	e01a      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004db0:	2308      	movs	r3, #8
 8004db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004db6:	e016      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004db8:	2310      	movs	r3, #16
 8004dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dbe:	e012      	b.n	8004de6 <UART_SetConfig+0x2fe>
 8004dc0:	cfff69f3 	.word	0xcfff69f3
 8004dc4:	40008000 	.word	0x40008000
 8004dc8:	40013800 	.word	0x40013800
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	40004400 	.word	0x40004400
 8004dd4:	40004800 	.word	0x40004800
 8004dd8:	40004c00 	.word	0x40004c00
 8004ddc:	40005000 	.word	0x40005000
 8004de0:	2310      	movs	r3, #16
 8004de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4aae      	ldr	r2, [pc, #696]	; (80050a4 <UART_SetConfig+0x5bc>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	f040 8097 	bne.w	8004f20 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004df2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d823      	bhi.n	8004e42 <UART_SetConfig+0x35a>
 8004dfa:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <UART_SetConfig+0x318>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e43 	.word	0x08004e43
 8004e08:	08004e2d 	.word	0x08004e2d
 8004e0c:	08004e43 	.word	0x08004e43
 8004e10:	08004e33 	.word	0x08004e33
 8004e14:	08004e43 	.word	0x08004e43
 8004e18:	08004e43 	.word	0x08004e43
 8004e1c:	08004e43 	.word	0x08004e43
 8004e20:	08004e3b 	.word	0x08004e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e24:	f7fd f966 	bl	80020f4 <HAL_RCC_GetPCLK1Freq>
 8004e28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e2a:	e010      	b.n	8004e4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e2c:	4b9e      	ldr	r3, [pc, #632]	; (80050a8 <UART_SetConfig+0x5c0>)
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e30:	e00d      	b.n	8004e4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e32:	f7fd f8f1 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8004e36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e38:	e009      	b.n	8004e4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e40:	e005      	b.n	8004e4e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 8130 	beq.w	80050b6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	4a94      	ldr	r2, [pc, #592]	; (80050ac <UART_SetConfig+0x5c4>)
 8004e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e60:	461a      	mov	r2, r3
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	4413      	add	r3, r2
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d305      	bcc.n	8004e86 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d903      	bls.n	8004e8e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e8c:	e113      	b.n	80050b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	2200      	movs	r2, #0
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	60fa      	str	r2, [r7, #12]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	4a84      	ldr	r2, [pc, #528]	; (80050ac <UART_SetConfig+0x5c4>)
 8004e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	603b      	str	r3, [r7, #0]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004eb0:	f7fb f9b2 	bl	8000218 <__aeabi_uldivmod>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4610      	mov	r0, r2
 8004eba:	4619      	mov	r1, r3
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	020b      	lsls	r3, r1, #8
 8004ec6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004eca:	0202      	lsls	r2, r0, #8
 8004ecc:	6979      	ldr	r1, [r7, #20]
 8004ece:	6849      	ldr	r1, [r1, #4]
 8004ed0:	0849      	lsrs	r1, r1, #1
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	4605      	mov	r5, r0
 8004ed8:	eb12 0804 	adds.w	r8, r2, r4
 8004edc:	eb43 0905 	adc.w	r9, r3, r5
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	469a      	mov	sl, r3
 8004ee8:	4693      	mov	fp, r2
 8004eea:	4652      	mov	r2, sl
 8004eec:	465b      	mov	r3, fp
 8004eee:	4640      	mov	r0, r8
 8004ef0:	4649      	mov	r1, r9
 8004ef2:	f7fb f991 	bl	8000218 <__aeabi_uldivmod>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	4613      	mov	r3, r2
 8004efc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f04:	d308      	bcc.n	8004f18 <UART_SetConfig+0x430>
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f0c:	d204      	bcs.n	8004f18 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6a3a      	ldr	r2, [r7, #32]
 8004f14:	60da      	str	r2, [r3, #12]
 8004f16:	e0ce      	b.n	80050b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f1e:	e0ca      	b.n	80050b6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f28:	d166      	bne.n	8004ff8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004f2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d827      	bhi.n	8004f82 <UART_SetConfig+0x49a>
 8004f32:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <UART_SetConfig+0x450>)
 8004f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f38:	08004f5d 	.word	0x08004f5d
 8004f3c:	08004f65 	.word	0x08004f65
 8004f40:	08004f6d 	.word	0x08004f6d
 8004f44:	08004f83 	.word	0x08004f83
 8004f48:	08004f73 	.word	0x08004f73
 8004f4c:	08004f83 	.word	0x08004f83
 8004f50:	08004f83 	.word	0x08004f83
 8004f54:	08004f83 	.word	0x08004f83
 8004f58:	08004f7b 	.word	0x08004f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f5c:	f7fd f8ca 	bl	80020f4 <HAL_RCC_GetPCLK1Freq>
 8004f60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f62:	e014      	b.n	8004f8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f64:	f7fd f8dc 	bl	8002120 <HAL_RCC_GetPCLK2Freq>
 8004f68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f6a:	e010      	b.n	8004f8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f6c:	4b4e      	ldr	r3, [pc, #312]	; (80050a8 <UART_SetConfig+0x5c0>)
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f70:	e00d      	b.n	8004f8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f72:	f7fd f851 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8004f76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f78:	e009      	b.n	8004f8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f80:	e005      	b.n	8004f8e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 8090 	beq.w	80050b6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	4a44      	ldr	r2, [pc, #272]	; (80050ac <UART_SetConfig+0x5c4>)
 8004f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fa8:	005a      	lsls	r2, r3, #1
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	085b      	lsrs	r3, r3, #1
 8004fb0:	441a      	add	r2, r3
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	2b0f      	cmp	r3, #15
 8004fc0:	d916      	bls.n	8004ff0 <UART_SetConfig+0x508>
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc8:	d212      	bcs.n	8004ff0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	f023 030f 	bic.w	r3, r3, #15
 8004fd2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	085b      	lsrs	r3, r3, #1
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	8bfb      	ldrh	r3, [r7, #30]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	8bfa      	ldrh	r2, [r7, #30]
 8004fec:	60da      	str	r2, [r3, #12]
 8004fee:	e062      	b.n	80050b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ff6:	e05e      	b.n	80050b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ff8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d828      	bhi.n	8005052 <UART_SetConfig+0x56a>
 8005000:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <UART_SetConfig+0x520>)
 8005002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005006:	bf00      	nop
 8005008:	0800502d 	.word	0x0800502d
 800500c:	08005035 	.word	0x08005035
 8005010:	0800503d 	.word	0x0800503d
 8005014:	08005053 	.word	0x08005053
 8005018:	08005043 	.word	0x08005043
 800501c:	08005053 	.word	0x08005053
 8005020:	08005053 	.word	0x08005053
 8005024:	08005053 	.word	0x08005053
 8005028:	0800504b 	.word	0x0800504b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800502c:	f7fd f862 	bl	80020f4 <HAL_RCC_GetPCLK1Freq>
 8005030:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005032:	e014      	b.n	800505e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005034:	f7fd f874 	bl	8002120 <HAL_RCC_GetPCLK2Freq>
 8005038:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800503a:	e010      	b.n	800505e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800503c:	4b1a      	ldr	r3, [pc, #104]	; (80050a8 <UART_SetConfig+0x5c0>)
 800503e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005040:	e00d      	b.n	800505e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005042:	f7fc ffe9 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8005046:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005048:	e009      	b.n	800505e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800504a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800504e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005050:	e005      	b.n	800505e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800505c:	bf00      	nop
    }

    if (pclk != 0U)
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	2b00      	cmp	r3, #0
 8005062:	d028      	beq.n	80050b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	4a10      	ldr	r2, [pc, #64]	; (80050ac <UART_SetConfig+0x5c4>)
 800506a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800506e:	461a      	mov	r2, r3
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	fbb3 f2f2 	udiv	r2, r3, r2
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	085b      	lsrs	r3, r3, #1
 800507c:	441a      	add	r2, r3
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	fbb2 f3f3 	udiv	r3, r2, r3
 8005086:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	2b0f      	cmp	r3, #15
 800508c:	d910      	bls.n	80050b0 <UART_SetConfig+0x5c8>
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005094:	d20c      	bcs.n	80050b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	b29a      	uxth	r2, r3
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	60da      	str	r2, [r3, #12]
 80050a0:	e009      	b.n	80050b6 <UART_SetConfig+0x5ce>
 80050a2:	bf00      	nop
 80050a4:	40008000 	.word	0x40008000
 80050a8:	00f42400 	.word	0x00f42400
 80050ac:	08006374 	.word	0x08006374
      }
      else
      {
        ret = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2200      	movs	r2, #0
 80050ca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2200      	movs	r2, #0
 80050d0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80050d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3730      	adds	r7, #48	; 0x30
 80050da:	46bd      	mov	sp, r7
 80050dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080050e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01a      	beq.n	80051f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051de:	d10a      	bne.n	80051f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	605a      	str	r2, [r3, #4]
  }
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af02      	add	r7, sp, #8
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005234:	f7fb fe38 	bl	8000ea8 <HAL_GetTick>
 8005238:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	2b08      	cmp	r3, #8
 8005246:	d10e      	bne.n	8005266 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f82f 	bl	80052ba <UART_WaitOnFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e025      	b.n	80052b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b04      	cmp	r3, #4
 8005272:	d10e      	bne.n	8005292 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f819 	bl	80052ba <UART_WaitOnFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e00f      	b.n	80052b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2220      	movs	r2, #32
 8005296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2220      	movs	r2, #32
 800529e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b09c      	sub	sp, #112	; 0x70
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	603b      	str	r3, [r7, #0]
 80052c6:	4613      	mov	r3, r2
 80052c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ca:	e0a9      	b.n	8005420 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d2:	f000 80a5 	beq.w	8005420 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052d6:	f7fb fde7 	bl	8000ea8 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d302      	bcc.n	80052ec <UART_WaitOnFlagUntilTimeout+0x32>
 80052e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d140      	bne.n	800536e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005300:	667b      	str	r3, [r7, #100]	; 0x64
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800530a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800530c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005310:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e6      	bne.n	80052ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3308      	adds	r3, #8
 8005324:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800532e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	663b      	str	r3, [r7, #96]	; 0x60
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3308      	adds	r3, #8
 800533c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800533e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005340:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005344:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800534c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e5      	bne.n	800531e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2220      	movs	r2, #32
 800535e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e069      	b.n	8005442 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d051      	beq.n	8005420 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800538a:	d149      	bne.n	8005420 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005394:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b4:	637b      	str	r3, [r7, #52]	; 0x34
 80053b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e6      	bne.n	8005396 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3308      	adds	r3, #8
 80053ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	e853 3f00 	ldrex	r3, [r3]
 80053d6:	613b      	str	r3, [r7, #16]
   return(result);
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f023 0301 	bic.w	r3, r3, #1
 80053de:	66bb      	str	r3, [r7, #104]	; 0x68
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3308      	adds	r3, #8
 80053e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053e8:	623a      	str	r2, [r7, #32]
 80053ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ec:	69f9      	ldr	r1, [r7, #28]
 80053ee:	6a3a      	ldr	r2, [r7, #32]
 80053f0:	e841 2300 	strex	r3, r2, [r1]
 80053f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e5      	bne.n	80053c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2220      	movs	r2, #32
 8005400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e010      	b.n	8005442 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69da      	ldr	r2, [r3, #28]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	4013      	ands	r3, r2
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	429a      	cmp	r2, r3
 800542e:	bf0c      	ite	eq
 8005430:	2301      	moveq	r3, #1
 8005432:	2300      	movne	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	461a      	mov	r2, r3
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	429a      	cmp	r2, r3
 800543c:	f43f af46 	beq.w	80052cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3770      	adds	r7, #112	; 0x70
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800544c:	b480      	push	{r7}
 800544e:	b0a3      	sub	sp, #140	; 0x8c
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	4613      	mov	r3, r2
 8005458:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	88fa      	ldrh	r2, [r7, #6]
 8005464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	88fa      	ldrh	r2, [r7, #6]
 800546c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800547e:	d10e      	bne.n	800549e <UART_Start_Receive_IT+0x52>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d105      	bne.n	8005494 <UART_Start_Receive_IT+0x48>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800548e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005492:	e02d      	b.n	80054f0 <UART_Start_Receive_IT+0xa4>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	22ff      	movs	r2, #255	; 0xff
 8005498:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800549c:	e028      	b.n	80054f0 <UART_Start_Receive_IT+0xa4>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10d      	bne.n	80054c2 <UART_Start_Receive_IT+0x76>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d104      	bne.n	80054b8 <UART_Start_Receive_IT+0x6c>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	22ff      	movs	r2, #255	; 0xff
 80054b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054b6:	e01b      	b.n	80054f0 <UART_Start_Receive_IT+0xa4>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	227f      	movs	r2, #127	; 0x7f
 80054bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054c0:	e016      	b.n	80054f0 <UART_Start_Receive_IT+0xa4>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054ca:	d10d      	bne.n	80054e8 <UART_Start_Receive_IT+0x9c>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d104      	bne.n	80054de <UART_Start_Receive_IT+0x92>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	227f      	movs	r2, #127	; 0x7f
 80054d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054dc:	e008      	b.n	80054f0 <UART_Start_Receive_IT+0xa4>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	223f      	movs	r2, #63	; 0x3f
 80054e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054e6:	e003      	b.n	80054f0 <UART_Start_Receive_IT+0xa4>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2222      	movs	r2, #34	; 0x22
 80054fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3308      	adds	r3, #8
 8005506:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005510:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005512:	f043 0301 	orr.w	r3, r3, #1
 8005516:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3308      	adds	r3, #8
 8005520:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005524:	673a      	str	r2, [r7, #112]	; 0x70
 8005526:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800552a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005532:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e3      	bne.n	8005500 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800553c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005540:	d153      	bne.n	80055ea <UART_Start_Receive_IT+0x19e>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005548:	88fa      	ldrh	r2, [r7, #6]
 800554a:	429a      	cmp	r2, r3
 800554c:	d34d      	bcc.n	80055ea <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005556:	d107      	bne.n	8005568 <UART_Start_Receive_IT+0x11c>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d103      	bne.n	8005568 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4a4b      	ldr	r2, [pc, #300]	; (8005690 <UART_Start_Receive_IT+0x244>)
 8005564:	671a      	str	r2, [r3, #112]	; 0x70
 8005566:	e002      	b.n	800556e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4a4a      	ldr	r2, [pc, #296]	; (8005694 <UART_Start_Receive_IT+0x248>)
 800556c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d01a      	beq.n	80055b4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005586:	e853 3f00 	ldrex	r3, [r3]
 800558a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800558c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005592:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055a2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055a8:	e841 2300 	strex	r3, r2, [r1]
 80055ac:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1e4      	bne.n	800557e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3308      	adds	r3, #8
 80055ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3308      	adds	r3, #8
 80055d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80055d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80055d6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e5      	bne.n	80055b4 <UART_Start_Receive_IT+0x168>
 80055e8:	e04a      	b.n	8005680 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f2:	d107      	bne.n	8005604 <UART_Start_Receive_IT+0x1b8>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d103      	bne.n	8005604 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4a26      	ldr	r2, [pc, #152]	; (8005698 <UART_Start_Receive_IT+0x24c>)
 8005600:	671a      	str	r2, [r3, #112]	; 0x70
 8005602:	e002      	b.n	800560a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4a25      	ldr	r2, [pc, #148]	; (800569c <UART_Start_Receive_IT+0x250>)
 8005608:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d019      	beq.n	800564e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800562e:	677b      	str	r3, [r7, #116]	; 0x74
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005638:	637b      	str	r3, [r7, #52]	; 0x34
 800563a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800563e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e6      	bne.n	800561a <UART_Start_Receive_IT+0x1ce>
 800564c:	e018      	b.n	8005680 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	e853 3f00 	ldrex	r3, [r3]
 800565a:	613b      	str	r3, [r7, #16]
   return(result);
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f043 0320 	orr.w	r3, r3, #32
 8005662:	67bb      	str	r3, [r7, #120]	; 0x78
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800566c:	623b      	str	r3, [r7, #32]
 800566e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	69f9      	ldr	r1, [r7, #28]
 8005672:	6a3a      	ldr	r2, [r7, #32]
 8005674:	e841 2300 	strex	r3, r2, [r1]
 8005678:	61bb      	str	r3, [r7, #24]
   return(result);
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e6      	bne.n	800564e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	378c      	adds	r7, #140	; 0x8c
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	08005da9 	.word	0x08005da9
 8005694:	08005ab1 	.word	0x08005ab1
 8005698:	0800594f 	.word	0x0800594f
 800569c:	080057ef 	.word	0x080057ef

080056a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b095      	sub	sp, #84	; 0x54
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c6:	643b      	str	r3, [r7, #64]	; 0x40
 80056c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e6      	bne.n	80056a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3308      	adds	r3, #8
 80056e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3308      	adds	r3, #8
 80056fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005700:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e3      	bne.n	80056da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005716:	2b01      	cmp	r3, #1
 8005718:	d118      	bne.n	800574c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	60bb      	str	r3, [r7, #8]
   return(result);
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f023 0310 	bic.w	r3, r3, #16
 800572e:	647b      	str	r3, [r7, #68]	; 0x44
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	6979      	ldr	r1, [r7, #20]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	613b      	str	r3, [r7, #16]
   return(result);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e6      	bne.n	800571a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005760:	bf00      	nop
 8005762:	3754      	adds	r7, #84	; 0x54
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005778:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f7ff f996 	bl	8004abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005790:	bf00      	nop
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b4:	61fb      	str	r3, [r7, #28]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	61bb      	str	r3, [r7, #24]
 80057c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	6979      	ldr	r1, [r7, #20]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	613b      	str	r3, [r7, #16]
   return(result);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e6      	bne.n	80057a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff f961 	bl	8004aa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057e6:	bf00      	nop
 80057e8:	3720      	adds	r7, #32
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b096      	sub	sp, #88	; 0x58
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80057fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005806:	2b22      	cmp	r3, #34	; 0x22
 8005808:	f040 8095 	bne.w	8005936 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005816:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800581a:	b2d9      	uxtb	r1, r3
 800581c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005820:	b2da      	uxtb	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005826:	400a      	ands	r2, r1
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d178      	bne.n	8005946 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585c:	e853 3f00 	ldrex	r3, [r3]
 8005860:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005864:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005868:	653b      	str	r3, [r7, #80]	; 0x50
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005872:	647b      	str	r3, [r7, #68]	; 0x44
 8005874:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005878:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1e6      	bne.n	8005854 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	3308      	adds	r3, #8
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	e853 3f00 	ldrex	r3, [r3]
 8005894:	623b      	str	r3, [r7, #32]
   return(result);
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	f023 0301 	bic.w	r3, r3, #1
 800589c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3308      	adds	r3, #8
 80058a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058a6:	633a      	str	r2, [r7, #48]	; 0x30
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ae:	e841 2300 	strex	r3, r2, [r1]
 80058b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1e5      	bne.n	8005886 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2220      	movs	r2, #32
 80058be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d12e      	bne.n	800592e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	e853 3f00 	ldrex	r3, [r3]
 80058e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0310 	bic.w	r3, r3, #16
 80058ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	461a      	mov	r2, r3
 80058f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058f4:	61fb      	str	r3, [r7, #28]
 80058f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	69b9      	ldr	r1, [r7, #24]
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	e841 2300 	strex	r3, r2, [r1]
 8005900:	617b      	str	r3, [r7, #20]
   return(result);
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e6      	bne.n	80058d6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	f003 0310 	and.w	r3, r3, #16
 8005912:	2b10      	cmp	r3, #16
 8005914:	d103      	bne.n	800591e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2210      	movs	r2, #16
 800591c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff f8d2 	bl	8004ad0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800592c:	e00b      	b.n	8005946 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fb f84c 	bl	80009cc <HAL_UART_RxCpltCallback>
}
 8005934:	e007      	b.n	8005946 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0208 	orr.w	r2, r2, #8
 8005944:	619a      	str	r2, [r3, #24]
}
 8005946:	bf00      	nop
 8005948:	3758      	adds	r7, #88	; 0x58
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b096      	sub	sp, #88	; 0x58
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800595c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005966:	2b22      	cmp	r3, #34	; 0x22
 8005968:	f040 8095 	bne.w	8005a96 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800597a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800597c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005980:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005984:	4013      	ands	r3, r2
 8005986:	b29a      	uxth	r2, r3
 8005988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800598a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005990:	1c9a      	adds	r2, r3, #2
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800599c:	b29b      	uxth	r3, r3
 800599e:	3b01      	subs	r3, #1
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d178      	bne.n	8005aa6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	461a      	mov	r2, r3
 80059d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d2:	643b      	str	r3, [r7, #64]	; 0x40
 80059d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059da:	e841 2300 	strex	r3, r2, [r1]
 80059de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1e6      	bne.n	80059b4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3308      	adds	r3, #8
 80059ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	f023 0301 	bic.w	r3, r3, #1
 80059fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3308      	adds	r3, #8
 8005a04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e5      	bne.n	80059e6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d12e      	bne.n	8005a8e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f023 0310 	bic.w	r3, r3, #16
 8005a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6979      	ldr	r1, [r7, #20]
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	613b      	str	r3, [r7, #16]
   return(result);
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e6      	bne.n	8005a36 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	f003 0310 	and.w	r3, r3, #16
 8005a72:	2b10      	cmp	r3, #16
 8005a74:	d103      	bne.n	8005a7e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2210      	movs	r2, #16
 8005a7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a84:	4619      	mov	r1, r3
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff f822 	bl	8004ad0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a8c:	e00b      	b.n	8005aa6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7fa ff9c 	bl	80009cc <HAL_UART_RxCpltCallback>
}
 8005a94:	e007      	b.n	8005aa6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	699a      	ldr	r2, [r3, #24]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0208 	orr.w	r2, r2, #8
 8005aa4:	619a      	str	r2, [r3, #24]
}
 8005aa6:	bf00      	nop
 8005aa8:	3758      	adds	r7, #88	; 0x58
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b0a6      	sub	sp, #152	; 0x98
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005abe:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae6:	2b22      	cmp	r3, #34	; 0x22
 8005ae8:	f040 814f 	bne.w	8005d8a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005af2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005af6:	e0f6      	b.n	8005ce6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b02:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005b06:	b2d9      	uxtb	r1, r3
 8005b08:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b12:	400a      	ands	r2, r1
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005b3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d053      	beq.n	8005bf2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d011      	beq.n	8005b7a <UART_RxISR_8BIT_FIFOEN+0xca>
 8005b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00b      	beq.n	8005b7a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2201      	movs	r2, #1
 8005b68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b70:	f043 0201 	orr.w	r2, r3, #1
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d011      	beq.n	8005baa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005b86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00b      	beq.n	8005baa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2202      	movs	r2, #2
 8005b98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba0:	f043 0204 	orr.w	r2, r3, #4
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005baa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005bae:	f003 0304 	and.w	r3, r3, #4
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d011      	beq.n	8005bda <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005bb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00b      	beq.n	8005bda <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2204      	movs	r2, #4
 8005bc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd0:	f043 0202 	orr.w	r2, r3, #2
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d006      	beq.n	8005bf2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7fe ff69 	bl	8004abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d173      	bne.n	8005ce6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c06:	e853 3f00 	ldrex	r3, [r3]
 8005c0a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c20:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c22:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c24:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005c26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c28:	e841 2300 	strex	r3, r2, [r1]
 8005c2c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005c2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1e4      	bne.n	8005bfe <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3308      	adds	r3, #8
 8005c3a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c3e:	e853 3f00 	ldrex	r3, [r3]
 8005c42:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c4a:	f023 0301 	bic.w	r3, r3, #1
 8005c4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3308      	adds	r3, #8
 8005c56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005c58:	657a      	str	r2, [r7, #84]	; 0x54
 8005c5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c60:	e841 2300 	strex	r3, r2, [r1]
 8005c64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1e3      	bne.n	8005c34 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d12e      	bne.n	8005ce0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c98:	f023 0310 	bic.w	r3, r3, #16
 8005c9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ca8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e6      	bne.n	8005c88 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	f003 0310 	and.w	r3, r3, #16
 8005cc4:	2b10      	cmp	r3, #16
 8005cc6:	d103      	bne.n	8005cd0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2210      	movs	r2, #16
 8005cce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7fe fef9 	bl	8004ad0 <HAL_UARTEx_RxEventCallback>
 8005cde:	e002      	b.n	8005ce6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7fa fe73 	bl	80009cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ce6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d006      	beq.n	8005cfc <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005cee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f47f aefe 	bne.w	8005af8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d02:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005d06:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d045      	beq.n	8005d9a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d23e      	bcs.n	8005d9a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3308      	adds	r3, #8
 8005d22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d32:	673b      	str	r3, [r7, #112]	; 0x70
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3308      	adds	r3, #8
 8005d3a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005d3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e5      	bne.n	8005d1c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a14      	ldr	r2, [pc, #80]	; (8005da4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8005d54:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f043 0320 	orr.w	r3, r3, #32
 8005d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d74:	61bb      	str	r3, [r7, #24]
 8005d76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6979      	ldr	r1, [r7, #20]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	613b      	str	r3, [r7, #16]
   return(result);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e6      	bne.n	8005d56 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d88:	e007      	b.n	8005d9a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	699a      	ldr	r2, [r3, #24]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f042 0208 	orr.w	r2, r2, #8
 8005d98:	619a      	str	r2, [r3, #24]
}
 8005d9a:	bf00      	nop
 8005d9c:	3798      	adds	r7, #152	; 0x98
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	080057ef 	.word	0x080057ef

08005da8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b0a8      	sub	sp, #160	; 0xa0
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005db6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dde:	2b22      	cmp	r3, #34	; 0x22
 8005de0:	f040 8153 	bne.w	800608a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005dea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005dee:	e0fa      	b.n	8005fe6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005e02:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005e06:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e18:	1c9a      	adds	r2, r3, #2
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d053      	beq.n	8005eee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d011      	beq.n	8005e76 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005e52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00b      	beq.n	8005e76 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2201      	movs	r2, #1
 8005e64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e6c:	f043 0201 	orr.w	r2, r3, #1
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d011      	beq.n	8005ea6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005e82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00b      	beq.n	8005ea6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2202      	movs	r2, #2
 8005e94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e9c:	f043 0204 	orr.w	r2, r3, #4
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ea6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d011      	beq.n	8005ed6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005eb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00b      	beq.n	8005ed6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2204      	movs	r2, #4
 8005ec4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ecc:	f043 0202 	orr.w	r2, r3, #2
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d006      	beq.n	8005eee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7fe fdeb 	bl	8004abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d175      	bne.n	8005fe6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f02:	e853 3f00 	ldrex	r3, [r3]
 8005f06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f1e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f24:	e841 2300 	strex	r3, r2, [r1]
 8005f28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e4      	bne.n	8005efa <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3308      	adds	r3, #8
 8005f36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f3a:	e853 3f00 	ldrex	r3, [r3]
 8005f3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f46:	f023 0301 	bic.w	r3, r3, #1
 8005f4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3308      	adds	r3, #8
 8005f54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f58:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f60:	e841 2300 	strex	r3, r2, [r1]
 8005f64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e1      	bne.n	8005f30 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d12e      	bne.n	8005fe0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f98:	f023 0310 	bic.w	r3, r3, #16
 8005f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e6      	bne.n	8005f88 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	f003 0310 	and.w	r3, r3, #16
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d103      	bne.n	8005fd0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2210      	movs	r2, #16
 8005fce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7fe fd79 	bl	8004ad0 <HAL_UARTEx_RxEventCallback>
 8005fde:	e002      	b.n	8005fe6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7fa fcf3 	bl	80009cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005fe6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d006      	beq.n	8005ffc <UART_RxISR_16BIT_FIFOEN+0x254>
 8005fee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f47f aefa 	bne.w	8005df0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006002:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006006:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800600a:	2b00      	cmp	r3, #0
 800600c:	d045      	beq.n	800609a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006014:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006018:	429a      	cmp	r2, r3
 800601a:	d23e      	bcs.n	800609a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3308      	adds	r3, #8
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	e853 3f00 	ldrex	r3, [r3]
 800602a:	623b      	str	r3, [r7, #32]
   return(result);
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006032:	677b      	str	r3, [r7, #116]	; 0x74
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3308      	adds	r3, #8
 800603a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800603c:	633a      	str	r2, [r7, #48]	; 0x30
 800603e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006044:	e841 2300 	strex	r3, r2, [r1]
 8006048:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e5      	bne.n	800601c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a14      	ldr	r2, [pc, #80]	; (80060a4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8006054:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	e853 3f00 	ldrex	r3, [r3]
 8006062:	60fb      	str	r3, [r7, #12]
   return(result);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f043 0320 	orr.w	r3, r3, #32
 800606a:	673b      	str	r3, [r7, #112]	; 0x70
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006074:	61fb      	str	r3, [r7, #28]
 8006076:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006078:	69b9      	ldr	r1, [r7, #24]
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	e841 2300 	strex	r3, r2, [r1]
 8006080:	617b      	str	r3, [r7, #20]
   return(result);
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1e6      	bne.n	8006056 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006088:	e007      	b.n	800609a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	699a      	ldr	r2, [r3, #24]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f042 0208 	orr.w	r2, r2, #8
 8006098:	619a      	str	r2, [r3, #24]
}
 800609a:	bf00      	nop
 800609c:	37a0      	adds	r7, #160	; 0xa0
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	0800594f 	.word	0x0800594f

080060a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_UARTEx_DisableFifoMode+0x16>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e027      	b.n	800614a <HAL_UARTEx_DisableFifoMode+0x66>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2224      	movs	r2, #36	; 0x24
 8006106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0201 	bic.w	r2, r2, #1
 8006120:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006128:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006166:	2b01      	cmp	r3, #1
 8006168:	d101      	bne.n	800616e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800616a:	2302      	movs	r3, #2
 800616c:	e02d      	b.n	80061ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2224      	movs	r2, #36	; 0x24
 800617a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0201 	bic.w	r2, r2, #1
 8006194:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f850 	bl	8006250 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d101      	bne.n	80061ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80061e6:	2302      	movs	r3, #2
 80061e8:	e02d      	b.n	8006246 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2224      	movs	r2, #36	; 0x24
 80061f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0201 	bic.w	r2, r2, #1
 8006210:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f812 	bl	8006250 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2220      	movs	r2, #32
 8006238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800625c:	2b00      	cmp	r3, #0
 800625e:	d108      	bne.n	8006272 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006270:	e031      	b.n	80062d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006272:	2308      	movs	r3, #8
 8006274:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006276:	2308      	movs	r3, #8
 8006278:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	0e5b      	lsrs	r3, r3, #25
 8006282:	b2db      	uxtb	r3, r3
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	0f5b      	lsrs	r3, r3, #29
 8006292:	b2db      	uxtb	r3, r3
 8006294:	f003 0307 	and.w	r3, r3, #7
 8006298:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800629a:	7bbb      	ldrb	r3, [r7, #14]
 800629c:	7b3a      	ldrb	r2, [r7, #12]
 800629e:	4911      	ldr	r1, [pc, #68]	; (80062e4 <UARTEx_SetNbDataToProcess+0x94>)
 80062a0:	5c8a      	ldrb	r2, [r1, r2]
 80062a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062a6:	7b3a      	ldrb	r2, [r7, #12]
 80062a8:	490f      	ldr	r1, [pc, #60]	; (80062e8 <UARTEx_SetNbDataToProcess+0x98>)
 80062aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	7b7a      	ldrb	r2, [r7, #13]
 80062bc:	4909      	ldr	r1, [pc, #36]	; (80062e4 <UARTEx_SetNbDataToProcess+0x94>)
 80062be:	5c8a      	ldrb	r2, [r1, r2]
 80062c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80062c4:	7b7a      	ldrb	r2, [r7, #13]
 80062c6:	4908      	ldr	r1, [pc, #32]	; (80062e8 <UARTEx_SetNbDataToProcess+0x98>)
 80062c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80062d6:	bf00      	nop
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	0800638c 	.word	0x0800638c
 80062e8:	08006394 	.word	0x08006394

080062ec <__libc_init_array>:
 80062ec:	b570      	push	{r4, r5, r6, lr}
 80062ee:	4d0d      	ldr	r5, [pc, #52]	; (8006324 <__libc_init_array+0x38>)
 80062f0:	4c0d      	ldr	r4, [pc, #52]	; (8006328 <__libc_init_array+0x3c>)
 80062f2:	1b64      	subs	r4, r4, r5
 80062f4:	10a4      	asrs	r4, r4, #2
 80062f6:	2600      	movs	r6, #0
 80062f8:	42a6      	cmp	r6, r4
 80062fa:	d109      	bne.n	8006310 <__libc_init_array+0x24>
 80062fc:	4d0b      	ldr	r5, [pc, #44]	; (800632c <__libc_init_array+0x40>)
 80062fe:	4c0c      	ldr	r4, [pc, #48]	; (8006330 <__libc_init_array+0x44>)
 8006300:	f000 f820 	bl	8006344 <_init>
 8006304:	1b64      	subs	r4, r4, r5
 8006306:	10a4      	asrs	r4, r4, #2
 8006308:	2600      	movs	r6, #0
 800630a:	42a6      	cmp	r6, r4
 800630c:	d105      	bne.n	800631a <__libc_init_array+0x2e>
 800630e:	bd70      	pop	{r4, r5, r6, pc}
 8006310:	f855 3b04 	ldr.w	r3, [r5], #4
 8006314:	4798      	blx	r3
 8006316:	3601      	adds	r6, #1
 8006318:	e7ee      	b.n	80062f8 <__libc_init_array+0xc>
 800631a:	f855 3b04 	ldr.w	r3, [r5], #4
 800631e:	4798      	blx	r3
 8006320:	3601      	adds	r6, #1
 8006322:	e7f2      	b.n	800630a <__libc_init_array+0x1e>
 8006324:	080063a4 	.word	0x080063a4
 8006328:	080063a4 	.word	0x080063a4
 800632c:	080063a4 	.word	0x080063a4
 8006330:	080063a8 	.word	0x080063a8

08006334 <memset>:
 8006334:	4402      	add	r2, r0
 8006336:	4603      	mov	r3, r0
 8006338:	4293      	cmp	r3, r2
 800633a:	d100      	bne.n	800633e <memset+0xa>
 800633c:	4770      	bx	lr
 800633e:	f803 1b01 	strb.w	r1, [r3], #1
 8006342:	e7f9      	b.n	8006338 <memset+0x4>

08006344 <_init>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	bf00      	nop
 8006348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634a:	bc08      	pop	{r3}
 800634c:	469e      	mov	lr, r3
 800634e:	4770      	bx	lr

08006350 <_fini>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	bf00      	nop
 8006354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006356:	bc08      	pop	{r3}
 8006358:	469e      	mov	lr, r3
 800635a:	4770      	bx	lr
