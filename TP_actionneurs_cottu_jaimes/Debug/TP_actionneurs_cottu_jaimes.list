
TP_actionneurs_cottu_jaimes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb48  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  0800bd28  0800bd28  0001bd28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3e0  0800c3e0  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3e0  0800c3e0  0001c3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3e8  0800c3e8  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3e8  0800c3e8  0001c3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3ec  0800c3ec  0001c3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800c3f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000278  0800c668  00020278  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  0800c668  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019cb2  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dcf  00000000  00000000  00039f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  0003cd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001458  00000000  00000000  0003e2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029834  00000000  00000000  0003f6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018236  00000000  00000000  00068f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113e45  00000000  00000000  00081162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00194fa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007028  00000000  00000000  00194ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000278 	.word	0x20000278
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bd10 	.word	0x0800bd10

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000027c 	.word	0x2000027c
 800021c:	0800bd10 	.word	0x0800bd10

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b974 	b.w	8000fb8 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b09e      	sub	sp, #120	; 0x78
 8000fc0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];		//!< Contient la commande reconstruite apres chaque interruption UART
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	66bb      	str	r3, [r7, #104]	; 0x68
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fca:	f000 fff4 	bl	8001fb6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fce:	f000 f995 	bl	80012fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fd2:	f000 fb93 	bl	80016fc <MX_GPIO_Init>
	MX_TIM1_Init();
 8000fd6:	f000 fa55 	bl	8001484 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 8000fda:	f000 fb43 	bl	8001664 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000fde:	f000 faf5 	bl	80015cc <MX_TIM2_Init>
	MX_ADC1_Init();
 8000fe2:	f000 f9d7 	bl	8001394 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	memset(argv,(int)NULL,MAX_ARGS*sizeof(char*));
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	2224      	movs	r2, #36	; 0x24
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f007 fe2b 	bl	8008c48 <memset>
	memset(cmdBuffer,(int)NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	2240      	movs	r2, #64	; 0x40
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f007 fe24 	bl	8008c48 <memset>
 8001000:	4ba4      	ldr	r3, [pc, #656]	; (8001294 <main+0x2d8>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,(int)NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,(int)NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8001006:	2240      	movs	r2, #64	; 0x40
 8001008:	2100      	movs	r1, #0
 800100a:	48a3      	ldr	r0, [pc, #652]	; (8001298 <main+0x2dc>)
 800100c:	f007 fe1c 	bl	8008c48 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001010:	2201      	movs	r2, #1
 8001012:	49a0      	ldr	r1, [pc, #640]	; (8001294 <main+0x2d8>)
 8001014:	48a1      	ldr	r0, [pc, #644]	; (800129c <main+0x2e0>)
 8001016:	f005 fe59 	bl	8006ccc <HAL_UART_Receive_IT>
	HAL_Delay(10);
 800101a:	200a      	movs	r0, #10
 800101c:	f001 f83c 	bl	8002098 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	2266      	movs	r2, #102	; 0x66
 8001026:	499e      	ldr	r1, [pc, #632]	; (80012a0 <main+0x2e4>)
 8001028:	489c      	ldr	r0, [pc, #624]	; (800129c <main+0x2e0>)
 800102a:	f005 fdb8 	bl	8006b9e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	2218      	movs	r2, #24
 8001034:	499b      	ldr	r1, [pc, #620]	; (80012a4 <main+0x2e8>)
 8001036:	4899      	ldr	r0, [pc, #612]	; (800129c <main+0x2e0>)
 8001038:	f005 fdb1 	bl	8006b9e <HAL_UART_Transmit>


	//valeur de rapport cyclique initial
	TIM1->CCR1=850;
 800103c:	4b9a      	ldr	r3, [pc, #616]	; (80012a8 <main+0x2ec>)
 800103e:	f240 3252 	movw	r2, #850	; 0x352
 8001042:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=SPEED_MAX-850;
 8001044:	4b98      	ldr	r3, [pc, #608]	; (80012a8 <main+0x2ec>)
 8001046:	f240 327a 	movw	r2, #890	; 0x37a
 800104a:	639a      	str	r2, [r3, #56]	; 0x38
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 800104c:	4b97      	ldr	r3, [pc, #604]	; (80012ac <main+0x2f0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d056      	beq.n	8001102 <main+0x146>
			switch(uartRxBuffer[0]){
 8001054:	4b8f      	ldr	r3, [pc, #572]	; (8001294 <main+0x2d8>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b0d      	cmp	r3, #13
 800105a:	d002      	beq.n	8001062 <main+0xa6>
 800105c:	2b7f      	cmp	r3, #127	; 0x7f
 800105e:	d02d      	beq.n	80010bc <main+0x100>
 8001060:	e03c      	b.n	80010dc <main+0x120>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	2203      	movs	r2, #3
 8001068:	4991      	ldr	r1, [pc, #580]	; (80012b0 <main+0x2f4>)
 800106a:	488c      	ldr	r0, [pc, #560]	; (800129c <main+0x2e0>)
 800106c:	f005 fd97 	bl	8006b9e <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 8001070:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001076:	4413      	add	r3, r2
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
				argc = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, " ");
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	498b      	ldr	r1, [pc, #556]	; (80012b4 <main+0x2f8>)
 8001086:	4618      	mov	r0, r3
 8001088:	f008 fafe 	bl	8009688 <strtok>
 800108c:	66f8      	str	r0, [r7, #108]	; 0x6c
				while(token!=NULL){
 800108e:	e00d      	b.n	80010ac <main+0xf0>
					argv[argc++] = token;
 8001090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	673a      	str	r2, [r7, #112]	; 0x70
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	3378      	adds	r3, #120	; 0x78
 800109a:	443b      	add	r3, r7
 800109c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800109e:	f843 2c78 	str.w	r2, [r3, #-120]
					token = strtok(NULL, " ");
 80010a2:	4984      	ldr	r1, [pc, #528]	; (80012b4 <main+0x2f8>)
 80010a4:	2000      	movs	r0, #0
 80010a6:	f008 faef 	bl	8009688 <strtok>
 80010aa:	66f8      	str	r0, [r7, #108]	; 0x6c
				while(token!=NULL){
 80010ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1ee      	bne.n	8001090 <main+0xd4>
				}

				idx_cmd = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 80010ba:	e01f      	b.n	80010fc <main+0x140>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 80010bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010be:	1e5a      	subs	r2, r3, #1
 80010c0:	677a      	str	r2, [r7, #116]	; 0x74
 80010c2:	3378      	adds	r3, #120	; 0x78
 80010c4:	443b      	add	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
 80010d0:	2201      	movs	r2, #1
 80010d2:	4970      	ldr	r1, [pc, #448]	; (8001294 <main+0x2d8>)
 80010d4:	4871      	ldr	r0, [pc, #452]	; (800129c <main+0x2e0>)
 80010d6:	f005 fd62 	bl	8006b9e <HAL_UART_Transmit>
				break;
 80010da:	e00f      	b.n	80010fc <main+0x140>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80010dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	677a      	str	r2, [r7, #116]	; 0x74
 80010e2:	4a6c      	ldr	r2, [pc, #432]	; (8001294 <main+0x2d8>)
 80010e4:	7812      	ldrb	r2, [r2, #0]
 80010e6:	3378      	adds	r3, #120	; 0x78
 80010e8:	443b      	add	r3, r7
 80010ea:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	2201      	movs	r2, #1
 80010f4:	4967      	ldr	r1, [pc, #412]	; (8001294 <main+0x2d8>)
 80010f6:	4869      	ldr	r0, [pc, #420]	; (800129c <main+0x2e0>)
 80010f8:	f005 fd51 	bl	8006b9e <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 80010fc:	4b6b      	ldr	r3, [pc, #428]	; (80012ac <main+0x2f0>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 8001102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0a1      	beq.n	800104c <main+0x90>
			if(strcmp(argv[0],"set")==0){
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	496b      	ldr	r1, [pc, #428]	; (80012b8 <main+0x2fc>)
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f887 	bl	8000220 <strcmp>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d12d      	bne.n	8001174 <main+0x1b8>
				if(strcmp(argv[1],"PA5")==0){
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4968      	ldr	r1, [pc, #416]	; (80012bc <main+0x300>)
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f87f 	bl	8000220 <strcmp>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d11d      	bne.n	8001164 <main+0x1a8>
					HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4618      	mov	r0, r3
 800112c:	f007 fd5e 	bl	8008bec <atoi>
 8001130:	4603      	mov	r3, r0
 8001132:	b2db      	uxtb	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	2120      	movs	r1, #32
 8001138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113c:	f002 feda 	bl	8003ef4 <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4618      	mov	r0, r3
 8001144:	f007 fd52 	bl	8008bec <atoi>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	495c      	ldr	r1, [pc, #368]	; (80012c0 <main+0x304>)
 800114e:	4852      	ldr	r0, [pc, #328]	; (8001298 <main+0x2dc>)
 8001150:	f008 fa7a 	bl	8009648 <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8001154:	f04f 33ff 	mov.w	r3, #4294967295
 8001158:	2220      	movs	r2, #32
 800115a:	494f      	ldr	r1, [pc, #316]	; (8001298 <main+0x2dc>)
 800115c:	484f      	ldr	r0, [pc, #316]	; (800129c <main+0x2e0>)
 800115e:	f005 fd1e 	bl	8006b9e <HAL_UART_Transmit>
 8001162:	e08c      	b.n	800127e <main+0x2c2>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	2215      	movs	r2, #21
 800116a:	4956      	ldr	r1, [pc, #344]	; (80012c4 <main+0x308>)
 800116c:	484b      	ldr	r0, [pc, #300]	; (800129c <main+0x2e0>)
 800116e:	f005 fd16 	bl	8006b9e <HAL_UART_Transmit>
 8001172:	e084      	b.n	800127e <main+0x2c2>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	4954      	ldr	r1, [pc, #336]	; (80012c8 <main+0x30c>)
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f851 	bl	8000220 <strcmp>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d107      	bne.n	8001194 <main+0x1d8>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	2215      	movs	r2, #21
 800118a:	494e      	ldr	r1, [pc, #312]	; (80012c4 <main+0x308>)
 800118c:	4843      	ldr	r0, [pc, #268]	; (800129c <main+0x2e0>)
 800118e:	f005 fd06 	bl	8006b9e <HAL_UART_Transmit>
 8001192:	e074      	b.n	800127e <main+0x2c2>
			}
			else if(strcmp(argv[0],"pinout")==0)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	494d      	ldr	r1, [pc, #308]	; (80012cc <main+0x310>)
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f841 	bl	8000220 <strcmp>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d107      	bne.n	80011b4 <main+0x1f8>
			{
				HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
 80011a8:	223d      	movs	r2, #61	; 0x3d
 80011aa:	4949      	ldr	r1, [pc, #292]	; (80012d0 <main+0x314>)
 80011ac:	483b      	ldr	r0, [pc, #236]	; (800129c <main+0x2e0>)
 80011ae:	f005 fcf6 	bl	8006b9e <HAL_UART_Transmit>
 80011b2:	e064      	b.n	800127e <main+0x2c2>
			}
			else if(strcmp(argv[0],"start")==0)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	4947      	ldr	r1, [pc, #284]	; (80012d4 <main+0x318>)
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f831 	bl	8000220 <strcmp>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d109      	bne.n	80011d8 <main+0x21c>
			{
				HAL_UART_Transmit(&huart2, start, sizeof(start), HAL_MAX_DELAY);
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	220c      	movs	r2, #12
 80011ca:	4943      	ldr	r1, [pc, #268]	; (80012d8 <main+0x31c>)
 80011cc:	4833      	ldr	r0, [pc, #204]	; (800129c <main+0x2e0>)
 80011ce:	f005 fce6 	bl	8006b9e <HAL_UART_Transmit>
				motor_start();
 80011d2:	f000 fb47 	bl	8001864 <motor_start>
 80011d6:	e052      	b.n	800127e <main+0x2c2>
			}
			else if(strcmp(argv[0],"stop")==0)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	4940      	ldr	r1, [pc, #256]	; (80012dc <main+0x320>)
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f81f 	bl	8000220 <strcmp>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d109      	bne.n	80011fc <main+0x240>
			{
				HAL_UART_Transmit(&huart2, stop, sizeof(stop), HAL_MAX_DELAY);
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	220d      	movs	r2, #13
 80011ee:	493c      	ldr	r1, [pc, #240]	; (80012e0 <main+0x324>)
 80011f0:	482a      	ldr	r0, [pc, #168]	; (800129c <main+0x2e0>)
 80011f2:	f005 fcd4 	bl	8006b9e <HAL_UART_Transmit>
				motor_stop_PWM();
 80011f6:	f000 fb4d 	bl	8001894 <motor_stop_PWM>
 80011fa:	e040      	b.n	800127e <main+0x2c2>
			}
			else if(strcmp(argv[0],"help")==0)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	4939      	ldr	r1, [pc, #228]	; (80012e4 <main+0x328>)
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f80d 	bl	8000220 <strcmp>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d107      	bne.n	800121c <main+0x260>
			{
				HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	22f9      	movs	r2, #249	; 0xf9
 8001212:	4935      	ldr	r1, [pc, #212]	; (80012e8 <main+0x32c>)
 8001214:	4821      	ldr	r0, [pc, #132]	; (800129c <main+0x2e0>)
 8001216:	f005 fcc2 	bl	8006b9e <HAL_UART_Transmit>
 800121a:	e030      	b.n	800127e <main+0x2c2>
			}
			else if(strcmp(argv[0],"speed")==0)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	4933      	ldr	r1, [pc, #204]	; (80012ec <main+0x330>)
 8001220:	4618      	mov	r0, r3
 8001222:	f7fe fffd 	bl	8000220 <strcmp>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d10f      	bne.n	800124c <main+0x290>
			{
				HAL_UART_Transmit(&huart2,speed_msg, sizeof(speed_msg), HAL_MAX_DELAY);
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	2210      	movs	r2, #16
 8001232:	492f      	ldr	r1, [pc, #188]	; (80012f0 <main+0x334>)
 8001234:	4819      	ldr	r0, [pc, #100]	; (800129c <main+0x2e0>)
 8001236:	f005 fcb2 	bl	8006b9e <HAL_UART_Transmit>
				int speed;
				speed=atoi(argv[1]);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4618      	mov	r0, r3
 800123e:	f007 fcd5 	bl	8008bec <atoi>
 8001242:	6678      	str	r0, [r7, #100]	; 0x64
				motor_set_speed(speed);
 8001244:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001246:	f000 fb5f 	bl	8001908 <motor_set_speed>
 800124a:	e018      	b.n	800127e <main+0x2c2>
			}
			else if(strcmp(argv[0],"current")==0){
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	4929      	ldr	r1, [pc, #164]	; (80012f4 <main+0x338>)
 8001250:	4618      	mov	r0, r3
 8001252:	f7fe ffe5 	bl	8000220 <strcmp>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d109      	bne.n	8001270 <main+0x2b4>
				HAL_UART_Transmit(&huart2,current_msg, sizeof(current_msg), HAL_MAX_DELAY);
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
 8001260:	221a      	movs	r2, #26
 8001262:	4925      	ldr	r1, [pc, #148]	; (80012f8 <main+0x33c>)
 8001264:	480d      	ldr	r0, [pc, #52]	; (800129c <main+0x2e0>)
 8001266:	f005 fc9a 	bl	8006b9e <HAL_UART_Transmit>
				motor_get_current();
 800126a:	f000 fbb5 	bl	80019d8 <motor_get_current>
 800126e:	e006      	b.n	800127e <main+0x2c2>
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	2215      	movs	r2, #21
 8001276:	4913      	ldr	r1, [pc, #76]	; (80012c4 <main+0x308>)
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <main+0x2e0>)
 800127a:	f005 fc90 	bl	8006b9e <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
 8001282:	2218      	movs	r2, #24
 8001284:	4907      	ldr	r1, [pc, #28]	; (80012a4 <main+0x2e8>)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <main+0x2e0>)
 8001288:	f005 fc89 	bl	8006b9e <HAL_UART_Transmit>
			newCmdReady = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	66bb      	str	r3, [r7, #104]	; 0x68
		if(uartRxReceived){
 8001290:	e6dc      	b.n	800104c <main+0x90>
 8001292:	bf00      	nop
 8001294:	2000042c 	.word	0x2000042c
 8001298:	20000430 	.word	0x20000430
 800129c:	20000398 	.word	0x20000398
 80012a0:	20000018 	.word	0x20000018
 80012a4:	20000000 	.word	0x20000000
 80012a8:	40012c00 	.word	0x40012c00
 80012ac:	20000428 	.word	0x20000428
 80012b0:	20000080 	.word	0x20000080
 80012b4:	0800bd28 	.word	0x0800bd28
 80012b8:	0800bd2c 	.word	0x0800bd2c
 80012bc:	0800bd30 	.word	0x0800bd30
 80012c0:	0800bd34 	.word	0x0800bd34
 80012c4:	20000084 	.word	0x20000084
 80012c8:	0800bd50 	.word	0x0800bd50
 80012cc:	0800bd54 	.word	0x0800bd54
 80012d0:	0800bee0 	.word	0x0800bee0
 80012d4:	0800bd5c 	.word	0x0800bd5c
 80012d8:	0800bf20 	.word	0x0800bf20
 80012dc:	0800bd64 	.word	0x0800bd64
 80012e0:	0800bf2c 	.word	0x0800bf2c
 80012e4:	0800bd6c 	.word	0x0800bd6c
 80012e8:	0800bde4 	.word	0x0800bde4
 80012ec:	0800bd74 	.word	0x0800bd74
 80012f0:	0800bf3c 	.word	0x0800bf3c
 80012f4:	0800bd7c 	.word	0x0800bd7c
 80012f8:	0800bf4c 	.word	0x0800bf4c

080012fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	; 0x50
 8001300:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0318 	add.w	r3, r7, #24
 8001306:	2238      	movs	r2, #56	; 0x38
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f007 fc9c 	bl	8008c48 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800131e:	2000      	movs	r0, #0
 8001320:	f002 fe18 	bl	8003f54 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001324:	2302      	movs	r3, #2
 8001326:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800132e:	2340      	movs	r3, #64	; 0x40
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001332:	2302      	movs	r3, #2
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001336:	2302      	movs	r3, #2
 8001338:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800133a:	2304      	movs	r3, #4
 800133c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800133e:	2355      	movs	r3, #85	; 0x55
 8001340:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001342:	2302      	movs	r3, #2
 8001344:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001346:	2302      	movs	r3, #2
 8001348:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800134a:	2302      	movs	r3, #2
 800134c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134e:	f107 0318 	add.w	r3, r7, #24
 8001352:	4618      	mov	r0, r3
 8001354:	f002 feb2 	bl	80040bc <HAL_RCC_OscConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x66>
	{
		Error_Handler();
 800135e:	f000 fa7b 	bl	8001858 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	230f      	movs	r3, #15
 8001364:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001366:	2303      	movs	r3, #3
 8001368:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2104      	movs	r1, #4
 800137a:	4618      	mov	r0, r3
 800137c:	f003 f9b6 	bl	80046ec <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8001386:	f000 fa67 	bl	8001858 <Error_Handler>
	}
}
 800138a:	bf00      	nop
 800138c:	3750      	adds	r7, #80	; 0x50
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08c      	sub	sp, #48	; 0x30
 8001398:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2220      	movs	r2, #32
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f007 fc4b 	bl	8008c48 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80013b2:	4b32      	ldr	r3, [pc, #200]	; (800147c <MX_ADC1_Init+0xe8>)
 80013b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013b8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013ba:	4b30      	ldr	r3, [pc, #192]	; (800147c <MX_ADC1_Init+0xe8>)
 80013bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013c0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80013c2:	4b2e      	ldr	r3, [pc, #184]	; (800147c <MX_ADC1_Init+0xe8>)
 80013c4:	2210      	movs	r2, #16
 80013c6:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c8:	4b2c      	ldr	r3, [pc, #176]	; (800147c <MX_ADC1_Init+0xe8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 80013ce:	4b2b      	ldr	r3, [pc, #172]	; (800147c <MX_ADC1_Init+0xe8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013d4:	4b29      	ldr	r3, [pc, #164]	; (800147c <MX_ADC1_Init+0xe8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013da:	4b28      	ldr	r3, [pc, #160]	; (800147c <MX_ADC1_Init+0xe8>)
 80013dc:	2204      	movs	r2, #4
 80013de:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80013e0:	4b26      	ldr	r3, [pc, #152]	; (800147c <MX_ADC1_Init+0xe8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80013e6:	4b25      	ldr	r3, [pc, #148]	; (800147c <MX_ADC1_Init+0xe8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 80013ec:	4b23      	ldr	r3, [pc, #140]	; (800147c <MX_ADC1_Init+0xe8>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013f2:	4b22      	ldr	r3, [pc, #136]	; (800147c <MX_ADC1_Init+0xe8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <MX_ADC1_Init+0xe8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <MX_ADC1_Init+0xe8>)
 8001402:	2200      	movs	r2, #0
 8001404:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <MX_ADC1_Init+0xe8>)
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <MX_ADC1_Init+0xe8>)
 8001410:	2200      	movs	r2, #0
 8001412:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <MX_ADC1_Init+0xe8>)
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800141c:	4817      	ldr	r0, [pc, #92]	; (800147c <MX_ADC1_Init+0xe8>)
 800141e:	f001 f88d 	bl	800253c <HAL_ADC_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_ADC1_Init+0x98>
	{
		Error_Handler();
 8001428:	f000 fa16 	bl	8001858 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001434:	4619      	mov	r1, r3
 8001436:	4811      	ldr	r0, [pc, #68]	; (800147c <MX_ADC1_Init+0xe8>)
 8001438:	f002 f902 	bl	8003640 <HAL_ADCEx_MultiModeConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ADC1_Init+0xb2>
	{
		Error_Handler();
 8001442:	f000 fa09 	bl	8001858 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_ADC1_Init+0xec>)
 8001448:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800144a:	2306      	movs	r3, #6
 800144c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001452:	237f      	movs	r3, #127	; 0x7f
 8001454:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001456:	2304      	movs	r3, #4
 8001458:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	4619      	mov	r1, r3
 8001462:	4806      	ldr	r0, [pc, #24]	; (800147c <MX_ADC1_Init+0xe8>)
 8001464:	f001 fc24 	bl	8002cb0 <HAL_ADC_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC1_Init+0xde>
	{
		Error_Handler();
 800146e:	f000 f9f3 	bl	8001858 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	3730      	adds	r7, #48	; 0x30
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000294 	.word	0x20000294
 8001480:	04300002 	.word	0x04300002

08001484 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b098      	sub	sp, #96	; 0x60
 8001488:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001496:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]
 80014a6:	615a      	str	r2, [r3, #20]
 80014a8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2234      	movs	r2, #52	; 0x34
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f007 fbc9 	bl	8008c48 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80014b6:	4b43      	ldr	r3, [pc, #268]	; (80015c4 <MX_TIM1_Init+0x140>)
 80014b8:	4a43      	ldr	r2, [pc, #268]	; (80015c8 <MX_TIM1_Init+0x144>)
 80014ba:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 3-1;
 80014bc:	4b41      	ldr	r3, [pc, #260]	; (80015c4 <MX_TIM1_Init+0x140>)
 80014be:	2202      	movs	r2, #2
 80014c0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80014c2:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <MX_TIM1_Init+0x140>)
 80014c4:	2220      	movs	r2, #32
 80014c6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1749;
 80014c8:	4b3e      	ldr	r3, [pc, #248]	; (80015c4 <MX_TIM1_Init+0x140>)
 80014ca:	f240 62d5 	movw	r2, #1749	; 0x6d5
 80014ce:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d0:	4b3c      	ldr	r3, [pc, #240]	; (80015c4 <MX_TIM1_Init+0x140>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80014d6:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <MX_TIM1_Init+0x140>)
 80014d8:	2200      	movs	r2, #0
 80014da:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014dc:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <MX_TIM1_Init+0x140>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014e2:	4838      	ldr	r0, [pc, #224]	; (80015c4 <MX_TIM1_Init+0x140>)
 80014e4:	f003 fdc3 	bl	800506e <HAL_TIM_PWM_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM1_Init+0x6e>
	{
		Error_Handler();
 80014ee:	f000 f9b3 	bl	8001858 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001502:	4619      	mov	r1, r3
 8001504:	482f      	ldr	r0, [pc, #188]	; (80015c4 <MX_TIM1_Init+0x140>)
 8001506:	f005 f947 	bl	8006798 <HAL_TIMEx_MasterConfigSynchronization>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8001510:	f000 f9a2 	bl	8001858 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001514:	2360      	movs	r3, #96	; 0x60
 8001516:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 1050;
 8001518:	f240 431a 	movw	r3, #1050	; 0x41a
 800151c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151e:	2300      	movs	r3, #0
 8001520:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001522:	2300      	movs	r3, #0
 8001524:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001532:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001536:	2200      	movs	r2, #0
 8001538:	4619      	mov	r1, r3
 800153a:	4822      	ldr	r0, [pc, #136]	; (80015c4 <MX_TIM1_Init+0x140>)
 800153c:	f004 f91c 	bl	8005778 <HAL_TIM_PWM_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM1_Init+0xc6>
	{
		Error_Handler();
 8001546:	f000 f987 	bl	8001858 <Error_Handler>
	}
	sConfigOC.Pulse = 700;
 800154a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001550:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001554:	2204      	movs	r2, #4
 8001556:	4619      	mov	r1, r3
 8001558:	481a      	ldr	r0, [pc, #104]	; (80015c4 <MX_TIM1_Init+0x140>)
 800155a:	f004 f90d 	bl	8005778 <HAL_TIM_PWM_ConfigChannel>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM1_Init+0xe4>
	{
		Error_Handler();
 8001564:	f000 f978 	bl	8001858 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 200;
 8001574:	23c8      	movs	r3, #200	; 0xc8
 8001576:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800157c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001580:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800158e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001598:	2300      	movs	r3, #0
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800159c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015a0:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	4807      	ldr	r0, [pc, #28]	; (80015c4 <MX_TIM1_Init+0x140>)
 80015a8:	f005 f98c 	bl	80068c4 <HAL_TIMEx_ConfigBreakDeadTime>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM1_Init+0x132>
	{
		Error_Handler();
 80015b2:	f000 f951 	bl	8001858 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80015b6:	4803      	ldr	r0, [pc, #12]	; (80015c4 <MX_TIM1_Init+0x140>)
 80015b8:	f000 fb1e 	bl	8001bf8 <HAL_TIM_MspPostInit>

}
 80015bc:	bf00      	nop
 80015be:	3760      	adds	r7, #96	; 0x60
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000300 	.word	0x20000300
 80015c8:	40012c00 	.word	0x40012c00

080015cc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <MX_TIM2_Init+0x94>)
 80015ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 170;
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <MX_TIM2_Init+0x94>)
 80015f4:	22aa      	movs	r2, #170	; 0xaa
 80015f6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <MX_TIM2_Init+0x94>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 2;
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <MX_TIM2_Init+0x94>)
 8001600:	2202      	movs	r2, #2
 8001602:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <MX_TIM2_Init+0x94>)
 8001606:	2200      	movs	r2, #0
 8001608:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <MX_TIM2_Init+0x94>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001610:	4813      	ldr	r0, [pc, #76]	; (8001660 <MX_TIM2_Init+0x94>)
 8001612:	f003 fcd5 	bl	8004fc0 <HAL_TIM_Base_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 800161c:	f000 f91c 	bl	8001858 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001624:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001626:	f107 0310 	add.w	r3, r7, #16
 800162a:	4619      	mov	r1, r3
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <MX_TIM2_Init+0x94>)
 800162e:	f004 f9b7 	bl	80059a0 <HAL_TIM_ConfigClockSource>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 8001638:	f000 f90e 	bl	8001858 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163c:	2300      	movs	r3, #0
 800163e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_TIM2_Init+0x94>)
 800164a:	f005 f8a5 	bl	8006798 <HAL_TIMEx_MasterConfigSynchronization>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8001654:	f000 f900 	bl	8001858 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	3720      	adds	r7, #32
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2000034c 	.word	0x2000034c

08001664 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001668:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <MX_USART2_UART_Init+0x90>)
 800166a:	4a23      	ldr	r2, [pc, #140]	; (80016f8 <MX_USART2_UART_Init+0x94>)
 800166c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800166e:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <MX_USART2_UART_Init+0x90>)
 8001670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001674:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001676:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <MX_USART2_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800167c:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <MX_USART2_UART_Init+0x90>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <MX_USART2_UART_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001688:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_USART2_UART_Init+0x90>)
 800168a:	220c      	movs	r2, #12
 800168c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168e:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <MX_USART2_UART_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001694:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <MX_USART2_UART_Init+0x90>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800169a:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <MX_USART2_UART_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <MX_USART2_UART_Init+0x90>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <MX_USART2_UART_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ac:	4811      	ldr	r0, [pc, #68]	; (80016f4 <MX_USART2_UART_Init+0x90>)
 80016ae:	f005 fa26 	bl	8006afe <HAL_UART_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 80016b8:	f000 f8ce 	bl	8001858 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016bc:	2100      	movs	r1, #0
 80016be:	480d      	ldr	r0, [pc, #52]	; (80016f4 <MX_USART2_UART_Init+0x90>)
 80016c0:	f007 f9c9 	bl	8008a56 <HAL_UARTEx_SetTxFifoThreshold>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 80016ca:	f000 f8c5 	bl	8001858 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ce:	2100      	movs	r1, #0
 80016d0:	4808      	ldr	r0, [pc, #32]	; (80016f4 <MX_USART2_UART_Init+0x90>)
 80016d2:	f007 f9fe 	bl	8008ad2 <HAL_UARTEx_SetRxFifoThreshold>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 80016dc:	f000 f8bc 	bl	8001858 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <MX_USART2_UART_Init+0x90>)
 80016e2:	f007 f97f 	bl	80089e4 <HAL_UARTEx_DisableFifoMode>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 80016ec:	f000 f8b4 	bl	8001858 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000398 	.word	0x20000398
 80016f8:	40004400 	.word	0x40004400

080016fc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	4b33      	ldr	r3, [pc, #204]	; (80017e0 <MX_GPIO_Init+0xe4>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	4a32      	ldr	r2, [pc, #200]	; (80017e0 <MX_GPIO_Init+0xe4>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171e:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <MX_GPIO_Init+0xe4>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800172a:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <MX_GPIO_Init+0xe4>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	4a2c      	ldr	r2, [pc, #176]	; (80017e0 <MX_GPIO_Init+0xe4>)
 8001730:	f043 0320 	orr.w	r3, r3, #32
 8001734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001736:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <MX_GPIO_Init+0xe4>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	f003 0320 	and.w	r3, r3, #32
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <MX_GPIO_Init+0xe4>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001746:	4a26      	ldr	r2, [pc, #152]	; (80017e0 <MX_GPIO_Init+0xe4>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800174e:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <MX_GPIO_Init+0xe4>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	2108      	movs	r1, #8
 800175e:	4821      	ldr	r0, [pc, #132]	; (80017e4 <MX_GPIO_Init+0xe8>)
 8001760:	f002 fbc8 	bl	8003ef4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	2120      	movs	r1, #32
 8001768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176c:	f002 fbc2 	bl	8003ef4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BUTTON_Pin */
	GPIO_InitStruct.Pin = BUTTON_Pin;
 8001770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001774:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001776:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800177a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	4619      	mov	r1, r3
 8001786:	4817      	ldr	r0, [pc, #92]	; (80017e4 <MX_GPIO_Init+0xe8>)
 8001788:	f002 fa32 	bl	8003bf0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ISO_RESET_Pin */
	GPIO_InitStruct.Pin = ISO_RESET_Pin;
 800178c:	2308      	movs	r3, #8
 800178e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001790:	2301      	movs	r3, #1
 8001792:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4619      	mov	r1, r3
 80017a2:	4810      	ldr	r0, [pc, #64]	; (80017e4 <MX_GPIO_Init+0xe8>)
 80017a4:	f002 fa24 	bl	8003bf0 <HAL_GPIO_Init>

	/*Configure GPIO pin : GREEN_LED_Pin */
	GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80017a8:	2320      	movs	r3, #32
 80017aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	4619      	mov	r1, r3
 80017be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c2:	f002 fa15 	bl	8003bf0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	2028      	movs	r0, #40	; 0x28
 80017cc:	f002 f91b 	bl	8003a06 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017d0:	2028      	movs	r0, #40	; 0x28
 80017d2:	f002 f932 	bl	8003a3a <HAL_NVIC_EnableIRQ>

}
 80017d6:	bf00      	nop
 80017d8:	3720      	adds	r7, #32
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	48000800 	.word	0x48000800

080017e8 <HAL_UART_RxCpltCallback>:
/**
 * \fn void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
 * \brief Gestion des interruptions des périphériques UART:
 * Met le flag de réception a 1 et met le caractère reçu dans uartRxBuffer
 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_UART_RxCpltCallback+0x20>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80017f6:	2201      	movs	r2, #1
 80017f8:	4904      	ldr	r1, [pc, #16]	; (800180c <HAL_UART_RxCpltCallback+0x24>)
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <HAL_UART_RxCpltCallback+0x28>)
 80017fc:	f005 fa66 	bl	8006ccc <HAL_UART_Receive_IT>
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000428 	.word	0x20000428
 800180c:	2000042c 	.word	0x2000042c
 8001810:	20000398 	.word	0x20000398

08001814 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==BUTTON_Pin){
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001824:	d101      	bne.n	800182a <HAL_GPIO_EXTI_Callback+0x16>
		motor_start();
 8001826:	f000 f81d 	bl	8001864 <motor_start>
	}
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <__io_putchar>:

int __io_putchar(int ch){
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800183c:	1d39      	adds	r1, r7, #4
 800183e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001842:	2201      	movs	r2, #1
 8001844:	4803      	ldr	r0, [pc, #12]	; (8001854 <__io_putchar+0x20>)
 8001846:	f005 f9aa 	bl	8006b9e <HAL_UART_Transmit>
	return ch;
 800184a:	687b      	ldr	r3, [r7, #4]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000398 	.word	0x20000398

08001858 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001860:	e7fe      	b.n	8001860 <Error_Handler+0x8>
	...

08001864 <motor_start>:

/**
 * \fn void motor_start(void)
 * \brief Met la Pin ISO_RESET à 1 pendant le temps requis (1ms).
 */
void motor_start(void){
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	motor_stop_PWM();
 8001868:	f000 f814 	bl	8001894 <motor_stop_PWM>
	//printf("moteur start entered\r\n");						// debogage
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port,ISO_RESET_Pin,1);
 800186c:	2201      	movs	r2, #1
 800186e:	2108      	movs	r1, #8
 8001870:	4807      	ldr	r0, [pc, #28]	; (8001890 <motor_start+0x2c>)
 8001872:	f002 fb3f 	bl	8003ef4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001876:	2001      	movs	r0, #1
 8001878:	f000 fc0e 	bl	8002098 <HAL_Delay>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port,ISO_RESET_Pin,0);
 800187c:	2200      	movs	r2, #0
 800187e:	2108      	movs	r1, #8
 8001880:	4803      	ldr	r0, [pc, #12]	; (8001890 <motor_start+0x2c>)
 8001882:	f002 fb37 	bl	8003ef4 <HAL_GPIO_WritePin>
	motor_start_PWM();
 8001886:	f000 f829 	bl	80018dc <motor_start_PWM>
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	48000800 	.word	0x48000800

08001894 <motor_stop_PWM>:
/**
  * \fn void motor_stop_PWM(void)
  * \brief Etteint toutes les PWM du moteur, et remet les valeur standarts (rapport cyclique de 660)
  *
  */
void motor_stop_PWM(void){
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	//printf("moteur_stop_entered\r\n");						// debogage
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001898:	2100      	movs	r1, #0
 800189a:	480e      	ldr	r0, [pc, #56]	; (80018d4 <motor_stop_PWM+0x40>)
 800189c:	f003 fd50 	bl	8005340 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80018a0:	2104      	movs	r1, #4
 80018a2:	480c      	ldr	r0, [pc, #48]	; (80018d4 <motor_stop_PWM+0x40>)
 80018a4:	f003 fd4c 	bl	8005340 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80018a8:	2100      	movs	r1, #0
 80018aa:	480a      	ldr	r0, [pc, #40]	; (80018d4 <motor_stop_PWM+0x40>)
 80018ac:	f004 ff16 	bl	80066dc <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80018b0:	2104      	movs	r1, #4
 80018b2:	4808      	ldr	r0, [pc, #32]	; (80018d4 <motor_stop_PWM+0x40>)
 80018b4:	f004 ff12 	bl	80066dc <HAL_TIMEx_PWMN_Stop>
	TIM1->CCR1=850;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <motor_stop_PWM+0x44>)
 80018ba:	f240 3252 	movw	r2, #850	; 0x352
 80018be:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=SPEED_MAX-850;
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <motor_stop_PWM+0x44>)
 80018c2:	f240 327a 	movw	r2, #890	; 0x37a
 80018c6:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Init(&htim1);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <motor_stop_PWM+0x40>)
 80018ca:	f003 fbd0 	bl	800506e <HAL_TIM_PWM_Init>
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000300 	.word	0x20000300
 80018d8:	40012c00 	.word	0x40012c00

080018dc <motor_start_PWM>:

/**
 * \fn void motor_start_PWM(void)
 * \brief Fonction de racourci pour éviter de réécrire le redémarage des PWM à chaque fois
 */
void motor_start_PWM(void){
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	//printf("start_PWM\r\n");									// debogage
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80018e0:	2100      	movs	r1, #0
 80018e2:	4808      	ldr	r0, [pc, #32]	; (8001904 <motor_start_PWM+0x28>)
 80018e4:	f003 fc1a 	bl	800511c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018e8:	2104      	movs	r1, #4
 80018ea:	4806      	ldr	r0, [pc, #24]	; (8001904 <motor_start_PWM+0x28>)
 80018ec:	f003 fc16 	bl	800511c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80018f0:	2100      	movs	r1, #0
 80018f2:	4804      	ldr	r0, [pc, #16]	; (8001904 <motor_start_PWM+0x28>)
 80018f4:	f004 fe30 	bl	8006558 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80018f8:	2104      	movs	r1, #4
 80018fa:	4802      	ldr	r0, [pc, #8]	; (8001904 <motor_start_PWM+0x28>)
 80018fc:	f004 fe2c 	bl	8006558 <HAL_TIMEx_PWMN_Start>
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000300 	.word	0x20000300

08001908 <motor_set_speed>:
 * \brief Récupère et traite la commande de vitesse du moteur. Il y a une méthode bourin, qui met directement le rapport cyclique voulu
 * dans les registres, mais qui cause un 'HALL OVERCURRENT'.
 *
 * La deuxième methode est une méthode de gradation, qui permet d'augmenter ou de diminuer en douceur le rapport cyclique du moteur.
 */
void motor_set_speed(int speed){
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	//printf("motor_speed_entered\r\n");							// debogage
	if(speed>SPEED_MAX){
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8001916:	4293      	cmp	r3, r2
 8001918:	dd03      	ble.n	8001922 <motor_set_speed+0x1a>
		speed=SPEED_MAX;
 800191a:	f240 63cc 	movw	r3, #1740	; 0x6cc
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	e004      	b.n	800192c <motor_set_speed+0x24>
	}
	else if (speed<0){
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	da01      	bge.n	800192c <motor_set_speed+0x24>
		speed=0;
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
	TIM1->CCR2=SPEED_MAX-speed;
	HAL_TIM_PWM_Init(&htim1);
	motor_start_PWM();*/

	//----- methode gradation du rapport cyclique -----
	int rapport_cyclique=0;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]

	// en montée
	rapport_cyclique= TIM1->CCR1;						//<! prise en compte de la vitesse actuelle
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <motor_set_speed+0xc0>)
 8001932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001934:	60fb      	str	r3, [r7, #12]
	if (speed>rapport_cyclique){
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	429a      	cmp	r2, r3
 800193c:	dd1e      	ble.n	800197c <motor_set_speed+0x74>
		while(rapport_cyclique<speed){
 800193e:	e018      	b.n	8001972 <motor_set_speed+0x6a>
			TIM1->CCR1=rapport_cyclique;
 8001940:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <motor_set_speed+0xc0>)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2=SPEED_MAX-rapport_cyclique;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f5c3 63d9 	rsb	r3, r3, #1736	; 0x6c8
 800194c:	3304      	adds	r3, #4
 800194e:	4a1e      	ldr	r2, [pc, #120]	; (80019c8 <motor_set_speed+0xc0>)
 8001950:	6393      	str	r3, [r2, #56]	; 0x38
			printf("rapport_cyclique : %d\r\n",rapport_cyclique);
 8001952:	68f9      	ldr	r1, [r7, #12]
 8001954:	481d      	ldr	r0, [pc, #116]	; (80019cc <motor_set_speed+0xc4>)
 8001956:	f007 fde9 	bl	800952c <iprintf>
			HAL_TIM_PWM_Init(&htim1);
 800195a:	481d      	ldr	r0, [pc, #116]	; (80019d0 <motor_set_speed+0xc8>)
 800195c:	f003 fb87 	bl	800506e <HAL_TIM_PWM_Init>
			motor_start_PWM();
 8001960:	f7ff ffbc 	bl	80018dc <motor_start_PWM>
			HAL_Delay(DELAY_GRADATION);
 8001964:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001968:	f000 fb96 	bl	8002098 <HAL_Delay>
			rapport_cyclique=rapport_cyclique+GRADATION_UN_POURCENT;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3311      	adds	r3, #17
 8001970:	60fb      	str	r3, [r7, #12]
		while(rapport_cyclique<speed){
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	dbe2      	blt.n	8001940 <motor_set_speed+0x38>
			motor_start_PWM();
			HAL_Delay(DELAY_GRADATION);
			rapport_cyclique=rapport_cyclique-GRADATION_UN_POURCENT;
		}
	}
}
 800197a:	e021      	b.n	80019c0 <motor_set_speed+0xb8>
	else if (speed<rapport_cyclique){
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	da1d      	bge.n	80019c0 <motor_set_speed+0xb8>
		while(rapport_cyclique>speed){
 8001984:	e018      	b.n	80019b8 <motor_set_speed+0xb0>
			TIM1->CCR1=rapport_cyclique;
 8001986:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <motor_set_speed+0xc0>)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2=SPEED_MAX-rapport_cyclique;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f5c3 63d9 	rsb	r3, r3, #1736	; 0x6c8
 8001992:	3304      	adds	r3, #4
 8001994:	4a0c      	ldr	r2, [pc, #48]	; (80019c8 <motor_set_speed+0xc0>)
 8001996:	6393      	str	r3, [r2, #56]	; 0x38
			printf("rapport_cyclique : %d\r\n",rapport_cyclique);
 8001998:	68f9      	ldr	r1, [r7, #12]
 800199a:	480c      	ldr	r0, [pc, #48]	; (80019cc <motor_set_speed+0xc4>)
 800199c:	f007 fdc6 	bl	800952c <iprintf>
			HAL_TIM_PWM_Init(&htim1);
 80019a0:	480b      	ldr	r0, [pc, #44]	; (80019d0 <motor_set_speed+0xc8>)
 80019a2:	f003 fb64 	bl	800506e <HAL_TIM_PWM_Init>
			motor_start_PWM();
 80019a6:	f7ff ff99 	bl	80018dc <motor_start_PWM>
			HAL_Delay(DELAY_GRADATION);
 80019aa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80019ae:	f000 fb73 	bl	8002098 <HAL_Delay>
			rapport_cyclique=rapport_cyclique-GRADATION_UN_POURCENT;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3b11      	subs	r3, #17
 80019b6:	60fb      	str	r3, [r7, #12]
		while(rapport_cyclique>speed){
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	429a      	cmp	r2, r3
 80019be:	dce2      	bgt.n	8001986 <motor_set_speed+0x7e>
}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40012c00 	.word	0x40012c00
 80019cc:	0800bd84 	.word	0x0800bd84
 80019d0:	20000300 	.word	0x20000300
 80019d4:	00000000 	.word	0x00000000

080019d8 <motor_get_current>:

void motor_get_current(void){
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
	printf("motor_get_current_entered\r\n");
 80019de:	4822      	ldr	r0, [pc, #136]	; (8001a68 <motor_get_current+0x90>)
 80019e0:	f007 fe2a 	bl	8009638 <puts>
	int rapport_cyclique= TIM1->CCR1;
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <motor_get_current+0x94>)
 80019e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e8:	607b      	str	r3, [r7, #4]
	while((TIM1->CNT)<(rapport_cyclique/2)){
 80019ea:	bf00      	nop
 80019ec:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <motor_get_current+0x94>)
 80019ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	0fd9      	lsrs	r1, r3, #31
 80019f4:	440b      	add	r3, r1
 80019f6:	105b      	asrs	r3, r3, #1
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d3f7      	bcc.n	80019ec <motor_get_current+0x14>
	}
	HAL_ADC_Start(&hadc1);
 80019fc:	481c      	ldr	r0, [pc, #112]	; (8001a70 <motor_get_current+0x98>)
 80019fe:	f000 ff5f 	bl	80028c0 <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 100)==HAL_OK){
 8001a02:	2164      	movs	r1, #100	; 0x64
 8001a04:	481a      	ldr	r0, [pc, #104]	; (8001a70 <motor_get_current+0x98>)
 8001a06:	f001 f83f 	bl	8002a88 <HAL_ADC_PollForConversion>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d002      	beq.n	8001a16 <motor_get_current+0x3e>
		//printf("poll for conv bien passé\r\n");
	}
	else{
		printf("Echec poll for conversion\r\n");
 8001a10:	4818      	ldr	r0, [pc, #96]	; (8001a74 <motor_get_current+0x9c>)
 8001a12:	f007 fe11 	bl	8009638 <puts>
	}
	current=HAL_ADC_GetValue(&hadc1);
 8001a16:	4816      	ldr	r0, [pc, #88]	; (8001a70 <motor_get_current+0x98>)
 8001a18:	f001 f93c 	bl	8002c94 <HAL_ADC_GetValue>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <motor_get_current+0xa0>)
 8001a22:	701a      	strb	r2, [r3, #0]
	float real_current=(0.009*current);
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <motor_get_current+0xa0>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fdb3 	bl	8000594 <__aeabi_i2d>
 8001a2e:	a30c      	add	r3, pc, #48	; (adr r3, 8001a60 <motor_get_current+0x88>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe fe18 	bl	8000668 <__aeabi_dmul>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f8ea 	bl	8000c18 <__aeabi_d2f>
 8001a44:	4603      	mov	r3, r0
 8001a46:	603b      	str	r3, [r7, #0]
	printf("Current : %f \r\n",real_current);
 8001a48:	6838      	ldr	r0, [r7, #0]
 8001a4a:	f7fe fdb5 	bl	80005b8 <__aeabi_f2d>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	480a      	ldr	r0, [pc, #40]	; (8001a7c <motor_get_current+0xa4>)
 8001a54:	f007 fd6a 	bl	800952c <iprintf>
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	8d4fdf3b 	.word	0x8d4fdf3b
 8001a64:	3f826e97 	.word	0x3f826e97
 8001a68:	0800bd9c 	.word	0x0800bd9c
 8001a6c:	40012c00 	.word	0x40012c00
 8001a70:	20000294 	.word	0x20000294
 8001a74:	0800bdb8 	.word	0x0800bdb8
 8001a78:	20000470 	.word	0x20000470
 8001a7c:	0800bdd4 	.word	0x0800bdd4

08001a80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_MspInit+0x44>)
 8001a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <HAL_MspInit+0x44>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6613      	str	r3, [r2, #96]	; 0x60
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_MspInit+0x44>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_MspInit+0x44>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <HAL_MspInit+0x44>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_MspInit+0x44>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ab6:	f002 faf1 	bl	800409c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b09e      	sub	sp, #120	; 0x78
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	2254      	movs	r2, #84	; 0x54
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f007 f8ad 	bl	8008c48 <memset>
  if(hadc->Instance==ADC1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001af6:	d134      	bne.n	8001b62 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001af8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001afc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001afe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b02:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b04:	f107 0310 	add.w	r3, r7, #16
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f003 f80b 	bl	8004b24 <HAL_RCCEx_PeriphCLKConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001b14:	f7ff fea0 	bl	8001858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_ADC_MspInit+0xa4>)
 8001b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1c:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <HAL_ADC_MspInit+0xa4>)
 8001b1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <HAL_ADC_MspInit+0xa4>)
 8001b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_ADC_MspInit+0xa4>)
 8001b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b34:	4a0d      	ldr	r2, [pc, #52]	; (8001b6c <HAL_ADC_MspInit+0xa4>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_ADC_MspInit+0xa4>)
 8001b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5e:	f002 f847 	bl	8003bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b62:	bf00      	nop
 8001b64:	3778      	adds	r7, #120	; 0x78
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000

08001b70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_TIM_PWM_MspInit+0x38>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d10b      	bne.n	8001b9a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_TIM_PWM_MspInit+0x3c>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <HAL_TIM_PWM_MspInit+0x3c>)
 8001b88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <HAL_TIM_PWM_MspInit+0x3c>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40012c00 	.word	0x40012c00
 8001bac:	40021000 	.word	0x40021000

08001bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc0:	d113      	bne.n	8001bea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <HAL_TIM_Base_MspInit+0x44>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <HAL_TIM_Base_MspInit+0x44>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_TIM_Base_MspInit+0x44>)
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	201c      	movs	r0, #28
 8001be0:	f001 ff11 	bl	8003a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001be4:	201c      	movs	r0, #28
 8001be6:	f001 ff28 	bl	8003a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <HAL_TIM_MspPostInit+0x68>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d11d      	bne.n	8001c56 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_TIM_MspPostInit+0x6c>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	4a11      	ldr	r2, [pc, #68]	; (8001c64 <HAL_TIM_MspPostInit+0x6c>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_TIM_MspPostInit+0x6c>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001c32:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001c36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c44:	2306      	movs	r3, #6
 8001c46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c52:	f001 ffcd 	bl	8003bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c56:	bf00      	nop
 8001c58:	3720      	adds	r7, #32
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40012c00 	.word	0x40012c00
 8001c64:	40021000 	.word	0x40021000

08001c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b09e      	sub	sp, #120	; 0x78
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	2254      	movs	r2, #84	; 0x54
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f006 ffdd 	bl	8008c48 <memset>
  if(huart->Instance==USART2)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a23      	ldr	r2, [pc, #140]	; (8001d20 <HAL_UART_MspInit+0xb8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d13e      	bne.n	8001d16 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f002 ff3d 	bl	8004b24 <HAL_RCCEx_PeriphCLKConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cb0:	f7ff fdd2 	bl	8001858 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_UART_MspInit+0xbc>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	4a1a      	ldr	r2, [pc, #104]	; (8001d24 <HAL_UART_MspInit+0xbc>)
 8001cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbe:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_UART_MspInit+0xbc>)
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_UART_MspInit+0xbc>)
 8001cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <HAL_UART_MspInit+0xbc>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_UART_MspInit+0xbc>)
 8001cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ce4:	230c      	movs	r3, #12
 8001ce6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf4:	2307      	movs	r3, #7
 8001cf6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d02:	f001 ff75 	bl	8003bf0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2100      	movs	r1, #0
 8001d0a:	2026      	movs	r0, #38	; 0x26
 8001d0c:	f001 fe7b 	bl	8003a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d10:	2026      	movs	r0, #38	; 0x26
 8001d12:	f001 fe92 	bl	8003a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d16:	bf00      	nop
 8001d18:	3778      	adds	r7, #120	; 0x78
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40004400 	.word	0x40004400
 8001d24:	40021000 	.word	0x40021000

08001d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <NMI_Handler+0x4>

08001d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d32:	e7fe      	b.n	8001d32 <HardFault_Handler+0x4>

08001d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <MemManage_Handler+0x4>

08001d3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <BusFault_Handler+0x4>

08001d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <UsageFault_Handler+0x4>

08001d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d74:	f000 f972 	bl	800205c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <TIM2_IRQHandler+0x10>)
 8001d82:	f003 fb79 	bl	8005478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000034c 	.word	0x2000034c

08001d90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <USART2_IRQHandler+0x10>)
 8001d96:	f004 ffef 	bl	8006d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000398 	.word	0x20000398

08001da4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001da8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001dac:	f002 f8ba 	bl	8003f24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
	return 1;
 8001db8:	2301      	movs	r3, #1
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <_kill>:

int _kill(int pid, int sig)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dce:	f006 ff11 	bl	8008bf4 <__errno>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2216      	movs	r2, #22
 8001dd6:	601a      	str	r2, [r3, #0]
	return -1;
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_exit>:

void _exit (int status)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dec:	f04f 31ff 	mov.w	r1, #4294967295
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ffe7 	bl	8001dc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001df6:	e7fe      	b.n	8001df6 <_exit+0x12>

08001df8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	e00a      	b.n	8001e20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e0a:	f3af 8000 	nop.w
 8001e0e:	4601      	mov	r1, r0
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	60ba      	str	r2, [r7, #8]
 8001e16:	b2ca      	uxtb	r2, r1
 8001e18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbf0      	blt.n	8001e0a <_read+0x12>
	}

return len;
 8001e28:	687b      	ldr	r3, [r7, #4]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e009      	b.n	8001e58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	60ba      	str	r2, [r7, #8]
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fcf1 	bl	8001834 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	dbf1      	blt.n	8001e44 <_write+0x12>
	}
	return len;
 8001e60:	687b      	ldr	r3, [r7, #4]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_close>:

int _close(int file)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
	return -1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e92:	605a      	str	r2, [r3, #4]
	return 0;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <_isatty>:

int _isatty(int file)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
	return 1;
 8001eaa:	2301      	movs	r3, #1
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001edc:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <_sbrk+0x5c>)
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <_sbrk+0x60>)
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <_sbrk+0x64>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d102      	bne.n	8001ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <_sbrk+0x64>)
 8001ef2:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <_sbrk+0x68>)
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d207      	bcs.n	8001f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f04:	f006 fe76 	bl	8008bf4 <__errno>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f12:	e009      	b.n	8001f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <_sbrk+0x64>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <_sbrk+0x64>)
 8001f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f26:	68fb      	ldr	r3, [r7, #12]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20020000 	.word	0x20020000
 8001f34:	00000400 	.word	0x00000400
 8001f38:	20000474 	.word	0x20000474
 8001f3c:	20000490 	.word	0x20000490

08001f40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <SystemInit+0x20>)
 8001f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4a:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <SystemInit+0x20>)
 8001f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f64:	480d      	ldr	r0, [pc, #52]	; (8001f9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f68:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f6a:	490e      	ldr	r1, [pc, #56]	; (8001fa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f6c:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <LoopForever+0xe>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7e:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f80:	4c0b      	ldr	r4, [pc, #44]	; (8001fb0 <LoopForever+0x16>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f8e:	f7ff ffd7 	bl	8001f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f92:	f006 fe35 	bl	8008c00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f96:	f7ff f811 	bl	8000fbc <main>

08001f9a <LoopForever>:

LoopForever:
    b LoopForever
 8001f9a:	e7fe      	b.n	8001f9a <LoopForever>
  ldr   r0, =_estack
 8001f9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa4:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8001fa8:	0800c3f0 	.word	0x0800c3f0
  ldr r2, =_sbss
 8001fac:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8001fb0:	2000048c 	.word	0x2000048c

08001fb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fb4:	e7fe      	b.n	8001fb4 <ADC1_2_IRQHandler>

08001fb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc0:	2003      	movs	r0, #3
 8001fc2:	f001 fd15 	bl	80039f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f000 f80e 	bl	8001fe8 <HAL_InitTick>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	71fb      	strb	r3, [r7, #7]
 8001fd6:	e001      	b.n	8001fdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fd8:	f7ff fd52 	bl	8001a80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fdc:	79fb      	ldrb	r3, [r7, #7]

}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ff4:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_InitTick+0x68>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d022      	beq.n	8002042 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ffc:	4b15      	ldr	r3, [pc, #84]	; (8002054 <HAL_InitTick+0x6c>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_InitTick+0x68>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002008:	fbb1 f3f3 	udiv	r3, r1, r3
 800200c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002010:	4618      	mov	r0, r3
 8002012:	f001 fd20 	bl	8003a56 <HAL_SYSTICK_Config>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10f      	bne.n	800203c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b0f      	cmp	r3, #15
 8002020:	d809      	bhi.n	8002036 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002022:	2200      	movs	r2, #0
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	f04f 30ff 	mov.w	r0, #4294967295
 800202a:	f001 fcec 	bl	8003a06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <HAL_InitTick+0x70>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	e007      	b.n	8002046 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	73fb      	strb	r3, [r7, #15]
 800203a:	e004      	b.n	8002046 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	e001      	b.n	8002046 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002046:	7bfb      	ldrb	r3, [r7, #15]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	200000a4 	.word	0x200000a4
 8002054:	2000009c 	.word	0x2000009c
 8002058:	200000a0 	.word	0x200000a0

0800205c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_IncTick+0x1c>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_IncTick+0x20>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4413      	add	r3, r2
 800206a:	4a03      	ldr	r2, [pc, #12]	; (8002078 <HAL_IncTick+0x1c>)
 800206c:	6013      	str	r3, [r2, #0]
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	20000478 	.word	0x20000478
 800207c:	200000a4 	.word	0x200000a4

08002080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return uwTick;
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <HAL_GetTick+0x14>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000478 	.word	0x20000478

08002098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a0:	f7ff ffee 	bl	8002080 <HAL_GetTick>
 80020a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b0:	d004      	beq.n	80020bc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_Delay+0x40>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4413      	add	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020bc:	bf00      	nop
 80020be:	f7ff ffdf 	bl	8002080 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d8f7      	bhi.n	80020be <HAL_Delay+0x26>
  {
  }
}
 80020ce:	bf00      	nop
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200000a4 	.word	0x200000a4

080020dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	609a      	str	r2, [r3, #8]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	609a      	str	r2, [r3, #8]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3360      	adds	r3, #96	; 0x60
 8002156:	461a      	mov	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <LL_ADC_SetOffset+0x44>)
 8002166:	4013      	ands	r3, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	4313      	orrs	r3, r2
 8002174:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800217c:	bf00      	nop
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	03fff000 	.word	0x03fff000

0800218c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3360      	adds	r3, #96	; 0x60
 800219a:	461a      	mov	r2, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3360      	adds	r3, #96	; 0x60
 80021c8:	461a      	mov	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	431a      	orrs	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021e2:	bf00      	nop
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b087      	sub	sp, #28
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3360      	adds	r3, #96	; 0x60
 80021fe:	461a      	mov	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	431a      	orrs	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002218:	bf00      	nop
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3360      	adds	r3, #96	; 0x60
 8002234:	461a      	mov	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	431a      	orrs	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800224e:	bf00      	nop
 8002250:	371c      	adds	r7, #28
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	615a      	str	r2, [r3, #20]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b087      	sub	sp, #28
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3330      	adds	r3, #48	; 0x30
 80022b6:	461a      	mov	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	4413      	add	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	211f      	movs	r1, #31
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	401a      	ands	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	f003 011f 	and.w	r1, r3, #31
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	431a      	orrs	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022f2:	bf00      	nop
 80022f4:	371c      	adds	r7, #28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022fe:	b480      	push	{r7}
 8002300:	b087      	sub	sp, #28
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	3314      	adds	r3, #20
 800230e:	461a      	mov	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	0e5b      	lsrs	r3, r3, #25
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	4413      	add	r3, r2
 800231c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	0d1b      	lsrs	r3, r3, #20
 8002326:	f003 031f 	and.w	r3, r3, #31
 800232a:	2107      	movs	r1, #7
 800232c:	fa01 f303 	lsl.w	r3, r1, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	401a      	ands	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	0d1b      	lsrs	r3, r3, #20
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	431a      	orrs	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002348:	bf00      	nop
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a0f      	ldr	r2, [pc, #60]	; (80023a0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d10a      	bne.n	800237e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002374:	431a      	orrs	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800237c:	e00a      	b.n	8002394 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238a:	43db      	mvns	r3, r3
 800238c:	401a      	ands	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	407f0000 	.word	0x407f0000

080023a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 031f 	and.w	r3, r3, #31
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80023ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6093      	str	r3, [r2, #8]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002414:	d101      	bne.n	800241a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002438:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800243c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002460:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002464:	d101      	bne.n	800246a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002488:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <LL_ADC_IsEnabled+0x18>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <LL_ADC_IsEnabled+0x1a>
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024da:	f043 0204 	orr.w	r2, r3, #4
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d101      	bne.n	8002506 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b08      	cmp	r3, #8
 8002526:	d101      	bne.n	800252c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002548:	2300      	movs	r3, #0
 800254a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e1af      	b.n	80028b6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	2b00      	cmp	r3, #0
 8002562:	d109      	bne.n	8002578 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff faaf 	bl	8001ac8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff3f 	bl	8002400 <LL_ADC_IsDeepPowerDownEnabled>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d004      	beq.n	8002592 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff25 	bl	80023dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff ff5a 	bl	8002450 <LL_ADC_IsInternalRegulatorEnabled>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d115      	bne.n	80025ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff ff3e 	bl	8002428 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025ac:	4b9f      	ldr	r3, [pc, #636]	; (800282c <HAL_ADC_Init+0x2f0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	099b      	lsrs	r3, r3, #6
 80025b2:	4a9f      	ldr	r2, [pc, #636]	; (8002830 <HAL_ADC_Init+0x2f4>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	3301      	adds	r3, #1
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025c0:	e002      	b.n	80025c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	3b01      	subs	r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f9      	bne.n	80025c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff ff3c 	bl	8002450 <LL_ADC_IsInternalRegulatorEnabled>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10d      	bne.n	80025fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e2:	f043 0210 	orr.w	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ee:	f043 0201 	orr.w	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ff75 	bl	80024ee <LL_ADC_REG_IsConversionOngoing>
 8002604:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b00      	cmp	r3, #0
 8002610:	f040 8148 	bne.w	80028a4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 8144 	bne.w	80028a4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002620:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002624:	f043 0202 	orr.w	r2, r3, #2
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff35 	bl	80024a0 <LL_ADC_IsEnabled>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d141      	bne.n	80026c0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002644:	d004      	beq.n	8002650 <HAL_ADC_Init+0x114>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a7a      	ldr	r2, [pc, #488]	; (8002834 <HAL_ADC_Init+0x2f8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d10f      	bne.n	8002670 <HAL_ADC_Init+0x134>
 8002650:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002654:	f7ff ff24 	bl	80024a0 <LL_ADC_IsEnabled>
 8002658:	4604      	mov	r4, r0
 800265a:	4876      	ldr	r0, [pc, #472]	; (8002834 <HAL_ADC_Init+0x2f8>)
 800265c:	f7ff ff20 	bl	80024a0 <LL_ADC_IsEnabled>
 8002660:	4603      	mov	r3, r0
 8002662:	4323      	orrs	r3, r4
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf0c      	ite	eq
 8002668:	2301      	moveq	r3, #1
 800266a:	2300      	movne	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e012      	b.n	8002696 <HAL_ADC_Init+0x15a>
 8002670:	4871      	ldr	r0, [pc, #452]	; (8002838 <HAL_ADC_Init+0x2fc>)
 8002672:	f7ff ff15 	bl	80024a0 <LL_ADC_IsEnabled>
 8002676:	4604      	mov	r4, r0
 8002678:	4870      	ldr	r0, [pc, #448]	; (800283c <HAL_ADC_Init+0x300>)
 800267a:	f7ff ff11 	bl	80024a0 <LL_ADC_IsEnabled>
 800267e:	4603      	mov	r3, r0
 8002680:	431c      	orrs	r4, r3
 8002682:	486f      	ldr	r0, [pc, #444]	; (8002840 <HAL_ADC_Init+0x304>)
 8002684:	f7ff ff0c 	bl	80024a0 <LL_ADC_IsEnabled>
 8002688:	4603      	mov	r3, r0
 800268a:	4323      	orrs	r3, r4
 800268c:	2b00      	cmp	r3, #0
 800268e:	bf0c      	ite	eq
 8002690:	2301      	moveq	r3, #1
 8002692:	2300      	movne	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d012      	beq.n	80026c0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026a2:	d004      	beq.n	80026ae <HAL_ADC_Init+0x172>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a62      	ldr	r2, [pc, #392]	; (8002834 <HAL_ADC_Init+0x2f8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_Init+0x176>
 80026ae:	4a65      	ldr	r2, [pc, #404]	; (8002844 <HAL_ADC_Init+0x308>)
 80026b0:	e000      	b.n	80026b4 <HAL_ADC_Init+0x178>
 80026b2:	4a65      	ldr	r2, [pc, #404]	; (8002848 <HAL_ADC_Init+0x30c>)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4619      	mov	r1, r3
 80026ba:	4610      	mov	r0, r2
 80026bc:	f7ff fd0e 	bl	80020dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7f5b      	ldrb	r3, [r3, #29]
 80026c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80026d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80026d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d106      	bne.n	80026fc <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	3b01      	subs	r3, #1
 80026f4:	045b      	lsls	r3, r3, #17
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	2b00      	cmp	r3, #0
 8002702:	d009      	beq.n	8002718 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	4b4b      	ldr	r3, [pc, #300]	; (800284c <HAL_ADC_Init+0x310>)
 8002720:	4013      	ands	r3, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	69b9      	ldr	r1, [r7, #24]
 8002728:	430b      	orrs	r3, r1
 800272a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fed1 	bl	80024ee <LL_ADC_REG_IsConversionOngoing>
 800274c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fede 	bl	8002514 <LL_ADC_INJ_IsConversionOngoing>
 8002758:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d17f      	bne.n	8002860 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d17c      	bne.n	8002860 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800276a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002772:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002782:	f023 0302 	bic.w	r3, r3, #2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	69b9      	ldr	r1, [r7, #24]
 800278c:	430b      	orrs	r3, r1
 800278e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d017      	beq.n	80027c8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6911      	ldr	r1, [r2, #16]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80027c6:	e013      	b.n	80027f0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027ec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d12a      	bne.n	8002850 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002804:	f023 0304 	bic.w	r3, r3, #4
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002810:	4311      	orrs	r1, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002816:	4311      	orrs	r1, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800281c:	430a      	orrs	r2, r1
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	611a      	str	r2, [r3, #16]
 800282a:	e019      	b.n	8002860 <HAL_ADC_Init+0x324>
 800282c:	2000009c 	.word	0x2000009c
 8002830:	053e2d63 	.word	0x053e2d63
 8002834:	50000100 	.word	0x50000100
 8002838:	50000400 	.word	0x50000400
 800283c:	50000500 	.word	0x50000500
 8002840:	50000600 	.word	0x50000600
 8002844:	50000300 	.word	0x50000300
 8002848:	50000700 	.word	0x50000700
 800284c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d10c      	bne.n	8002882 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f023 010f 	bic.w	r1, r3, #15
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	1e5a      	subs	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
 8002880:	e007      	b.n	8002892 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 020f 	bic.w	r2, r2, #15
 8002890:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	f043 0201 	orr.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80028a2:	e007      	b.n	80028b4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a8:	f043 0210 	orr.w	r2, r3, #16
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3724      	adds	r7, #36	; 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd90      	pop	{r4, r7, pc}
 80028be:	bf00      	nop

080028c0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028d0:	d004      	beq.n	80028dc <HAL_ADC_Start+0x1c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a67      	ldr	r2, [pc, #412]	; (8002a74 <HAL_ADC_Start+0x1b4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_Start+0x20>
 80028dc:	4b66      	ldr	r3, [pc, #408]	; (8002a78 <HAL_ADC_Start+0x1b8>)
 80028de:	e000      	b.n	80028e2 <HAL_ADC_Start+0x22>
 80028e0:	4b66      	ldr	r3, [pc, #408]	; (8002a7c <HAL_ADC_Start+0x1bc>)
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fd5e 	bl	80023a4 <LL_ADC_GetMultimode>
 80028e8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fdfd 	bl	80024ee <LL_ADC_REG_IsConversionOngoing>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 80b4 	bne.w	8002a64 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_ADC_Start+0x4a>
 8002906:	2302      	movs	r3, #2
 8002908:	e0af      	b.n	8002a6a <HAL_ADC_Start+0x1aa>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fe0c 	bl	8003530 <ADC_Enable>
 8002918:	4603      	mov	r3, r0
 800291a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800291c:	7dfb      	ldrb	r3, [r7, #23]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f040 809b 	bne.w	8002a5a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002928:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a4d      	ldr	r2, [pc, #308]	; (8002a74 <HAL_ADC_Start+0x1b4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d009      	beq.n	8002956 <HAL_ADC_Start+0x96>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a4e      	ldr	r2, [pc, #312]	; (8002a80 <HAL_ADC_Start+0x1c0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d002      	beq.n	8002952 <HAL_ADC_Start+0x92>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	e003      	b.n	800295a <HAL_ADC_Start+0x9a>
 8002952:	4b4c      	ldr	r3, [pc, #304]	; (8002a84 <HAL_ADC_Start+0x1c4>)
 8002954:	e001      	b.n	800295a <HAL_ADC_Start+0x9a>
 8002956:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	4293      	cmp	r3, r2
 8002960:	d002      	beq.n	8002968 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800297c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002980:	d106      	bne.n	8002990 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002986:	f023 0206 	bic.w	r2, r3, #6
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	661a      	str	r2, [r3, #96]	; 0x60
 800298e:	e002      	b.n	8002996 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	221c      	movs	r2, #28
 800299c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a32      	ldr	r2, [pc, #200]	; (8002a74 <HAL_ADC_Start+0x1b4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d009      	beq.n	80029c4 <HAL_ADC_Start+0x104>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a32      	ldr	r2, [pc, #200]	; (8002a80 <HAL_ADC_Start+0x1c0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d002      	beq.n	80029c0 <HAL_ADC_Start+0x100>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	e003      	b.n	80029c8 <HAL_ADC_Start+0x108>
 80029c0:	4b30      	ldr	r3, [pc, #192]	; (8002a84 <HAL_ADC_Start+0x1c4>)
 80029c2:	e001      	b.n	80029c8 <HAL_ADC_Start+0x108>
 80029c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d008      	beq.n	80029e2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b05      	cmp	r3, #5
 80029da:	d002      	beq.n	80029e2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b09      	cmp	r3, #9
 80029e0:	d114      	bne.n	8002a0c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d007      	beq.n	8002a00 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fd5e 	bl	80024c6 <LL_ADC_REG_StartConversion>
 8002a0a:	e02d      	b.n	8002a68 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a10:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <HAL_ADC_Start+0x1b4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d009      	beq.n	8002a36 <HAL_ADC_Start+0x176>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a16      	ldr	r2, [pc, #88]	; (8002a80 <HAL_ADC_Start+0x1c0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d002      	beq.n	8002a32 <HAL_ADC_Start+0x172>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	e003      	b.n	8002a3a <HAL_ADC_Start+0x17a>
 8002a32:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <HAL_ADC_Start+0x1c4>)
 8002a34:	e001      	b.n	8002a3a <HAL_ADC_Start+0x17a>
 8002a36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a3a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00f      	beq.n	8002a68 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a58:	e006      	b.n	8002a68 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002a62:	e001      	b.n	8002a68 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a64:	2302      	movs	r3, #2
 8002a66:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	50000100 	.word	0x50000100
 8002a78:	50000300 	.word	0x50000300
 8002a7c:	50000700 	.word	0x50000700
 8002a80:	50000500 	.word	0x50000500
 8002a84:	50000400 	.word	0x50000400

08002a88 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a9a:	d004      	beq.n	8002aa6 <HAL_ADC_PollForConversion+0x1e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a77      	ldr	r2, [pc, #476]	; (8002c80 <HAL_ADC_PollForConversion+0x1f8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d101      	bne.n	8002aaa <HAL_ADC_PollForConversion+0x22>
 8002aa6:	4b77      	ldr	r3, [pc, #476]	; (8002c84 <HAL_ADC_PollForConversion+0x1fc>)
 8002aa8:	e000      	b.n	8002aac <HAL_ADC_PollForConversion+0x24>
 8002aaa:	4b77      	ldr	r3, [pc, #476]	; (8002c88 <HAL_ADC_PollForConversion+0x200>)
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fc79 	bl	80023a4 <LL_ADC_GetMultimode>
 8002ab2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d102      	bne.n	8002ac2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002abc:	2308      	movs	r3, #8
 8002abe:	61fb      	str	r3, [r7, #28]
 8002ac0:	e037      	b.n	8002b32 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2b05      	cmp	r3, #5
 8002acc:	d002      	beq.n	8002ad4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b09      	cmp	r3, #9
 8002ad2:	d111      	bne.n	8002af8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d007      	beq.n	8002af2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	f043 0220 	orr.w	r2, r3, #32
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e0c1      	b.n	8002c76 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002af2:	2304      	movs	r3, #4
 8002af4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002af6:	e01c      	b.n	8002b32 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b00:	d004      	beq.n	8002b0c <HAL_ADC_PollForConversion+0x84>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a5e      	ldr	r2, [pc, #376]	; (8002c80 <HAL_ADC_PollForConversion+0x1f8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d101      	bne.n	8002b10 <HAL_ADC_PollForConversion+0x88>
 8002b0c:	4b5d      	ldr	r3, [pc, #372]	; (8002c84 <HAL_ADC_PollForConversion+0x1fc>)
 8002b0e:	e000      	b.n	8002b12 <HAL_ADC_PollForConversion+0x8a>
 8002b10:	4b5d      	ldr	r3, [pc, #372]	; (8002c88 <HAL_ADC_PollForConversion+0x200>)
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fc54 	bl	80023c0 <LL_ADC_GetMultiDMATransfer>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b22:	f043 0220 	orr.w	r2, r3, #32
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e0a3      	b.n	8002c76 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b2e:	2304      	movs	r3, #4
 8002b30:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b32:	f7ff faa5 	bl	8002080 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b38:	e021      	b.n	8002b7e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b40:	d01d      	beq.n	8002b7e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b42:	f7ff fa9d 	bl	8002080 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d302      	bcc.n	8002b58 <HAL_ADC_PollForConversion+0xd0>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d112      	bne.n	8002b7e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10b      	bne.n	8002b7e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6a:	f043 0204 	orr.w	r2, r3, #4
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e07b      	b.n	8002c76 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0d6      	beq.n	8002b3a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fb6f 	bl	8002280 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d01c      	beq.n	8002be2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7f5b      	ldrb	r3, [r3, #29]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d118      	bne.n	8002be2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d111      	bne.n	8002be2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d105      	bne.n	8002be2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a26      	ldr	r2, [pc, #152]	; (8002c80 <HAL_ADC_PollForConversion+0x1f8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d009      	beq.n	8002c00 <HAL_ADC_PollForConversion+0x178>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a26      	ldr	r2, [pc, #152]	; (8002c8c <HAL_ADC_PollForConversion+0x204>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d002      	beq.n	8002bfc <HAL_ADC_PollForConversion+0x174>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	e003      	b.n	8002c04 <HAL_ADC_PollForConversion+0x17c>
 8002bfc:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <HAL_ADC_PollForConversion+0x208>)
 8002bfe:	e001      	b.n	8002c04 <HAL_ADC_PollForConversion+0x17c>
 8002c00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d008      	beq.n	8002c1e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d002      	beq.n	8002c1e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2b09      	cmp	r3, #9
 8002c1c:	d104      	bne.n	8002c28 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	e014      	b.n	8002c52 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <HAL_ADC_PollForConversion+0x1f8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d009      	beq.n	8002c46 <HAL_ADC_PollForConversion+0x1be>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a15      	ldr	r2, [pc, #84]	; (8002c8c <HAL_ADC_PollForConversion+0x204>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d002      	beq.n	8002c42 <HAL_ADC_PollForConversion+0x1ba>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	e003      	b.n	8002c4a <HAL_ADC_PollForConversion+0x1c2>
 8002c42:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <HAL_ADC_PollForConversion+0x208>)
 8002c44:	e001      	b.n	8002c4a <HAL_ADC_PollForConversion+0x1c2>
 8002c46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c4a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d104      	bne.n	8002c62 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	e008      	b.n	8002c74 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d103      	bne.n	8002c74 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	220c      	movs	r2, #12
 8002c72:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	50000100 	.word	0x50000100
 8002c84:	50000300 	.word	0x50000300
 8002c88:	50000700 	.word	0x50000700
 8002c8c:	50000500 	.word	0x50000500
 8002c90:	50000400 	.word	0x50000400

08002c94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b0b6      	sub	sp, #216	; 0xd8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d102      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x24>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	f000 bc13 	b.w	80034fa <HAL_ADC_ConfigChannel+0x84a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fc04 	bl	80024ee <LL_ADC_REG_IsConversionOngoing>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f040 83f3 	bne.w	80034d4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f7ff fad3 	bl	80022a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fbf2 	bl	80024ee <LL_ADC_REG_IsConversionOngoing>
 8002d0a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fbfe 	bl	8002514 <LL_ADC_INJ_IsConversionOngoing>
 8002d18:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f040 81d9 	bne.w	80030d8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 81d4 	bne.w	80030d8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d38:	d10f      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2200      	movs	r2, #0
 8002d44:	4619      	mov	r1, r3
 8002d46:	f7ff fada 	bl	80022fe <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fa81 	bl	800225a <LL_ADC_SetSamplingTimeCommonConfig>
 8002d58:	e00e      	b.n	8002d78 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	461a      	mov	r2, r3
 8002d68:	f7ff fac9 	bl	80022fe <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2100      	movs	r1, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fa71 	bl	800225a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	08db      	lsrs	r3, r3, #3
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d022      	beq.n	8002de0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6919      	ldr	r1, [r3, #16]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002daa:	f7ff f9cb 	bl	8002144 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6919      	ldr	r1, [r3, #16]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f7ff fa17 	bl	80021ee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6919      	ldr	r1, [r3, #16]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	7f1b      	ldrb	r3, [r3, #28]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d102      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x126>
 8002dd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd4:	e000      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x128>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f7ff fa23 	bl	8002224 <LL_ADC_SetOffsetSaturation>
 8002dde:	e17b      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff f9d0 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x15c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff f9c5 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002e02:	4603      	mov	r3, r0
 8002e04:	0e9b      	lsrs	r3, r3, #26
 8002e06:	f003 021f 	and.w	r2, r3, #31
 8002e0a:	e01e      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x19a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2100      	movs	r1, #0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff f9ba 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002e3a:	2320      	movs	r3, #32
 8002e3c:	e004      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002e3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d105      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x1b2>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	0e9b      	lsrs	r3, r3, #26
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	e018      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x1e4>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002e86:	2320      	movs	r3, #32
 8002e88:	e004      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002e8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d106      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff f989 	bl	80021b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2101      	movs	r1, #1
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff f96d 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10a      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x222>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff f962 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	0e9b      	lsrs	r3, r3, #26
 8002ecc:	f003 021f 	and.w	r2, r3, #31
 8002ed0:	e01e      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x260>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff f957 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002ef0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ef8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002f00:	2320      	movs	r3, #32
 8002f02:	e004      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002f04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x278>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0e9b      	lsrs	r3, r3, #26
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	e018      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x2aa>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002f3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002f4c:	2320      	movs	r3, #32
 8002f4e:	e004      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f54:	fab3 f383 	clz	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d106      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2200      	movs	r2, #0
 8002f64:	2101      	movs	r1, #1
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff f926 	bl	80021b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2102      	movs	r1, #2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff f90a 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10a      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x2e8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2102      	movs	r1, #2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff f8ff 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	0e9b      	lsrs	r3, r3, #26
 8002f92:	f003 021f 	and.w	r2, r3, #31
 8002f96:	e01e      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x326>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff f8f4 	bl	800218c <LL_ADC_GetOffsetChannel>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002fbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002fc6:	2320      	movs	r3, #32
 8002fc8:	e004      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002fca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x33e>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	0e9b      	lsrs	r3, r3, #26
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	e016      	b.n	800301c <HAL_ADC_ConfigChannel+0x36c>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003000:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003002:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003006:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800300e:	2320      	movs	r3, #32
 8003010:	e004      	b.n	800301c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003012:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800301c:	429a      	cmp	r2, r3
 800301e:	d106      	bne.n	800302e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2200      	movs	r2, #0
 8003026:	2102      	movs	r1, #2
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff f8c5 	bl	80021b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2103      	movs	r1, #3
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff f8a9 	bl	800218c <LL_ADC_GetOffsetChannel>
 800303a:	4603      	mov	r3, r0
 800303c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <HAL_ADC_ConfigChannel+0x3aa>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2103      	movs	r1, #3
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff f89e 	bl	800218c <LL_ADC_GetOffsetChannel>
 8003050:	4603      	mov	r3, r0
 8003052:	0e9b      	lsrs	r3, r3, #26
 8003054:	f003 021f 	and.w	r2, r3, #31
 8003058:	e017      	b.n	800308a <HAL_ADC_ConfigChannel+0x3da>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2103      	movs	r1, #3
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff f893 	bl	800218c <LL_ADC_GetOffsetChannel>
 8003066:	4603      	mov	r3, r0
 8003068:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003074:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800307c:	2320      	movs	r3, #32
 800307e:	e003      	b.n	8003088 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003092:	2b00      	cmp	r3, #0
 8003094:	d105      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x3f2>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	0e9b      	lsrs	r3, r3, #26
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	e011      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x416>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80030b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80030b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80030ba:	2320      	movs	r3, #32
 80030bc:	e003      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80030be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d106      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2200      	movs	r2, #0
 80030d0:	2103      	movs	r1, #3
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff f870 	bl	80021b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff f9df 	bl	80024a0 <LL_ADC_IsEnabled>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f040 813d 	bne.w	8003364 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6819      	ldr	r1, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f7ff f92c 	bl	8002354 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4aa2      	ldr	r2, [pc, #648]	; (800338c <HAL_ADC_ConfigChannel+0x6dc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	f040 812e 	bne.w	8003364 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10b      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x480>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	0e9b      	lsrs	r3, r3, #26
 800311e:	3301      	adds	r3, #1
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	2b09      	cmp	r3, #9
 8003126:	bf94      	ite	ls
 8003128:	2301      	movls	r3, #1
 800312a:	2300      	movhi	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e019      	b.n	8003164 <HAL_ADC_ConfigChannel+0x4b4>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800313e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003140:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003148:	2320      	movs	r3, #32
 800314a:	e003      	b.n	8003154 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800314c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	3301      	adds	r3, #1
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	2b09      	cmp	r3, #9
 800315c:	bf94      	ite	ls
 800315e:	2301      	movls	r3, #1
 8003160:	2300      	movhi	r3, #0
 8003162:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003164:	2b00      	cmp	r3, #0
 8003166:	d079      	beq.n	800325c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003170:	2b00      	cmp	r3, #0
 8003172:	d107      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x4d4>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	3301      	adds	r3, #1
 800317c:	069b      	lsls	r3, r3, #26
 800317e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003182:	e015      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x500>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003194:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800319c:	2320      	movs	r3, #32
 800319e:	e003      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80031a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	3301      	adds	r3, #1
 80031aa:	069b      	lsls	r3, r3, #26
 80031ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d109      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x520>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	0e9b      	lsrs	r3, r3, #26
 80031c2:	3301      	adds	r3, #1
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	2101      	movs	r1, #1
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	e017      	b.n	8003200 <HAL_ADC_ConfigChannel+0x550>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80031de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80031e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80031e8:	2320      	movs	r3, #32
 80031ea:	e003      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80031ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	2101      	movs	r1, #1
 80031fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003200:	ea42 0103 	orr.w	r1, r2, r3
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x576>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	0e9b      	lsrs	r3, r3, #26
 8003216:	3301      	adds	r3, #1
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	4613      	mov	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	4413      	add	r3, r2
 8003222:	051b      	lsls	r3, r3, #20
 8003224:	e018      	b.n	8003258 <HAL_ADC_ConfigChannel+0x5a8>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003236:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800323e:	2320      	movs	r3, #32
 8003240:	e003      	b.n	800324a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f003 021f 	and.w	r2, r3, #31
 8003250:	4613      	mov	r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4413      	add	r3, r2
 8003256:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003258:	430b      	orrs	r3, r1
 800325a:	e07e      	b.n	800335a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003264:	2b00      	cmp	r3, #0
 8003266:	d107      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x5c8>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	0e9b      	lsrs	r3, r3, #26
 800326e:	3301      	adds	r3, #1
 8003270:	069b      	lsls	r3, r3, #26
 8003272:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003276:	e015      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x5f4>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003290:	2320      	movs	r3, #32
 8003292:	e003      	b.n	800329c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	3301      	adds	r3, #1
 800329e:	069b      	lsls	r3, r3, #26
 80032a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d109      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x614>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	0e9b      	lsrs	r3, r3, #26
 80032b6:	3301      	adds	r3, #1
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	2101      	movs	r1, #1
 80032be:	fa01 f303 	lsl.w	r3, r1, r3
 80032c2:	e017      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x644>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	61fb      	str	r3, [r7, #28]
  return result;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80032dc:	2320      	movs	r3, #32
 80032de:	e003      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	3301      	adds	r3, #1
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	2101      	movs	r1, #1
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	ea42 0103 	orr.w	r1, r2, r3
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10d      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x670>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	0e9b      	lsrs	r3, r3, #26
 800330a:	3301      	adds	r3, #1
 800330c:	f003 021f 	and.w	r2, r3, #31
 8003310:	4613      	mov	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4413      	add	r3, r2
 8003316:	3b1e      	subs	r3, #30
 8003318:	051b      	lsls	r3, r3, #20
 800331a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800331e:	e01b      	b.n	8003358 <HAL_ADC_ConfigChannel+0x6a8>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	613b      	str	r3, [r7, #16]
  return result;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003338:	2320      	movs	r3, #32
 800333a:	e003      	b.n	8003344 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	3301      	adds	r3, #1
 8003346:	f003 021f 	and.w	r2, r3, #31
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	3b1e      	subs	r3, #30
 8003352:	051b      	lsls	r3, r3, #20
 8003354:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003358:	430b      	orrs	r3, r1
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	6892      	ldr	r2, [r2, #8]
 800335e:	4619      	mov	r1, r3
 8003360:	f7fe ffcd 	bl	80022fe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <HAL_ADC_ConfigChannel+0x6e0>)
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80be 	beq.w	80034ee <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800337a:	d004      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x6d6>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a04      	ldr	r2, [pc, #16]	; (8003394 <HAL_ADC_ConfigChannel+0x6e4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d10a      	bne.n	800339c <HAL_ADC_ConfigChannel+0x6ec>
 8003386:	4b04      	ldr	r3, [pc, #16]	; (8003398 <HAL_ADC_ConfigChannel+0x6e8>)
 8003388:	e009      	b.n	800339e <HAL_ADC_ConfigChannel+0x6ee>
 800338a:	bf00      	nop
 800338c:	407f0000 	.word	0x407f0000
 8003390:	80080000 	.word	0x80080000
 8003394:	50000100 	.word	0x50000100
 8003398:	50000300 	.word	0x50000300
 800339c:	4b59      	ldr	r3, [pc, #356]	; (8003504 <HAL_ADC_ConfigChannel+0x854>)
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fec2 	bl	8002128 <LL_ADC_GetCommonPathInternalCh>
 80033a4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a56      	ldr	r2, [pc, #344]	; (8003508 <HAL_ADC_ConfigChannel+0x858>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d004      	beq.n	80033bc <HAL_ADC_ConfigChannel+0x70c>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a55      	ldr	r2, [pc, #340]	; (800350c <HAL_ADC_ConfigChannel+0x85c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d13a      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d134      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033d0:	d005      	beq.n	80033de <HAL_ADC_ConfigChannel+0x72e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a4e      	ldr	r2, [pc, #312]	; (8003510 <HAL_ADC_ConfigChannel+0x860>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	f040 8085 	bne.w	80034e8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033e6:	d004      	beq.n	80033f2 <HAL_ADC_ConfigChannel+0x742>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a49      	ldr	r2, [pc, #292]	; (8003514 <HAL_ADC_ConfigChannel+0x864>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x746>
 80033f2:	4a49      	ldr	r2, [pc, #292]	; (8003518 <HAL_ADC_ConfigChannel+0x868>)
 80033f4:	e000      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x748>
 80033f6:	4a43      	ldr	r2, [pc, #268]	; (8003504 <HAL_ADC_ConfigChannel+0x854>)
 80033f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f7fe fe7d 	bl	8002102 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003408:	4b44      	ldr	r3, [pc, #272]	; (800351c <HAL_ADC_ConfigChannel+0x86c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	099b      	lsrs	r3, r3, #6
 800340e:	4a44      	ldr	r2, [pc, #272]	; (8003520 <HAL_ADC_ConfigChannel+0x870>)
 8003410:	fba2 2303 	umull	r2, r3, r2, r3
 8003414:	099b      	lsrs	r3, r3, #6
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003422:	e002      	b.n	800342a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3b01      	subs	r3, #1
 8003428:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f9      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003430:	e05a      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a3b      	ldr	r2, [pc, #236]	; (8003524 <HAL_ADC_ConfigChannel+0x874>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d125      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x7d8>
 800343c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d11f      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a31      	ldr	r2, [pc, #196]	; (8003514 <HAL_ADC_ConfigChannel+0x864>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d104      	bne.n	800345c <HAL_ADC_ConfigChannel+0x7ac>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a34      	ldr	r2, [pc, #208]	; (8003528 <HAL_ADC_ConfigChannel+0x878>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d047      	beq.n	80034ec <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003464:	d004      	beq.n	8003470 <HAL_ADC_ConfigChannel+0x7c0>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a2a      	ldr	r2, [pc, #168]	; (8003514 <HAL_ADC_ConfigChannel+0x864>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d101      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x7c4>
 8003470:	4a29      	ldr	r2, [pc, #164]	; (8003518 <HAL_ADC_ConfigChannel+0x868>)
 8003472:	e000      	b.n	8003476 <HAL_ADC_ConfigChannel+0x7c6>
 8003474:	4a23      	ldr	r2, [pc, #140]	; (8003504 <HAL_ADC_ConfigChannel+0x854>)
 8003476:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800347a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347e:	4619      	mov	r1, r3
 8003480:	4610      	mov	r0, r2
 8003482:	f7fe fe3e 	bl	8002102 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003486:	e031      	b.n	80034ec <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a27      	ldr	r2, [pc, #156]	; (800352c <HAL_ADC_ConfigChannel+0x87c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d12d      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003492:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d127      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1c      	ldr	r2, [pc, #112]	; (8003514 <HAL_ADC_ConfigChannel+0x864>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d022      	beq.n	80034ee <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034b0:	d004      	beq.n	80034bc <HAL_ADC_ConfigChannel+0x80c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a17      	ldr	r2, [pc, #92]	; (8003514 <HAL_ADC_ConfigChannel+0x864>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d101      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x810>
 80034bc:	4a16      	ldr	r2, [pc, #88]	; (8003518 <HAL_ADC_ConfigChannel+0x868>)
 80034be:	e000      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x812>
 80034c0:	4a10      	ldr	r2, [pc, #64]	; (8003504 <HAL_ADC_ConfigChannel+0x854>)
 80034c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034ca:	4619      	mov	r1, r3
 80034cc:	4610      	mov	r0, r2
 80034ce:	f7fe fe18 	bl	8002102 <LL_ADC_SetCommonPathInternalCh>
 80034d2:	e00c      	b.n	80034ee <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80034e6:	e002      	b.n	80034ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034e8:	bf00      	nop
 80034ea:	e000      	b.n	80034ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	37d8      	adds	r7, #216	; 0xd8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	50000700 	.word	0x50000700
 8003508:	c3210000 	.word	0xc3210000
 800350c:	90c00010 	.word	0x90c00010
 8003510:	50000600 	.word	0x50000600
 8003514:	50000100 	.word	0x50000100
 8003518:	50000300 	.word	0x50000300
 800351c:	2000009c 	.word	0x2000009c
 8003520:	053e2d63 	.word	0x053e2d63
 8003524:	c7520000 	.word	0xc7520000
 8003528:	50000500 	.word	0x50000500
 800352c:	cb840000 	.word	0xcb840000

08003530 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7fe ffaf 	bl	80024a0 <LL_ADC_IsEnabled>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d14d      	bne.n	80035e4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	4b28      	ldr	r3, [pc, #160]	; (80035f0 <ADC_Enable+0xc0>)
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00d      	beq.n	8003572 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355a:	f043 0210 	orr.w	r2, r3, #16
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003566:	f043 0201 	orr.w	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e039      	b.n	80035e6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe ff7e 	bl	8002478 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800357c:	f7fe fd80 	bl	8002080 <HAL_GetTick>
 8003580:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003582:	e028      	b.n	80035d6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f7fe ff89 	bl	80024a0 <LL_ADC_IsEnabled>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d104      	bne.n	800359e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f7fe ff6d 	bl	8002478 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800359e:	f7fe fd6f 	bl	8002080 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d914      	bls.n	80035d6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d00d      	beq.n	80035d6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035be:	f043 0210 	orr.w	r2, r3, #16
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ca:	f043 0201 	orr.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e007      	b.n	80035e6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d1cf      	bne.n	8003584 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	8000003f 	.word	0x8000003f

080035f4 <LL_ADC_IsEnabled>:
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <LL_ADC_IsEnabled+0x18>
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <LL_ADC_IsEnabled+0x1a>
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <LL_ADC_REG_IsConversionOngoing>:
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b04      	cmp	r3, #4
 800362c:	d101      	bne.n	8003632 <LL_ADC_REG_IsConversionOngoing+0x18>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b0a1      	sub	sp, #132	; 0x84
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800365a:	2302      	movs	r3, #2
 800365c:	e0e7      	b.n	800382e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003666:	2300      	movs	r3, #0
 8003668:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800366a:	2300      	movs	r3, #0
 800366c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003676:	d102      	bne.n	800367e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003678:	4b6f      	ldr	r3, [pc, #444]	; (8003838 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	e009      	b.n	8003692 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a6e      	ldr	r2, [pc, #440]	; (800383c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d102      	bne.n	800368e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003688:	4b6d      	ldr	r3, [pc, #436]	; (8003840 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	e001      	b.n	8003692 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800368e:	2300      	movs	r3, #0
 8003690:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369c:	f043 0220 	orr.w	r2, r3, #32
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0be      	b.n	800382e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff ffb1 	bl	800361a <LL_ADC_REG_IsConversionOngoing>
 80036b8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff ffab 	bl	800361a <LL_ADC_REG_IsConversionOngoing>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f040 80a0 	bne.w	800380c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80036cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f040 809c 	bne.w	800380c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036dc:	d004      	beq.n	80036e8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a55      	ldr	r2, [pc, #340]	; (8003838 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80036e8:	4b56      	ldr	r3, [pc, #344]	; (8003844 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80036ea:	e000      	b.n	80036ee <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80036ec:	4b56      	ldr	r3, [pc, #344]	; (8003848 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80036ee:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d04b      	beq.n	8003790 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80036f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800370a:	035b      	lsls	r3, r3, #13
 800370c:	430b      	orrs	r3, r1
 800370e:	431a      	orrs	r2, r3
 8003710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003712:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800371c:	d004      	beq.n	8003728 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a45      	ldr	r2, [pc, #276]	; (8003838 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d10f      	bne.n	8003748 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003728:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800372c:	f7ff ff62 	bl	80035f4 <LL_ADC_IsEnabled>
 8003730:	4604      	mov	r4, r0
 8003732:	4841      	ldr	r0, [pc, #260]	; (8003838 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003734:	f7ff ff5e 	bl	80035f4 <LL_ADC_IsEnabled>
 8003738:	4603      	mov	r3, r0
 800373a:	4323      	orrs	r3, r4
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e012      	b.n	800376e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003748:	483c      	ldr	r0, [pc, #240]	; (800383c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800374a:	f7ff ff53 	bl	80035f4 <LL_ADC_IsEnabled>
 800374e:	4604      	mov	r4, r0
 8003750:	483b      	ldr	r0, [pc, #236]	; (8003840 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003752:	f7ff ff4f 	bl	80035f4 <LL_ADC_IsEnabled>
 8003756:	4603      	mov	r3, r0
 8003758:	431c      	orrs	r4, r3
 800375a:	483c      	ldr	r0, [pc, #240]	; (800384c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800375c:	f7ff ff4a 	bl	80035f4 <LL_ADC_IsEnabled>
 8003760:	4603      	mov	r3, r0
 8003762:	4323      	orrs	r3, r4
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d056      	beq.n	8003820 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800377a:	f023 030f 	bic.w	r3, r3, #15
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	6811      	ldr	r1, [r2, #0]
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	6892      	ldr	r2, [r2, #8]
 8003786:	430a      	orrs	r2, r1
 8003788:	431a      	orrs	r2, r3
 800378a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800378c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800378e:	e047      	b.n	8003820 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800379a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037a4:	d004      	beq.n	80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a23      	ldr	r2, [pc, #140]	; (8003838 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d10f      	bne.n	80037d0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80037b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80037b4:	f7ff ff1e 	bl	80035f4 <LL_ADC_IsEnabled>
 80037b8:	4604      	mov	r4, r0
 80037ba:	481f      	ldr	r0, [pc, #124]	; (8003838 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037bc:	f7ff ff1a 	bl	80035f4 <LL_ADC_IsEnabled>
 80037c0:	4603      	mov	r3, r0
 80037c2:	4323      	orrs	r3, r4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e012      	b.n	80037f6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80037d0:	481a      	ldr	r0, [pc, #104]	; (800383c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80037d2:	f7ff ff0f 	bl	80035f4 <LL_ADC_IsEnabled>
 80037d6:	4604      	mov	r4, r0
 80037d8:	4819      	ldr	r0, [pc, #100]	; (8003840 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80037da:	f7ff ff0b 	bl	80035f4 <LL_ADC_IsEnabled>
 80037de:	4603      	mov	r3, r0
 80037e0:	431c      	orrs	r4, r3
 80037e2:	481a      	ldr	r0, [pc, #104]	; (800384c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80037e4:	f7ff ff06 	bl	80035f4 <LL_ADC_IsEnabled>
 80037e8:	4603      	mov	r3, r0
 80037ea:	4323      	orrs	r3, r4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bf0c      	ite	eq
 80037f0:	2301      	moveq	r3, #1
 80037f2:	2300      	movne	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d012      	beq.n	8003820 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80037fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003802:	f023 030f 	bic.w	r3, r3, #15
 8003806:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003808:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800380a:	e009      	b.n	8003820 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003810:	f043 0220 	orr.w	r2, r3, #32
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800381e:	e000      	b.n	8003822 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003820:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800382a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800382e:	4618      	mov	r0, r3
 8003830:	3784      	adds	r7, #132	; 0x84
 8003832:	46bd      	mov	sp, r7
 8003834:	bd90      	pop	{r4, r7, pc}
 8003836:	bf00      	nop
 8003838:	50000100 	.word	0x50000100
 800383c:	50000400 	.word	0x50000400
 8003840:	50000500 	.word	0x50000500
 8003844:	50000300 	.word	0x50000300
 8003848:	50000700 	.word	0x50000700
 800384c:	50000600 	.word	0x50000600

08003850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <__NVIC_SetPriorityGrouping+0x44>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800386c:	4013      	ands	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800387c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003882:	4a04      	ldr	r2, [pc, #16]	; (8003894 <__NVIC_SetPriorityGrouping+0x44>)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	60d3      	str	r3, [r2, #12]
}
 8003888:	bf00      	nop
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800389c:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <__NVIC_GetPriorityGrouping+0x18>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	0a1b      	lsrs	r3, r3, #8
 80038a2:	f003 0307 	and.w	r3, r3, #7
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	db0b      	blt.n	80038de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	f003 021f 	and.w	r2, r3, #31
 80038cc:	4907      	ldr	r1, [pc, #28]	; (80038ec <__NVIC_EnableIRQ+0x38>)
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	2001      	movs	r0, #1
 80038d6:	fa00 f202 	lsl.w	r2, r0, r2
 80038da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	e000e100 	.word	0xe000e100

080038f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	6039      	str	r1, [r7, #0]
 80038fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003900:	2b00      	cmp	r3, #0
 8003902:	db0a      	blt.n	800391a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	b2da      	uxtb	r2, r3
 8003908:	490c      	ldr	r1, [pc, #48]	; (800393c <__NVIC_SetPriority+0x4c>)
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	0112      	lsls	r2, r2, #4
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	440b      	add	r3, r1
 8003914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003918:	e00a      	b.n	8003930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	4908      	ldr	r1, [pc, #32]	; (8003940 <__NVIC_SetPriority+0x50>)
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	3b04      	subs	r3, #4
 8003928:	0112      	lsls	r2, r2, #4
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	440b      	add	r3, r1
 800392e:	761a      	strb	r2, [r3, #24]
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	e000e100 	.word	0xe000e100
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003944:	b480      	push	{r7}
 8003946:	b089      	sub	sp, #36	; 0x24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f1c3 0307 	rsb	r3, r3, #7
 800395e:	2b04      	cmp	r3, #4
 8003960:	bf28      	it	cs
 8003962:	2304      	movcs	r3, #4
 8003964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3304      	adds	r3, #4
 800396a:	2b06      	cmp	r3, #6
 800396c:	d902      	bls.n	8003974 <NVIC_EncodePriority+0x30>
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	3b03      	subs	r3, #3
 8003972:	e000      	b.n	8003976 <NVIC_EncodePriority+0x32>
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003978:	f04f 32ff 	mov.w	r2, #4294967295
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43da      	mvns	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	401a      	ands	r2, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800398c:	f04f 31ff 	mov.w	r1, #4294967295
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	fa01 f303 	lsl.w	r3, r1, r3
 8003996:	43d9      	mvns	r1, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800399c:	4313      	orrs	r3, r2
         );
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3724      	adds	r7, #36	; 0x24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039bc:	d301      	bcc.n	80039c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039be:	2301      	movs	r3, #1
 80039c0:	e00f      	b.n	80039e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039c2:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <SysTick_Config+0x40>)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ca:	210f      	movs	r1, #15
 80039cc:	f04f 30ff 	mov.w	r0, #4294967295
 80039d0:	f7ff ff8e 	bl	80038f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <SysTick_Config+0x40>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039da:	4b04      	ldr	r3, [pc, #16]	; (80039ec <SysTick_Config+0x40>)
 80039dc:	2207      	movs	r2, #7
 80039de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	e000e010 	.word	0xe000e010

080039f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ff29 	bl	8003850 <__NVIC_SetPriorityGrouping>
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b086      	sub	sp, #24
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a14:	f7ff ff40 	bl	8003898 <__NVIC_GetPriorityGrouping>
 8003a18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	6978      	ldr	r0, [r7, #20]
 8003a20:	f7ff ff90 	bl	8003944 <NVIC_EncodePriority>
 8003a24:	4602      	mov	r2, r0
 8003a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ff5f 	bl	80038f0 <__NVIC_SetPriority>
}
 8003a32:	bf00      	nop
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	4603      	mov	r3, r0
 8003a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ff33 	bl	80038b4 <__NVIC_EnableIRQ>
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ffa4 	bl	80039ac <SysTick_Config>
 8003a64:	4603      	mov	r3, r0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d005      	beq.n	8003a92 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2204      	movs	r2, #4
 8003a8a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
 8003a90:	e037      	b.n	8003b02 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 020e 	bic.w	r2, r2, #14
 8003aa0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ab0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0201 	bic.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	f003 021f 	and.w	r2, r3, #31
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	2101      	movs	r1, #1
 8003ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ade:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00c      	beq.n	8003b02 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003af6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b00:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d00d      	beq.n	8003b54 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
 8003b52:	e047      	b.n	8003be4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 020e 	bic.w	r2, r2, #14
 8003b62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0201 	bic.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b88:	f003 021f 	and.w	r2, r3, #31
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	2101      	movs	r1, #1
 8003b92:	fa01 f202 	lsl.w	r2, r1, r2
 8003b96:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ba0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00c      	beq.n	8003bc4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bb8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bc2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4798      	blx	r3
    }
  }
  return status;
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bfe:	e15a      	b.n	8003eb6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	2101      	movs	r1, #1
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 814c 	beq.w	8003eb0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d005      	beq.n	8003c30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d130      	bne.n	8003c92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4013      	ands	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c66:	2201      	movs	r2, #1
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	091b      	lsrs	r3, r3, #4
 8003c7c:	f003 0201 	and.w	r2, r3, #1
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d017      	beq.n	8003cce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	2203      	movs	r2, #3
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d123      	bne.n	8003d22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	08da      	lsrs	r2, r3, #3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3208      	adds	r2, #8
 8003ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	220f      	movs	r2, #15
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	08da      	lsrs	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3208      	adds	r2, #8
 8003d1c:	6939      	ldr	r1, [r7, #16]
 8003d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43db      	mvns	r3, r3
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4013      	ands	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f003 0203 	and.w	r2, r3, #3
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 80a6 	beq.w	8003eb0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d64:	4b5b      	ldr	r3, [pc, #364]	; (8003ed4 <HAL_GPIO_Init+0x2e4>)
 8003d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d68:	4a5a      	ldr	r2, [pc, #360]	; (8003ed4 <HAL_GPIO_Init+0x2e4>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6613      	str	r3, [r2, #96]	; 0x60
 8003d70:	4b58      	ldr	r3, [pc, #352]	; (8003ed4 <HAL_GPIO_Init+0x2e4>)
 8003d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d7c:	4a56      	ldr	r2, [pc, #344]	; (8003ed8 <HAL_GPIO_Init+0x2e8>)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	089b      	lsrs	r3, r3, #2
 8003d82:	3302      	adds	r3, #2
 8003d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	220f      	movs	r2, #15
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003da6:	d01f      	beq.n	8003de8 <HAL_GPIO_Init+0x1f8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a4c      	ldr	r2, [pc, #304]	; (8003edc <HAL_GPIO_Init+0x2ec>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d019      	beq.n	8003de4 <HAL_GPIO_Init+0x1f4>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a4b      	ldr	r2, [pc, #300]	; (8003ee0 <HAL_GPIO_Init+0x2f0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d013      	beq.n	8003de0 <HAL_GPIO_Init+0x1f0>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a4a      	ldr	r2, [pc, #296]	; (8003ee4 <HAL_GPIO_Init+0x2f4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00d      	beq.n	8003ddc <HAL_GPIO_Init+0x1ec>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a49      	ldr	r2, [pc, #292]	; (8003ee8 <HAL_GPIO_Init+0x2f8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d007      	beq.n	8003dd8 <HAL_GPIO_Init+0x1e8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a48      	ldr	r2, [pc, #288]	; (8003eec <HAL_GPIO_Init+0x2fc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d101      	bne.n	8003dd4 <HAL_GPIO_Init+0x1e4>
 8003dd0:	2305      	movs	r3, #5
 8003dd2:	e00a      	b.n	8003dea <HAL_GPIO_Init+0x1fa>
 8003dd4:	2306      	movs	r3, #6
 8003dd6:	e008      	b.n	8003dea <HAL_GPIO_Init+0x1fa>
 8003dd8:	2304      	movs	r3, #4
 8003dda:	e006      	b.n	8003dea <HAL_GPIO_Init+0x1fa>
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e004      	b.n	8003dea <HAL_GPIO_Init+0x1fa>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e002      	b.n	8003dea <HAL_GPIO_Init+0x1fa>
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <HAL_GPIO_Init+0x1fa>
 8003de8:	2300      	movs	r3, #0
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	f002 0203 	and.w	r2, r2, #3
 8003df0:	0092      	lsls	r2, r2, #2
 8003df2:	4093      	lsls	r3, r2
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dfa:	4937      	ldr	r1, [pc, #220]	; (8003ed8 <HAL_GPIO_Init+0x2e8>)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	3302      	adds	r3, #2
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e08:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <HAL_GPIO_Init+0x300>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4013      	ands	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e2c:	4a30      	ldr	r2, [pc, #192]	; (8003ef0 <HAL_GPIO_Init+0x300>)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e32:	4b2f      	ldr	r3, [pc, #188]	; (8003ef0 <HAL_GPIO_Init+0x300>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e56:	4a26      	ldr	r2, [pc, #152]	; (8003ef0 <HAL_GPIO_Init+0x300>)
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003e5c:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <HAL_GPIO_Init+0x300>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	43db      	mvns	r3, r3
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e80:	4a1b      	ldr	r2, [pc, #108]	; (8003ef0 <HAL_GPIO_Init+0x300>)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e86:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <HAL_GPIO_Init+0x300>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4013      	ands	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003eaa:	4a11      	ldr	r2, [pc, #68]	; (8003ef0 <HAL_GPIO_Init+0x300>)
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f47f ae9d 	bne.w	8003c00 <HAL_GPIO_Init+0x10>
  }
}
 8003ec6:	bf00      	nop
 8003ec8:	bf00      	nop
 8003eca:	371c      	adds	r7, #28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	40010000 	.word	0x40010000
 8003edc:	48000400 	.word	0x48000400
 8003ee0:	48000800 	.word	0x48000800
 8003ee4:	48000c00 	.word	0x48000c00
 8003ee8:	48001000 	.word	0x48001000
 8003eec:	48001400 	.word	0x48001400
 8003ef0:	40010400 	.word	0x40010400

08003ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	807b      	strh	r3, [r7, #2]
 8003f00:	4613      	mov	r3, r2
 8003f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f04:	787b      	ldrb	r3, [r7, #1]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f0a:	887a      	ldrh	r2, [r7, #2]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f10:	e002      	b.n	8003f18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f12:	887a      	ldrh	r2, [r7, #2]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f2e:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f30:	695a      	ldr	r2, [r3, #20]
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d006      	beq.n	8003f48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f3a:	4a05      	ldr	r2, [pc, #20]	; (8003f50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f40:	88fb      	ldrh	r3, [r7, #6]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fd fc66 	bl	8001814 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40010400 	.word	0x40010400

08003f54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d141      	bne.n	8003fe6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f62:	4b4b      	ldr	r3, [pc, #300]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6e:	d131      	bne.n	8003fd4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f70:	4b47      	ldr	r3, [pc, #284]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f76:	4a46      	ldr	r2, [pc, #280]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f80:	4b43      	ldr	r3, [pc, #268]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f88:	4a41      	ldr	r2, [pc, #260]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f90:	4b40      	ldr	r3, [pc, #256]	; (8004094 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2232      	movs	r2, #50	; 0x32
 8003f96:	fb02 f303 	mul.w	r3, r2, r3
 8003f9a:	4a3f      	ldr	r2, [pc, #252]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	0c9b      	lsrs	r3, r3, #18
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fa6:	e002      	b.n	8003fae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fae:	4b38      	ldr	r3, [pc, #224]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fba:	d102      	bne.n	8003fc2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f2      	bne.n	8003fa8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fc2:	4b33      	ldr	r3, [pc, #204]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fce:	d158      	bne.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e057      	b.n	8004084 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fd4:	4b2e      	ldr	r3, [pc, #184]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fda:	4a2d      	ldr	r2, [pc, #180]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003fe4:	e04d      	b.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fec:	d141      	bne.n	8004072 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fee:	4b28      	ldr	r3, [pc, #160]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffa:	d131      	bne.n	8004060 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ffc:	4b24      	ldr	r3, [pc, #144]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004002:	4a23      	ldr	r2, [pc, #140]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004008:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800400c:	4b20      	ldr	r3, [pc, #128]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004014:	4a1e      	ldr	r2, [pc, #120]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800401a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800401c:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2232      	movs	r2, #50	; 0x32
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	4a1c      	ldr	r2, [pc, #112]	; (8004098 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004028:	fba2 2303 	umull	r2, r3, r2, r3
 800402c:	0c9b      	lsrs	r3, r3, #18
 800402e:	3301      	adds	r3, #1
 8004030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004032:	e002      	b.n	800403a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3b01      	subs	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800403a:	4b15      	ldr	r3, [pc, #84]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004046:	d102      	bne.n	800404e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f2      	bne.n	8004034 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800404e:	4b10      	ldr	r3, [pc, #64]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405a:	d112      	bne.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e011      	b.n	8004084 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004066:	4a0a      	ldr	r2, [pc, #40]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004070:	e007      	b.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004072:	4b07      	ldr	r3, [pc, #28]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800407a:	4a05      	ldr	r2, [pc, #20]	; (8004090 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004080:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	40007000 	.word	0x40007000
 8004094:	2000009c 	.word	0x2000009c
 8004098:	431bde83 	.word	0x431bde83

0800409c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80040a0:	4b05      	ldr	r3, [pc, #20]	; (80040b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4a04      	ldr	r2, [pc, #16]	; (80040b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040aa:	6093      	str	r3, [r2, #8]
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40007000 	.word	0x40007000

080040bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e306      	b.n	80046dc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d075      	beq.n	80041c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040da:	4b97      	ldr	r3, [pc, #604]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
 80040e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e4:	4b94      	ldr	r3, [pc, #592]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0303 	and.w	r3, r3, #3
 80040ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	2b0c      	cmp	r3, #12
 80040f2:	d102      	bne.n	80040fa <HAL_RCC_OscConfig+0x3e>
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d002      	beq.n	8004100 <HAL_RCC_OscConfig+0x44>
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d10b      	bne.n	8004118 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004100:	4b8d      	ldr	r3, [pc, #564]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d05b      	beq.n	80041c4 <HAL_RCC_OscConfig+0x108>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d157      	bne.n	80041c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e2e1      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004120:	d106      	bne.n	8004130 <HAL_RCC_OscConfig+0x74>
 8004122:	4b85      	ldr	r3, [pc, #532]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a84      	ldr	r2, [pc, #528]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	e01d      	b.n	800416c <HAL_RCC_OscConfig+0xb0>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004138:	d10c      	bne.n	8004154 <HAL_RCC_OscConfig+0x98>
 800413a:	4b7f      	ldr	r3, [pc, #508]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a7e      	ldr	r2, [pc, #504]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	4b7c      	ldr	r3, [pc, #496]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a7b      	ldr	r2, [pc, #492]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 800414c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	e00b      	b.n	800416c <HAL_RCC_OscConfig+0xb0>
 8004154:	4b78      	ldr	r3, [pc, #480]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a77      	ldr	r2, [pc, #476]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 800415a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800415e:	6013      	str	r3, [r2, #0]
 8004160:	4b75      	ldr	r3, [pc, #468]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a74      	ldr	r2, [pc, #464]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800416a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d013      	beq.n	800419c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fd ff84 	bl	8002080 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800417c:	f7fd ff80 	bl	8002080 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b64      	cmp	r3, #100	; 0x64
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e2a6      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800418e:	4b6a      	ldr	r3, [pc, #424]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0xc0>
 800419a:	e014      	b.n	80041c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fd ff70 	bl	8002080 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041a4:	f7fd ff6c 	bl	8002080 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b64      	cmp	r3, #100	; 0x64
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e292      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041b6:	4b60      	ldr	r3, [pc, #384]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0xe8>
 80041c2:	e000      	b.n	80041c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d075      	beq.n	80042be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041d2:	4b59      	ldr	r3, [pc, #356]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
 80041da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041dc:	4b56      	ldr	r3, [pc, #344]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0303 	and.w	r3, r3, #3
 80041e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b0c      	cmp	r3, #12
 80041ea:	d102      	bne.n	80041f2 <HAL_RCC_OscConfig+0x136>
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d002      	beq.n	80041f8 <HAL_RCC_OscConfig+0x13c>
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d11f      	bne.n	8004238 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041f8:	4b4f      	ldr	r3, [pc, #316]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_OscConfig+0x154>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e265      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004210:	4b49      	ldr	r3, [pc, #292]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	061b      	lsls	r3, r3, #24
 800421e:	4946      	ldr	r1, [pc, #280]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004220:	4313      	orrs	r3, r2
 8004222:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004224:	4b45      	ldr	r3, [pc, #276]	; (800433c <HAL_RCC_OscConfig+0x280>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7fd fedd 	bl	8001fe8 <HAL_InitTick>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d043      	beq.n	80042bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e251      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d023      	beq.n	8004288 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004240:	4b3d      	ldr	r3, [pc, #244]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a3c      	ldr	r2, [pc, #240]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800424a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fd ff18 	bl	8002080 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004254:	f7fd ff14 	bl	8002080 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e23a      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004266:	4b34      	ldr	r3, [pc, #208]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004272:	4b31      	ldr	r3, [pc, #196]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	061b      	lsls	r3, r3, #24
 8004280:	492d      	ldr	r1, [pc, #180]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004282:	4313      	orrs	r3, r2
 8004284:	604b      	str	r3, [r1, #4]
 8004286:	e01a      	b.n	80042be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004288:	4b2b      	ldr	r3, [pc, #172]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2a      	ldr	r2, [pc, #168]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 800428e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fd fef4 	bl	8002080 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800429c:	f7fd fef0 	bl	8002080 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e216      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042ae:	4b22      	ldr	r3, [pc, #136]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x1e0>
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d041      	beq.n	800434e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01c      	beq.n	800430c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042d2:	4b19      	ldr	r3, [pc, #100]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 80042d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d8:	4a17      	ldr	r2, [pc, #92]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e2:	f7fd fecd 	bl	8002080 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ea:	f7fd fec9 	bl	8002080 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e1ef      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042fc:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 80042fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0ef      	beq.n	80042ea <HAL_RCC_OscConfig+0x22e>
 800430a:	e020      	b.n	800434e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800430c:	4b0a      	ldr	r3, [pc, #40]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 800430e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004312:	4a09      	ldr	r2, [pc, #36]	; (8004338 <HAL_RCC_OscConfig+0x27c>)
 8004314:	f023 0301 	bic.w	r3, r3, #1
 8004318:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431c:	f7fd feb0 	bl	8002080 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004322:	e00d      	b.n	8004340 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004324:	f7fd feac 	bl	8002080 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d906      	bls.n	8004340 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e1d2      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
 8004336:	bf00      	nop
 8004338:	40021000 	.word	0x40021000
 800433c:	200000a0 	.word	0x200000a0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004340:	4b8c      	ldr	r3, [pc, #560]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1ea      	bne.n	8004324 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 80a6 	beq.w	80044a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800435c:	2300      	movs	r3, #0
 800435e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004360:	4b84      	ldr	r3, [pc, #528]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_RCC_OscConfig+0x2b4>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <HAL_RCC_OscConfig+0x2b6>
 8004370:	2300      	movs	r3, #0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004376:	4b7f      	ldr	r3, [pc, #508]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437a:	4a7e      	ldr	r2, [pc, #504]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800437c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004380:	6593      	str	r3, [r2, #88]	; 0x58
 8004382:	4b7c      	ldr	r3, [pc, #496]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800438e:	2301      	movs	r3, #1
 8004390:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004392:	4b79      	ldr	r3, [pc, #484]	; (8004578 <HAL_RCC_OscConfig+0x4bc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439a:	2b00      	cmp	r3, #0
 800439c:	d118      	bne.n	80043d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800439e:	4b76      	ldr	r3, [pc, #472]	; (8004578 <HAL_RCC_OscConfig+0x4bc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a75      	ldr	r2, [pc, #468]	; (8004578 <HAL_RCC_OscConfig+0x4bc>)
 80043a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043aa:	f7fd fe69 	bl	8002080 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b2:	f7fd fe65 	bl	8002080 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e18b      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c4:	4b6c      	ldr	r3, [pc, #432]	; (8004578 <HAL_RCC_OscConfig+0x4bc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d108      	bne.n	80043ea <HAL_RCC_OscConfig+0x32e>
 80043d8:	4b66      	ldr	r3, [pc, #408]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80043da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043de:	4a65      	ldr	r2, [pc, #404]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043e8:	e024      	b.n	8004434 <HAL_RCC_OscConfig+0x378>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b05      	cmp	r3, #5
 80043f0:	d110      	bne.n	8004414 <HAL_RCC_OscConfig+0x358>
 80043f2:	4b60      	ldr	r3, [pc, #384]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80043f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f8:	4a5e      	ldr	r2, [pc, #376]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80043fa:	f043 0304 	orr.w	r3, r3, #4
 80043fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004402:	4b5c      	ldr	r3, [pc, #368]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004408:	4a5a      	ldr	r2, [pc, #360]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004412:	e00f      	b.n	8004434 <HAL_RCC_OscConfig+0x378>
 8004414:	4b57      	ldr	r3, [pc, #348]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441a:	4a56      	ldr	r2, [pc, #344]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004424:	4b53      	ldr	r3, [pc, #332]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442a:	4a52      	ldr	r2, [pc, #328]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800442c:	f023 0304 	bic.w	r3, r3, #4
 8004430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d016      	beq.n	800446a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443c:	f7fd fe20 	bl	8002080 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004442:	e00a      	b.n	800445a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004444:	f7fd fe1c 	bl	8002080 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004452:	4293      	cmp	r3, r2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e140      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800445a:	4b46      	ldr	r3, [pc, #280]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0ed      	beq.n	8004444 <HAL_RCC_OscConfig+0x388>
 8004468:	e015      	b.n	8004496 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446a:	f7fd fe09 	bl	8002080 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004470:	e00a      	b.n	8004488 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004472:	f7fd fe05 	bl	8002080 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004480:	4293      	cmp	r3, r2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e129      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004488:	4b3a      	ldr	r3, [pc, #232]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1ed      	bne.n	8004472 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004496:	7ffb      	ldrb	r3, [r7, #31]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d105      	bne.n	80044a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800449c:	4b35      	ldr	r3, [pc, #212]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800449e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a0:	4a34      	ldr	r2, [pc, #208]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80044a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d03c      	beq.n	800452e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01c      	beq.n	80044f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044bc:	4b2d      	ldr	r3, [pc, #180]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80044be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044c2:	4a2c      	ldr	r2, [pc, #176]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044cc:	f7fd fdd8 	bl	8002080 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044d4:	f7fd fdd4 	bl	8002080 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e0fa      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80044e6:	4b23      	ldr	r3, [pc, #140]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80044e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0ef      	beq.n	80044d4 <HAL_RCC_OscConfig+0x418>
 80044f4:	e01b      	b.n	800452e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044f6:	4b1f      	ldr	r3, [pc, #124]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80044f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044fc:	4a1d      	ldr	r2, [pc, #116]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004506:	f7fd fdbb 	bl	8002080 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800450e:	f7fd fdb7 	bl	8002080 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e0dd      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004520:	4b14      	ldr	r3, [pc, #80]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004522:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1ef      	bne.n	800450e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 80d1 	beq.w	80046da <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004538:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 030c 	and.w	r3, r3, #12
 8004540:	2b0c      	cmp	r3, #12
 8004542:	f000 808b 	beq.w	800465c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d15e      	bne.n	800460c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800454e:	4b09      	ldr	r3, [pc, #36]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a08      	ldr	r2, [pc, #32]	; (8004574 <HAL_RCC_OscConfig+0x4b8>)
 8004554:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7fd fd91 	bl	8002080 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004560:	e00c      	b.n	800457c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004562:	f7fd fd8d 	bl	8002080 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d905      	bls.n	800457c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e0b3      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
 8004574:	40021000 	.word	0x40021000
 8004578:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800457c:	4b59      	ldr	r3, [pc, #356]	; (80046e4 <HAL_RCC_OscConfig+0x628>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1ec      	bne.n	8004562 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004588:	4b56      	ldr	r3, [pc, #344]	; (80046e4 <HAL_RCC_OscConfig+0x628>)
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	4b56      	ldr	r3, [pc, #344]	; (80046e8 <HAL_RCC_OscConfig+0x62c>)
 800458e:	4013      	ands	r3, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6a11      	ldr	r1, [r2, #32]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004598:	3a01      	subs	r2, #1
 800459a:	0112      	lsls	r2, r2, #4
 800459c:	4311      	orrs	r1, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80045a2:	0212      	lsls	r2, r2, #8
 80045a4:	4311      	orrs	r1, r2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045aa:	0852      	lsrs	r2, r2, #1
 80045ac:	3a01      	subs	r2, #1
 80045ae:	0552      	lsls	r2, r2, #21
 80045b0:	4311      	orrs	r1, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045b6:	0852      	lsrs	r2, r2, #1
 80045b8:	3a01      	subs	r2, #1
 80045ba:	0652      	lsls	r2, r2, #25
 80045bc:	4311      	orrs	r1, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045c2:	06d2      	lsls	r2, r2, #27
 80045c4:	430a      	orrs	r2, r1
 80045c6:	4947      	ldr	r1, [pc, #284]	; (80046e4 <HAL_RCC_OscConfig+0x628>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045cc:	4b45      	ldr	r3, [pc, #276]	; (80046e4 <HAL_RCC_OscConfig+0x628>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a44      	ldr	r2, [pc, #272]	; (80046e4 <HAL_RCC_OscConfig+0x628>)
 80045d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045d8:	4b42      	ldr	r3, [pc, #264]	; (80046e4 <HAL_RCC_OscConfig+0x628>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4a41      	ldr	r2, [pc, #260]	; (80046e4 <HAL_RCC_OscConfig+0x628>)
 80045de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd fd4c 	bl	8002080 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fd fd48 	bl	8002080 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e06e      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fe:	4b39      	ldr	r3, [pc, #228]	; (80046e4 <HAL_RCC_OscConfig+0x628>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0x530>
 800460a:	e066      	b.n	80046da <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460c:	4b35      	ldr	r3, [pc, #212]	; (80046e4 <HAL_RCC_OscConfig+0x628>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a34      	ldr	r2, [pc, #208]	; (80046e4 <HAL_RCC_OscConfig+0x628>)
 8004612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004616:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004618:	4b32      	ldr	r3, [pc, #200]	; (80046e4 <HAL_RCC_OscConfig+0x628>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4a31      	ldr	r2, [pc, #196]	; (80046e4 <HAL_RCC_OscConfig+0x628>)
 800461e:	f023 0303 	bic.w	r3, r3, #3
 8004622:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004624:	4b2f      	ldr	r3, [pc, #188]	; (80046e4 <HAL_RCC_OscConfig+0x628>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	4a2e      	ldr	r2, [pc, #184]	; (80046e4 <HAL_RCC_OscConfig+0x628>)
 800462a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800462e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004632:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fd fd24 	bl	8002080 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800463c:	f7fd fd20 	bl	8002080 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e046      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800464e:	4b25      	ldr	r3, [pc, #148]	; (80046e4 <HAL_RCC_OscConfig+0x628>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x580>
 800465a:	e03e      	b.n	80046da <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e039      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004668:	4b1e      	ldr	r3, [pc, #120]	; (80046e4 <HAL_RCC_OscConfig+0x628>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f003 0203 	and.w	r2, r3, #3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	429a      	cmp	r2, r3
 800467a:	d12c      	bne.n	80046d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	3b01      	subs	r3, #1
 8004688:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d123      	bne.n	80046d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800469a:	429a      	cmp	r2, r3
 800469c:	d11b      	bne.n	80046d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d113      	bne.n	80046d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	3b01      	subs	r3, #1
 80046bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046be:	429a      	cmp	r2, r3
 80046c0:	d109      	bne.n	80046d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046cc:	085b      	lsrs	r3, r3, #1
 80046ce:	3b01      	subs	r3, #1
 80046d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d001      	beq.n	80046da <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3720      	adds	r7, #32
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40021000 	.word	0x40021000
 80046e8:	019f800c 	.word	0x019f800c

080046ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e11e      	b.n	8004942 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004704:	4b91      	ldr	r3, [pc, #580]	; (800494c <HAL_RCC_ClockConfig+0x260>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d910      	bls.n	8004734 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004712:	4b8e      	ldr	r3, [pc, #568]	; (800494c <HAL_RCC_ClockConfig+0x260>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 020f 	bic.w	r2, r3, #15
 800471a:	498c      	ldr	r1, [pc, #560]	; (800494c <HAL_RCC_ClockConfig+0x260>)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	4313      	orrs	r3, r2
 8004720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004722:	4b8a      	ldr	r3, [pc, #552]	; (800494c <HAL_RCC_ClockConfig+0x260>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e106      	b.n	8004942 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d073      	beq.n	8004828 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b03      	cmp	r3, #3
 8004746:	d129      	bne.n	800479c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004748:	4b81      	ldr	r3, [pc, #516]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0f4      	b.n	8004942 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004758:	f000 f99e 	bl	8004a98 <RCC_GetSysClockFreqFromPLLSource>
 800475c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	4a7c      	ldr	r2, [pc, #496]	; (8004954 <HAL_RCC_ClockConfig+0x268>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d93f      	bls.n	80047e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004766:	4b7a      	ldr	r3, [pc, #488]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d009      	beq.n	8004786 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800477a:	2b00      	cmp	r3, #0
 800477c:	d033      	beq.n	80047e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004782:	2b00      	cmp	r3, #0
 8004784:	d12f      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004786:	4b72      	ldr	r3, [pc, #456]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800478e:	4a70      	ldr	r2, [pc, #448]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 8004790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004794:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004796:	2380      	movs	r3, #128	; 0x80
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	e024      	b.n	80047e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d107      	bne.n	80047b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047a4:	4b6a      	ldr	r3, [pc, #424]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d109      	bne.n	80047c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0c6      	b.n	8004942 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047b4:	4b66      	ldr	r3, [pc, #408]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0be      	b.n	8004942 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80047c4:	f000 f8ce 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 80047c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	4a61      	ldr	r2, [pc, #388]	; (8004954 <HAL_RCC_ClockConfig+0x268>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d909      	bls.n	80047e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047d2:	4b5f      	ldr	r3, [pc, #380]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047da:	4a5d      	ldr	r2, [pc, #372]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 80047dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047e6:	4b5a      	ldr	r3, [pc, #360]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f023 0203 	bic.w	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4957      	ldr	r1, [pc, #348]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f8:	f7fd fc42 	bl	8002080 <HAL_GetTick>
 80047fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fe:	e00a      	b.n	8004816 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004800:	f7fd fc3e 	bl	8002080 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f241 3288 	movw	r2, #5000	; 0x1388
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e095      	b.n	8004942 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	4b4e      	ldr	r3, [pc, #312]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 020c 	and.w	r2, r3, #12
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	429a      	cmp	r2, r3
 8004826:	d1eb      	bne.n	8004800 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d023      	beq.n	800487c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004840:	4b43      	ldr	r3, [pc, #268]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	4a42      	ldr	r2, [pc, #264]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 8004846:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800484a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0308 	and.w	r3, r3, #8
 8004854:	2b00      	cmp	r3, #0
 8004856:	d007      	beq.n	8004868 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004858:	4b3d      	ldr	r3, [pc, #244]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004860:	4a3b      	ldr	r2, [pc, #236]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 8004862:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004866:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004868:	4b39      	ldr	r3, [pc, #228]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	4936      	ldr	r1, [pc, #216]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 8004876:	4313      	orrs	r3, r2
 8004878:	608b      	str	r3, [r1, #8]
 800487a:	e008      	b.n	800488e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2b80      	cmp	r3, #128	; 0x80
 8004880:	d105      	bne.n	800488e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004882:	4b33      	ldr	r3, [pc, #204]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	4a32      	ldr	r2, [pc, #200]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 8004888:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800488c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800488e:	4b2f      	ldr	r3, [pc, #188]	; (800494c <HAL_RCC_ClockConfig+0x260>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d21d      	bcs.n	80048d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489c:	4b2b      	ldr	r3, [pc, #172]	; (800494c <HAL_RCC_ClockConfig+0x260>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f023 020f 	bic.w	r2, r3, #15
 80048a4:	4929      	ldr	r1, [pc, #164]	; (800494c <HAL_RCC_ClockConfig+0x260>)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048ac:	f7fd fbe8 	bl	8002080 <HAL_GetTick>
 80048b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b2:	e00a      	b.n	80048ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b4:	f7fd fbe4 	bl	8002080 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e03b      	b.n	8004942 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ca:	4b20      	ldr	r3, [pc, #128]	; (800494c <HAL_RCC_ClockConfig+0x260>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d1ed      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d008      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e4:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4917      	ldr	r1, [pc, #92]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d009      	beq.n	8004916 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004902:	4b13      	ldr	r3, [pc, #76]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	490f      	ldr	r1, [pc, #60]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 8004912:	4313      	orrs	r3, r2
 8004914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004916:	f000 f825 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 800491a:	4602      	mov	r2, r0
 800491c:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <HAL_RCC_ClockConfig+0x264>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	490c      	ldr	r1, [pc, #48]	; (8004958 <HAL_RCC_ClockConfig+0x26c>)
 8004928:	5ccb      	ldrb	r3, [r1, r3]
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	fa22 f303 	lsr.w	r3, r2, r3
 8004932:	4a0a      	ldr	r2, [pc, #40]	; (800495c <HAL_RCC_ClockConfig+0x270>)
 8004934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004936:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <HAL_RCC_ClockConfig+0x274>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f7fd fb54 	bl	8001fe8 <HAL_InitTick>
 8004940:	4603      	mov	r3, r0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40022000 	.word	0x40022000
 8004950:	40021000 	.word	0x40021000
 8004954:	04c4b400 	.word	0x04c4b400
 8004958:	0800bf68 	.word	0x0800bf68
 800495c:	2000009c 	.word	0x2000009c
 8004960:	200000a0 	.word	0x200000a0

08004964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800496a:	4b2c      	ldr	r3, [pc, #176]	; (8004a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
 8004972:	2b04      	cmp	r3, #4
 8004974:	d102      	bne.n	800497c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004976:	4b2a      	ldr	r3, [pc, #168]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	e047      	b.n	8004a0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800497c:	4b27      	ldr	r3, [pc, #156]	; (8004a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 030c 	and.w	r3, r3, #12
 8004984:	2b08      	cmp	r3, #8
 8004986:	d102      	bne.n	800498e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004988:	4b26      	ldr	r3, [pc, #152]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xc0>)
 800498a:	613b      	str	r3, [r7, #16]
 800498c:	e03e      	b.n	8004a0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800498e:	4b23      	ldr	r3, [pc, #140]	; (8004a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b0c      	cmp	r3, #12
 8004998:	d136      	bne.n	8004a08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800499a:	4b20      	ldr	r3, [pc, #128]	; (8004a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049a4:	4b1d      	ldr	r3, [pc, #116]	; (8004a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	091b      	lsrs	r3, r3, #4
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	3301      	adds	r3, #1
 80049b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d10c      	bne.n	80049d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049b8:	4a1a      	ldr	r2, [pc, #104]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	4a16      	ldr	r2, [pc, #88]	; (8004a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049c2:	68d2      	ldr	r2, [r2, #12]
 80049c4:	0a12      	lsrs	r2, r2, #8
 80049c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049ca:	fb02 f303 	mul.w	r3, r2, r3
 80049ce:	617b      	str	r3, [r7, #20]
      break;
 80049d0:	e00c      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049d2:	4a13      	ldr	r2, [pc, #76]	; (8004a20 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049da:	4a10      	ldr	r2, [pc, #64]	; (8004a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049dc:	68d2      	ldr	r2, [r2, #12]
 80049de:	0a12      	lsrs	r2, r2, #8
 80049e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049e4:	fb02 f303 	mul.w	r3, r2, r3
 80049e8:	617b      	str	r3, [r7, #20]
      break;
 80049ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	0e5b      	lsrs	r3, r3, #25
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	3301      	adds	r3, #1
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	e001      	b.n	8004a0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a0c:	693b      	ldr	r3, [r7, #16]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	00f42400 	.word	0x00f42400
 8004a24:	016e3600 	.word	0x016e3600

08004a28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a2c:	4b03      	ldr	r3, [pc, #12]	; (8004a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	2000009c 	.word	0x2000009c

08004a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a44:	f7ff fff0 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	0a1b      	lsrs	r3, r3, #8
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	4904      	ldr	r1, [pc, #16]	; (8004a68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a56:	5ccb      	ldrb	r3, [r1, r3]
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40021000 	.word	0x40021000
 8004a68:	0800bf78 	.word	0x0800bf78

08004a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a70:	f7ff ffda 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 8004a74:	4602      	mov	r2, r0
 8004a76:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	0adb      	lsrs	r3, r3, #11
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	4904      	ldr	r1, [pc, #16]	; (8004a94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a82:	5ccb      	ldrb	r3, [r1, r3]
 8004a84:	f003 031f 	and.w	r3, r3, #31
 8004a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40021000 	.word	0x40021000
 8004a94:	0800bf78 	.word	0x0800bf78

08004a98 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a9e:	4b1e      	ldr	r3, [pc, #120]	; (8004b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	; (8004b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d10c      	bne.n	8004ad6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004abc:	4a17      	ldr	r2, [pc, #92]	; (8004b1c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	4a14      	ldr	r2, [pc, #80]	; (8004b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ac6:	68d2      	ldr	r2, [r2, #12]
 8004ac8:	0a12      	lsrs	r2, r2, #8
 8004aca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ace:	fb02 f303 	mul.w	r3, r2, r3
 8004ad2:	617b      	str	r3, [r7, #20]
    break;
 8004ad4:	e00c      	b.n	8004af0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ad6:	4a12      	ldr	r2, [pc, #72]	; (8004b20 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ade:	4a0e      	ldr	r2, [pc, #56]	; (8004b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ae0:	68d2      	ldr	r2, [r2, #12]
 8004ae2:	0a12      	lsrs	r2, r2, #8
 8004ae4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ae8:	fb02 f303 	mul.w	r3, r2, r3
 8004aec:	617b      	str	r3, [r7, #20]
    break;
 8004aee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004af0:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	0e5b      	lsrs	r3, r3, #25
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	3301      	adds	r3, #1
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b0a:	687b      	ldr	r3, [r7, #4]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	016e3600 	.word	0x016e3600
 8004b20:	00f42400 	.word	0x00f42400

08004b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b30:	2300      	movs	r3, #0
 8004b32:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 8098 	beq.w	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b42:	2300      	movs	r3, #0
 8004b44:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b46:	4b43      	ldr	r3, [pc, #268]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10d      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b52:	4b40      	ldr	r3, [pc, #256]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b56:	4a3f      	ldr	r2, [pc, #252]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b5e:	4b3d      	ldr	r3, [pc, #244]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b6e:	4b3a      	ldr	r3, [pc, #232]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a39      	ldr	r2, [pc, #228]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b7a:	f7fd fa81 	bl	8002080 <HAL_GetTick>
 8004b7e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b80:	e009      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b82:	f7fd fa7d 	bl	8002080 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d902      	bls.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	74fb      	strb	r3, [r7, #19]
        break;
 8004b94:	e005      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b96:	4b30      	ldr	r3, [pc, #192]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0ef      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ba2:	7cfb      	ldrb	r3, [r7, #19]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d159      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ba8:	4b2a      	ldr	r3, [pc, #168]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01e      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d019      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bc4:	4b23      	ldr	r3, [pc, #140]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bd0:	4b20      	ldr	r3, [pc, #128]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd6:	4a1f      	ldr	r2, [pc, #124]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004be0:	4b1c      	ldr	r3, [pc, #112]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be6:	4a1b      	ldr	r2, [pc, #108]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bf0:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d016      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c02:	f7fd fa3d 	bl	8002080 <HAL_GetTick>
 8004c06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c08:	e00b      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0a:	f7fd fa39 	bl	8002080 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d902      	bls.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	74fb      	strb	r3, [r7, #19]
            break;
 8004c20:	e006      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c22:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0ec      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c30:	7cfb      	ldrb	r3, [r7, #19]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10b      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c36:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c44:	4903      	ldr	r1, [pc, #12]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c4c:	e008      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c4e:	7cfb      	ldrb	r3, [r7, #19]
 8004c50:	74bb      	strb	r3, [r7, #18]
 8004c52:	e005      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5c:	7cfb      	ldrb	r3, [r7, #19]
 8004c5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c60:	7c7b      	ldrb	r3, [r7, #17]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d105      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c66:	4ba7      	ldr	r3, [pc, #668]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6a:	4aa6      	ldr	r2, [pc, #664]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c7e:	4ba1      	ldr	r3, [pc, #644]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	f023 0203 	bic.w	r2, r3, #3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	499d      	ldr	r1, [pc, #628]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ca0:	4b98      	ldr	r3, [pc, #608]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca6:	f023 020c 	bic.w	r2, r3, #12
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	4995      	ldr	r1, [pc, #596]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0304 	and.w	r3, r3, #4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cc2:	4b90      	ldr	r3, [pc, #576]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	498c      	ldr	r1, [pc, #560]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ce4:	4b87      	ldr	r3, [pc, #540]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	4984      	ldr	r1, [pc, #528]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0310 	and.w	r3, r3, #16
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d06:	4b7f      	ldr	r3, [pc, #508]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	497b      	ldr	r1, [pc, #492]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d28:	4b76      	ldr	r3, [pc, #472]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	4973      	ldr	r1, [pc, #460]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d4a:	4b6e      	ldr	r3, [pc, #440]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	496a      	ldr	r1, [pc, #424]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d6c:	4b65      	ldr	r3, [pc, #404]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	4962      	ldr	r1, [pc, #392]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d8e:	4b5d      	ldr	r3, [pc, #372]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	4959      	ldr	r1, [pc, #356]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004db0:	4b54      	ldr	r3, [pc, #336]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004db6:	f023 0203 	bic.w	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	4951      	ldr	r1, [pc, #324]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dd2:	4b4c      	ldr	r3, [pc, #304]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	4948      	ldr	r1, [pc, #288]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d015      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004df4:	4b43      	ldr	r3, [pc, #268]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	4940      	ldr	r1, [pc, #256]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e12:	d105      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e14:	4b3b      	ldr	r3, [pc, #236]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4a3a      	ldr	r2, [pc, #232]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d015      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e2c:	4b35      	ldr	r3, [pc, #212]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	4932      	ldr	r1, [pc, #200]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e4a:	d105      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e4c:	4b2d      	ldr	r3, [pc, #180]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	4a2c      	ldr	r2, [pc, #176]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e56:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d015      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e64:	4b27      	ldr	r3, [pc, #156]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	4924      	ldr	r1, [pc, #144]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e82:	d105      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e84:	4b1f      	ldr	r3, [pc, #124]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	4a1e      	ldr	r2, [pc, #120]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e8e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d015      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e9c:	4b19      	ldr	r3, [pc, #100]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eaa:	4916      	ldr	r1, [pc, #88]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eba:	d105      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ebc:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4a10      	ldr	r2, [pc, #64]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d019      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ed4:	4b0b      	ldr	r3, [pc, #44]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	4908      	ldr	r1, [pc, #32]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ef2:	d109      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ef4:	4b03      	ldr	r3, [pc, #12]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4a02      	ldr	r2, [pc, #8]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004efe:	60d3      	str	r3, [r2, #12]
 8004f00:	e002      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004f02:	bf00      	nop
 8004f04:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d015      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f14:	4b29      	ldr	r3, [pc, #164]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f22:	4926      	ldr	r1, [pc, #152]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f32:	d105      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f34:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4a20      	ldr	r2, [pc, #128]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f3e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d015      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004f4c:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f52:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5a:	4918      	ldr	r1, [pc, #96]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6a:	d105      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f6c:	4b13      	ldr	r3, [pc, #76]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4a12      	ldr	r2, [pc, #72]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f76:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d015      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f84:	4b0d      	ldr	r3, [pc, #52]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f92:	490a      	ldr	r1, [pc, #40]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fa2:	d105      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fa4:	4b05      	ldr	r3, [pc, #20]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	4a04      	ldr	r2, [pc, #16]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004fb0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40021000 	.word	0x40021000

08004fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e049      	b.n	8005066 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d106      	bne.n	8004fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fc fde2 	bl	8001bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f000 fe16 	bl	8005c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e049      	b.n	8005114 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7fc fd6b 	bl	8001b70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2202      	movs	r2, #2
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	3304      	adds	r3, #4
 80050aa:	4619      	mov	r1, r3
 80050ac:	4610      	mov	r0, r2
 80050ae:	f000 fdbf 	bl	8005c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d109      	bne.n	8005140 <HAL_TIM_PWM_Start+0x24>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	bf14      	ite	ne
 8005138:	2301      	movne	r3, #1
 800513a:	2300      	moveq	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	e03c      	b.n	80051ba <HAL_TIM_PWM_Start+0x9e>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b04      	cmp	r3, #4
 8005144:	d109      	bne.n	800515a <HAL_TIM_PWM_Start+0x3e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b01      	cmp	r3, #1
 8005150:	bf14      	ite	ne
 8005152:	2301      	movne	r3, #1
 8005154:	2300      	moveq	r3, #0
 8005156:	b2db      	uxtb	r3, r3
 8005158:	e02f      	b.n	80051ba <HAL_TIM_PWM_Start+0x9e>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b08      	cmp	r3, #8
 800515e:	d109      	bne.n	8005174 <HAL_TIM_PWM_Start+0x58>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b01      	cmp	r3, #1
 800516a:	bf14      	ite	ne
 800516c:	2301      	movne	r3, #1
 800516e:	2300      	moveq	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	e022      	b.n	80051ba <HAL_TIM_PWM_Start+0x9e>
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2b0c      	cmp	r3, #12
 8005178:	d109      	bne.n	800518e <HAL_TIM_PWM_Start+0x72>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b01      	cmp	r3, #1
 8005184:	bf14      	ite	ne
 8005186:	2301      	movne	r3, #1
 8005188:	2300      	moveq	r3, #0
 800518a:	b2db      	uxtb	r3, r3
 800518c:	e015      	b.n	80051ba <HAL_TIM_PWM_Start+0x9e>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b10      	cmp	r3, #16
 8005192:	d109      	bne.n	80051a8 <HAL_TIM_PWM_Start+0x8c>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b01      	cmp	r3, #1
 800519e:	bf14      	ite	ne
 80051a0:	2301      	movne	r3, #1
 80051a2:	2300      	moveq	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	e008      	b.n	80051ba <HAL_TIM_PWM_Start+0x9e>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	bf14      	ite	ne
 80051b4:	2301      	movne	r3, #1
 80051b6:	2300      	moveq	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e0a6      	b.n	8005310 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d104      	bne.n	80051d2 <HAL_TIM_PWM_Start+0xb6>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d0:	e023      	b.n	800521a <HAL_TIM_PWM_Start+0xfe>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_PWM_Start+0xc6>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e0:	e01b      	b.n	800521a <HAL_TIM_PWM_Start+0xfe>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_PWM_Start+0xd6>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051f0:	e013      	b.n	800521a <HAL_TIM_PWM_Start+0xfe>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b0c      	cmp	r3, #12
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_PWM_Start+0xe6>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005200:	e00b      	b.n	800521a <HAL_TIM_PWM_Start+0xfe>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b10      	cmp	r3, #16
 8005206:	d104      	bne.n	8005212 <HAL_TIM_PWM_Start+0xf6>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005210:	e003      	b.n	800521a <HAL_TIM_PWM_Start+0xfe>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2202      	movs	r2, #2
 8005216:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2201      	movs	r2, #1
 8005220:	6839      	ldr	r1, [r7, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f001 f972 	bl	800650c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a3a      	ldr	r2, [pc, #232]	; (8005318 <HAL_TIM_PWM_Start+0x1fc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d018      	beq.n	8005264 <HAL_TIM_PWM_Start+0x148>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a39      	ldr	r2, [pc, #228]	; (800531c <HAL_TIM_PWM_Start+0x200>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d013      	beq.n	8005264 <HAL_TIM_PWM_Start+0x148>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a37      	ldr	r2, [pc, #220]	; (8005320 <HAL_TIM_PWM_Start+0x204>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00e      	beq.n	8005264 <HAL_TIM_PWM_Start+0x148>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a36      	ldr	r2, [pc, #216]	; (8005324 <HAL_TIM_PWM_Start+0x208>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d009      	beq.n	8005264 <HAL_TIM_PWM_Start+0x148>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a34      	ldr	r2, [pc, #208]	; (8005328 <HAL_TIM_PWM_Start+0x20c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d004      	beq.n	8005264 <HAL_TIM_PWM_Start+0x148>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a33      	ldr	r2, [pc, #204]	; (800532c <HAL_TIM_PWM_Start+0x210>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d101      	bne.n	8005268 <HAL_TIM_PWM_Start+0x14c>
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <HAL_TIM_PWM_Start+0x14e>
 8005268:	2300      	movs	r3, #0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800527c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a25      	ldr	r2, [pc, #148]	; (8005318 <HAL_TIM_PWM_Start+0x1fc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d022      	beq.n	80052ce <HAL_TIM_PWM_Start+0x1b2>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005290:	d01d      	beq.n	80052ce <HAL_TIM_PWM_Start+0x1b2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a26      	ldr	r2, [pc, #152]	; (8005330 <HAL_TIM_PWM_Start+0x214>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d018      	beq.n	80052ce <HAL_TIM_PWM_Start+0x1b2>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a24      	ldr	r2, [pc, #144]	; (8005334 <HAL_TIM_PWM_Start+0x218>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <HAL_TIM_PWM_Start+0x1b2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a23      	ldr	r2, [pc, #140]	; (8005338 <HAL_TIM_PWM_Start+0x21c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <HAL_TIM_PWM_Start+0x1b2>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a19      	ldr	r2, [pc, #100]	; (800531c <HAL_TIM_PWM_Start+0x200>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_TIM_PWM_Start+0x1b2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a18      	ldr	r2, [pc, #96]	; (8005320 <HAL_TIM_PWM_Start+0x204>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_TIM_PWM_Start+0x1b2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a18      	ldr	r2, [pc, #96]	; (800532c <HAL_TIM_PWM_Start+0x210>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d115      	bne.n	80052fa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	4b19      	ldr	r3, [pc, #100]	; (800533c <HAL_TIM_PWM_Start+0x220>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b06      	cmp	r3, #6
 80052de:	d015      	beq.n	800530c <HAL_TIM_PWM_Start+0x1f0>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e6:	d011      	beq.n	800530c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f8:	e008      	b.n	800530c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0201 	orr.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e000      	b.n	800530e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40012c00 	.word	0x40012c00
 800531c:	40013400 	.word	0x40013400
 8005320:	40014000 	.word	0x40014000
 8005324:	40014400 	.word	0x40014400
 8005328:	40014800 	.word	0x40014800
 800532c:	40015000 	.word	0x40015000
 8005330:	40000400 	.word	0x40000400
 8005334:	40000800 	.word	0x40000800
 8005338:	40000c00 	.word	0x40000c00
 800533c:	00010007 	.word	0x00010007

08005340 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2200      	movs	r2, #0
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f001 f8da 	bl	800650c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a40      	ldr	r2, [pc, #256]	; (8005460 <HAL_TIM_PWM_Stop+0x120>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d018      	beq.n	8005394 <HAL_TIM_PWM_Stop+0x54>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a3f      	ldr	r2, [pc, #252]	; (8005464 <HAL_TIM_PWM_Stop+0x124>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d013      	beq.n	8005394 <HAL_TIM_PWM_Stop+0x54>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a3d      	ldr	r2, [pc, #244]	; (8005468 <HAL_TIM_PWM_Stop+0x128>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00e      	beq.n	8005394 <HAL_TIM_PWM_Stop+0x54>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a3c      	ldr	r2, [pc, #240]	; (800546c <HAL_TIM_PWM_Stop+0x12c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d009      	beq.n	8005394 <HAL_TIM_PWM_Stop+0x54>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a3a      	ldr	r2, [pc, #232]	; (8005470 <HAL_TIM_PWM_Stop+0x130>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d004      	beq.n	8005394 <HAL_TIM_PWM_Stop+0x54>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a39      	ldr	r2, [pc, #228]	; (8005474 <HAL_TIM_PWM_Stop+0x134>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d101      	bne.n	8005398 <HAL_TIM_PWM_Stop+0x58>
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <HAL_TIM_PWM_Stop+0x5a>
 8005398:	2300      	movs	r3, #0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d017      	beq.n	80053ce <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6a1a      	ldr	r2, [r3, #32]
 80053a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80053a8:	4013      	ands	r3, r2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10f      	bne.n	80053ce <HAL_TIM_PWM_Stop+0x8e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6a1a      	ldr	r2, [r3, #32]
 80053b4:	f244 4344 	movw	r3, #17476	; 0x4444
 80053b8:	4013      	ands	r3, r2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d107      	bne.n	80053ce <HAL_TIM_PWM_Stop+0x8e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	6a1a      	ldr	r2, [r3, #32]
 80053d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80053d8:	4013      	ands	r3, r2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10f      	bne.n	80053fe <HAL_TIM_PWM_Stop+0xbe>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6a1a      	ldr	r2, [r3, #32]
 80053e4:	f244 4344 	movw	r3, #17476	; 0x4444
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d107      	bne.n	80053fe <HAL_TIM_PWM_Stop+0xbe>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <HAL_TIM_PWM_Stop+0xce>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800540c:	e023      	b.n	8005456 <HAL_TIM_PWM_Stop+0x116>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b04      	cmp	r3, #4
 8005412:	d104      	bne.n	800541e <HAL_TIM_PWM_Stop+0xde>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800541c:	e01b      	b.n	8005456 <HAL_TIM_PWM_Stop+0x116>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b08      	cmp	r3, #8
 8005422:	d104      	bne.n	800542e <HAL_TIM_PWM_Stop+0xee>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800542c:	e013      	b.n	8005456 <HAL_TIM_PWM_Stop+0x116>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b0c      	cmp	r3, #12
 8005432:	d104      	bne.n	800543e <HAL_TIM_PWM_Stop+0xfe>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800543c:	e00b      	b.n	8005456 <HAL_TIM_PWM_Stop+0x116>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b10      	cmp	r3, #16
 8005442:	d104      	bne.n	800544e <HAL_TIM_PWM_Stop+0x10e>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800544c:	e003      	b.n	8005456 <HAL_TIM_PWM_Stop+0x116>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40013400 	.word	0x40013400
 8005468:	40014000 	.word	0x40014000
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800
 8005474:	40015000 	.word	0x40015000

08005478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b02      	cmp	r3, #2
 800548c:	d122      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b02      	cmp	r3, #2
 800549a:	d11b      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0202 	mvn.w	r2, #2
 80054a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fb9a 	bl	8005bf4 <HAL_TIM_IC_CaptureCallback>
 80054c0:	e005      	b.n	80054ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fb8c 	bl	8005be0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fb9d 	bl	8005c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d122      	bne.n	8005528 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d11b      	bne.n	8005528 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0204 	mvn.w	r2, #4
 80054f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2202      	movs	r2, #2
 80054fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fb70 	bl	8005bf4 <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fb62 	bl	8005be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fb73 	bl	8005c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	2b08      	cmp	r3, #8
 8005534:	d122      	bne.n	800557c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b08      	cmp	r3, #8
 8005542:	d11b      	bne.n	800557c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0208 	mvn.w	r2, #8
 800554c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2204      	movs	r2, #4
 8005552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fb46 	bl	8005bf4 <HAL_TIM_IC_CaptureCallback>
 8005568:	e005      	b.n	8005576 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fb38 	bl	8005be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fb49 	bl	8005c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0310 	and.w	r3, r3, #16
 8005586:	2b10      	cmp	r3, #16
 8005588:	d122      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b10      	cmp	r3, #16
 8005596:	d11b      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0210 	mvn.w	r2, #16
 80055a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2208      	movs	r2, #8
 80055a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fb1c 	bl	8005bf4 <HAL_TIM_IC_CaptureCallback>
 80055bc:	e005      	b.n	80055ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fb0e 	bl	8005be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fb1f 	bl	8005c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d10e      	bne.n	80055fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d107      	bne.n	80055fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0201 	mvn.w	r2, #1
 80055f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fae8 	bl	8005bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005606:	2b80      	cmp	r3, #128	; 0x80
 8005608:	d10e      	bne.n	8005628 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005614:	2b80      	cmp	r3, #128	; 0x80
 8005616:	d107      	bne.n	8005628 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f001 fa0a 	bl	8006a3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005636:	d10e      	bne.n	8005656 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005642:	2b80      	cmp	r3, #128	; 0x80
 8005644:	d107      	bne.n	8005656 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800564e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f001 f9fd 	bl	8006a50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005660:	2b40      	cmp	r3, #64	; 0x40
 8005662:	d10e      	bne.n	8005682 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566e:	2b40      	cmp	r3, #64	; 0x40
 8005670:	d107      	bne.n	8005682 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800567a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 facd 	bl	8005c1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b20      	cmp	r3, #32
 800568e:	d10e      	bne.n	80056ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b20      	cmp	r3, #32
 800569c:	d107      	bne.n	80056ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f06f 0220 	mvn.w	r2, #32
 80056a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f001 f9bd 	bl	8006a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056bc:	d10f      	bne.n	80056de <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056cc:	d107      	bne.n	80056de <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80056d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f001 f9c3 	bl	8006a64 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056ec:	d10f      	bne.n	800570e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056fc:	d107      	bne.n	800570e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f001 f9b5 	bl	8006a78 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800571c:	d10f      	bne.n	800573e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005728:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800572c:	d107      	bne.n	800573e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f001 f9a7 	bl	8006a8c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005748:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800574c:	d10f      	bne.n	800576e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005758:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800575c:	d107      	bne.n	800576e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f001 f999 	bl	8006aa0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800576e:	bf00      	nop
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800578e:	2b01      	cmp	r3, #1
 8005790:	d101      	bne.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005792:	2302      	movs	r3, #2
 8005794:	e0ff      	b.n	8005996 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b14      	cmp	r3, #20
 80057a2:	f200 80f0 	bhi.w	8005986 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80057a6:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ac:	08005801 	.word	0x08005801
 80057b0:	08005987 	.word	0x08005987
 80057b4:	08005987 	.word	0x08005987
 80057b8:	08005987 	.word	0x08005987
 80057bc:	08005841 	.word	0x08005841
 80057c0:	08005987 	.word	0x08005987
 80057c4:	08005987 	.word	0x08005987
 80057c8:	08005987 	.word	0x08005987
 80057cc:	08005883 	.word	0x08005883
 80057d0:	08005987 	.word	0x08005987
 80057d4:	08005987 	.word	0x08005987
 80057d8:	08005987 	.word	0x08005987
 80057dc:	080058c3 	.word	0x080058c3
 80057e0:	08005987 	.word	0x08005987
 80057e4:	08005987 	.word	0x08005987
 80057e8:	08005987 	.word	0x08005987
 80057ec:	08005905 	.word	0x08005905
 80057f0:	08005987 	.word	0x08005987
 80057f4:	08005987 	.word	0x08005987
 80057f8:	08005987 	.word	0x08005987
 80057fc:	08005945 	.word	0x08005945
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 faba 	bl	8005d80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0208 	orr.w	r2, r2, #8
 800581a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0204 	bic.w	r2, r2, #4
 800582a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6999      	ldr	r1, [r3, #24]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	619a      	str	r2, [r3, #24]
      break;
 800583e:	e0a5      	b.n	800598c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68b9      	ldr	r1, [r7, #8]
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fb34 	bl	8005eb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800585a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800586a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6999      	ldr	r1, [r3, #24]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	021a      	lsls	r2, r3, #8
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	619a      	str	r2, [r3, #24]
      break;
 8005880:	e084      	b.n	800598c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fba7 	bl	8005fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0208 	orr.w	r2, r2, #8
 800589c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69da      	ldr	r2, [r3, #28]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0204 	bic.w	r2, r2, #4
 80058ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69d9      	ldr	r1, [r3, #28]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	61da      	str	r2, [r3, #28]
      break;
 80058c0:	e064      	b.n	800598c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 fc19 	bl	8006100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69d9      	ldr	r1, [r3, #28]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	021a      	lsls	r2, r3, #8
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	61da      	str	r2, [r3, #28]
      break;
 8005902:	e043      	b.n	800598c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fc8c 	bl	8006228 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0208 	orr.w	r2, r2, #8
 800591e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0204 	bic.w	r2, r2, #4
 800592e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	691a      	ldr	r2, [r3, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005942:	e023      	b.n	800598c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fcd6 	bl	80062fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800595e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800596e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	021a      	lsls	r2, r3, #8
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005984:	e002      	b.n	800598c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	75fb      	strb	r3, [r7, #23]
      break;
 800598a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005994:	7dfb      	ldrb	r3, [r7, #23]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop

080059a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_TIM_ConfigClockSource+0x1c>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e0f6      	b.n	8005baa <HAL_TIM_ConfigClockSource+0x20a>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80059da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a6f      	ldr	r2, [pc, #444]	; (8005bb4 <HAL_TIM_ConfigClockSource+0x214>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	f000 80c1 	beq.w	8005b7e <HAL_TIM_ConfigClockSource+0x1de>
 80059fc:	4a6d      	ldr	r2, [pc, #436]	; (8005bb4 <HAL_TIM_ConfigClockSource+0x214>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	f200 80c6 	bhi.w	8005b90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a04:	4a6c      	ldr	r2, [pc, #432]	; (8005bb8 <HAL_TIM_ConfigClockSource+0x218>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	f000 80b9 	beq.w	8005b7e <HAL_TIM_ConfigClockSource+0x1de>
 8005a0c:	4a6a      	ldr	r2, [pc, #424]	; (8005bb8 <HAL_TIM_ConfigClockSource+0x218>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	f200 80be 	bhi.w	8005b90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a14:	4a69      	ldr	r2, [pc, #420]	; (8005bbc <HAL_TIM_ConfigClockSource+0x21c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	f000 80b1 	beq.w	8005b7e <HAL_TIM_ConfigClockSource+0x1de>
 8005a1c:	4a67      	ldr	r2, [pc, #412]	; (8005bbc <HAL_TIM_ConfigClockSource+0x21c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	f200 80b6 	bhi.w	8005b90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a24:	4a66      	ldr	r2, [pc, #408]	; (8005bc0 <HAL_TIM_ConfigClockSource+0x220>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	f000 80a9 	beq.w	8005b7e <HAL_TIM_ConfigClockSource+0x1de>
 8005a2c:	4a64      	ldr	r2, [pc, #400]	; (8005bc0 <HAL_TIM_ConfigClockSource+0x220>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	f200 80ae 	bhi.w	8005b90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a34:	4a63      	ldr	r2, [pc, #396]	; (8005bc4 <HAL_TIM_ConfigClockSource+0x224>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	f000 80a1 	beq.w	8005b7e <HAL_TIM_ConfigClockSource+0x1de>
 8005a3c:	4a61      	ldr	r2, [pc, #388]	; (8005bc4 <HAL_TIM_ConfigClockSource+0x224>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	f200 80a6 	bhi.w	8005b90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a44:	4a60      	ldr	r2, [pc, #384]	; (8005bc8 <HAL_TIM_ConfigClockSource+0x228>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	f000 8099 	beq.w	8005b7e <HAL_TIM_ConfigClockSource+0x1de>
 8005a4c:	4a5e      	ldr	r2, [pc, #376]	; (8005bc8 <HAL_TIM_ConfigClockSource+0x228>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	f200 809e 	bhi.w	8005b90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005a58:	f000 8091 	beq.w	8005b7e <HAL_TIM_ConfigClockSource+0x1de>
 8005a5c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005a60:	f200 8096 	bhi.w	8005b90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a68:	f000 8089 	beq.w	8005b7e <HAL_TIM_ConfigClockSource+0x1de>
 8005a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a70:	f200 808e 	bhi.w	8005b90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a78:	d03e      	beq.n	8005af8 <HAL_TIM_ConfigClockSource+0x158>
 8005a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a7e:	f200 8087 	bhi.w	8005b90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a86:	f000 8086 	beq.w	8005b96 <HAL_TIM_ConfigClockSource+0x1f6>
 8005a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8e:	d87f      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a90:	2b70      	cmp	r3, #112	; 0x70
 8005a92:	d01a      	beq.n	8005aca <HAL_TIM_ConfigClockSource+0x12a>
 8005a94:	2b70      	cmp	r3, #112	; 0x70
 8005a96:	d87b      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a98:	2b60      	cmp	r3, #96	; 0x60
 8005a9a:	d050      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x19e>
 8005a9c:	2b60      	cmp	r3, #96	; 0x60
 8005a9e:	d877      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005aa0:	2b50      	cmp	r3, #80	; 0x50
 8005aa2:	d03c      	beq.n	8005b1e <HAL_TIM_ConfigClockSource+0x17e>
 8005aa4:	2b50      	cmp	r3, #80	; 0x50
 8005aa6:	d873      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005aa8:	2b40      	cmp	r3, #64	; 0x40
 8005aaa:	d058      	beq.n	8005b5e <HAL_TIM_ConfigClockSource+0x1be>
 8005aac:	2b40      	cmp	r3, #64	; 0x40
 8005aae:	d86f      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ab0:	2b30      	cmp	r3, #48	; 0x30
 8005ab2:	d064      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x1de>
 8005ab4:	2b30      	cmp	r3, #48	; 0x30
 8005ab6:	d86b      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d060      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x1de>
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	d867      	bhi.n	8005b90 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d05c      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x1de>
 8005ac4:	2b10      	cmp	r3, #16
 8005ac6:	d05a      	beq.n	8005b7e <HAL_TIM_ConfigClockSource+0x1de>
 8005ac8:	e062      	b.n	8005b90 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	6899      	ldr	r1, [r3, #8]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f000 fcf7 	bl	80064cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005aec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	609a      	str	r2, [r3, #8]
      break;
 8005af6:	e04f      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6818      	ldr	r0, [r3, #0]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	6899      	ldr	r1, [r3, #8]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f000 fce0 	bl	80064cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b1a:	609a      	str	r2, [r3, #8]
      break;
 8005b1c:	e03c      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6818      	ldr	r0, [r3, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	6859      	ldr	r1, [r3, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f000 fc52 	bl	80063d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2150      	movs	r1, #80	; 0x50
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fcab 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005b3c:	e02c      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6818      	ldr	r0, [r3, #0]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	6859      	ldr	r1, [r3, #4]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f000 fc71 	bl	8006432 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2160      	movs	r1, #96	; 0x60
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fc9b 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005b5c:	e01c      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6859      	ldr	r1, [r3, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f000 fc32 	bl	80063d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2140      	movs	r1, #64	; 0x40
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fc8b 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005b7c:	e00c      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4619      	mov	r1, r3
 8005b88:	4610      	mov	r0, r2
 8005b8a:	f000 fc82 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005b8e:	e003      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	73fb      	strb	r3, [r7, #15]
      break;
 8005b94:	e000      	b.n	8005b98 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005b96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	00100070 	.word	0x00100070
 8005bb8:	00100060 	.word	0x00100060
 8005bbc:	00100050 	.word	0x00100050
 8005bc0:	00100040 	.word	0x00100040
 8005bc4:	00100030 	.word	0x00100030
 8005bc8:	00100020 	.word	0x00100020

08005bcc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a46      	ldr	r2, [pc, #280]	; (8005d5c <TIM_Base_SetConfig+0x12c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d017      	beq.n	8005c78 <TIM_Base_SetConfig+0x48>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4e:	d013      	beq.n	8005c78 <TIM_Base_SetConfig+0x48>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a43      	ldr	r2, [pc, #268]	; (8005d60 <TIM_Base_SetConfig+0x130>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00f      	beq.n	8005c78 <TIM_Base_SetConfig+0x48>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a42      	ldr	r2, [pc, #264]	; (8005d64 <TIM_Base_SetConfig+0x134>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d00b      	beq.n	8005c78 <TIM_Base_SetConfig+0x48>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a41      	ldr	r2, [pc, #260]	; (8005d68 <TIM_Base_SetConfig+0x138>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d007      	beq.n	8005c78 <TIM_Base_SetConfig+0x48>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a40      	ldr	r2, [pc, #256]	; (8005d6c <TIM_Base_SetConfig+0x13c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d003      	beq.n	8005c78 <TIM_Base_SetConfig+0x48>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a3f      	ldr	r2, [pc, #252]	; (8005d70 <TIM_Base_SetConfig+0x140>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d108      	bne.n	8005c8a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a33      	ldr	r2, [pc, #204]	; (8005d5c <TIM_Base_SetConfig+0x12c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d023      	beq.n	8005cda <TIM_Base_SetConfig+0xaa>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c98:	d01f      	beq.n	8005cda <TIM_Base_SetConfig+0xaa>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a30      	ldr	r2, [pc, #192]	; (8005d60 <TIM_Base_SetConfig+0x130>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d01b      	beq.n	8005cda <TIM_Base_SetConfig+0xaa>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2f      	ldr	r2, [pc, #188]	; (8005d64 <TIM_Base_SetConfig+0x134>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d017      	beq.n	8005cda <TIM_Base_SetConfig+0xaa>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a2e      	ldr	r2, [pc, #184]	; (8005d68 <TIM_Base_SetConfig+0x138>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d013      	beq.n	8005cda <TIM_Base_SetConfig+0xaa>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2d      	ldr	r2, [pc, #180]	; (8005d6c <TIM_Base_SetConfig+0x13c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00f      	beq.n	8005cda <TIM_Base_SetConfig+0xaa>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a2d      	ldr	r2, [pc, #180]	; (8005d74 <TIM_Base_SetConfig+0x144>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00b      	beq.n	8005cda <TIM_Base_SetConfig+0xaa>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a2c      	ldr	r2, [pc, #176]	; (8005d78 <TIM_Base_SetConfig+0x148>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d007      	beq.n	8005cda <TIM_Base_SetConfig+0xaa>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a2b      	ldr	r2, [pc, #172]	; (8005d7c <TIM_Base_SetConfig+0x14c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d003      	beq.n	8005cda <TIM_Base_SetConfig+0xaa>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a26      	ldr	r2, [pc, #152]	; (8005d70 <TIM_Base_SetConfig+0x140>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d108      	bne.n	8005cec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a12      	ldr	r2, [pc, #72]	; (8005d5c <TIM_Base_SetConfig+0x12c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d013      	beq.n	8005d40 <TIM_Base_SetConfig+0x110>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a14      	ldr	r2, [pc, #80]	; (8005d6c <TIM_Base_SetConfig+0x13c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00f      	beq.n	8005d40 <TIM_Base_SetConfig+0x110>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a14      	ldr	r2, [pc, #80]	; (8005d74 <TIM_Base_SetConfig+0x144>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00b      	beq.n	8005d40 <TIM_Base_SetConfig+0x110>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a13      	ldr	r2, [pc, #76]	; (8005d78 <TIM_Base_SetConfig+0x148>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d007      	beq.n	8005d40 <TIM_Base_SetConfig+0x110>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a12      	ldr	r2, [pc, #72]	; (8005d7c <TIM_Base_SetConfig+0x14c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d003      	beq.n	8005d40 <TIM_Base_SetConfig+0x110>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a0d      	ldr	r2, [pc, #52]	; (8005d70 <TIM_Base_SetConfig+0x140>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d103      	bne.n	8005d48 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	615a      	str	r2, [r3, #20]
}
 8005d4e:	bf00      	nop
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40012c00 	.word	0x40012c00
 8005d60:	40000400 	.word	0x40000400
 8005d64:	40000800 	.word	0x40000800
 8005d68:	40000c00 	.word	0x40000c00
 8005d6c:	40013400 	.word	0x40013400
 8005d70:	40015000 	.word	0x40015000
 8005d74:	40014000 	.word	0x40014000
 8005d78:	40014400 	.word	0x40014400
 8005d7c:	40014800 	.word	0x40014800

08005d80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f023 0201 	bic.w	r2, r3, #1
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0303 	bic.w	r3, r3, #3
 8005dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f023 0302 	bic.w	r3, r3, #2
 8005dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a30      	ldr	r2, [pc, #192]	; (8005e9c <TIM_OC1_SetConfig+0x11c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d013      	beq.n	8005e08 <TIM_OC1_SetConfig+0x88>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a2f      	ldr	r2, [pc, #188]	; (8005ea0 <TIM_OC1_SetConfig+0x120>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00f      	beq.n	8005e08 <TIM_OC1_SetConfig+0x88>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a2e      	ldr	r2, [pc, #184]	; (8005ea4 <TIM_OC1_SetConfig+0x124>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00b      	beq.n	8005e08 <TIM_OC1_SetConfig+0x88>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a2d      	ldr	r2, [pc, #180]	; (8005ea8 <TIM_OC1_SetConfig+0x128>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d007      	beq.n	8005e08 <TIM_OC1_SetConfig+0x88>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a2c      	ldr	r2, [pc, #176]	; (8005eac <TIM_OC1_SetConfig+0x12c>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d003      	beq.n	8005e08 <TIM_OC1_SetConfig+0x88>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a2b      	ldr	r2, [pc, #172]	; (8005eb0 <TIM_OC1_SetConfig+0x130>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d10c      	bne.n	8005e22 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f023 0308 	bic.w	r3, r3, #8
 8005e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f023 0304 	bic.w	r3, r3, #4
 8005e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a1d      	ldr	r2, [pc, #116]	; (8005e9c <TIM_OC1_SetConfig+0x11c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d013      	beq.n	8005e52 <TIM_OC1_SetConfig+0xd2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a1c      	ldr	r2, [pc, #112]	; (8005ea0 <TIM_OC1_SetConfig+0x120>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00f      	beq.n	8005e52 <TIM_OC1_SetConfig+0xd2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a1b      	ldr	r2, [pc, #108]	; (8005ea4 <TIM_OC1_SetConfig+0x124>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00b      	beq.n	8005e52 <TIM_OC1_SetConfig+0xd2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a1a      	ldr	r2, [pc, #104]	; (8005ea8 <TIM_OC1_SetConfig+0x128>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d007      	beq.n	8005e52 <TIM_OC1_SetConfig+0xd2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a19      	ldr	r2, [pc, #100]	; (8005eac <TIM_OC1_SetConfig+0x12c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d003      	beq.n	8005e52 <TIM_OC1_SetConfig+0xd2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a18      	ldr	r2, [pc, #96]	; (8005eb0 <TIM_OC1_SetConfig+0x130>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d111      	bne.n	8005e76 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	621a      	str	r2, [r3, #32]
}
 8005e90:	bf00      	nop
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	40012c00 	.word	0x40012c00
 8005ea0:	40013400 	.word	0x40013400
 8005ea4:	40014000 	.word	0x40014000
 8005ea8:	40014400 	.word	0x40014400
 8005eac:	40014800 	.word	0x40014800
 8005eb0:	40015000 	.word	0x40015000

08005eb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	f023 0210 	bic.w	r2, r3, #16
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f023 0320 	bic.w	r3, r3, #32
 8005f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a2c      	ldr	r2, [pc, #176]	; (8005fc4 <TIM_OC2_SetConfig+0x110>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d007      	beq.n	8005f28 <TIM_OC2_SetConfig+0x74>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a2b      	ldr	r2, [pc, #172]	; (8005fc8 <TIM_OC2_SetConfig+0x114>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d003      	beq.n	8005f28 <TIM_OC2_SetConfig+0x74>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a2a      	ldr	r2, [pc, #168]	; (8005fcc <TIM_OC2_SetConfig+0x118>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d10d      	bne.n	8005f44 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a1f      	ldr	r2, [pc, #124]	; (8005fc4 <TIM_OC2_SetConfig+0x110>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d013      	beq.n	8005f74 <TIM_OC2_SetConfig+0xc0>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a1e      	ldr	r2, [pc, #120]	; (8005fc8 <TIM_OC2_SetConfig+0x114>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00f      	beq.n	8005f74 <TIM_OC2_SetConfig+0xc0>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a1e      	ldr	r2, [pc, #120]	; (8005fd0 <TIM_OC2_SetConfig+0x11c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00b      	beq.n	8005f74 <TIM_OC2_SetConfig+0xc0>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a1d      	ldr	r2, [pc, #116]	; (8005fd4 <TIM_OC2_SetConfig+0x120>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d007      	beq.n	8005f74 <TIM_OC2_SetConfig+0xc0>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a1c      	ldr	r2, [pc, #112]	; (8005fd8 <TIM_OC2_SetConfig+0x124>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d003      	beq.n	8005f74 <TIM_OC2_SetConfig+0xc0>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a17      	ldr	r2, [pc, #92]	; (8005fcc <TIM_OC2_SetConfig+0x118>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d113      	bne.n	8005f9c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40012c00 	.word	0x40012c00
 8005fc8:	40013400 	.word	0x40013400
 8005fcc:	40015000 	.word	0x40015000
 8005fd0:	40014000 	.word	0x40014000
 8005fd4:	40014400 	.word	0x40014400
 8005fd8:	40014800 	.word	0x40014800

08005fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800600a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0303 	bic.w	r3, r3, #3
 8006016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	021b      	lsls	r3, r3, #8
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a2b      	ldr	r2, [pc, #172]	; (80060e8 <TIM_OC3_SetConfig+0x10c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d007      	beq.n	800604e <TIM_OC3_SetConfig+0x72>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2a      	ldr	r2, [pc, #168]	; (80060ec <TIM_OC3_SetConfig+0x110>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d003      	beq.n	800604e <TIM_OC3_SetConfig+0x72>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a29      	ldr	r2, [pc, #164]	; (80060f0 <TIM_OC3_SetConfig+0x114>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d10d      	bne.n	800606a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	021b      	lsls	r3, r3, #8
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	4313      	orrs	r3, r2
 8006060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a1e      	ldr	r2, [pc, #120]	; (80060e8 <TIM_OC3_SetConfig+0x10c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d013      	beq.n	800609a <TIM_OC3_SetConfig+0xbe>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a1d      	ldr	r2, [pc, #116]	; (80060ec <TIM_OC3_SetConfig+0x110>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00f      	beq.n	800609a <TIM_OC3_SetConfig+0xbe>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a1d      	ldr	r2, [pc, #116]	; (80060f4 <TIM_OC3_SetConfig+0x118>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00b      	beq.n	800609a <TIM_OC3_SetConfig+0xbe>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a1c      	ldr	r2, [pc, #112]	; (80060f8 <TIM_OC3_SetConfig+0x11c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d007      	beq.n	800609a <TIM_OC3_SetConfig+0xbe>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a1b      	ldr	r2, [pc, #108]	; (80060fc <TIM_OC3_SetConfig+0x120>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d003      	beq.n	800609a <TIM_OC3_SetConfig+0xbe>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a16      	ldr	r2, [pc, #88]	; (80060f0 <TIM_OC3_SetConfig+0x114>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d113      	bne.n	80060c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	011b      	lsls	r3, r3, #4
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4313      	orrs	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	621a      	str	r2, [r3, #32]
}
 80060dc:	bf00      	nop
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40013400 	.word	0x40013400
 80060f0:	40015000 	.word	0x40015000
 80060f4:	40014000 	.word	0x40014000
 80060f8:	40014400 	.word	0x40014400
 80060fc:	40014800 	.word	0x40014800

08006100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800612e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800613a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4313      	orrs	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800614e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	031b      	lsls	r3, r3, #12
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	4313      	orrs	r3, r2
 800615a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a2c      	ldr	r2, [pc, #176]	; (8006210 <TIM_OC4_SetConfig+0x110>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d007      	beq.n	8006174 <TIM_OC4_SetConfig+0x74>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a2b      	ldr	r2, [pc, #172]	; (8006214 <TIM_OC4_SetConfig+0x114>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d003      	beq.n	8006174 <TIM_OC4_SetConfig+0x74>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a2a      	ldr	r2, [pc, #168]	; (8006218 <TIM_OC4_SetConfig+0x118>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d10d      	bne.n	8006190 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800617a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	031b      	lsls	r3, r3, #12
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800618e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a1f      	ldr	r2, [pc, #124]	; (8006210 <TIM_OC4_SetConfig+0x110>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d013      	beq.n	80061c0 <TIM_OC4_SetConfig+0xc0>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a1e      	ldr	r2, [pc, #120]	; (8006214 <TIM_OC4_SetConfig+0x114>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00f      	beq.n	80061c0 <TIM_OC4_SetConfig+0xc0>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a1e      	ldr	r2, [pc, #120]	; (800621c <TIM_OC4_SetConfig+0x11c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00b      	beq.n	80061c0 <TIM_OC4_SetConfig+0xc0>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a1d      	ldr	r2, [pc, #116]	; (8006220 <TIM_OC4_SetConfig+0x120>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d007      	beq.n	80061c0 <TIM_OC4_SetConfig+0xc0>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a1c      	ldr	r2, [pc, #112]	; (8006224 <TIM_OC4_SetConfig+0x124>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d003      	beq.n	80061c0 <TIM_OC4_SetConfig+0xc0>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a17      	ldr	r2, [pc, #92]	; (8006218 <TIM_OC4_SetConfig+0x118>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d113      	bne.n	80061e8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	019b      	lsls	r3, r3, #6
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	019b      	lsls	r3, r3, #6
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	621a      	str	r2, [r3, #32]
}
 8006202:	bf00      	nop
 8006204:	371c      	adds	r7, #28
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	40012c00 	.word	0x40012c00
 8006214:	40013400 	.word	0x40013400
 8006218:	40015000 	.word	0x40015000
 800621c:	40014000 	.word	0x40014000
 8006220:	40014400 	.word	0x40014400
 8006224:	40014800 	.word	0x40014800

08006228 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800626c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	041b      	lsls	r3, r3, #16
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4313      	orrs	r3, r2
 8006278:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a19      	ldr	r2, [pc, #100]	; (80062e4 <TIM_OC5_SetConfig+0xbc>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d013      	beq.n	80062aa <TIM_OC5_SetConfig+0x82>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a18      	ldr	r2, [pc, #96]	; (80062e8 <TIM_OC5_SetConfig+0xc0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00f      	beq.n	80062aa <TIM_OC5_SetConfig+0x82>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a17      	ldr	r2, [pc, #92]	; (80062ec <TIM_OC5_SetConfig+0xc4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00b      	beq.n	80062aa <TIM_OC5_SetConfig+0x82>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a16      	ldr	r2, [pc, #88]	; (80062f0 <TIM_OC5_SetConfig+0xc8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d007      	beq.n	80062aa <TIM_OC5_SetConfig+0x82>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a15      	ldr	r2, [pc, #84]	; (80062f4 <TIM_OC5_SetConfig+0xcc>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d003      	beq.n	80062aa <TIM_OC5_SetConfig+0x82>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a14      	ldr	r2, [pc, #80]	; (80062f8 <TIM_OC5_SetConfig+0xd0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d109      	bne.n	80062be <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	021b      	lsls	r3, r3, #8
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	621a      	str	r2, [r3, #32]
}
 80062d8:	bf00      	nop
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	40013400 	.word	0x40013400
 80062ec:	40014000 	.word	0x40014000
 80062f0:	40014400 	.word	0x40014400
 80062f4:	40014800 	.word	0x40014800
 80062f8:	40015000 	.word	0x40015000

080062fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800632a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	021b      	lsls	r3, r3, #8
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	051b      	lsls	r3, r3, #20
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a1a      	ldr	r2, [pc, #104]	; (80063bc <TIM_OC6_SetConfig+0xc0>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d013      	beq.n	8006380 <TIM_OC6_SetConfig+0x84>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a19      	ldr	r2, [pc, #100]	; (80063c0 <TIM_OC6_SetConfig+0xc4>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00f      	beq.n	8006380 <TIM_OC6_SetConfig+0x84>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a18      	ldr	r2, [pc, #96]	; (80063c4 <TIM_OC6_SetConfig+0xc8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00b      	beq.n	8006380 <TIM_OC6_SetConfig+0x84>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a17      	ldr	r2, [pc, #92]	; (80063c8 <TIM_OC6_SetConfig+0xcc>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d007      	beq.n	8006380 <TIM_OC6_SetConfig+0x84>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a16      	ldr	r2, [pc, #88]	; (80063cc <TIM_OC6_SetConfig+0xd0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d003      	beq.n	8006380 <TIM_OC6_SetConfig+0x84>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a15      	ldr	r2, [pc, #84]	; (80063d0 <TIM_OC6_SetConfig+0xd4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d109      	bne.n	8006394 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006386:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	029b      	lsls	r3, r3, #10
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	621a      	str	r2, [r3, #32]
}
 80063ae:	bf00      	nop
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40012c00 	.word	0x40012c00
 80063c0:	40013400 	.word	0x40013400
 80063c4:	40014000 	.word	0x40014000
 80063c8:	40014400 	.word	0x40014400
 80063cc:	40014800 	.word	0x40014800
 80063d0:	40015000 	.word	0x40015000

080063d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f023 0201 	bic.w	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f023 030a 	bic.w	r3, r3, #10
 8006410:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	621a      	str	r2, [r3, #32]
}
 8006426:	bf00      	nop
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006432:	b480      	push	{r7}
 8006434:	b087      	sub	sp, #28
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	f023 0210 	bic.w	r2, r3, #16
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800645c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	031b      	lsls	r3, r3, #12
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800646e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	4313      	orrs	r3, r2
 8006478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	621a      	str	r2, [r3, #32]
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006492:	b480      	push	{r7}
 8006494:	b085      	sub	sp, #20
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80064a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f043 0307 	orr.w	r3, r3, #7
 80064b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	609a      	str	r2, [r3, #8]
}
 80064c0:	bf00      	nop
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
 80064d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	021a      	lsls	r2, r3, #8
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	431a      	orrs	r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	609a      	str	r2, [r3, #8]
}
 8006500:	bf00      	nop
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f003 031f 	and.w	r3, r3, #31
 800651e:	2201      	movs	r2, #1
 8006520:	fa02 f303 	lsl.w	r3, r2, r3
 8006524:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6a1a      	ldr	r2, [r3, #32]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	43db      	mvns	r3, r3
 800652e:	401a      	ands	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a1a      	ldr	r2, [r3, #32]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	fa01 f303 	lsl.w	r3, r1, r3
 8006544:	431a      	orrs	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	621a      	str	r2, [r3, #32]
}
 800654a:	bf00      	nop
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
	...

08006558 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d109      	bne.n	800657c <HAL_TIMEx_PWMN_Start+0x24>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b01      	cmp	r3, #1
 8006572:	bf14      	ite	ne
 8006574:	2301      	movne	r3, #1
 8006576:	2300      	moveq	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	e022      	b.n	80065c2 <HAL_TIMEx_PWMN_Start+0x6a>
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2b04      	cmp	r3, #4
 8006580:	d109      	bne.n	8006596 <HAL_TIMEx_PWMN_Start+0x3e>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b01      	cmp	r3, #1
 800658c:	bf14      	ite	ne
 800658e:	2301      	movne	r3, #1
 8006590:	2300      	moveq	r3, #0
 8006592:	b2db      	uxtb	r3, r3
 8006594:	e015      	b.n	80065c2 <HAL_TIMEx_PWMN_Start+0x6a>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b08      	cmp	r3, #8
 800659a:	d109      	bne.n	80065b0 <HAL_TIMEx_PWMN_Start+0x58>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	bf14      	ite	ne
 80065a8:	2301      	movne	r3, #1
 80065aa:	2300      	moveq	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	e008      	b.n	80065c2 <HAL_TIMEx_PWMN_Start+0x6a>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	bf14      	ite	ne
 80065bc:	2301      	movne	r3, #1
 80065be:	2300      	moveq	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e073      	b.n	80066b2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d104      	bne.n	80065da <HAL_TIMEx_PWMN_Start+0x82>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065d8:	e013      	b.n	8006602 <HAL_TIMEx_PWMN_Start+0xaa>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b04      	cmp	r3, #4
 80065de:	d104      	bne.n	80065ea <HAL_TIMEx_PWMN_Start+0x92>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065e8:	e00b      	b.n	8006602 <HAL_TIMEx_PWMN_Start+0xaa>
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b08      	cmp	r3, #8
 80065ee:	d104      	bne.n	80065fa <HAL_TIMEx_PWMN_Start+0xa2>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065f8:	e003      	b.n	8006602 <HAL_TIMEx_PWMN_Start+0xaa>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2202      	movs	r2, #2
 80065fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2204      	movs	r2, #4
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fa52 	bl	8006ab4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800661e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a25      	ldr	r2, [pc, #148]	; (80066bc <HAL_TIMEx_PWMN_Start+0x164>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d022      	beq.n	8006670 <HAL_TIMEx_PWMN_Start+0x118>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006632:	d01d      	beq.n	8006670 <HAL_TIMEx_PWMN_Start+0x118>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a21      	ldr	r2, [pc, #132]	; (80066c0 <HAL_TIMEx_PWMN_Start+0x168>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d018      	beq.n	8006670 <HAL_TIMEx_PWMN_Start+0x118>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a20      	ldr	r2, [pc, #128]	; (80066c4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d013      	beq.n	8006670 <HAL_TIMEx_PWMN_Start+0x118>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a1e      	ldr	r2, [pc, #120]	; (80066c8 <HAL_TIMEx_PWMN_Start+0x170>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00e      	beq.n	8006670 <HAL_TIMEx_PWMN_Start+0x118>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a1d      	ldr	r2, [pc, #116]	; (80066cc <HAL_TIMEx_PWMN_Start+0x174>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d009      	beq.n	8006670 <HAL_TIMEx_PWMN_Start+0x118>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a1b      	ldr	r2, [pc, #108]	; (80066d0 <HAL_TIMEx_PWMN_Start+0x178>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d004      	beq.n	8006670 <HAL_TIMEx_PWMN_Start+0x118>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a1a      	ldr	r2, [pc, #104]	; (80066d4 <HAL_TIMEx_PWMN_Start+0x17c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d115      	bne.n	800669c <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	4b18      	ldr	r3, [pc, #96]	; (80066d8 <HAL_TIMEx_PWMN_Start+0x180>)
 8006678:	4013      	ands	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2b06      	cmp	r3, #6
 8006680:	d015      	beq.n	80066ae <HAL_TIMEx_PWMN_Start+0x156>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006688:	d011      	beq.n	80066ae <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f042 0201 	orr.w	r2, r2, #1
 8006698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800669a:	e008      	b.n	80066ae <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]
 80066ac:	e000      	b.n	80066b0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	40012c00 	.word	0x40012c00
 80066c0:	40000400 	.word	0x40000400
 80066c4:	40000800 	.word	0x40000800
 80066c8:	40000c00 	.word	0x40000c00
 80066cc:	40013400 	.word	0x40013400
 80066d0:	40014000 	.word	0x40014000
 80066d4:	40015000 	.word	0x40015000
 80066d8:	00010007 	.word	0x00010007

080066dc <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2200      	movs	r2, #0
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 f9e0 	bl	8006ab4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6a1a      	ldr	r2, [r3, #32]
 80066fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80066fe:	4013      	ands	r3, r2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10f      	bne.n	8006724 <HAL_TIMEx_PWMN_Stop+0x48>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6a1a      	ldr	r2, [r3, #32]
 800670a:	f244 4344 	movw	r3, #17476	; 0x4444
 800670e:	4013      	ands	r3, r2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d107      	bne.n	8006724 <HAL_TIMEx_PWMN_Stop+0x48>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006722:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6a1a      	ldr	r2, [r3, #32]
 800672a:	f241 1311 	movw	r3, #4369	; 0x1111
 800672e:	4013      	ands	r3, r2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10f      	bne.n	8006754 <HAL_TIMEx_PWMN_Stop+0x78>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6a1a      	ldr	r2, [r3, #32]
 800673a:	f244 4344 	movw	r3, #17476	; 0x4444
 800673e:	4013      	ands	r3, r2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d107      	bne.n	8006754 <HAL_TIMEx_PWMN_Stop+0x78>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0201 	bic.w	r2, r2, #1
 8006752:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d104      	bne.n	8006764 <HAL_TIMEx_PWMN_Stop+0x88>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006762:	e013      	b.n	800678c <HAL_TIMEx_PWMN_Stop+0xb0>
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2b04      	cmp	r3, #4
 8006768:	d104      	bne.n	8006774 <HAL_TIMEx_PWMN_Stop+0x98>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006772:	e00b      	b.n	800678c <HAL_TIMEx_PWMN_Stop+0xb0>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b08      	cmp	r3, #8
 8006778:	d104      	bne.n	8006784 <HAL_TIMEx_PWMN_Stop+0xa8>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006782:	e003      	b.n	800678c <HAL_TIMEx_PWMN_Stop+0xb0>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d101      	bne.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067ac:	2302      	movs	r3, #2
 80067ae:	e074      	b.n	800689a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2202      	movs	r2, #2
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a34      	ldr	r2, [pc, #208]	; (80068a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d009      	beq.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a33      	ldr	r2, [pc, #204]	; (80068ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d004      	beq.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a31      	ldr	r2, [pc, #196]	; (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d108      	bne.n	8006800 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a21      	ldr	r2, [pc, #132]	; (80068a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d022      	beq.n	800686e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006830:	d01d      	beq.n	800686e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a1f      	ldr	r2, [pc, #124]	; (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d018      	beq.n	800686e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a1d      	ldr	r2, [pc, #116]	; (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d013      	beq.n	800686e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a1c      	ldr	r2, [pc, #112]	; (80068bc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00e      	beq.n	800686e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a15      	ldr	r2, [pc, #84]	; (80068ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d009      	beq.n	800686e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a18      	ldr	r2, [pc, #96]	; (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d004      	beq.n	800686e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a11      	ldr	r2, [pc, #68]	; (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d10c      	bne.n	8006888 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	4313      	orrs	r3, r2
 800687e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	40012c00 	.word	0x40012c00
 80068ac:	40013400 	.word	0x40013400
 80068b0:	40015000 	.word	0x40015000
 80068b4:	40000400 	.word	0x40000400
 80068b8:	40000800 	.word	0x40000800
 80068bc:	40000c00 	.word	0x40000c00
 80068c0:	40014000 	.word	0x40014000

080068c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d101      	bne.n	80068e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068dc:	2302      	movs	r3, #2
 80068de:	e096      	b.n	8006a0e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	4313      	orrs	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	4313      	orrs	r3, r2
 8006910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4313      	orrs	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	041b      	lsls	r3, r3, #16
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a2f      	ldr	r2, [pc, #188]	; (8006a1c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d009      	beq.n	8006978 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a2d      	ldr	r2, [pc, #180]	; (8006a20 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d004      	beq.n	8006978 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a2c      	ldr	r2, [pc, #176]	; (8006a24 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d106      	bne.n	8006986 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a24      	ldr	r2, [pc, #144]	; (8006a1c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d009      	beq.n	80069a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a22      	ldr	r2, [pc, #136]	; (8006a20 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d004      	beq.n	80069a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a21      	ldr	r2, [pc, #132]	; (8006a24 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d12b      	bne.n	80069fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ae:	051b      	lsls	r3, r3, #20
 80069b0:	4313      	orrs	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	4313      	orrs	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	4313      	orrs	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a11      	ldr	r2, [pc, #68]	; (8006a1c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d009      	beq.n	80069ee <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a10      	ldr	r2, [pc, #64]	; (8006a20 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d004      	beq.n	80069ee <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a0e      	ldr	r2, [pc, #56]	; (8006a24 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d106      	bne.n	80069fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	40012c00 	.word	0x40012c00
 8006a20:	40013400 	.word	0x40013400
 8006a24:	40015000 	.word	0x40015000

08006a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f003 031f 	and.w	r3, r3, #31
 8006ac6:	2204      	movs	r2, #4
 8006ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8006acc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a1a      	ldr	r2, [r3, #32]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	43db      	mvns	r3, r3
 8006ad6:	401a      	ands	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a1a      	ldr	r2, [r3, #32]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f003 031f 	and.w	r3, r3, #31
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8006aec:	431a      	orrs	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	621a      	str	r2, [r3, #32]
}
 8006af2:	bf00      	nop
 8006af4:	371c      	adds	r7, #28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b082      	sub	sp, #8
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e042      	b.n	8006b96 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fb f8a0 	bl	8001c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2224      	movs	r2, #36	; 0x24
 8006b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 0201 	bic.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fc51 	bl	80073e8 <UART_SetConfig>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d101      	bne.n	8006b50 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e022      	b.n	8006b96 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 ff41 	bl	80079e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f042 0201 	orr.w	r2, r2, #1
 8006b8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 ffc8 	bl	8007b24 <UART_CheckIdleState>
 8006b94:	4603      	mov	r3, r0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b08a      	sub	sp, #40	; 0x28
 8006ba2:	af02      	add	r7, sp, #8
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	603b      	str	r3, [r7, #0]
 8006baa:	4613      	mov	r3, r2
 8006bac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bb4:	2b20      	cmp	r3, #32
 8006bb6:	f040 8083 	bne.w	8006cc0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <HAL_UART_Transmit+0x28>
 8006bc0:	88fb      	ldrh	r3, [r7, #6]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e07b      	b.n	8006cc2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d101      	bne.n	8006bd8 <HAL_UART_Transmit+0x3a>
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	e074      	b.n	8006cc2 <HAL_UART_Transmit+0x124>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2221      	movs	r2, #33	; 0x21
 8006bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bf0:	f7fb fa46 	bl	8002080 <HAL_GetTick>
 8006bf4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	88fa      	ldrh	r2, [r7, #6]
 8006bfa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	88fa      	ldrh	r2, [r7, #6]
 8006c02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0e:	d108      	bne.n	8006c22 <HAL_UART_Transmit+0x84>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d104      	bne.n	8006c22 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	61bb      	str	r3, [r7, #24]
 8006c20:	e003      	b.n	8006c2a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c26:	2300      	movs	r3, #0
 8006c28:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006c32:	e02c      	b.n	8006c8e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2180      	movs	r1, #128	; 0x80
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 ffbb 	bl	8007bba <UART_WaitOnFlagUntilTimeout>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e039      	b.n	8006cc2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10b      	bne.n	8006c6c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	3302      	adds	r3, #2
 8006c68:	61bb      	str	r3, [r7, #24]
 8006c6a:	e007      	b.n	8006c7c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	781a      	ldrb	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1cc      	bne.n	8006c34 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2140      	movs	r1, #64	; 0x40
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 ff88 	bl	8007bba <UART_WaitOnFlagUntilTimeout>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e006      	b.n	8006cc2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	e000      	b.n	8006cc2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006cc0:	2302      	movs	r3, #2
  }
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3720      	adds	r7, #32
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
	...

08006ccc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08a      	sub	sp, #40	; 0x28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce0:	2b20      	cmp	r3, #32
 8006ce2:	d142      	bne.n	8006d6a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <HAL_UART_Receive_IT+0x24>
 8006cea:	88fb      	ldrh	r3, [r7, #6]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e03b      	b.n	8006d6c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d101      	bne.n	8006d02 <HAL_UART_Receive_IT+0x36>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e034      	b.n	8006d6c <HAL_UART_Receive_IT+0xa0>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a17      	ldr	r2, [pc, #92]	; (8006d74 <HAL_UART_Receive_IT+0xa8>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d01f      	beq.n	8006d5a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d018      	beq.n	8006d5a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	613b      	str	r3, [r7, #16]
   return(result);
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	623b      	str	r3, [r7, #32]
 8006d48:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4a:	69f9      	ldr	r1, [r7, #28]
 8006d4c:	6a3a      	ldr	r2, [r7, #32]
 8006d4e:	e841 2300 	strex	r3, r2, [r1]
 8006d52:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1e6      	bne.n	8006d28 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d5a:	88fb      	ldrh	r3, [r7, #6]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	68b9      	ldr	r1, [r7, #8]
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 fff3 	bl	8007d4c <UART_Start_Receive_IT>
 8006d66:	4603      	mov	r3, r0
 8006d68:	e000      	b.n	8006d6c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006d6a:	2302      	movs	r3, #2
  }
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3728      	adds	r7, #40	; 0x28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	40008000 	.word	0x40008000

08006d78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b0ba      	sub	sp, #232	; 0xe8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006da2:	f640 030f 	movw	r3, #2063	; 0x80f
 8006da6:	4013      	ands	r3, r2
 8006da8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006dac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d11b      	bne.n	8006dec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db8:	f003 0320 	and.w	r3, r3, #32
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d015      	beq.n	8006dec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d105      	bne.n	8006dd8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d009      	beq.n	8006dec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 82d6 	beq.w	800738e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	4798      	blx	r3
      }
      return;
 8006dea:	e2d0      	b.n	800738e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 811f 	beq.w	8007034 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006df6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006dfa:	4b8b      	ldr	r3, [pc, #556]	; (8007028 <HAL_UART_IRQHandler+0x2b0>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d106      	bne.n	8006e10 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006e02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006e06:	4b89      	ldr	r3, [pc, #548]	; (800702c <HAL_UART_IRQHandler+0x2b4>)
 8006e08:	4013      	ands	r3, r2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 8112 	beq.w	8007034 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d011      	beq.n	8006e40 <HAL_UART_IRQHandler+0xc8>
 8006e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00b      	beq.n	8006e40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e36:	f043 0201 	orr.w	r2, r3, #1
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d011      	beq.n	8006e70 <HAL_UART_IRQHandler+0xf8>
 8006e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00b      	beq.n	8006e70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e66:	f043 0204 	orr.w	r2, r3, #4
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d011      	beq.n	8006ea0 <HAL_UART_IRQHandler+0x128>
 8006e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2204      	movs	r2, #4
 8006e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e96:	f043 0202 	orr.w	r2, r3, #2
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea4:	f003 0308 	and.w	r3, r3, #8
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d017      	beq.n	8006edc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eb0:	f003 0320 	and.w	r3, r3, #32
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d105      	bne.n	8006ec4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006eb8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006ebc:	4b5a      	ldr	r3, [pc, #360]	; (8007028 <HAL_UART_IRQHandler+0x2b0>)
 8006ebe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2208      	movs	r2, #8
 8006eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ed2:	f043 0208 	orr.w	r2, r3, #8
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d012      	beq.n	8006f0e <HAL_UART_IRQHandler+0x196>
 8006ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00c      	beq.n	8006f0e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f04:	f043 0220 	orr.w	r2, r3, #32
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 823c 	beq.w	8007392 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f1e:	f003 0320 	and.w	r3, r3, #32
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d013      	beq.n	8006f4e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d105      	bne.n	8006f3e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d007      	beq.n	8006f4e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f62:	2b40      	cmp	r3, #64	; 0x40
 8006f64:	d005      	beq.n	8006f72 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d04f      	beq.n	8007012 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f001 f814 	bl	8007fa0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f82:	2b40      	cmp	r3, #64	; 0x40
 8006f84:	d141      	bne.n	800700a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f94:	e853 3f00 	ldrex	r3, [r3]
 8006f98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3308      	adds	r3, #8
 8006fae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006fb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006fbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006fc2:	e841 2300 	strex	r3, r2, [r1]
 8006fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1d9      	bne.n	8006f86 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d013      	beq.n	8007002 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fde:	4a14      	ldr	r2, [pc, #80]	; (8007030 <HAL_UART_IRQHandler+0x2b8>)
 8006fe0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7fc fd9a 	bl	8003b20 <HAL_DMA_Abort_IT>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d017      	beq.n	8007022 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007000:	e00f      	b.n	8007022 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f9da 	bl	80073bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007008:	e00b      	b.n	8007022 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f9d6 	bl	80073bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007010:	e007      	b.n	8007022 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f9d2 	bl	80073bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007020:	e1b7      	b.n	8007392 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007022:	bf00      	nop
    return;
 8007024:	e1b5      	b.n	8007392 <HAL_UART_IRQHandler+0x61a>
 8007026:	bf00      	nop
 8007028:	10000001 	.word	0x10000001
 800702c:	04000120 	.word	0x04000120
 8007030:	0800806d 	.word	0x0800806d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007038:	2b01      	cmp	r3, #1
 800703a:	f040 814a 	bne.w	80072d2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800703e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007042:	f003 0310 	and.w	r3, r3, #16
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 8143 	beq.w	80072d2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800704c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007050:	f003 0310 	and.w	r3, r3, #16
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 813c 	beq.w	80072d2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2210      	movs	r2, #16
 8007060:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706c:	2b40      	cmp	r3, #64	; 0x40
 800706e:	f040 80b5 	bne.w	80071dc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800707e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 8187 	beq.w	8007396 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800708e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007092:	429a      	cmp	r2, r3
 8007094:	f080 817f 	bcs.w	8007396 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800709e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0320 	and.w	r3, r3, #32
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f040 8086 	bne.w	80071c0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80070c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	461a      	mov	r2, r3
 80070da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80070ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80070f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1da      	bne.n	80070b4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3308      	adds	r3, #8
 8007104:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800710e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007110:	f023 0301 	bic.w	r3, r3, #1
 8007114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3308      	adds	r3, #8
 800711e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007122:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007126:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800712a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800712e:	e841 2300 	strex	r3, r2, [r1]
 8007132:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1e1      	bne.n	80070fe <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3308      	adds	r3, #8
 8007140:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007144:	e853 3f00 	ldrex	r3, [r3]
 8007148:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800714a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800714c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3308      	adds	r3, #8
 800715a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800715e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007160:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007164:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007166:	e841 2300 	strex	r3, r2, [r1]
 800716a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800716c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1e3      	bne.n	800713a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2220      	movs	r2, #32
 8007176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007188:	e853 3f00 	ldrex	r3, [r3]
 800718c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800718e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007190:	f023 0310 	bic.w	r3, r3, #16
 8007194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80071a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e4      	bne.n	8007180 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fc fc57 	bl	8003a6e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f8fb 	bl	80073d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071da:	e0dc      	b.n	8007396 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 80ce 	beq.w	800739a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80071fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 80c9 	beq.w	800739a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007218:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800721c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	461a      	mov	r2, r3
 8007226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800722a:	647b      	str	r3, [r7, #68]	; 0x44
 800722c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007232:	e841 2300 	strex	r3, r2, [r1]
 8007236:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1e4      	bne.n	8007208 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3308      	adds	r3, #8
 8007244:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	e853 3f00 	ldrex	r3, [r3]
 800724c:	623b      	str	r3, [r7, #32]
   return(result);
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007254:	f023 0301 	bic.w	r3, r3, #1
 8007258:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3308      	adds	r3, #8
 8007262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007266:	633a      	str	r2, [r7, #48]	; 0x30
 8007268:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800726c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800726e:	e841 2300 	strex	r3, r2, [r1]
 8007272:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1e1      	bne.n	800723e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	e853 3f00 	ldrex	r3, [r3]
 800729a:	60fb      	str	r3, [r7, #12]
   return(result);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f023 0310 	bic.w	r3, r3, #16
 80072a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072b0:	61fb      	str	r3, [r7, #28]
 80072b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b4:	69b9      	ldr	r1, [r7, #24]
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	e841 2300 	strex	r3, r2, [r1]
 80072bc:	617b      	str	r3, [r7, #20]
   return(result);
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e4      	bne.n	800728e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f880 	bl	80073d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072d0:	e063      	b.n	800739a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80072d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00e      	beq.n	80072fc <HAL_UART_IRQHandler+0x584>
 80072de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d008      	beq.n	80072fc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80072f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 fb57 	bl	80089a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072fa:	e051      	b.n	80073a0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80072fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007304:	2b00      	cmp	r3, #0
 8007306:	d014      	beq.n	8007332 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800730c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007310:	2b00      	cmp	r3, #0
 8007312:	d105      	bne.n	8007320 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007318:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d008      	beq.n	8007332 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007324:	2b00      	cmp	r3, #0
 8007326:	d03a      	beq.n	800739e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	4798      	blx	r3
    }
    return;
 8007330:	e035      	b.n	800739e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733a:	2b00      	cmp	r3, #0
 800733c:	d009      	beq.n	8007352 <HAL_UART_IRQHandler+0x5da>
 800733e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fea4 	bl	8008098 <UART_EndTransmit_IT>
    return;
 8007350:	e026      	b.n	80073a0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007356:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d009      	beq.n	8007372 <HAL_UART_IRQHandler+0x5fa>
 800735e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007362:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d003      	beq.n	8007372 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f001 fb30 	bl	80089d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007370:	e016      	b.n	80073a0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d010      	beq.n	80073a0 <HAL_UART_IRQHandler+0x628>
 800737e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007382:	2b00      	cmp	r3, #0
 8007384:	da0c      	bge.n	80073a0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f001 fb18 	bl	80089bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800738c:	e008      	b.n	80073a0 <HAL_UART_IRQHandler+0x628>
      return;
 800738e:	bf00      	nop
 8007390:	e006      	b.n	80073a0 <HAL_UART_IRQHandler+0x628>
    return;
 8007392:	bf00      	nop
 8007394:	e004      	b.n	80073a0 <HAL_UART_IRQHandler+0x628>
      return;
 8007396:	bf00      	nop
 8007398:	e002      	b.n	80073a0 <HAL_UART_IRQHandler+0x628>
      return;
 800739a:	bf00      	nop
 800739c:	e000      	b.n	80073a0 <HAL_UART_IRQHandler+0x628>
    return;
 800739e:	bf00      	nop
  }
}
 80073a0:	37e8      	adds	r7, #232	; 0xe8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop

080073a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	460b      	mov	r3, r1
 80073da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073ec:	b08c      	sub	sp, #48	; 0x30
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	431a      	orrs	r2, r3
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	431a      	orrs	r2, r3
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	69db      	ldr	r3, [r3, #28]
 800740c:	4313      	orrs	r3, r2
 800740e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	4baa      	ldr	r3, [pc, #680]	; (80076c0 <UART_SetConfig+0x2d8>)
 8007418:	4013      	ands	r3, r2
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	6812      	ldr	r2, [r2, #0]
 800741e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007420:	430b      	orrs	r3, r1
 8007422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a9f      	ldr	r2, [pc, #636]	; (80076c4 <UART_SetConfig+0x2dc>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d004      	beq.n	8007454 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007450:	4313      	orrs	r3, r2
 8007452:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800745e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007468:	430b      	orrs	r3, r1
 800746a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007472:	f023 010f 	bic.w	r1, r3, #15
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a90      	ldr	r2, [pc, #576]	; (80076c8 <UART_SetConfig+0x2e0>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d125      	bne.n	80074d8 <UART_SetConfig+0xf0>
 800748c:	4b8f      	ldr	r3, [pc, #572]	; (80076cc <UART_SetConfig+0x2e4>)
 800748e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007492:	f003 0303 	and.w	r3, r3, #3
 8007496:	2b03      	cmp	r3, #3
 8007498:	d81a      	bhi.n	80074d0 <UART_SetConfig+0xe8>
 800749a:	a201      	add	r2, pc, #4	; (adr r2, 80074a0 <UART_SetConfig+0xb8>)
 800749c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a0:	080074b1 	.word	0x080074b1
 80074a4:	080074c1 	.word	0x080074c1
 80074a8:	080074b9 	.word	0x080074b9
 80074ac:	080074c9 	.word	0x080074c9
 80074b0:	2301      	movs	r3, #1
 80074b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074b6:	e116      	b.n	80076e6 <UART_SetConfig+0x2fe>
 80074b8:	2302      	movs	r3, #2
 80074ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074be:	e112      	b.n	80076e6 <UART_SetConfig+0x2fe>
 80074c0:	2304      	movs	r3, #4
 80074c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074c6:	e10e      	b.n	80076e6 <UART_SetConfig+0x2fe>
 80074c8:	2308      	movs	r3, #8
 80074ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ce:	e10a      	b.n	80076e6 <UART_SetConfig+0x2fe>
 80074d0:	2310      	movs	r3, #16
 80074d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074d6:	e106      	b.n	80076e6 <UART_SetConfig+0x2fe>
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a7c      	ldr	r2, [pc, #496]	; (80076d0 <UART_SetConfig+0x2e8>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d138      	bne.n	8007554 <UART_SetConfig+0x16c>
 80074e2:	4b7a      	ldr	r3, [pc, #488]	; (80076cc <UART_SetConfig+0x2e4>)
 80074e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e8:	f003 030c 	and.w	r3, r3, #12
 80074ec:	2b0c      	cmp	r3, #12
 80074ee:	d82d      	bhi.n	800754c <UART_SetConfig+0x164>
 80074f0:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <UART_SetConfig+0x110>)
 80074f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f6:	bf00      	nop
 80074f8:	0800752d 	.word	0x0800752d
 80074fc:	0800754d 	.word	0x0800754d
 8007500:	0800754d 	.word	0x0800754d
 8007504:	0800754d 	.word	0x0800754d
 8007508:	0800753d 	.word	0x0800753d
 800750c:	0800754d 	.word	0x0800754d
 8007510:	0800754d 	.word	0x0800754d
 8007514:	0800754d 	.word	0x0800754d
 8007518:	08007535 	.word	0x08007535
 800751c:	0800754d 	.word	0x0800754d
 8007520:	0800754d 	.word	0x0800754d
 8007524:	0800754d 	.word	0x0800754d
 8007528:	08007545 	.word	0x08007545
 800752c:	2300      	movs	r3, #0
 800752e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007532:	e0d8      	b.n	80076e6 <UART_SetConfig+0x2fe>
 8007534:	2302      	movs	r3, #2
 8007536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800753a:	e0d4      	b.n	80076e6 <UART_SetConfig+0x2fe>
 800753c:	2304      	movs	r3, #4
 800753e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007542:	e0d0      	b.n	80076e6 <UART_SetConfig+0x2fe>
 8007544:	2308      	movs	r3, #8
 8007546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800754a:	e0cc      	b.n	80076e6 <UART_SetConfig+0x2fe>
 800754c:	2310      	movs	r3, #16
 800754e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007552:	e0c8      	b.n	80076e6 <UART_SetConfig+0x2fe>
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a5e      	ldr	r2, [pc, #376]	; (80076d4 <UART_SetConfig+0x2ec>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d125      	bne.n	80075aa <UART_SetConfig+0x1c2>
 800755e:	4b5b      	ldr	r3, [pc, #364]	; (80076cc <UART_SetConfig+0x2e4>)
 8007560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007564:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007568:	2b30      	cmp	r3, #48	; 0x30
 800756a:	d016      	beq.n	800759a <UART_SetConfig+0x1b2>
 800756c:	2b30      	cmp	r3, #48	; 0x30
 800756e:	d818      	bhi.n	80075a2 <UART_SetConfig+0x1ba>
 8007570:	2b20      	cmp	r3, #32
 8007572:	d00a      	beq.n	800758a <UART_SetConfig+0x1a2>
 8007574:	2b20      	cmp	r3, #32
 8007576:	d814      	bhi.n	80075a2 <UART_SetConfig+0x1ba>
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <UART_SetConfig+0x19a>
 800757c:	2b10      	cmp	r3, #16
 800757e:	d008      	beq.n	8007592 <UART_SetConfig+0x1aa>
 8007580:	e00f      	b.n	80075a2 <UART_SetConfig+0x1ba>
 8007582:	2300      	movs	r3, #0
 8007584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007588:	e0ad      	b.n	80076e6 <UART_SetConfig+0x2fe>
 800758a:	2302      	movs	r3, #2
 800758c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007590:	e0a9      	b.n	80076e6 <UART_SetConfig+0x2fe>
 8007592:	2304      	movs	r3, #4
 8007594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007598:	e0a5      	b.n	80076e6 <UART_SetConfig+0x2fe>
 800759a:	2308      	movs	r3, #8
 800759c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075a0:	e0a1      	b.n	80076e6 <UART_SetConfig+0x2fe>
 80075a2:	2310      	movs	r3, #16
 80075a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075a8:	e09d      	b.n	80076e6 <UART_SetConfig+0x2fe>
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a4a      	ldr	r2, [pc, #296]	; (80076d8 <UART_SetConfig+0x2f0>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d125      	bne.n	8007600 <UART_SetConfig+0x218>
 80075b4:	4b45      	ldr	r3, [pc, #276]	; (80076cc <UART_SetConfig+0x2e4>)
 80075b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80075be:	2bc0      	cmp	r3, #192	; 0xc0
 80075c0:	d016      	beq.n	80075f0 <UART_SetConfig+0x208>
 80075c2:	2bc0      	cmp	r3, #192	; 0xc0
 80075c4:	d818      	bhi.n	80075f8 <UART_SetConfig+0x210>
 80075c6:	2b80      	cmp	r3, #128	; 0x80
 80075c8:	d00a      	beq.n	80075e0 <UART_SetConfig+0x1f8>
 80075ca:	2b80      	cmp	r3, #128	; 0x80
 80075cc:	d814      	bhi.n	80075f8 <UART_SetConfig+0x210>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <UART_SetConfig+0x1f0>
 80075d2:	2b40      	cmp	r3, #64	; 0x40
 80075d4:	d008      	beq.n	80075e8 <UART_SetConfig+0x200>
 80075d6:	e00f      	b.n	80075f8 <UART_SetConfig+0x210>
 80075d8:	2300      	movs	r3, #0
 80075da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075de:	e082      	b.n	80076e6 <UART_SetConfig+0x2fe>
 80075e0:	2302      	movs	r3, #2
 80075e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075e6:	e07e      	b.n	80076e6 <UART_SetConfig+0x2fe>
 80075e8:	2304      	movs	r3, #4
 80075ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ee:	e07a      	b.n	80076e6 <UART_SetConfig+0x2fe>
 80075f0:	2308      	movs	r3, #8
 80075f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075f6:	e076      	b.n	80076e6 <UART_SetConfig+0x2fe>
 80075f8:	2310      	movs	r3, #16
 80075fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075fe:	e072      	b.n	80076e6 <UART_SetConfig+0x2fe>
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a35      	ldr	r2, [pc, #212]	; (80076dc <UART_SetConfig+0x2f4>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d12a      	bne.n	8007660 <UART_SetConfig+0x278>
 800760a:	4b30      	ldr	r3, [pc, #192]	; (80076cc <UART_SetConfig+0x2e4>)
 800760c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007618:	d01a      	beq.n	8007650 <UART_SetConfig+0x268>
 800761a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800761e:	d81b      	bhi.n	8007658 <UART_SetConfig+0x270>
 8007620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007624:	d00c      	beq.n	8007640 <UART_SetConfig+0x258>
 8007626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800762a:	d815      	bhi.n	8007658 <UART_SetConfig+0x270>
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <UART_SetConfig+0x250>
 8007630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007634:	d008      	beq.n	8007648 <UART_SetConfig+0x260>
 8007636:	e00f      	b.n	8007658 <UART_SetConfig+0x270>
 8007638:	2300      	movs	r3, #0
 800763a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800763e:	e052      	b.n	80076e6 <UART_SetConfig+0x2fe>
 8007640:	2302      	movs	r3, #2
 8007642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007646:	e04e      	b.n	80076e6 <UART_SetConfig+0x2fe>
 8007648:	2304      	movs	r3, #4
 800764a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800764e:	e04a      	b.n	80076e6 <UART_SetConfig+0x2fe>
 8007650:	2308      	movs	r3, #8
 8007652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007656:	e046      	b.n	80076e6 <UART_SetConfig+0x2fe>
 8007658:	2310      	movs	r3, #16
 800765a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800765e:	e042      	b.n	80076e6 <UART_SetConfig+0x2fe>
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a17      	ldr	r2, [pc, #92]	; (80076c4 <UART_SetConfig+0x2dc>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d13a      	bne.n	80076e0 <UART_SetConfig+0x2f8>
 800766a:	4b18      	ldr	r3, [pc, #96]	; (80076cc <UART_SetConfig+0x2e4>)
 800766c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007670:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007674:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007678:	d01a      	beq.n	80076b0 <UART_SetConfig+0x2c8>
 800767a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800767e:	d81b      	bhi.n	80076b8 <UART_SetConfig+0x2d0>
 8007680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007684:	d00c      	beq.n	80076a0 <UART_SetConfig+0x2b8>
 8007686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800768a:	d815      	bhi.n	80076b8 <UART_SetConfig+0x2d0>
 800768c:	2b00      	cmp	r3, #0
 800768e:	d003      	beq.n	8007698 <UART_SetConfig+0x2b0>
 8007690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007694:	d008      	beq.n	80076a8 <UART_SetConfig+0x2c0>
 8007696:	e00f      	b.n	80076b8 <UART_SetConfig+0x2d0>
 8007698:	2300      	movs	r3, #0
 800769a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800769e:	e022      	b.n	80076e6 <UART_SetConfig+0x2fe>
 80076a0:	2302      	movs	r3, #2
 80076a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076a6:	e01e      	b.n	80076e6 <UART_SetConfig+0x2fe>
 80076a8:	2304      	movs	r3, #4
 80076aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076ae:	e01a      	b.n	80076e6 <UART_SetConfig+0x2fe>
 80076b0:	2308      	movs	r3, #8
 80076b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076b6:	e016      	b.n	80076e6 <UART_SetConfig+0x2fe>
 80076b8:	2310      	movs	r3, #16
 80076ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80076be:	e012      	b.n	80076e6 <UART_SetConfig+0x2fe>
 80076c0:	cfff69f3 	.word	0xcfff69f3
 80076c4:	40008000 	.word	0x40008000
 80076c8:	40013800 	.word	0x40013800
 80076cc:	40021000 	.word	0x40021000
 80076d0:	40004400 	.word	0x40004400
 80076d4:	40004800 	.word	0x40004800
 80076d8:	40004c00 	.word	0x40004c00
 80076dc:	40005000 	.word	0x40005000
 80076e0:	2310      	movs	r3, #16
 80076e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4aae      	ldr	r2, [pc, #696]	; (80079a4 <UART_SetConfig+0x5bc>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	f040 8097 	bne.w	8007820 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076f6:	2b08      	cmp	r3, #8
 80076f8:	d823      	bhi.n	8007742 <UART_SetConfig+0x35a>
 80076fa:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <UART_SetConfig+0x318>)
 80076fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007700:	08007725 	.word	0x08007725
 8007704:	08007743 	.word	0x08007743
 8007708:	0800772d 	.word	0x0800772d
 800770c:	08007743 	.word	0x08007743
 8007710:	08007733 	.word	0x08007733
 8007714:	08007743 	.word	0x08007743
 8007718:	08007743 	.word	0x08007743
 800771c:	08007743 	.word	0x08007743
 8007720:	0800773b 	.word	0x0800773b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007724:	f7fd f98c 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 8007728:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800772a:	e010      	b.n	800774e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800772c:	4b9e      	ldr	r3, [pc, #632]	; (80079a8 <UART_SetConfig+0x5c0>)
 800772e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007730:	e00d      	b.n	800774e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007732:	f7fd f917 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8007736:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007738:	e009      	b.n	800774e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800773a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800773e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007740:	e005      	b.n	800774e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800774c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 8130 	beq.w	80079b6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775a:	4a94      	ldr	r2, [pc, #592]	; (80079ac <UART_SetConfig+0x5c4>)
 800775c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007760:	461a      	mov	r2, r3
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	fbb3 f3f2 	udiv	r3, r3, r2
 8007768:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	4613      	mov	r3, r2
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	4413      	add	r3, r2
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	429a      	cmp	r2, r3
 8007778:	d305      	bcc.n	8007786 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	429a      	cmp	r2, r3
 8007784:	d903      	bls.n	800778e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800778c:	e113      	b.n	80079b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800778e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007790:	2200      	movs	r2, #0
 8007792:	60bb      	str	r3, [r7, #8]
 8007794:	60fa      	str	r2, [r7, #12]
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779a:	4a84      	ldr	r2, [pc, #528]	; (80079ac <UART_SetConfig+0x5c4>)
 800779c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2200      	movs	r2, #0
 80077a4:	603b      	str	r3, [r7, #0]
 80077a6:	607a      	str	r2, [r7, #4]
 80077a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077b0:	f7f9 fa82 	bl	8000cb8 <__aeabi_uldivmod>
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	4610      	mov	r0, r2
 80077ba:	4619      	mov	r1, r3
 80077bc:	f04f 0200 	mov.w	r2, #0
 80077c0:	f04f 0300 	mov.w	r3, #0
 80077c4:	020b      	lsls	r3, r1, #8
 80077c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077ca:	0202      	lsls	r2, r0, #8
 80077cc:	6979      	ldr	r1, [r7, #20]
 80077ce:	6849      	ldr	r1, [r1, #4]
 80077d0:	0849      	lsrs	r1, r1, #1
 80077d2:	2000      	movs	r0, #0
 80077d4:	460c      	mov	r4, r1
 80077d6:	4605      	mov	r5, r0
 80077d8:	eb12 0804 	adds.w	r8, r2, r4
 80077dc:	eb43 0905 	adc.w	r9, r3, r5
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	469a      	mov	sl, r3
 80077e8:	4693      	mov	fp, r2
 80077ea:	4652      	mov	r2, sl
 80077ec:	465b      	mov	r3, fp
 80077ee:	4640      	mov	r0, r8
 80077f0:	4649      	mov	r1, r9
 80077f2:	f7f9 fa61 	bl	8000cb8 <__aeabi_uldivmod>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	4613      	mov	r3, r2
 80077fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007804:	d308      	bcc.n	8007818 <UART_SetConfig+0x430>
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800780c:	d204      	bcs.n	8007818 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6a3a      	ldr	r2, [r7, #32]
 8007814:	60da      	str	r2, [r3, #12]
 8007816:	e0ce      	b.n	80079b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800781e:	e0ca      	b.n	80079b6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	69db      	ldr	r3, [r3, #28]
 8007824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007828:	d166      	bne.n	80078f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800782a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800782e:	2b08      	cmp	r3, #8
 8007830:	d827      	bhi.n	8007882 <UART_SetConfig+0x49a>
 8007832:	a201      	add	r2, pc, #4	; (adr r2, 8007838 <UART_SetConfig+0x450>)
 8007834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007838:	0800785d 	.word	0x0800785d
 800783c:	08007865 	.word	0x08007865
 8007840:	0800786d 	.word	0x0800786d
 8007844:	08007883 	.word	0x08007883
 8007848:	08007873 	.word	0x08007873
 800784c:	08007883 	.word	0x08007883
 8007850:	08007883 	.word	0x08007883
 8007854:	08007883 	.word	0x08007883
 8007858:	0800787b 	.word	0x0800787b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800785c:	f7fd f8f0 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 8007860:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007862:	e014      	b.n	800788e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007864:	f7fd f902 	bl	8004a6c <HAL_RCC_GetPCLK2Freq>
 8007868:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800786a:	e010      	b.n	800788e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800786c:	4b4e      	ldr	r3, [pc, #312]	; (80079a8 <UART_SetConfig+0x5c0>)
 800786e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007870:	e00d      	b.n	800788e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007872:	f7fd f877 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8007876:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007878:	e009      	b.n	800788e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800787a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800787e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007880:	e005      	b.n	800788e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800788c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 8090 	beq.w	80079b6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	4a44      	ldr	r2, [pc, #272]	; (80079ac <UART_SetConfig+0x5c4>)
 800789c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078a0:	461a      	mov	r2, r3
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80078a8:	005a      	lsls	r2, r3, #1
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	085b      	lsrs	r3, r3, #1
 80078b0:	441a      	add	r2, r3
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	2b0f      	cmp	r3, #15
 80078c0:	d916      	bls.n	80078f0 <UART_SetConfig+0x508>
 80078c2:	6a3b      	ldr	r3, [r7, #32]
 80078c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078c8:	d212      	bcs.n	80078f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	f023 030f 	bic.w	r3, r3, #15
 80078d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	085b      	lsrs	r3, r3, #1
 80078d8:	b29b      	uxth	r3, r3
 80078da:	f003 0307 	and.w	r3, r3, #7
 80078de:	b29a      	uxth	r2, r3
 80078e0:	8bfb      	ldrh	r3, [r7, #30]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	8bfa      	ldrh	r2, [r7, #30]
 80078ec:	60da      	str	r2, [r3, #12]
 80078ee:	e062      	b.n	80079b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80078f6:	e05e      	b.n	80079b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d828      	bhi.n	8007952 <UART_SetConfig+0x56a>
 8007900:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <UART_SetConfig+0x520>)
 8007902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007906:	bf00      	nop
 8007908:	0800792d 	.word	0x0800792d
 800790c:	08007935 	.word	0x08007935
 8007910:	0800793d 	.word	0x0800793d
 8007914:	08007953 	.word	0x08007953
 8007918:	08007943 	.word	0x08007943
 800791c:	08007953 	.word	0x08007953
 8007920:	08007953 	.word	0x08007953
 8007924:	08007953 	.word	0x08007953
 8007928:	0800794b 	.word	0x0800794b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800792c:	f7fd f888 	bl	8004a40 <HAL_RCC_GetPCLK1Freq>
 8007930:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007932:	e014      	b.n	800795e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007934:	f7fd f89a 	bl	8004a6c <HAL_RCC_GetPCLK2Freq>
 8007938:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800793a:	e010      	b.n	800795e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800793c:	4b1a      	ldr	r3, [pc, #104]	; (80079a8 <UART_SetConfig+0x5c0>)
 800793e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007940:	e00d      	b.n	800795e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007942:	f7fd f80f 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8007946:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007948:	e009      	b.n	800795e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800794a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007950:	e005      	b.n	800795e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800795c:	bf00      	nop
    }

    if (pclk != 0U)
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	2b00      	cmp	r3, #0
 8007962:	d028      	beq.n	80079b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	4a10      	ldr	r2, [pc, #64]	; (80079ac <UART_SetConfig+0x5c4>)
 800796a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800796e:	461a      	mov	r2, r3
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	fbb3 f2f2 	udiv	r2, r3, r2
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	085b      	lsrs	r3, r3, #1
 800797c:	441a      	add	r2, r3
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	fbb2 f3f3 	udiv	r3, r2, r3
 8007986:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007988:	6a3b      	ldr	r3, [r7, #32]
 800798a:	2b0f      	cmp	r3, #15
 800798c:	d910      	bls.n	80079b0 <UART_SetConfig+0x5c8>
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007994:	d20c      	bcs.n	80079b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	b29a      	uxth	r2, r3
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	60da      	str	r2, [r3, #12]
 80079a0:	e009      	b.n	80079b6 <UART_SetConfig+0x5ce>
 80079a2:	bf00      	nop
 80079a4:	40008000 	.word	0x40008000
 80079a8:	00f42400 	.word	0x00f42400
 80079ac:	0800bf80 	.word	0x0800bf80
      }
      else
      {
        ret = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2200      	movs	r2, #0
 80079ca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	2200      	movs	r2, #0
 80079d0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80079d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3730      	adds	r7, #48	; 0x30
 80079da:	46bd      	mov	sp, r7
 80079dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080079e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00a      	beq.n	8007a0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00a      	beq.n	8007a4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a52:	f003 0308 	and.w	r3, r3, #8
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a74:	f003 0310 	and.w	r3, r3, #16
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00a      	beq.n	8007a92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a96:	f003 0320 	and.w	r3, r3, #32
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00a      	beq.n	8007ab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01a      	beq.n	8007af6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ade:	d10a      	bne.n	8007af6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00a      	beq.n	8007b18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	605a      	str	r2, [r3, #4]
  }
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b34:	f7fa faa4 	bl	8002080 <HAL_GetTick>
 8007b38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0308 	and.w	r3, r3, #8
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d10e      	bne.n	8007b66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f82f 	bl	8007bba <UART_WaitOnFlagUntilTimeout>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e025      	b.n	8007bb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d10e      	bne.n	8007b92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f819 	bl	8007bba <UART_WaitOnFlagUntilTimeout>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e00f      	b.n	8007bb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b09c      	sub	sp, #112	; 0x70
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	603b      	str	r3, [r7, #0]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bca:	e0a9      	b.n	8007d20 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd2:	f000 80a5 	beq.w	8007d20 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bd6:	f7fa fa53 	bl	8002080 <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d302      	bcc.n	8007bec <UART_WaitOnFlagUntilTimeout+0x32>
 8007be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d140      	bne.n	8007c6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bf4:	e853 3f00 	ldrex	r3, [r3]
 8007bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c00:	667b      	str	r3, [r7, #100]	; 0x64
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c0c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c12:	e841 2300 	strex	r3, r2, [r1]
 8007c16:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1e6      	bne.n	8007bec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3308      	adds	r3, #8
 8007c24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c28:	e853 3f00 	ldrex	r3, [r3]
 8007c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c30:	f023 0301 	bic.w	r3, r3, #1
 8007c34:	663b      	str	r3, [r7, #96]	; 0x60
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	3308      	adds	r3, #8
 8007c3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c46:	e841 2300 	strex	r3, r2, [r1]
 8007c4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1e5      	bne.n	8007c1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2220      	movs	r2, #32
 8007c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e069      	b.n	8007d42 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d051      	beq.n	8007d20 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c8a:	d149      	bne.n	8007d20 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9e:	e853 3f00 	ldrex	r3, [r3]
 8007ca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007caa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cbc:	e841 2300 	strex	r3, r2, [r1]
 8007cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e6      	bne.n	8007c96 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3308      	adds	r3, #8
 8007cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	e853 3f00 	ldrex	r3, [r3]
 8007cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	f023 0301 	bic.w	r3, r3, #1
 8007cde:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ce8:	623a      	str	r2, [r7, #32]
 8007cea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cec:	69f9      	ldr	r1, [r7, #28]
 8007cee:	6a3a      	ldr	r2, [r7, #32]
 8007cf0:	e841 2300 	strex	r3, r2, [r1]
 8007cf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e5      	bne.n	8007cc8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2220      	movs	r2, #32
 8007d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e010      	b.n	8007d42 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	69da      	ldr	r2, [r3, #28]
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	bf0c      	ite	eq
 8007d30:	2301      	moveq	r3, #1
 8007d32:	2300      	movne	r3, #0
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	461a      	mov	r2, r3
 8007d38:	79fb      	ldrb	r3, [r7, #7]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	f43f af46 	beq.w	8007bcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3770      	adds	r7, #112	; 0x70
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
	...

08007d4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b0a3      	sub	sp, #140	; 0x8c
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	4613      	mov	r3, r2
 8007d58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	88fa      	ldrh	r2, [r7, #6]
 8007d64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	88fa      	ldrh	r2, [r7, #6]
 8007d6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d7e:	d10e      	bne.n	8007d9e <UART_Start_Receive_IT+0x52>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d105      	bne.n	8007d94 <UART_Start_Receive_IT+0x48>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007d8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d92:	e02d      	b.n	8007df0 <UART_Start_Receive_IT+0xa4>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	22ff      	movs	r2, #255	; 0xff
 8007d98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d9c:	e028      	b.n	8007df0 <UART_Start_Receive_IT+0xa4>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10d      	bne.n	8007dc2 <UART_Start_Receive_IT+0x76>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d104      	bne.n	8007db8 <UART_Start_Receive_IT+0x6c>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	22ff      	movs	r2, #255	; 0xff
 8007db2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007db6:	e01b      	b.n	8007df0 <UART_Start_Receive_IT+0xa4>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	227f      	movs	r2, #127	; 0x7f
 8007dbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007dc0:	e016      	b.n	8007df0 <UART_Start_Receive_IT+0xa4>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dca:	d10d      	bne.n	8007de8 <UART_Start_Receive_IT+0x9c>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d104      	bne.n	8007dde <UART_Start_Receive_IT+0x92>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	227f      	movs	r2, #127	; 0x7f
 8007dd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ddc:	e008      	b.n	8007df0 <UART_Start_Receive_IT+0xa4>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	223f      	movs	r2, #63	; 0x3f
 8007de2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007de6:	e003      	b.n	8007df0 <UART_Start_Receive_IT+0xa4>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2222      	movs	r2, #34	; 0x22
 8007dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3308      	adds	r3, #8
 8007e06:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e0a:	e853 3f00 	ldrex	r3, [r3]
 8007e0e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e12:	f043 0301 	orr.w	r3, r3, #1
 8007e16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3308      	adds	r3, #8
 8007e20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007e24:	673a      	str	r2, [r7, #112]	; 0x70
 8007e26:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e28:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007e2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e2c:	e841 2300 	strex	r3, r2, [r1]
 8007e30:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007e32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1e3      	bne.n	8007e00 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e40:	d153      	bne.n	8007eea <UART_Start_Receive_IT+0x19e>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e48:	88fa      	ldrh	r2, [r7, #6]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d34d      	bcc.n	8007eea <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e56:	d107      	bne.n	8007e68 <UART_Start_Receive_IT+0x11c>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d103      	bne.n	8007e68 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4a4b      	ldr	r2, [pc, #300]	; (8007f90 <UART_Start_Receive_IT+0x244>)
 8007e64:	671a      	str	r2, [r3, #112]	; 0x70
 8007e66:	e002      	b.n	8007e6e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4a4a      	ldr	r2, [pc, #296]	; (8007f94 <UART_Start_Receive_IT+0x248>)
 8007e6c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d01a      	beq.n	8007eb4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e86:	e853 3f00 	ldrex	r3, [r3]
 8007e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ea2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ea6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ea8:	e841 2300 	strex	r3, r2, [r1]
 8007eac:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1e4      	bne.n	8007e7e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3308      	adds	r3, #8
 8007eba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ebe:	e853 3f00 	ldrex	r3, [r3]
 8007ec2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007ed4:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ed6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007edc:	e841 2300 	strex	r3, r2, [r1]
 8007ee0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1e5      	bne.n	8007eb4 <UART_Start_Receive_IT+0x168>
 8007ee8:	e04a      	b.n	8007f80 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef2:	d107      	bne.n	8007f04 <UART_Start_Receive_IT+0x1b8>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d103      	bne.n	8007f04 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4a26      	ldr	r2, [pc, #152]	; (8007f98 <UART_Start_Receive_IT+0x24c>)
 8007f00:	671a      	str	r2, [r3, #112]	; 0x70
 8007f02:	e002      	b.n	8007f0a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	4a25      	ldr	r2, [pc, #148]	; (8007f9c <UART_Start_Receive_IT+0x250>)
 8007f08:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d019      	beq.n	8007f4e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f22:	e853 3f00 	ldrex	r3, [r3]
 8007f26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007f2e:	677b      	str	r3, [r7, #116]	; 0x74
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	461a      	mov	r2, r3
 8007f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f38:	637b      	str	r3, [r7, #52]	; 0x34
 8007f3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f40:	e841 2300 	strex	r3, r2, [r1]
 8007f44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1e6      	bne.n	8007f1a <UART_Start_Receive_IT+0x1ce>
 8007f4c:	e018      	b.n	8007f80 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	e853 3f00 	ldrex	r3, [r3]
 8007f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	f043 0320 	orr.w	r3, r3, #32
 8007f62:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f6c:	623b      	str	r3, [r7, #32]
 8007f6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f70:	69f9      	ldr	r1, [r7, #28]
 8007f72:	6a3a      	ldr	r2, [r7, #32]
 8007f74:	e841 2300 	strex	r3, r2, [r1]
 8007f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e6      	bne.n	8007f4e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	378c      	adds	r7, #140	; 0x8c
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	080086a9 	.word	0x080086a9
 8007f94:	080083b1 	.word	0x080083b1
 8007f98:	0800824f 	.word	0x0800824f
 8007f9c:	080080ef 	.word	0x080080ef

08007fa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b095      	sub	sp, #84	; 0x54
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb0:	e853 3f00 	ldrex	r3, [r3]
 8007fb4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8007fc8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fce:	e841 2300 	strex	r3, r2, [r1]
 8007fd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1e6      	bne.n	8007fa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3308      	adds	r3, #8
 8007fe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	e853 3f00 	ldrex	r3, [r3]
 8007fe8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ff0:	f023 0301 	bic.w	r3, r3, #1
 8007ff4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3308      	adds	r3, #8
 8007ffc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ffe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008000:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008002:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008006:	e841 2300 	strex	r3, r2, [r1]
 800800a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1e3      	bne.n	8007fda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008016:	2b01      	cmp	r3, #1
 8008018:	d118      	bne.n	800804c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	e853 3f00 	ldrex	r3, [r3]
 8008026:	60bb      	str	r3, [r7, #8]
   return(result);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f023 0310 	bic.w	r3, r3, #16
 800802e:	647b      	str	r3, [r7, #68]	; 0x44
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	461a      	mov	r2, r3
 8008036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008038:	61bb      	str	r3, [r7, #24]
 800803a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803c:	6979      	ldr	r1, [r7, #20]
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	e841 2300 	strex	r3, r2, [r1]
 8008044:	613b      	str	r3, [r7, #16]
   return(result);
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e6      	bne.n	800801a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2220      	movs	r2, #32
 8008050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008060:	bf00      	nop
 8008062:	3754      	adds	r7, #84	; 0x54
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008078:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f7ff f996 	bl	80073bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008090:	bf00      	nop
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b088      	sub	sp, #32
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	e853 3f00 	ldrex	r3, [r3]
 80080ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080b4:	61fb      	str	r3, [r7, #28]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	61bb      	str	r3, [r7, #24]
 80080c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c2:	6979      	ldr	r1, [r7, #20]
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	613b      	str	r3, [r7, #16]
   return(result);
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1e6      	bne.n	80080a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2220      	movs	r2, #32
 80080d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7ff f961 	bl	80073a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080e6:	bf00      	nop
 80080e8:	3720      	adds	r7, #32
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b096      	sub	sp, #88	; 0x58
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008106:	2b22      	cmp	r3, #34	; 0x22
 8008108:	f040 8095 	bne.w	8008236 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008112:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008116:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800811a:	b2d9      	uxtb	r1, r3
 800811c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008120:	b2da      	uxtb	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008126:	400a      	ands	r2, r1
 8008128:	b2d2      	uxtb	r2, r2
 800812a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008130:	1c5a      	adds	r2, r3, #1
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800813c:	b29b      	uxth	r3, r3
 800813e:	3b01      	subs	r3, #1
 8008140:	b29a      	uxth	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800814e:	b29b      	uxth	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	d178      	bne.n	8008246 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815c:	e853 3f00 	ldrex	r3, [r3]
 8008160:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008168:	653b      	str	r3, [r7, #80]	; 0x50
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008172:	647b      	str	r3, [r7, #68]	; 0x44
 8008174:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008176:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008178:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800817a:	e841 2300 	strex	r3, r2, [r1]
 800817e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1e6      	bne.n	8008154 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3308      	adds	r3, #8
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	e853 3f00 	ldrex	r3, [r3]
 8008194:	623b      	str	r3, [r7, #32]
   return(result);
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	f023 0301 	bic.w	r3, r3, #1
 800819c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3308      	adds	r3, #8
 80081a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081a6:	633a      	str	r2, [r7, #48]	; 0x30
 80081a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ae:	e841 2300 	strex	r3, r2, [r1]
 80081b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1e5      	bne.n	8008186 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2220      	movs	r2, #32
 80081be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d12e      	bne.n	800822e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	e853 3f00 	ldrex	r3, [r3]
 80081e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f023 0310 	bic.w	r3, r3, #16
 80081ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	461a      	mov	r2, r3
 80081f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081f4:	61fb      	str	r3, [r7, #28]
 80081f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f8:	69b9      	ldr	r1, [r7, #24]
 80081fa:	69fa      	ldr	r2, [r7, #28]
 80081fc:	e841 2300 	strex	r3, r2, [r1]
 8008200:	617b      	str	r3, [r7, #20]
   return(result);
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1e6      	bne.n	80081d6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	f003 0310 	and.w	r3, r3, #16
 8008212:	2b10      	cmp	r3, #16
 8008214:	d103      	bne.n	800821e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2210      	movs	r2, #16
 800821c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7ff f8d2 	bl	80073d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800822c:	e00b      	b.n	8008246 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7f9 fada 	bl	80017e8 <HAL_UART_RxCpltCallback>
}
 8008234:	e007      	b.n	8008246 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	699a      	ldr	r2, [r3, #24]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f042 0208 	orr.w	r2, r2, #8
 8008244:	619a      	str	r2, [r3, #24]
}
 8008246:	bf00      	nop
 8008248:	3758      	adds	r7, #88	; 0x58
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b096      	sub	sp, #88	; 0x58
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800825c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008266:	2b22      	cmp	r3, #34	; 0x22
 8008268:	f040 8095 	bne.w	8008396 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800827a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800827c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008280:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008284:	4013      	ands	r3, r2
 8008286:	b29a      	uxth	r2, r3
 8008288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800828a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008290:	1c9a      	adds	r2, r3, #2
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800829c:	b29b      	uxth	r3, r3
 800829e:	3b01      	subs	r3, #1
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d178      	bne.n	80083a6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	461a      	mov	r2, r3
 80082d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082d2:	643b      	str	r3, [r7, #64]	; 0x40
 80082d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e6      	bne.n	80082b4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3308      	adds	r3, #8
 80082ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	e853 3f00 	ldrex	r3, [r3]
 80082f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	f023 0301 	bic.w	r3, r3, #1
 80082fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	3308      	adds	r3, #8
 8008304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008306:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008308:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800830c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800830e:	e841 2300 	strex	r3, r2, [r1]
 8008312:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1e5      	bne.n	80082e6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2220      	movs	r2, #32
 800831e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800832c:	2b01      	cmp	r3, #1
 800832e:	d12e      	bne.n	800838e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	e853 3f00 	ldrex	r3, [r3]
 8008342:	60bb      	str	r3, [r7, #8]
   return(result);
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f023 0310 	bic.w	r3, r3, #16
 800834a:	647b      	str	r3, [r7, #68]	; 0x44
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	461a      	mov	r2, r3
 8008352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008354:	61bb      	str	r3, [r7, #24]
 8008356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008358:	6979      	ldr	r1, [r7, #20]
 800835a:	69ba      	ldr	r2, [r7, #24]
 800835c:	e841 2300 	strex	r3, r2, [r1]
 8008360:	613b      	str	r3, [r7, #16]
   return(result);
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e6      	bne.n	8008336 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	69db      	ldr	r3, [r3, #28]
 800836e:	f003 0310 	and.w	r3, r3, #16
 8008372:	2b10      	cmp	r3, #16
 8008374:	d103      	bne.n	800837e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2210      	movs	r2, #16
 800837c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008384:	4619      	mov	r1, r3
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7ff f822 	bl	80073d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800838c:	e00b      	b.n	80083a6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7f9 fa2a 	bl	80017e8 <HAL_UART_RxCpltCallback>
}
 8008394:	e007      	b.n	80083a6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	699a      	ldr	r2, [r3, #24]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f042 0208 	orr.w	r2, r2, #8
 80083a4:	619a      	str	r2, [r3, #24]
}
 80083a6:	bf00      	nop
 80083a8:	3758      	adds	r7, #88	; 0x58
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
	...

080083b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b0a6      	sub	sp, #152	; 0x98
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80083be:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e6:	2b22      	cmp	r3, #34	; 0x22
 80083e8:	f040 814f 	bne.w	800868a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80083f2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80083f6:	e0f6      	b.n	80085e6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fe:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008402:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008406:	b2d9      	uxtb	r1, r3
 8008408:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800840c:	b2da      	uxtb	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008412:	400a      	ands	r2, r1
 8008414:	b2d2      	uxtb	r2, r2
 8008416:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800841c:	1c5a      	adds	r2, r3, #1
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008428:	b29b      	uxth	r3, r3
 800842a:	3b01      	subs	r3, #1
 800842c:	b29a      	uxth	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800843e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008442:	f003 0307 	and.w	r3, r3, #7
 8008446:	2b00      	cmp	r3, #0
 8008448:	d053      	beq.n	80084f2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800844a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800844e:	f003 0301 	and.w	r3, r3, #1
 8008452:	2b00      	cmp	r3, #0
 8008454:	d011      	beq.n	800847a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800845a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00b      	beq.n	800847a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2201      	movs	r2, #1
 8008468:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008470:	f043 0201 	orr.w	r2, r3, #1
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800847a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b00      	cmp	r3, #0
 8008484:	d011      	beq.n	80084aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008486:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800848a:	f003 0301 	and.w	r3, r3, #1
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00b      	beq.n	80084aa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2202      	movs	r2, #2
 8008498:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084a0:	f043 0204 	orr.w	r2, r3, #4
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80084ae:	f003 0304 	and.w	r3, r3, #4
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d011      	beq.n	80084da <UART_RxISR_8BIT_FIFOEN+0x12a>
 80084b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00b      	beq.n	80084da <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2204      	movs	r2, #4
 80084c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084d0:	f043 0202 	orr.w	r2, r3, #2
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d006      	beq.n	80084f2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7fe ff69 	bl	80073bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d173      	bne.n	80085e6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008506:	e853 3f00 	ldrex	r3, [r3]
 800850a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800850c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800850e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008512:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	461a      	mov	r2, r3
 800851c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008520:	66bb      	str	r3, [r7, #104]	; 0x68
 8008522:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008524:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008526:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008528:	e841 2300 	strex	r3, r2, [r1]
 800852c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800852e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e4      	bne.n	80084fe <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3308      	adds	r3, #8
 800853a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800853e:	e853 3f00 	ldrex	r3, [r3]
 8008542:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800854a:	f023 0301 	bic.w	r3, r3, #1
 800854e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3308      	adds	r3, #8
 8008556:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008558:	657a      	str	r2, [r7, #84]	; 0x54
 800855a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800855e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008560:	e841 2300 	strex	r3, r2, [r1]
 8008564:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1e3      	bne.n	8008534 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2220      	movs	r2, #32
 8008570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800857e:	2b01      	cmp	r3, #1
 8008580:	d12e      	bne.n	80085e0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008590:	e853 3f00 	ldrex	r3, [r3]
 8008594:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	f023 0310 	bic.w	r3, r3, #16
 800859c:	67bb      	str	r3, [r7, #120]	; 0x78
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	461a      	mov	r2, r3
 80085a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085a6:	643b      	str	r3, [r7, #64]	; 0x40
 80085a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085ae:	e841 2300 	strex	r3, r2, [r1]
 80085b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1e6      	bne.n	8008588 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	69db      	ldr	r3, [r3, #28]
 80085c0:	f003 0310 	and.w	r3, r3, #16
 80085c4:	2b10      	cmp	r3, #16
 80085c6:	d103      	bne.n	80085d0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2210      	movs	r2, #16
 80085ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085d6:	4619      	mov	r1, r3
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f7fe fef9 	bl	80073d0 <HAL_UARTEx_RxEventCallback>
 80085de:	e002      	b.n	80085e6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7f9 f901 	bl	80017e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80085e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d006      	beq.n	80085fc <UART_RxISR_8BIT_FIFOEN+0x24c>
 80085ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085f2:	f003 0320 	and.w	r3, r3, #32
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f47f aefe 	bne.w	80083f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008602:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008606:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800860a:	2b00      	cmp	r3, #0
 800860c:	d045      	beq.n	800869a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008614:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008618:	429a      	cmp	r2, r3
 800861a:	d23e      	bcs.n	800869a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3308      	adds	r3, #8
 8008622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	e853 3f00 	ldrex	r3, [r3]
 800862a:	61fb      	str	r3, [r7, #28]
   return(result);
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008632:	673b      	str	r3, [r7, #112]	; 0x70
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3308      	adds	r3, #8
 800863a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800863c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800863e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008644:	e841 2300 	strex	r3, r2, [r1]
 8008648:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	2b00      	cmp	r3, #0
 800864e:	d1e5      	bne.n	800861c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a14      	ldr	r2, [pc, #80]	; (80086a4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008654:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	e853 3f00 	ldrex	r3, [r3]
 8008662:	60bb      	str	r3, [r7, #8]
   return(result);
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f043 0320 	orr.w	r3, r3, #32
 800866a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	461a      	mov	r2, r3
 8008672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008674:	61bb      	str	r3, [r7, #24]
 8008676:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008678:	6979      	ldr	r1, [r7, #20]
 800867a:	69ba      	ldr	r2, [r7, #24]
 800867c:	e841 2300 	strex	r3, r2, [r1]
 8008680:	613b      	str	r3, [r7, #16]
   return(result);
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1e6      	bne.n	8008656 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008688:	e007      	b.n	800869a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	699a      	ldr	r2, [r3, #24]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f042 0208 	orr.w	r2, r2, #8
 8008698:	619a      	str	r2, [r3, #24]
}
 800869a:	bf00      	nop
 800869c:	3798      	adds	r7, #152	; 0x98
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	080080ef 	.word	0x080080ef

080086a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b0a8      	sub	sp, #160	; 0xa0
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086b6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	69db      	ldr	r3, [r3, #28]
 80086c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086de:	2b22      	cmp	r3, #34	; 0x22
 80086e0:	f040 8153 	bne.w	800898a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80086ea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086ee:	e0fa      	b.n	80088e6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008702:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008706:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800870a:	4013      	ands	r3, r2
 800870c:	b29a      	uxth	r2, r3
 800870e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008712:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008718:	1c9a      	adds	r2, r3, #2
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008724:	b29b      	uxth	r3, r3
 8008726:	3b01      	subs	r3, #1
 8008728:	b29a      	uxth	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800873a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800873e:	f003 0307 	and.w	r3, r3, #7
 8008742:	2b00      	cmp	r3, #0
 8008744:	d053      	beq.n	80087ee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008746:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b00      	cmp	r3, #0
 8008750:	d011      	beq.n	8008776 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008752:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00b      	beq.n	8008776 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2201      	movs	r2, #1
 8008764:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800876c:	f043 0201 	orr.w	r2, r3, #1
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008776:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800877a:	f003 0302 	and.w	r3, r3, #2
 800877e:	2b00      	cmp	r3, #0
 8008780:	d011      	beq.n	80087a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008782:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00b      	beq.n	80087a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2202      	movs	r2, #2
 8008794:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800879c:	f043 0204 	orr.w	r2, r3, #4
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087aa:	f003 0304 	and.w	r3, r3, #4
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d011      	beq.n	80087d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80087b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00b      	beq.n	80087d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2204      	movs	r2, #4
 80087c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087cc:	f043 0202 	orr.w	r2, r3, #2
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d006      	beq.n	80087ee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7fe fdeb 	bl	80073bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d175      	bne.n	80088e6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008802:	e853 3f00 	ldrex	r3, [r3]
 8008806:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800880a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800880e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800881c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800881e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008820:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008822:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008824:	e841 2300 	strex	r3, r2, [r1]
 8008828:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800882a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1e4      	bne.n	80087fa <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3308      	adds	r3, #8
 8008836:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800883a:	e853 3f00 	ldrex	r3, [r3]
 800883e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008846:	f023 0301 	bic.w	r3, r3, #1
 800884a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3308      	adds	r3, #8
 8008854:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008858:	65ba      	str	r2, [r7, #88]	; 0x58
 800885a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800885e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008860:	e841 2300 	strex	r3, r2, [r1]
 8008864:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1e1      	bne.n	8008830 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2220      	movs	r2, #32
 8008870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800887e:	2b01      	cmp	r3, #1
 8008880:	d12e      	bne.n	80088e0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008890:	e853 3f00 	ldrex	r3, [r3]
 8008894:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008898:	f023 0310 	bic.w	r3, r3, #16
 800889c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088a6:	647b      	str	r3, [r7, #68]	; 0x44
 80088a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088ae:	e841 2300 	strex	r3, r2, [r1]
 80088b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1e6      	bne.n	8008888 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	69db      	ldr	r3, [r3, #28]
 80088c0:	f003 0310 	and.w	r3, r3, #16
 80088c4:	2b10      	cmp	r3, #16
 80088c6:	d103      	bne.n	80088d0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2210      	movs	r2, #16
 80088ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7fe fd79 	bl	80073d0 <HAL_UARTEx_RxEventCallback>
 80088de:	e002      	b.n	80088e6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7f8 ff81 	bl	80017e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80088e6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d006      	beq.n	80088fc <UART_RxISR_16BIT_FIFOEN+0x254>
 80088ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088f2:	f003 0320 	and.w	r3, r3, #32
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f47f aefa 	bne.w	80086f0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008902:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008906:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800890a:	2b00      	cmp	r3, #0
 800890c:	d045      	beq.n	800899a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008914:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008918:	429a      	cmp	r2, r3
 800891a:	d23e      	bcs.n	800899a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3308      	adds	r3, #8
 8008922:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	e853 3f00 	ldrex	r3, [r3]
 800892a:	623b      	str	r3, [r7, #32]
   return(result);
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008932:	677b      	str	r3, [r7, #116]	; 0x74
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3308      	adds	r3, #8
 800893a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800893c:	633a      	str	r2, [r7, #48]	; 0x30
 800893e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008940:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008944:	e841 2300 	strex	r3, r2, [r1]
 8008948:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1e5      	bne.n	800891c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a14      	ldr	r2, [pc, #80]	; (80089a4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008954:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	60fb      	str	r3, [r7, #12]
   return(result);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f043 0320 	orr.w	r3, r3, #32
 800896a:	673b      	str	r3, [r7, #112]	; 0x70
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	461a      	mov	r2, r3
 8008972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008974:	61fb      	str	r3, [r7, #28]
 8008976:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	69b9      	ldr	r1, [r7, #24]
 800897a:	69fa      	ldr	r2, [r7, #28]
 800897c:	e841 2300 	strex	r3, r2, [r1]
 8008980:	617b      	str	r3, [r7, #20]
   return(result);
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e6      	bne.n	8008956 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008988:	e007      	b.n	800899a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	699a      	ldr	r2, [r3, #24]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f042 0208 	orr.w	r2, r2, #8
 8008998:	619a      	str	r2, [r3, #24]
}
 800899a:	bf00      	nop
 800899c:	37a0      	adds	r7, #160	; 0xa0
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	0800824f 	.word	0x0800824f

080089a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089b0:	bf00      	nop
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d101      	bne.n	80089fa <HAL_UARTEx_DisableFifoMode+0x16>
 80089f6:	2302      	movs	r3, #2
 80089f8:	e027      	b.n	8008a4a <HAL_UARTEx_DisableFifoMode+0x66>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2224      	movs	r2, #36	; 0x24
 8008a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f022 0201 	bic.w	r2, r2, #1
 8008a20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b084      	sub	sp, #16
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d101      	bne.n	8008a6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	e02d      	b.n	8008aca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2224      	movs	r2, #36	; 0x24
 8008a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f022 0201 	bic.w	r2, r2, #1
 8008a94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	683a      	ldr	r2, [r7, #0]
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f850 	bl	8008b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2220      	movs	r2, #32
 8008abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e02d      	b.n	8008b46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2224      	movs	r2, #36	; 0x24
 8008af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f022 0201 	bic.w	r2, r2, #1
 8008b10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	683a      	ldr	r2, [r7, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f812 	bl	8008b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2220      	movs	r2, #32
 8008b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d108      	bne.n	8008b72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b70:	e031      	b.n	8008bd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b72:	2308      	movs	r3, #8
 8008b74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b76:	2308      	movs	r3, #8
 8008b78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	0e5b      	lsrs	r3, r3, #25
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	f003 0307 	and.w	r3, r3, #7
 8008b88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	0f5b      	lsrs	r3, r3, #29
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	f003 0307 	and.w	r3, r3, #7
 8008b98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	7b3a      	ldrb	r2, [r7, #12]
 8008b9e:	4911      	ldr	r1, [pc, #68]	; (8008be4 <UARTEx_SetNbDataToProcess+0x94>)
 8008ba0:	5c8a      	ldrb	r2, [r1, r2]
 8008ba2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ba6:	7b3a      	ldrb	r2, [r7, #12]
 8008ba8:	490f      	ldr	r1, [pc, #60]	; (8008be8 <UARTEx_SetNbDataToProcess+0x98>)
 8008baa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bac:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
 8008bba:	7b7a      	ldrb	r2, [r7, #13]
 8008bbc:	4909      	ldr	r1, [pc, #36]	; (8008be4 <UARTEx_SetNbDataToProcess+0x94>)
 8008bbe:	5c8a      	ldrb	r2, [r1, r2]
 8008bc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bc4:	7b7a      	ldrb	r2, [r7, #13]
 8008bc6:	4908      	ldr	r1, [pc, #32]	; (8008be8 <UARTEx_SetNbDataToProcess+0x98>)
 8008bc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bca:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008bd6:	bf00      	nop
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	0800bf98 	.word	0x0800bf98
 8008be8:	0800bfa0 	.word	0x0800bfa0

08008bec <atoi>:
 8008bec:	220a      	movs	r2, #10
 8008bee:	2100      	movs	r1, #0
 8008bf0:	f000 be28 	b.w	8009844 <strtol>

08008bf4 <__errno>:
 8008bf4:	4b01      	ldr	r3, [pc, #4]	; (8008bfc <__errno+0x8>)
 8008bf6:	6818      	ldr	r0, [r3, #0]
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	200000a8 	.word	0x200000a8

08008c00 <__libc_init_array>:
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	4d0d      	ldr	r5, [pc, #52]	; (8008c38 <__libc_init_array+0x38>)
 8008c04:	4c0d      	ldr	r4, [pc, #52]	; (8008c3c <__libc_init_array+0x3c>)
 8008c06:	1b64      	subs	r4, r4, r5
 8008c08:	10a4      	asrs	r4, r4, #2
 8008c0a:	2600      	movs	r6, #0
 8008c0c:	42a6      	cmp	r6, r4
 8008c0e:	d109      	bne.n	8008c24 <__libc_init_array+0x24>
 8008c10:	4d0b      	ldr	r5, [pc, #44]	; (8008c40 <__libc_init_array+0x40>)
 8008c12:	4c0c      	ldr	r4, [pc, #48]	; (8008c44 <__libc_init_array+0x44>)
 8008c14:	f003 f87c 	bl	800bd10 <_init>
 8008c18:	1b64      	subs	r4, r4, r5
 8008c1a:	10a4      	asrs	r4, r4, #2
 8008c1c:	2600      	movs	r6, #0
 8008c1e:	42a6      	cmp	r6, r4
 8008c20:	d105      	bne.n	8008c2e <__libc_init_array+0x2e>
 8008c22:	bd70      	pop	{r4, r5, r6, pc}
 8008c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c28:	4798      	blx	r3
 8008c2a:	3601      	adds	r6, #1
 8008c2c:	e7ee      	b.n	8008c0c <__libc_init_array+0xc>
 8008c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c32:	4798      	blx	r3
 8008c34:	3601      	adds	r6, #1
 8008c36:	e7f2      	b.n	8008c1e <__libc_init_array+0x1e>
 8008c38:	0800c3e8 	.word	0x0800c3e8
 8008c3c:	0800c3e8 	.word	0x0800c3e8
 8008c40:	0800c3e8 	.word	0x0800c3e8
 8008c44:	0800c3ec 	.word	0x0800c3ec

08008c48 <memset>:
 8008c48:	4402      	add	r2, r0
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d100      	bne.n	8008c52 <memset+0xa>
 8008c50:	4770      	bx	lr
 8008c52:	f803 1b01 	strb.w	r1, [r3], #1
 8008c56:	e7f9      	b.n	8008c4c <memset+0x4>

08008c58 <__cvt>:
 8008c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c5c:	ec55 4b10 	vmov	r4, r5, d0
 8008c60:	2d00      	cmp	r5, #0
 8008c62:	460e      	mov	r6, r1
 8008c64:	4619      	mov	r1, r3
 8008c66:	462b      	mov	r3, r5
 8008c68:	bfbb      	ittet	lt
 8008c6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008c6e:	461d      	movlt	r5, r3
 8008c70:	2300      	movge	r3, #0
 8008c72:	232d      	movlt	r3, #45	; 0x2d
 8008c74:	700b      	strb	r3, [r1, #0]
 8008c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008c7c:	4691      	mov	r9, r2
 8008c7e:	f023 0820 	bic.w	r8, r3, #32
 8008c82:	bfbc      	itt	lt
 8008c84:	4622      	movlt	r2, r4
 8008c86:	4614      	movlt	r4, r2
 8008c88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008c8c:	d005      	beq.n	8008c9a <__cvt+0x42>
 8008c8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008c92:	d100      	bne.n	8008c96 <__cvt+0x3e>
 8008c94:	3601      	adds	r6, #1
 8008c96:	2102      	movs	r1, #2
 8008c98:	e000      	b.n	8008c9c <__cvt+0x44>
 8008c9a:	2103      	movs	r1, #3
 8008c9c:	ab03      	add	r3, sp, #12
 8008c9e:	9301      	str	r3, [sp, #4]
 8008ca0:	ab02      	add	r3, sp, #8
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	ec45 4b10 	vmov	d0, r4, r5
 8008ca8:	4653      	mov	r3, sl
 8008caa:	4632      	mov	r2, r6
 8008cac:	f000 ff40 	bl	8009b30 <_dtoa_r>
 8008cb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008cb4:	4607      	mov	r7, r0
 8008cb6:	d102      	bne.n	8008cbe <__cvt+0x66>
 8008cb8:	f019 0f01 	tst.w	r9, #1
 8008cbc:	d022      	beq.n	8008d04 <__cvt+0xac>
 8008cbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008cc2:	eb07 0906 	add.w	r9, r7, r6
 8008cc6:	d110      	bne.n	8008cea <__cvt+0x92>
 8008cc8:	783b      	ldrb	r3, [r7, #0]
 8008cca:	2b30      	cmp	r3, #48	; 0x30
 8008ccc:	d10a      	bne.n	8008ce4 <__cvt+0x8c>
 8008cce:	2200      	movs	r2, #0
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	f7f7 ff2f 	bl	8000b38 <__aeabi_dcmpeq>
 8008cda:	b918      	cbnz	r0, 8008ce4 <__cvt+0x8c>
 8008cdc:	f1c6 0601 	rsb	r6, r6, #1
 8008ce0:	f8ca 6000 	str.w	r6, [sl]
 8008ce4:	f8da 3000 	ldr.w	r3, [sl]
 8008ce8:	4499      	add	r9, r3
 8008cea:	2200      	movs	r2, #0
 8008cec:	2300      	movs	r3, #0
 8008cee:	4620      	mov	r0, r4
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	f7f7 ff21 	bl	8000b38 <__aeabi_dcmpeq>
 8008cf6:	b108      	cbz	r0, 8008cfc <__cvt+0xa4>
 8008cf8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008cfc:	2230      	movs	r2, #48	; 0x30
 8008cfe:	9b03      	ldr	r3, [sp, #12]
 8008d00:	454b      	cmp	r3, r9
 8008d02:	d307      	bcc.n	8008d14 <__cvt+0xbc>
 8008d04:	9b03      	ldr	r3, [sp, #12]
 8008d06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d08:	1bdb      	subs	r3, r3, r7
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	6013      	str	r3, [r2, #0]
 8008d0e:	b004      	add	sp, #16
 8008d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d14:	1c59      	adds	r1, r3, #1
 8008d16:	9103      	str	r1, [sp, #12]
 8008d18:	701a      	strb	r2, [r3, #0]
 8008d1a:	e7f0      	b.n	8008cfe <__cvt+0xa6>

08008d1c <__exponent>:
 8008d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2900      	cmp	r1, #0
 8008d22:	bfb8      	it	lt
 8008d24:	4249      	neglt	r1, r1
 8008d26:	f803 2b02 	strb.w	r2, [r3], #2
 8008d2a:	bfb4      	ite	lt
 8008d2c:	222d      	movlt	r2, #45	; 0x2d
 8008d2e:	222b      	movge	r2, #43	; 0x2b
 8008d30:	2909      	cmp	r1, #9
 8008d32:	7042      	strb	r2, [r0, #1]
 8008d34:	dd2a      	ble.n	8008d8c <__exponent+0x70>
 8008d36:	f10d 0407 	add.w	r4, sp, #7
 8008d3a:	46a4      	mov	ip, r4
 8008d3c:	270a      	movs	r7, #10
 8008d3e:	46a6      	mov	lr, r4
 8008d40:	460a      	mov	r2, r1
 8008d42:	fb91 f6f7 	sdiv	r6, r1, r7
 8008d46:	fb07 1516 	mls	r5, r7, r6, r1
 8008d4a:	3530      	adds	r5, #48	; 0x30
 8008d4c:	2a63      	cmp	r2, #99	; 0x63
 8008d4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008d52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008d56:	4631      	mov	r1, r6
 8008d58:	dcf1      	bgt.n	8008d3e <__exponent+0x22>
 8008d5a:	3130      	adds	r1, #48	; 0x30
 8008d5c:	f1ae 0502 	sub.w	r5, lr, #2
 8008d60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008d64:	1c44      	adds	r4, r0, #1
 8008d66:	4629      	mov	r1, r5
 8008d68:	4561      	cmp	r1, ip
 8008d6a:	d30a      	bcc.n	8008d82 <__exponent+0x66>
 8008d6c:	f10d 0209 	add.w	r2, sp, #9
 8008d70:	eba2 020e 	sub.w	r2, r2, lr
 8008d74:	4565      	cmp	r5, ip
 8008d76:	bf88      	it	hi
 8008d78:	2200      	movhi	r2, #0
 8008d7a:	4413      	add	r3, r2
 8008d7c:	1a18      	subs	r0, r3, r0
 8008d7e:	b003      	add	sp, #12
 8008d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008d8a:	e7ed      	b.n	8008d68 <__exponent+0x4c>
 8008d8c:	2330      	movs	r3, #48	; 0x30
 8008d8e:	3130      	adds	r1, #48	; 0x30
 8008d90:	7083      	strb	r3, [r0, #2]
 8008d92:	70c1      	strb	r1, [r0, #3]
 8008d94:	1d03      	adds	r3, r0, #4
 8008d96:	e7f1      	b.n	8008d7c <__exponent+0x60>

08008d98 <_printf_float>:
 8008d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9c:	ed2d 8b02 	vpush	{d8}
 8008da0:	b08d      	sub	sp, #52	; 0x34
 8008da2:	460c      	mov	r4, r1
 8008da4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008da8:	4616      	mov	r6, r2
 8008daa:	461f      	mov	r7, r3
 8008dac:	4605      	mov	r5, r0
 8008dae:	f001 fe77 	bl	800aaa0 <_localeconv_r>
 8008db2:	f8d0 a000 	ldr.w	sl, [r0]
 8008db6:	4650      	mov	r0, sl
 8008db8:	f7f7 fa3c 	bl	8000234 <strlen>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	9305      	str	r3, [sp, #20]
 8008dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8008dc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008dcc:	3307      	adds	r3, #7
 8008dce:	f023 0307 	bic.w	r3, r3, #7
 8008dd2:	f103 0208 	add.w	r2, r3, #8
 8008dd6:	f8c8 2000 	str.w	r2, [r8]
 8008dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008de2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008de6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008dea:	9307      	str	r3, [sp, #28]
 8008dec:	f8cd 8018 	str.w	r8, [sp, #24]
 8008df0:	ee08 0a10 	vmov	s16, r0
 8008df4:	4b9f      	ldr	r3, [pc, #636]	; (8009074 <_printf_float+0x2dc>)
 8008df6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8008dfe:	f7f7 fecd 	bl	8000b9c <__aeabi_dcmpun>
 8008e02:	bb88      	cbnz	r0, 8008e68 <_printf_float+0xd0>
 8008e04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e08:	4b9a      	ldr	r3, [pc, #616]	; (8009074 <_printf_float+0x2dc>)
 8008e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0e:	f7f7 fea7 	bl	8000b60 <__aeabi_dcmple>
 8008e12:	bb48      	cbnz	r0, 8008e68 <_printf_float+0xd0>
 8008e14:	2200      	movs	r2, #0
 8008e16:	2300      	movs	r3, #0
 8008e18:	4640      	mov	r0, r8
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	f7f7 fe96 	bl	8000b4c <__aeabi_dcmplt>
 8008e20:	b110      	cbz	r0, 8008e28 <_printf_float+0x90>
 8008e22:	232d      	movs	r3, #45	; 0x2d
 8008e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e28:	4b93      	ldr	r3, [pc, #588]	; (8009078 <_printf_float+0x2e0>)
 8008e2a:	4894      	ldr	r0, [pc, #592]	; (800907c <_printf_float+0x2e4>)
 8008e2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008e30:	bf94      	ite	ls
 8008e32:	4698      	movls	r8, r3
 8008e34:	4680      	movhi	r8, r0
 8008e36:	2303      	movs	r3, #3
 8008e38:	6123      	str	r3, [r4, #16]
 8008e3a:	9b05      	ldr	r3, [sp, #20]
 8008e3c:	f023 0204 	bic.w	r2, r3, #4
 8008e40:	6022      	str	r2, [r4, #0]
 8008e42:	f04f 0900 	mov.w	r9, #0
 8008e46:	9700      	str	r7, [sp, #0]
 8008e48:	4633      	mov	r3, r6
 8008e4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	4628      	mov	r0, r5
 8008e50:	f000 f9d8 	bl	8009204 <_printf_common>
 8008e54:	3001      	adds	r0, #1
 8008e56:	f040 8090 	bne.w	8008f7a <_printf_float+0x1e2>
 8008e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5e:	b00d      	add	sp, #52	; 0x34
 8008e60:	ecbd 8b02 	vpop	{d8}
 8008e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e68:	4642      	mov	r2, r8
 8008e6a:	464b      	mov	r3, r9
 8008e6c:	4640      	mov	r0, r8
 8008e6e:	4649      	mov	r1, r9
 8008e70:	f7f7 fe94 	bl	8000b9c <__aeabi_dcmpun>
 8008e74:	b140      	cbz	r0, 8008e88 <_printf_float+0xf0>
 8008e76:	464b      	mov	r3, r9
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	bfbc      	itt	lt
 8008e7c:	232d      	movlt	r3, #45	; 0x2d
 8008e7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008e82:	487f      	ldr	r0, [pc, #508]	; (8009080 <_printf_float+0x2e8>)
 8008e84:	4b7f      	ldr	r3, [pc, #508]	; (8009084 <_printf_float+0x2ec>)
 8008e86:	e7d1      	b.n	8008e2c <_printf_float+0x94>
 8008e88:	6863      	ldr	r3, [r4, #4]
 8008e8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008e8e:	9206      	str	r2, [sp, #24]
 8008e90:	1c5a      	adds	r2, r3, #1
 8008e92:	d13f      	bne.n	8008f14 <_printf_float+0x17c>
 8008e94:	2306      	movs	r3, #6
 8008e96:	6063      	str	r3, [r4, #4]
 8008e98:	9b05      	ldr	r3, [sp, #20]
 8008e9a:	6861      	ldr	r1, [r4, #4]
 8008e9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	9303      	str	r3, [sp, #12]
 8008ea4:	ab0a      	add	r3, sp, #40	; 0x28
 8008ea6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008eaa:	ab09      	add	r3, sp, #36	; 0x24
 8008eac:	ec49 8b10 	vmov	d0, r8, r9
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	6022      	str	r2, [r4, #0]
 8008eb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008eb8:	4628      	mov	r0, r5
 8008eba:	f7ff fecd 	bl	8008c58 <__cvt>
 8008ebe:	9b06      	ldr	r3, [sp, #24]
 8008ec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ec2:	2b47      	cmp	r3, #71	; 0x47
 8008ec4:	4680      	mov	r8, r0
 8008ec6:	d108      	bne.n	8008eda <_printf_float+0x142>
 8008ec8:	1cc8      	adds	r0, r1, #3
 8008eca:	db02      	blt.n	8008ed2 <_printf_float+0x13a>
 8008ecc:	6863      	ldr	r3, [r4, #4]
 8008ece:	4299      	cmp	r1, r3
 8008ed0:	dd41      	ble.n	8008f56 <_printf_float+0x1be>
 8008ed2:	f1ab 0b02 	sub.w	fp, fp, #2
 8008ed6:	fa5f fb8b 	uxtb.w	fp, fp
 8008eda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ede:	d820      	bhi.n	8008f22 <_printf_float+0x18a>
 8008ee0:	3901      	subs	r1, #1
 8008ee2:	465a      	mov	r2, fp
 8008ee4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ee8:	9109      	str	r1, [sp, #36]	; 0x24
 8008eea:	f7ff ff17 	bl	8008d1c <__exponent>
 8008eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ef0:	1813      	adds	r3, r2, r0
 8008ef2:	2a01      	cmp	r2, #1
 8008ef4:	4681      	mov	r9, r0
 8008ef6:	6123      	str	r3, [r4, #16]
 8008ef8:	dc02      	bgt.n	8008f00 <_printf_float+0x168>
 8008efa:	6822      	ldr	r2, [r4, #0]
 8008efc:	07d2      	lsls	r2, r2, #31
 8008efe:	d501      	bpl.n	8008f04 <_printf_float+0x16c>
 8008f00:	3301      	adds	r3, #1
 8008f02:	6123      	str	r3, [r4, #16]
 8008f04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d09c      	beq.n	8008e46 <_printf_float+0xae>
 8008f0c:	232d      	movs	r3, #45	; 0x2d
 8008f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f12:	e798      	b.n	8008e46 <_printf_float+0xae>
 8008f14:	9a06      	ldr	r2, [sp, #24]
 8008f16:	2a47      	cmp	r2, #71	; 0x47
 8008f18:	d1be      	bne.n	8008e98 <_printf_float+0x100>
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1bc      	bne.n	8008e98 <_printf_float+0x100>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e7b9      	b.n	8008e96 <_printf_float+0xfe>
 8008f22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008f26:	d118      	bne.n	8008f5a <_printf_float+0x1c2>
 8008f28:	2900      	cmp	r1, #0
 8008f2a:	6863      	ldr	r3, [r4, #4]
 8008f2c:	dd0b      	ble.n	8008f46 <_printf_float+0x1ae>
 8008f2e:	6121      	str	r1, [r4, #16]
 8008f30:	b913      	cbnz	r3, 8008f38 <_printf_float+0x1a0>
 8008f32:	6822      	ldr	r2, [r4, #0]
 8008f34:	07d0      	lsls	r0, r2, #31
 8008f36:	d502      	bpl.n	8008f3e <_printf_float+0x1a6>
 8008f38:	3301      	adds	r3, #1
 8008f3a:	440b      	add	r3, r1
 8008f3c:	6123      	str	r3, [r4, #16]
 8008f3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008f40:	f04f 0900 	mov.w	r9, #0
 8008f44:	e7de      	b.n	8008f04 <_printf_float+0x16c>
 8008f46:	b913      	cbnz	r3, 8008f4e <_printf_float+0x1b6>
 8008f48:	6822      	ldr	r2, [r4, #0]
 8008f4a:	07d2      	lsls	r2, r2, #31
 8008f4c:	d501      	bpl.n	8008f52 <_printf_float+0x1ba>
 8008f4e:	3302      	adds	r3, #2
 8008f50:	e7f4      	b.n	8008f3c <_printf_float+0x1a4>
 8008f52:	2301      	movs	r3, #1
 8008f54:	e7f2      	b.n	8008f3c <_printf_float+0x1a4>
 8008f56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f5c:	4299      	cmp	r1, r3
 8008f5e:	db05      	blt.n	8008f6c <_printf_float+0x1d4>
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	6121      	str	r1, [r4, #16]
 8008f64:	07d8      	lsls	r0, r3, #31
 8008f66:	d5ea      	bpl.n	8008f3e <_printf_float+0x1a6>
 8008f68:	1c4b      	adds	r3, r1, #1
 8008f6a:	e7e7      	b.n	8008f3c <_printf_float+0x1a4>
 8008f6c:	2900      	cmp	r1, #0
 8008f6e:	bfd4      	ite	le
 8008f70:	f1c1 0202 	rsble	r2, r1, #2
 8008f74:	2201      	movgt	r2, #1
 8008f76:	4413      	add	r3, r2
 8008f78:	e7e0      	b.n	8008f3c <_printf_float+0x1a4>
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	055a      	lsls	r2, r3, #21
 8008f7e:	d407      	bmi.n	8008f90 <_printf_float+0x1f8>
 8008f80:	6923      	ldr	r3, [r4, #16]
 8008f82:	4642      	mov	r2, r8
 8008f84:	4631      	mov	r1, r6
 8008f86:	4628      	mov	r0, r5
 8008f88:	47b8      	blx	r7
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d12c      	bne.n	8008fe8 <_printf_float+0x250>
 8008f8e:	e764      	b.n	8008e5a <_printf_float+0xc2>
 8008f90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f94:	f240 80e0 	bls.w	8009158 <_printf_float+0x3c0>
 8008f98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	f7f7 fdca 	bl	8000b38 <__aeabi_dcmpeq>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d034      	beq.n	8009012 <_printf_float+0x27a>
 8008fa8:	4a37      	ldr	r2, [pc, #220]	; (8009088 <_printf_float+0x2f0>)
 8008faa:	2301      	movs	r3, #1
 8008fac:	4631      	mov	r1, r6
 8008fae:	4628      	mov	r0, r5
 8008fb0:	47b8      	blx	r7
 8008fb2:	3001      	adds	r0, #1
 8008fb4:	f43f af51 	beq.w	8008e5a <_printf_float+0xc2>
 8008fb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	db02      	blt.n	8008fc6 <_printf_float+0x22e>
 8008fc0:	6823      	ldr	r3, [r4, #0]
 8008fc2:	07d8      	lsls	r0, r3, #31
 8008fc4:	d510      	bpl.n	8008fe8 <_printf_float+0x250>
 8008fc6:	ee18 3a10 	vmov	r3, s16
 8008fca:	4652      	mov	r2, sl
 8008fcc:	4631      	mov	r1, r6
 8008fce:	4628      	mov	r0, r5
 8008fd0:	47b8      	blx	r7
 8008fd2:	3001      	adds	r0, #1
 8008fd4:	f43f af41 	beq.w	8008e5a <_printf_float+0xc2>
 8008fd8:	f04f 0800 	mov.w	r8, #0
 8008fdc:	f104 091a 	add.w	r9, r4, #26
 8008fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	4543      	cmp	r3, r8
 8008fe6:	dc09      	bgt.n	8008ffc <_printf_float+0x264>
 8008fe8:	6823      	ldr	r3, [r4, #0]
 8008fea:	079b      	lsls	r3, r3, #30
 8008fec:	f100 8105 	bmi.w	80091fa <_printf_float+0x462>
 8008ff0:	68e0      	ldr	r0, [r4, #12]
 8008ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ff4:	4298      	cmp	r0, r3
 8008ff6:	bfb8      	it	lt
 8008ff8:	4618      	movlt	r0, r3
 8008ffa:	e730      	b.n	8008e5e <_printf_float+0xc6>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	464a      	mov	r2, r9
 8009000:	4631      	mov	r1, r6
 8009002:	4628      	mov	r0, r5
 8009004:	47b8      	blx	r7
 8009006:	3001      	adds	r0, #1
 8009008:	f43f af27 	beq.w	8008e5a <_printf_float+0xc2>
 800900c:	f108 0801 	add.w	r8, r8, #1
 8009010:	e7e6      	b.n	8008fe0 <_printf_float+0x248>
 8009012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009014:	2b00      	cmp	r3, #0
 8009016:	dc39      	bgt.n	800908c <_printf_float+0x2f4>
 8009018:	4a1b      	ldr	r2, [pc, #108]	; (8009088 <_printf_float+0x2f0>)
 800901a:	2301      	movs	r3, #1
 800901c:	4631      	mov	r1, r6
 800901e:	4628      	mov	r0, r5
 8009020:	47b8      	blx	r7
 8009022:	3001      	adds	r0, #1
 8009024:	f43f af19 	beq.w	8008e5a <_printf_float+0xc2>
 8009028:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800902c:	4313      	orrs	r3, r2
 800902e:	d102      	bne.n	8009036 <_printf_float+0x29e>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	07d9      	lsls	r1, r3, #31
 8009034:	d5d8      	bpl.n	8008fe8 <_printf_float+0x250>
 8009036:	ee18 3a10 	vmov	r3, s16
 800903a:	4652      	mov	r2, sl
 800903c:	4631      	mov	r1, r6
 800903e:	4628      	mov	r0, r5
 8009040:	47b8      	blx	r7
 8009042:	3001      	adds	r0, #1
 8009044:	f43f af09 	beq.w	8008e5a <_printf_float+0xc2>
 8009048:	f04f 0900 	mov.w	r9, #0
 800904c:	f104 0a1a 	add.w	sl, r4, #26
 8009050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009052:	425b      	negs	r3, r3
 8009054:	454b      	cmp	r3, r9
 8009056:	dc01      	bgt.n	800905c <_printf_float+0x2c4>
 8009058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800905a:	e792      	b.n	8008f82 <_printf_float+0x1ea>
 800905c:	2301      	movs	r3, #1
 800905e:	4652      	mov	r2, sl
 8009060:	4631      	mov	r1, r6
 8009062:	4628      	mov	r0, r5
 8009064:	47b8      	blx	r7
 8009066:	3001      	adds	r0, #1
 8009068:	f43f aef7 	beq.w	8008e5a <_printf_float+0xc2>
 800906c:	f109 0901 	add.w	r9, r9, #1
 8009070:	e7ee      	b.n	8009050 <_printf_float+0x2b8>
 8009072:	bf00      	nop
 8009074:	7fefffff 	.word	0x7fefffff
 8009078:	0800bfac 	.word	0x0800bfac
 800907c:	0800bfb0 	.word	0x0800bfb0
 8009080:	0800bfb8 	.word	0x0800bfb8
 8009084:	0800bfb4 	.word	0x0800bfb4
 8009088:	0800bfbc 	.word	0x0800bfbc
 800908c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800908e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009090:	429a      	cmp	r2, r3
 8009092:	bfa8      	it	ge
 8009094:	461a      	movge	r2, r3
 8009096:	2a00      	cmp	r2, #0
 8009098:	4691      	mov	r9, r2
 800909a:	dc37      	bgt.n	800910c <_printf_float+0x374>
 800909c:	f04f 0b00 	mov.w	fp, #0
 80090a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090a4:	f104 021a 	add.w	r2, r4, #26
 80090a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80090aa:	9305      	str	r3, [sp, #20]
 80090ac:	eba3 0309 	sub.w	r3, r3, r9
 80090b0:	455b      	cmp	r3, fp
 80090b2:	dc33      	bgt.n	800911c <_printf_float+0x384>
 80090b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090b8:	429a      	cmp	r2, r3
 80090ba:	db3b      	blt.n	8009134 <_printf_float+0x39c>
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	07da      	lsls	r2, r3, #31
 80090c0:	d438      	bmi.n	8009134 <_printf_float+0x39c>
 80090c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090c4:	9a05      	ldr	r2, [sp, #20]
 80090c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090c8:	1a9a      	subs	r2, r3, r2
 80090ca:	eba3 0901 	sub.w	r9, r3, r1
 80090ce:	4591      	cmp	r9, r2
 80090d0:	bfa8      	it	ge
 80090d2:	4691      	movge	r9, r2
 80090d4:	f1b9 0f00 	cmp.w	r9, #0
 80090d8:	dc35      	bgt.n	8009146 <_printf_float+0x3ae>
 80090da:	f04f 0800 	mov.w	r8, #0
 80090de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090e2:	f104 0a1a 	add.w	sl, r4, #26
 80090e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090ea:	1a9b      	subs	r3, r3, r2
 80090ec:	eba3 0309 	sub.w	r3, r3, r9
 80090f0:	4543      	cmp	r3, r8
 80090f2:	f77f af79 	ble.w	8008fe8 <_printf_float+0x250>
 80090f6:	2301      	movs	r3, #1
 80090f8:	4652      	mov	r2, sl
 80090fa:	4631      	mov	r1, r6
 80090fc:	4628      	mov	r0, r5
 80090fe:	47b8      	blx	r7
 8009100:	3001      	adds	r0, #1
 8009102:	f43f aeaa 	beq.w	8008e5a <_printf_float+0xc2>
 8009106:	f108 0801 	add.w	r8, r8, #1
 800910a:	e7ec      	b.n	80090e6 <_printf_float+0x34e>
 800910c:	4613      	mov	r3, r2
 800910e:	4631      	mov	r1, r6
 8009110:	4642      	mov	r2, r8
 8009112:	4628      	mov	r0, r5
 8009114:	47b8      	blx	r7
 8009116:	3001      	adds	r0, #1
 8009118:	d1c0      	bne.n	800909c <_printf_float+0x304>
 800911a:	e69e      	b.n	8008e5a <_printf_float+0xc2>
 800911c:	2301      	movs	r3, #1
 800911e:	4631      	mov	r1, r6
 8009120:	4628      	mov	r0, r5
 8009122:	9205      	str	r2, [sp, #20]
 8009124:	47b8      	blx	r7
 8009126:	3001      	adds	r0, #1
 8009128:	f43f ae97 	beq.w	8008e5a <_printf_float+0xc2>
 800912c:	9a05      	ldr	r2, [sp, #20]
 800912e:	f10b 0b01 	add.w	fp, fp, #1
 8009132:	e7b9      	b.n	80090a8 <_printf_float+0x310>
 8009134:	ee18 3a10 	vmov	r3, s16
 8009138:	4652      	mov	r2, sl
 800913a:	4631      	mov	r1, r6
 800913c:	4628      	mov	r0, r5
 800913e:	47b8      	blx	r7
 8009140:	3001      	adds	r0, #1
 8009142:	d1be      	bne.n	80090c2 <_printf_float+0x32a>
 8009144:	e689      	b.n	8008e5a <_printf_float+0xc2>
 8009146:	9a05      	ldr	r2, [sp, #20]
 8009148:	464b      	mov	r3, r9
 800914a:	4442      	add	r2, r8
 800914c:	4631      	mov	r1, r6
 800914e:	4628      	mov	r0, r5
 8009150:	47b8      	blx	r7
 8009152:	3001      	adds	r0, #1
 8009154:	d1c1      	bne.n	80090da <_printf_float+0x342>
 8009156:	e680      	b.n	8008e5a <_printf_float+0xc2>
 8009158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800915a:	2a01      	cmp	r2, #1
 800915c:	dc01      	bgt.n	8009162 <_printf_float+0x3ca>
 800915e:	07db      	lsls	r3, r3, #31
 8009160:	d538      	bpl.n	80091d4 <_printf_float+0x43c>
 8009162:	2301      	movs	r3, #1
 8009164:	4642      	mov	r2, r8
 8009166:	4631      	mov	r1, r6
 8009168:	4628      	mov	r0, r5
 800916a:	47b8      	blx	r7
 800916c:	3001      	adds	r0, #1
 800916e:	f43f ae74 	beq.w	8008e5a <_printf_float+0xc2>
 8009172:	ee18 3a10 	vmov	r3, s16
 8009176:	4652      	mov	r2, sl
 8009178:	4631      	mov	r1, r6
 800917a:	4628      	mov	r0, r5
 800917c:	47b8      	blx	r7
 800917e:	3001      	adds	r0, #1
 8009180:	f43f ae6b 	beq.w	8008e5a <_printf_float+0xc2>
 8009184:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009188:	2200      	movs	r2, #0
 800918a:	2300      	movs	r3, #0
 800918c:	f7f7 fcd4 	bl	8000b38 <__aeabi_dcmpeq>
 8009190:	b9d8      	cbnz	r0, 80091ca <_printf_float+0x432>
 8009192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009194:	f108 0201 	add.w	r2, r8, #1
 8009198:	3b01      	subs	r3, #1
 800919a:	4631      	mov	r1, r6
 800919c:	4628      	mov	r0, r5
 800919e:	47b8      	blx	r7
 80091a0:	3001      	adds	r0, #1
 80091a2:	d10e      	bne.n	80091c2 <_printf_float+0x42a>
 80091a4:	e659      	b.n	8008e5a <_printf_float+0xc2>
 80091a6:	2301      	movs	r3, #1
 80091a8:	4652      	mov	r2, sl
 80091aa:	4631      	mov	r1, r6
 80091ac:	4628      	mov	r0, r5
 80091ae:	47b8      	blx	r7
 80091b0:	3001      	adds	r0, #1
 80091b2:	f43f ae52 	beq.w	8008e5a <_printf_float+0xc2>
 80091b6:	f108 0801 	add.w	r8, r8, #1
 80091ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091bc:	3b01      	subs	r3, #1
 80091be:	4543      	cmp	r3, r8
 80091c0:	dcf1      	bgt.n	80091a6 <_printf_float+0x40e>
 80091c2:	464b      	mov	r3, r9
 80091c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80091c8:	e6dc      	b.n	8008f84 <_printf_float+0x1ec>
 80091ca:	f04f 0800 	mov.w	r8, #0
 80091ce:	f104 0a1a 	add.w	sl, r4, #26
 80091d2:	e7f2      	b.n	80091ba <_printf_float+0x422>
 80091d4:	2301      	movs	r3, #1
 80091d6:	4642      	mov	r2, r8
 80091d8:	e7df      	b.n	800919a <_printf_float+0x402>
 80091da:	2301      	movs	r3, #1
 80091dc:	464a      	mov	r2, r9
 80091de:	4631      	mov	r1, r6
 80091e0:	4628      	mov	r0, r5
 80091e2:	47b8      	blx	r7
 80091e4:	3001      	adds	r0, #1
 80091e6:	f43f ae38 	beq.w	8008e5a <_printf_float+0xc2>
 80091ea:	f108 0801 	add.w	r8, r8, #1
 80091ee:	68e3      	ldr	r3, [r4, #12]
 80091f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091f2:	1a5b      	subs	r3, r3, r1
 80091f4:	4543      	cmp	r3, r8
 80091f6:	dcf0      	bgt.n	80091da <_printf_float+0x442>
 80091f8:	e6fa      	b.n	8008ff0 <_printf_float+0x258>
 80091fa:	f04f 0800 	mov.w	r8, #0
 80091fe:	f104 0919 	add.w	r9, r4, #25
 8009202:	e7f4      	b.n	80091ee <_printf_float+0x456>

08009204 <_printf_common>:
 8009204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009208:	4616      	mov	r6, r2
 800920a:	4699      	mov	r9, r3
 800920c:	688a      	ldr	r2, [r1, #8]
 800920e:	690b      	ldr	r3, [r1, #16]
 8009210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009214:	4293      	cmp	r3, r2
 8009216:	bfb8      	it	lt
 8009218:	4613      	movlt	r3, r2
 800921a:	6033      	str	r3, [r6, #0]
 800921c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009220:	4607      	mov	r7, r0
 8009222:	460c      	mov	r4, r1
 8009224:	b10a      	cbz	r2, 800922a <_printf_common+0x26>
 8009226:	3301      	adds	r3, #1
 8009228:	6033      	str	r3, [r6, #0]
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	0699      	lsls	r1, r3, #26
 800922e:	bf42      	ittt	mi
 8009230:	6833      	ldrmi	r3, [r6, #0]
 8009232:	3302      	addmi	r3, #2
 8009234:	6033      	strmi	r3, [r6, #0]
 8009236:	6825      	ldr	r5, [r4, #0]
 8009238:	f015 0506 	ands.w	r5, r5, #6
 800923c:	d106      	bne.n	800924c <_printf_common+0x48>
 800923e:	f104 0a19 	add.w	sl, r4, #25
 8009242:	68e3      	ldr	r3, [r4, #12]
 8009244:	6832      	ldr	r2, [r6, #0]
 8009246:	1a9b      	subs	r3, r3, r2
 8009248:	42ab      	cmp	r3, r5
 800924a:	dc26      	bgt.n	800929a <_printf_common+0x96>
 800924c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009250:	1e13      	subs	r3, r2, #0
 8009252:	6822      	ldr	r2, [r4, #0]
 8009254:	bf18      	it	ne
 8009256:	2301      	movne	r3, #1
 8009258:	0692      	lsls	r2, r2, #26
 800925a:	d42b      	bmi.n	80092b4 <_printf_common+0xb0>
 800925c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009260:	4649      	mov	r1, r9
 8009262:	4638      	mov	r0, r7
 8009264:	47c0      	blx	r8
 8009266:	3001      	adds	r0, #1
 8009268:	d01e      	beq.n	80092a8 <_printf_common+0xa4>
 800926a:	6823      	ldr	r3, [r4, #0]
 800926c:	68e5      	ldr	r5, [r4, #12]
 800926e:	6832      	ldr	r2, [r6, #0]
 8009270:	f003 0306 	and.w	r3, r3, #6
 8009274:	2b04      	cmp	r3, #4
 8009276:	bf08      	it	eq
 8009278:	1aad      	subeq	r5, r5, r2
 800927a:	68a3      	ldr	r3, [r4, #8]
 800927c:	6922      	ldr	r2, [r4, #16]
 800927e:	bf0c      	ite	eq
 8009280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009284:	2500      	movne	r5, #0
 8009286:	4293      	cmp	r3, r2
 8009288:	bfc4      	itt	gt
 800928a:	1a9b      	subgt	r3, r3, r2
 800928c:	18ed      	addgt	r5, r5, r3
 800928e:	2600      	movs	r6, #0
 8009290:	341a      	adds	r4, #26
 8009292:	42b5      	cmp	r5, r6
 8009294:	d11a      	bne.n	80092cc <_printf_common+0xc8>
 8009296:	2000      	movs	r0, #0
 8009298:	e008      	b.n	80092ac <_printf_common+0xa8>
 800929a:	2301      	movs	r3, #1
 800929c:	4652      	mov	r2, sl
 800929e:	4649      	mov	r1, r9
 80092a0:	4638      	mov	r0, r7
 80092a2:	47c0      	blx	r8
 80092a4:	3001      	adds	r0, #1
 80092a6:	d103      	bne.n	80092b0 <_printf_common+0xac>
 80092a8:	f04f 30ff 	mov.w	r0, #4294967295
 80092ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b0:	3501      	adds	r5, #1
 80092b2:	e7c6      	b.n	8009242 <_printf_common+0x3e>
 80092b4:	18e1      	adds	r1, r4, r3
 80092b6:	1c5a      	adds	r2, r3, #1
 80092b8:	2030      	movs	r0, #48	; 0x30
 80092ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092be:	4422      	add	r2, r4
 80092c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092c8:	3302      	adds	r3, #2
 80092ca:	e7c7      	b.n	800925c <_printf_common+0x58>
 80092cc:	2301      	movs	r3, #1
 80092ce:	4622      	mov	r2, r4
 80092d0:	4649      	mov	r1, r9
 80092d2:	4638      	mov	r0, r7
 80092d4:	47c0      	blx	r8
 80092d6:	3001      	adds	r0, #1
 80092d8:	d0e6      	beq.n	80092a8 <_printf_common+0xa4>
 80092da:	3601      	adds	r6, #1
 80092dc:	e7d9      	b.n	8009292 <_printf_common+0x8e>
	...

080092e0 <_printf_i>:
 80092e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092e4:	7e0f      	ldrb	r7, [r1, #24]
 80092e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092e8:	2f78      	cmp	r7, #120	; 0x78
 80092ea:	4691      	mov	r9, r2
 80092ec:	4680      	mov	r8, r0
 80092ee:	460c      	mov	r4, r1
 80092f0:	469a      	mov	sl, r3
 80092f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092f6:	d807      	bhi.n	8009308 <_printf_i+0x28>
 80092f8:	2f62      	cmp	r7, #98	; 0x62
 80092fa:	d80a      	bhi.n	8009312 <_printf_i+0x32>
 80092fc:	2f00      	cmp	r7, #0
 80092fe:	f000 80d8 	beq.w	80094b2 <_printf_i+0x1d2>
 8009302:	2f58      	cmp	r7, #88	; 0x58
 8009304:	f000 80a3 	beq.w	800944e <_printf_i+0x16e>
 8009308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800930c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009310:	e03a      	b.n	8009388 <_printf_i+0xa8>
 8009312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009316:	2b15      	cmp	r3, #21
 8009318:	d8f6      	bhi.n	8009308 <_printf_i+0x28>
 800931a:	a101      	add	r1, pc, #4	; (adr r1, 8009320 <_printf_i+0x40>)
 800931c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009320:	08009379 	.word	0x08009379
 8009324:	0800938d 	.word	0x0800938d
 8009328:	08009309 	.word	0x08009309
 800932c:	08009309 	.word	0x08009309
 8009330:	08009309 	.word	0x08009309
 8009334:	08009309 	.word	0x08009309
 8009338:	0800938d 	.word	0x0800938d
 800933c:	08009309 	.word	0x08009309
 8009340:	08009309 	.word	0x08009309
 8009344:	08009309 	.word	0x08009309
 8009348:	08009309 	.word	0x08009309
 800934c:	08009499 	.word	0x08009499
 8009350:	080093bd 	.word	0x080093bd
 8009354:	0800947b 	.word	0x0800947b
 8009358:	08009309 	.word	0x08009309
 800935c:	08009309 	.word	0x08009309
 8009360:	080094bb 	.word	0x080094bb
 8009364:	08009309 	.word	0x08009309
 8009368:	080093bd 	.word	0x080093bd
 800936c:	08009309 	.word	0x08009309
 8009370:	08009309 	.word	0x08009309
 8009374:	08009483 	.word	0x08009483
 8009378:	682b      	ldr	r3, [r5, #0]
 800937a:	1d1a      	adds	r2, r3, #4
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	602a      	str	r2, [r5, #0]
 8009380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009388:	2301      	movs	r3, #1
 800938a:	e0a3      	b.n	80094d4 <_printf_i+0x1f4>
 800938c:	6820      	ldr	r0, [r4, #0]
 800938e:	6829      	ldr	r1, [r5, #0]
 8009390:	0606      	lsls	r6, r0, #24
 8009392:	f101 0304 	add.w	r3, r1, #4
 8009396:	d50a      	bpl.n	80093ae <_printf_i+0xce>
 8009398:	680e      	ldr	r6, [r1, #0]
 800939a:	602b      	str	r3, [r5, #0]
 800939c:	2e00      	cmp	r6, #0
 800939e:	da03      	bge.n	80093a8 <_printf_i+0xc8>
 80093a0:	232d      	movs	r3, #45	; 0x2d
 80093a2:	4276      	negs	r6, r6
 80093a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093a8:	485e      	ldr	r0, [pc, #376]	; (8009524 <_printf_i+0x244>)
 80093aa:	230a      	movs	r3, #10
 80093ac:	e019      	b.n	80093e2 <_printf_i+0x102>
 80093ae:	680e      	ldr	r6, [r1, #0]
 80093b0:	602b      	str	r3, [r5, #0]
 80093b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093b6:	bf18      	it	ne
 80093b8:	b236      	sxthne	r6, r6
 80093ba:	e7ef      	b.n	800939c <_printf_i+0xbc>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	6820      	ldr	r0, [r4, #0]
 80093c0:	1d19      	adds	r1, r3, #4
 80093c2:	6029      	str	r1, [r5, #0]
 80093c4:	0601      	lsls	r1, r0, #24
 80093c6:	d501      	bpl.n	80093cc <_printf_i+0xec>
 80093c8:	681e      	ldr	r6, [r3, #0]
 80093ca:	e002      	b.n	80093d2 <_printf_i+0xf2>
 80093cc:	0646      	lsls	r6, r0, #25
 80093ce:	d5fb      	bpl.n	80093c8 <_printf_i+0xe8>
 80093d0:	881e      	ldrh	r6, [r3, #0]
 80093d2:	4854      	ldr	r0, [pc, #336]	; (8009524 <_printf_i+0x244>)
 80093d4:	2f6f      	cmp	r7, #111	; 0x6f
 80093d6:	bf0c      	ite	eq
 80093d8:	2308      	moveq	r3, #8
 80093da:	230a      	movne	r3, #10
 80093dc:	2100      	movs	r1, #0
 80093de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093e2:	6865      	ldr	r5, [r4, #4]
 80093e4:	60a5      	str	r5, [r4, #8]
 80093e6:	2d00      	cmp	r5, #0
 80093e8:	bfa2      	ittt	ge
 80093ea:	6821      	ldrge	r1, [r4, #0]
 80093ec:	f021 0104 	bicge.w	r1, r1, #4
 80093f0:	6021      	strge	r1, [r4, #0]
 80093f2:	b90e      	cbnz	r6, 80093f8 <_printf_i+0x118>
 80093f4:	2d00      	cmp	r5, #0
 80093f6:	d04d      	beq.n	8009494 <_printf_i+0x1b4>
 80093f8:	4615      	mov	r5, r2
 80093fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80093fe:	fb03 6711 	mls	r7, r3, r1, r6
 8009402:	5dc7      	ldrb	r7, [r0, r7]
 8009404:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009408:	4637      	mov	r7, r6
 800940a:	42bb      	cmp	r3, r7
 800940c:	460e      	mov	r6, r1
 800940e:	d9f4      	bls.n	80093fa <_printf_i+0x11a>
 8009410:	2b08      	cmp	r3, #8
 8009412:	d10b      	bne.n	800942c <_printf_i+0x14c>
 8009414:	6823      	ldr	r3, [r4, #0]
 8009416:	07de      	lsls	r6, r3, #31
 8009418:	d508      	bpl.n	800942c <_printf_i+0x14c>
 800941a:	6923      	ldr	r3, [r4, #16]
 800941c:	6861      	ldr	r1, [r4, #4]
 800941e:	4299      	cmp	r1, r3
 8009420:	bfde      	ittt	le
 8009422:	2330      	movle	r3, #48	; 0x30
 8009424:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009428:	f105 35ff 	addle.w	r5, r5, #4294967295
 800942c:	1b52      	subs	r2, r2, r5
 800942e:	6122      	str	r2, [r4, #16]
 8009430:	f8cd a000 	str.w	sl, [sp]
 8009434:	464b      	mov	r3, r9
 8009436:	aa03      	add	r2, sp, #12
 8009438:	4621      	mov	r1, r4
 800943a:	4640      	mov	r0, r8
 800943c:	f7ff fee2 	bl	8009204 <_printf_common>
 8009440:	3001      	adds	r0, #1
 8009442:	d14c      	bne.n	80094de <_printf_i+0x1fe>
 8009444:	f04f 30ff 	mov.w	r0, #4294967295
 8009448:	b004      	add	sp, #16
 800944a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800944e:	4835      	ldr	r0, [pc, #212]	; (8009524 <_printf_i+0x244>)
 8009450:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009454:	6829      	ldr	r1, [r5, #0]
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	f851 6b04 	ldr.w	r6, [r1], #4
 800945c:	6029      	str	r1, [r5, #0]
 800945e:	061d      	lsls	r5, r3, #24
 8009460:	d514      	bpl.n	800948c <_printf_i+0x1ac>
 8009462:	07df      	lsls	r7, r3, #31
 8009464:	bf44      	itt	mi
 8009466:	f043 0320 	orrmi.w	r3, r3, #32
 800946a:	6023      	strmi	r3, [r4, #0]
 800946c:	b91e      	cbnz	r6, 8009476 <_printf_i+0x196>
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	f023 0320 	bic.w	r3, r3, #32
 8009474:	6023      	str	r3, [r4, #0]
 8009476:	2310      	movs	r3, #16
 8009478:	e7b0      	b.n	80093dc <_printf_i+0xfc>
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	f043 0320 	orr.w	r3, r3, #32
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	2378      	movs	r3, #120	; 0x78
 8009484:	4828      	ldr	r0, [pc, #160]	; (8009528 <_printf_i+0x248>)
 8009486:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800948a:	e7e3      	b.n	8009454 <_printf_i+0x174>
 800948c:	0659      	lsls	r1, r3, #25
 800948e:	bf48      	it	mi
 8009490:	b2b6      	uxthmi	r6, r6
 8009492:	e7e6      	b.n	8009462 <_printf_i+0x182>
 8009494:	4615      	mov	r5, r2
 8009496:	e7bb      	b.n	8009410 <_printf_i+0x130>
 8009498:	682b      	ldr	r3, [r5, #0]
 800949a:	6826      	ldr	r6, [r4, #0]
 800949c:	6961      	ldr	r1, [r4, #20]
 800949e:	1d18      	adds	r0, r3, #4
 80094a0:	6028      	str	r0, [r5, #0]
 80094a2:	0635      	lsls	r5, r6, #24
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	d501      	bpl.n	80094ac <_printf_i+0x1cc>
 80094a8:	6019      	str	r1, [r3, #0]
 80094aa:	e002      	b.n	80094b2 <_printf_i+0x1d2>
 80094ac:	0670      	lsls	r0, r6, #25
 80094ae:	d5fb      	bpl.n	80094a8 <_printf_i+0x1c8>
 80094b0:	8019      	strh	r1, [r3, #0]
 80094b2:	2300      	movs	r3, #0
 80094b4:	6123      	str	r3, [r4, #16]
 80094b6:	4615      	mov	r5, r2
 80094b8:	e7ba      	b.n	8009430 <_printf_i+0x150>
 80094ba:	682b      	ldr	r3, [r5, #0]
 80094bc:	1d1a      	adds	r2, r3, #4
 80094be:	602a      	str	r2, [r5, #0]
 80094c0:	681d      	ldr	r5, [r3, #0]
 80094c2:	6862      	ldr	r2, [r4, #4]
 80094c4:	2100      	movs	r1, #0
 80094c6:	4628      	mov	r0, r5
 80094c8:	f7f6 fec2 	bl	8000250 <memchr>
 80094cc:	b108      	cbz	r0, 80094d2 <_printf_i+0x1f2>
 80094ce:	1b40      	subs	r0, r0, r5
 80094d0:	6060      	str	r0, [r4, #4]
 80094d2:	6863      	ldr	r3, [r4, #4]
 80094d4:	6123      	str	r3, [r4, #16]
 80094d6:	2300      	movs	r3, #0
 80094d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094dc:	e7a8      	b.n	8009430 <_printf_i+0x150>
 80094de:	6923      	ldr	r3, [r4, #16]
 80094e0:	462a      	mov	r2, r5
 80094e2:	4649      	mov	r1, r9
 80094e4:	4640      	mov	r0, r8
 80094e6:	47d0      	blx	sl
 80094e8:	3001      	adds	r0, #1
 80094ea:	d0ab      	beq.n	8009444 <_printf_i+0x164>
 80094ec:	6823      	ldr	r3, [r4, #0]
 80094ee:	079b      	lsls	r3, r3, #30
 80094f0:	d413      	bmi.n	800951a <_printf_i+0x23a>
 80094f2:	68e0      	ldr	r0, [r4, #12]
 80094f4:	9b03      	ldr	r3, [sp, #12]
 80094f6:	4298      	cmp	r0, r3
 80094f8:	bfb8      	it	lt
 80094fa:	4618      	movlt	r0, r3
 80094fc:	e7a4      	b.n	8009448 <_printf_i+0x168>
 80094fe:	2301      	movs	r3, #1
 8009500:	4632      	mov	r2, r6
 8009502:	4649      	mov	r1, r9
 8009504:	4640      	mov	r0, r8
 8009506:	47d0      	blx	sl
 8009508:	3001      	adds	r0, #1
 800950a:	d09b      	beq.n	8009444 <_printf_i+0x164>
 800950c:	3501      	adds	r5, #1
 800950e:	68e3      	ldr	r3, [r4, #12]
 8009510:	9903      	ldr	r1, [sp, #12]
 8009512:	1a5b      	subs	r3, r3, r1
 8009514:	42ab      	cmp	r3, r5
 8009516:	dcf2      	bgt.n	80094fe <_printf_i+0x21e>
 8009518:	e7eb      	b.n	80094f2 <_printf_i+0x212>
 800951a:	2500      	movs	r5, #0
 800951c:	f104 0619 	add.w	r6, r4, #25
 8009520:	e7f5      	b.n	800950e <_printf_i+0x22e>
 8009522:	bf00      	nop
 8009524:	0800bfbe 	.word	0x0800bfbe
 8009528:	0800bfcf 	.word	0x0800bfcf

0800952c <iprintf>:
 800952c:	b40f      	push	{r0, r1, r2, r3}
 800952e:	4b0a      	ldr	r3, [pc, #40]	; (8009558 <iprintf+0x2c>)
 8009530:	b513      	push	{r0, r1, r4, lr}
 8009532:	681c      	ldr	r4, [r3, #0]
 8009534:	b124      	cbz	r4, 8009540 <iprintf+0x14>
 8009536:	69a3      	ldr	r3, [r4, #24]
 8009538:	b913      	cbnz	r3, 8009540 <iprintf+0x14>
 800953a:	4620      	mov	r0, r4
 800953c:	f001 fa00 	bl	800a940 <__sinit>
 8009540:	ab05      	add	r3, sp, #20
 8009542:	9a04      	ldr	r2, [sp, #16]
 8009544:	68a1      	ldr	r1, [r4, #8]
 8009546:	9301      	str	r3, [sp, #4]
 8009548:	4620      	mov	r0, r4
 800954a:	f002 f92b 	bl	800b7a4 <_vfiprintf_r>
 800954e:	b002      	add	sp, #8
 8009550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009554:	b004      	add	sp, #16
 8009556:	4770      	bx	lr
 8009558:	200000a8 	.word	0x200000a8

0800955c <_puts_r>:
 800955c:	b570      	push	{r4, r5, r6, lr}
 800955e:	460e      	mov	r6, r1
 8009560:	4605      	mov	r5, r0
 8009562:	b118      	cbz	r0, 800956c <_puts_r+0x10>
 8009564:	6983      	ldr	r3, [r0, #24]
 8009566:	b90b      	cbnz	r3, 800956c <_puts_r+0x10>
 8009568:	f001 f9ea 	bl	800a940 <__sinit>
 800956c:	69ab      	ldr	r3, [r5, #24]
 800956e:	68ac      	ldr	r4, [r5, #8]
 8009570:	b913      	cbnz	r3, 8009578 <_puts_r+0x1c>
 8009572:	4628      	mov	r0, r5
 8009574:	f001 f9e4 	bl	800a940 <__sinit>
 8009578:	4b2c      	ldr	r3, [pc, #176]	; (800962c <_puts_r+0xd0>)
 800957a:	429c      	cmp	r4, r3
 800957c:	d120      	bne.n	80095c0 <_puts_r+0x64>
 800957e:	686c      	ldr	r4, [r5, #4]
 8009580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009582:	07db      	lsls	r3, r3, #31
 8009584:	d405      	bmi.n	8009592 <_puts_r+0x36>
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	0598      	lsls	r0, r3, #22
 800958a:	d402      	bmi.n	8009592 <_puts_r+0x36>
 800958c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800958e:	f001 fa8c 	bl	800aaaa <__retarget_lock_acquire_recursive>
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	0719      	lsls	r1, r3, #28
 8009596:	d51d      	bpl.n	80095d4 <_puts_r+0x78>
 8009598:	6923      	ldr	r3, [r4, #16]
 800959a:	b1db      	cbz	r3, 80095d4 <_puts_r+0x78>
 800959c:	3e01      	subs	r6, #1
 800959e:	68a3      	ldr	r3, [r4, #8]
 80095a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80095a4:	3b01      	subs	r3, #1
 80095a6:	60a3      	str	r3, [r4, #8]
 80095a8:	bb39      	cbnz	r1, 80095fa <_puts_r+0x9e>
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	da38      	bge.n	8009620 <_puts_r+0xc4>
 80095ae:	4622      	mov	r2, r4
 80095b0:	210a      	movs	r1, #10
 80095b2:	4628      	mov	r0, r5
 80095b4:	f000 f950 	bl	8009858 <__swbuf_r>
 80095b8:	3001      	adds	r0, #1
 80095ba:	d011      	beq.n	80095e0 <_puts_r+0x84>
 80095bc:	250a      	movs	r5, #10
 80095be:	e011      	b.n	80095e4 <_puts_r+0x88>
 80095c0:	4b1b      	ldr	r3, [pc, #108]	; (8009630 <_puts_r+0xd4>)
 80095c2:	429c      	cmp	r4, r3
 80095c4:	d101      	bne.n	80095ca <_puts_r+0x6e>
 80095c6:	68ac      	ldr	r4, [r5, #8]
 80095c8:	e7da      	b.n	8009580 <_puts_r+0x24>
 80095ca:	4b1a      	ldr	r3, [pc, #104]	; (8009634 <_puts_r+0xd8>)
 80095cc:	429c      	cmp	r4, r3
 80095ce:	bf08      	it	eq
 80095d0:	68ec      	ldreq	r4, [r5, #12]
 80095d2:	e7d5      	b.n	8009580 <_puts_r+0x24>
 80095d4:	4621      	mov	r1, r4
 80095d6:	4628      	mov	r0, r5
 80095d8:	f000 f990 	bl	80098fc <__swsetup_r>
 80095dc:	2800      	cmp	r0, #0
 80095de:	d0dd      	beq.n	800959c <_puts_r+0x40>
 80095e0:	f04f 35ff 	mov.w	r5, #4294967295
 80095e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095e6:	07da      	lsls	r2, r3, #31
 80095e8:	d405      	bmi.n	80095f6 <_puts_r+0x9a>
 80095ea:	89a3      	ldrh	r3, [r4, #12]
 80095ec:	059b      	lsls	r3, r3, #22
 80095ee:	d402      	bmi.n	80095f6 <_puts_r+0x9a>
 80095f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095f2:	f001 fa5b 	bl	800aaac <__retarget_lock_release_recursive>
 80095f6:	4628      	mov	r0, r5
 80095f8:	bd70      	pop	{r4, r5, r6, pc}
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	da04      	bge.n	8009608 <_puts_r+0xac>
 80095fe:	69a2      	ldr	r2, [r4, #24]
 8009600:	429a      	cmp	r2, r3
 8009602:	dc06      	bgt.n	8009612 <_puts_r+0xb6>
 8009604:	290a      	cmp	r1, #10
 8009606:	d004      	beq.n	8009612 <_puts_r+0xb6>
 8009608:	6823      	ldr	r3, [r4, #0]
 800960a:	1c5a      	adds	r2, r3, #1
 800960c:	6022      	str	r2, [r4, #0]
 800960e:	7019      	strb	r1, [r3, #0]
 8009610:	e7c5      	b.n	800959e <_puts_r+0x42>
 8009612:	4622      	mov	r2, r4
 8009614:	4628      	mov	r0, r5
 8009616:	f000 f91f 	bl	8009858 <__swbuf_r>
 800961a:	3001      	adds	r0, #1
 800961c:	d1bf      	bne.n	800959e <_puts_r+0x42>
 800961e:	e7df      	b.n	80095e0 <_puts_r+0x84>
 8009620:	6823      	ldr	r3, [r4, #0]
 8009622:	250a      	movs	r5, #10
 8009624:	1c5a      	adds	r2, r3, #1
 8009626:	6022      	str	r2, [r4, #0]
 8009628:	701d      	strb	r5, [r3, #0]
 800962a:	e7db      	b.n	80095e4 <_puts_r+0x88>
 800962c:	0800c22c 	.word	0x0800c22c
 8009630:	0800c24c 	.word	0x0800c24c
 8009634:	0800c20c 	.word	0x0800c20c

08009638 <puts>:
 8009638:	4b02      	ldr	r3, [pc, #8]	; (8009644 <puts+0xc>)
 800963a:	4601      	mov	r1, r0
 800963c:	6818      	ldr	r0, [r3, #0]
 800963e:	f7ff bf8d 	b.w	800955c <_puts_r>
 8009642:	bf00      	nop
 8009644:	200000a8 	.word	0x200000a8

08009648 <siprintf>:
 8009648:	b40e      	push	{r1, r2, r3}
 800964a:	b500      	push	{lr}
 800964c:	b09c      	sub	sp, #112	; 0x70
 800964e:	ab1d      	add	r3, sp, #116	; 0x74
 8009650:	9002      	str	r0, [sp, #8]
 8009652:	9006      	str	r0, [sp, #24]
 8009654:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009658:	4809      	ldr	r0, [pc, #36]	; (8009680 <siprintf+0x38>)
 800965a:	9107      	str	r1, [sp, #28]
 800965c:	9104      	str	r1, [sp, #16]
 800965e:	4909      	ldr	r1, [pc, #36]	; (8009684 <siprintf+0x3c>)
 8009660:	f853 2b04 	ldr.w	r2, [r3], #4
 8009664:	9105      	str	r1, [sp, #20]
 8009666:	6800      	ldr	r0, [r0, #0]
 8009668:	9301      	str	r3, [sp, #4]
 800966a:	a902      	add	r1, sp, #8
 800966c:	f001 ff70 	bl	800b550 <_svfiprintf_r>
 8009670:	9b02      	ldr	r3, [sp, #8]
 8009672:	2200      	movs	r2, #0
 8009674:	701a      	strb	r2, [r3, #0]
 8009676:	b01c      	add	sp, #112	; 0x70
 8009678:	f85d eb04 	ldr.w	lr, [sp], #4
 800967c:	b003      	add	sp, #12
 800967e:	4770      	bx	lr
 8009680:	200000a8 	.word	0x200000a8
 8009684:	ffff0208 	.word	0xffff0208

08009688 <strtok>:
 8009688:	4b16      	ldr	r3, [pc, #88]	; (80096e4 <strtok+0x5c>)
 800968a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800968c:	681e      	ldr	r6, [r3, #0]
 800968e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009690:	4605      	mov	r5, r0
 8009692:	b9fc      	cbnz	r4, 80096d4 <strtok+0x4c>
 8009694:	2050      	movs	r0, #80	; 0x50
 8009696:	9101      	str	r1, [sp, #4]
 8009698:	f001 fa6e 	bl	800ab78 <malloc>
 800969c:	9901      	ldr	r1, [sp, #4]
 800969e:	65b0      	str	r0, [r6, #88]	; 0x58
 80096a0:	4602      	mov	r2, r0
 80096a2:	b920      	cbnz	r0, 80096ae <strtok+0x26>
 80096a4:	4b10      	ldr	r3, [pc, #64]	; (80096e8 <strtok+0x60>)
 80096a6:	4811      	ldr	r0, [pc, #68]	; (80096ec <strtok+0x64>)
 80096a8:	2157      	movs	r1, #87	; 0x57
 80096aa:	f000 f995 	bl	80099d8 <__assert_func>
 80096ae:	e9c0 4400 	strd	r4, r4, [r0]
 80096b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80096b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80096ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80096be:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80096c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80096c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80096ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80096ce:	6184      	str	r4, [r0, #24]
 80096d0:	7704      	strb	r4, [r0, #28]
 80096d2:	6244      	str	r4, [r0, #36]	; 0x24
 80096d4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80096d6:	2301      	movs	r3, #1
 80096d8:	4628      	mov	r0, r5
 80096da:	b002      	add	sp, #8
 80096dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80096e0:	f000 b806 	b.w	80096f0 <__strtok_r>
 80096e4:	200000a8 	.word	0x200000a8
 80096e8:	0800bfe0 	.word	0x0800bfe0
 80096ec:	0800bff7 	.word	0x0800bff7

080096f0 <__strtok_r>:
 80096f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096f2:	b908      	cbnz	r0, 80096f8 <__strtok_r+0x8>
 80096f4:	6810      	ldr	r0, [r2, #0]
 80096f6:	b188      	cbz	r0, 800971c <__strtok_r+0x2c>
 80096f8:	4604      	mov	r4, r0
 80096fa:	4620      	mov	r0, r4
 80096fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009700:	460f      	mov	r7, r1
 8009702:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009706:	b91e      	cbnz	r6, 8009710 <__strtok_r+0x20>
 8009708:	b965      	cbnz	r5, 8009724 <__strtok_r+0x34>
 800970a:	6015      	str	r5, [r2, #0]
 800970c:	4628      	mov	r0, r5
 800970e:	e005      	b.n	800971c <__strtok_r+0x2c>
 8009710:	42b5      	cmp	r5, r6
 8009712:	d1f6      	bne.n	8009702 <__strtok_r+0x12>
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1f0      	bne.n	80096fa <__strtok_r+0xa>
 8009718:	6014      	str	r4, [r2, #0]
 800971a:	7003      	strb	r3, [r0, #0]
 800971c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800971e:	461c      	mov	r4, r3
 8009720:	e00c      	b.n	800973c <__strtok_r+0x4c>
 8009722:	b915      	cbnz	r5, 800972a <__strtok_r+0x3a>
 8009724:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009728:	460e      	mov	r6, r1
 800972a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800972e:	42ab      	cmp	r3, r5
 8009730:	d1f7      	bne.n	8009722 <__strtok_r+0x32>
 8009732:	2b00      	cmp	r3, #0
 8009734:	d0f3      	beq.n	800971e <__strtok_r+0x2e>
 8009736:	2300      	movs	r3, #0
 8009738:	f804 3c01 	strb.w	r3, [r4, #-1]
 800973c:	6014      	str	r4, [r2, #0]
 800973e:	e7ed      	b.n	800971c <__strtok_r+0x2c>

08009740 <_strtol_l.constprop.0>:
 8009740:	2b01      	cmp	r3, #1
 8009742:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009746:	d001      	beq.n	800974c <_strtol_l.constprop.0+0xc>
 8009748:	2b24      	cmp	r3, #36	; 0x24
 800974a:	d906      	bls.n	800975a <_strtol_l.constprop.0+0x1a>
 800974c:	f7ff fa52 	bl	8008bf4 <__errno>
 8009750:	2316      	movs	r3, #22
 8009752:	6003      	str	r3, [r0, #0]
 8009754:	2000      	movs	r0, #0
 8009756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800975a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009840 <_strtol_l.constprop.0+0x100>
 800975e:	460d      	mov	r5, r1
 8009760:	462e      	mov	r6, r5
 8009762:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009766:	f814 700c 	ldrb.w	r7, [r4, ip]
 800976a:	f017 0708 	ands.w	r7, r7, #8
 800976e:	d1f7      	bne.n	8009760 <_strtol_l.constprop.0+0x20>
 8009770:	2c2d      	cmp	r4, #45	; 0x2d
 8009772:	d132      	bne.n	80097da <_strtol_l.constprop.0+0x9a>
 8009774:	782c      	ldrb	r4, [r5, #0]
 8009776:	2701      	movs	r7, #1
 8009778:	1cb5      	adds	r5, r6, #2
 800977a:	2b00      	cmp	r3, #0
 800977c:	d05b      	beq.n	8009836 <_strtol_l.constprop.0+0xf6>
 800977e:	2b10      	cmp	r3, #16
 8009780:	d109      	bne.n	8009796 <_strtol_l.constprop.0+0x56>
 8009782:	2c30      	cmp	r4, #48	; 0x30
 8009784:	d107      	bne.n	8009796 <_strtol_l.constprop.0+0x56>
 8009786:	782c      	ldrb	r4, [r5, #0]
 8009788:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800978c:	2c58      	cmp	r4, #88	; 0x58
 800978e:	d14d      	bne.n	800982c <_strtol_l.constprop.0+0xec>
 8009790:	786c      	ldrb	r4, [r5, #1]
 8009792:	2310      	movs	r3, #16
 8009794:	3502      	adds	r5, #2
 8009796:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800979a:	f108 38ff 	add.w	r8, r8, #4294967295
 800979e:	f04f 0c00 	mov.w	ip, #0
 80097a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80097a6:	4666      	mov	r6, ip
 80097a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80097ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80097b0:	f1be 0f09 	cmp.w	lr, #9
 80097b4:	d816      	bhi.n	80097e4 <_strtol_l.constprop.0+0xa4>
 80097b6:	4674      	mov	r4, lr
 80097b8:	42a3      	cmp	r3, r4
 80097ba:	dd24      	ble.n	8009806 <_strtol_l.constprop.0+0xc6>
 80097bc:	f1bc 0f00 	cmp.w	ip, #0
 80097c0:	db1e      	blt.n	8009800 <_strtol_l.constprop.0+0xc0>
 80097c2:	45b1      	cmp	r9, r6
 80097c4:	d31c      	bcc.n	8009800 <_strtol_l.constprop.0+0xc0>
 80097c6:	d101      	bne.n	80097cc <_strtol_l.constprop.0+0x8c>
 80097c8:	45a2      	cmp	sl, r4
 80097ca:	db19      	blt.n	8009800 <_strtol_l.constprop.0+0xc0>
 80097cc:	fb06 4603 	mla	r6, r6, r3, r4
 80097d0:	f04f 0c01 	mov.w	ip, #1
 80097d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097d8:	e7e8      	b.n	80097ac <_strtol_l.constprop.0+0x6c>
 80097da:	2c2b      	cmp	r4, #43	; 0x2b
 80097dc:	bf04      	itt	eq
 80097de:	782c      	ldrbeq	r4, [r5, #0]
 80097e0:	1cb5      	addeq	r5, r6, #2
 80097e2:	e7ca      	b.n	800977a <_strtol_l.constprop.0+0x3a>
 80097e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80097e8:	f1be 0f19 	cmp.w	lr, #25
 80097ec:	d801      	bhi.n	80097f2 <_strtol_l.constprop.0+0xb2>
 80097ee:	3c37      	subs	r4, #55	; 0x37
 80097f0:	e7e2      	b.n	80097b8 <_strtol_l.constprop.0+0x78>
 80097f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80097f6:	f1be 0f19 	cmp.w	lr, #25
 80097fa:	d804      	bhi.n	8009806 <_strtol_l.constprop.0+0xc6>
 80097fc:	3c57      	subs	r4, #87	; 0x57
 80097fe:	e7db      	b.n	80097b8 <_strtol_l.constprop.0+0x78>
 8009800:	f04f 3cff 	mov.w	ip, #4294967295
 8009804:	e7e6      	b.n	80097d4 <_strtol_l.constprop.0+0x94>
 8009806:	f1bc 0f00 	cmp.w	ip, #0
 800980a:	da05      	bge.n	8009818 <_strtol_l.constprop.0+0xd8>
 800980c:	2322      	movs	r3, #34	; 0x22
 800980e:	6003      	str	r3, [r0, #0]
 8009810:	4646      	mov	r6, r8
 8009812:	b942      	cbnz	r2, 8009826 <_strtol_l.constprop.0+0xe6>
 8009814:	4630      	mov	r0, r6
 8009816:	e79e      	b.n	8009756 <_strtol_l.constprop.0+0x16>
 8009818:	b107      	cbz	r7, 800981c <_strtol_l.constprop.0+0xdc>
 800981a:	4276      	negs	r6, r6
 800981c:	2a00      	cmp	r2, #0
 800981e:	d0f9      	beq.n	8009814 <_strtol_l.constprop.0+0xd4>
 8009820:	f1bc 0f00 	cmp.w	ip, #0
 8009824:	d000      	beq.n	8009828 <_strtol_l.constprop.0+0xe8>
 8009826:	1e69      	subs	r1, r5, #1
 8009828:	6011      	str	r1, [r2, #0]
 800982a:	e7f3      	b.n	8009814 <_strtol_l.constprop.0+0xd4>
 800982c:	2430      	movs	r4, #48	; 0x30
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1b1      	bne.n	8009796 <_strtol_l.constprop.0+0x56>
 8009832:	2308      	movs	r3, #8
 8009834:	e7af      	b.n	8009796 <_strtol_l.constprop.0+0x56>
 8009836:	2c30      	cmp	r4, #48	; 0x30
 8009838:	d0a5      	beq.n	8009786 <_strtol_l.constprop.0+0x46>
 800983a:	230a      	movs	r3, #10
 800983c:	e7ab      	b.n	8009796 <_strtol_l.constprop.0+0x56>
 800983e:	bf00      	nop
 8009840:	0800c091 	.word	0x0800c091

08009844 <strtol>:
 8009844:	4613      	mov	r3, r2
 8009846:	460a      	mov	r2, r1
 8009848:	4601      	mov	r1, r0
 800984a:	4802      	ldr	r0, [pc, #8]	; (8009854 <strtol+0x10>)
 800984c:	6800      	ldr	r0, [r0, #0]
 800984e:	f7ff bf77 	b.w	8009740 <_strtol_l.constprop.0>
 8009852:	bf00      	nop
 8009854:	200000a8 	.word	0x200000a8

08009858 <__swbuf_r>:
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	460e      	mov	r6, r1
 800985c:	4614      	mov	r4, r2
 800985e:	4605      	mov	r5, r0
 8009860:	b118      	cbz	r0, 800986a <__swbuf_r+0x12>
 8009862:	6983      	ldr	r3, [r0, #24]
 8009864:	b90b      	cbnz	r3, 800986a <__swbuf_r+0x12>
 8009866:	f001 f86b 	bl	800a940 <__sinit>
 800986a:	4b21      	ldr	r3, [pc, #132]	; (80098f0 <__swbuf_r+0x98>)
 800986c:	429c      	cmp	r4, r3
 800986e:	d12b      	bne.n	80098c8 <__swbuf_r+0x70>
 8009870:	686c      	ldr	r4, [r5, #4]
 8009872:	69a3      	ldr	r3, [r4, #24]
 8009874:	60a3      	str	r3, [r4, #8]
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	071a      	lsls	r2, r3, #28
 800987a:	d52f      	bpl.n	80098dc <__swbuf_r+0x84>
 800987c:	6923      	ldr	r3, [r4, #16]
 800987e:	b36b      	cbz	r3, 80098dc <__swbuf_r+0x84>
 8009880:	6923      	ldr	r3, [r4, #16]
 8009882:	6820      	ldr	r0, [r4, #0]
 8009884:	1ac0      	subs	r0, r0, r3
 8009886:	6963      	ldr	r3, [r4, #20]
 8009888:	b2f6      	uxtb	r6, r6
 800988a:	4283      	cmp	r3, r0
 800988c:	4637      	mov	r7, r6
 800988e:	dc04      	bgt.n	800989a <__swbuf_r+0x42>
 8009890:	4621      	mov	r1, r4
 8009892:	4628      	mov	r0, r5
 8009894:	f000 ffc0 	bl	800a818 <_fflush_r>
 8009898:	bb30      	cbnz	r0, 80098e8 <__swbuf_r+0x90>
 800989a:	68a3      	ldr	r3, [r4, #8]
 800989c:	3b01      	subs	r3, #1
 800989e:	60a3      	str	r3, [r4, #8]
 80098a0:	6823      	ldr	r3, [r4, #0]
 80098a2:	1c5a      	adds	r2, r3, #1
 80098a4:	6022      	str	r2, [r4, #0]
 80098a6:	701e      	strb	r6, [r3, #0]
 80098a8:	6963      	ldr	r3, [r4, #20]
 80098aa:	3001      	adds	r0, #1
 80098ac:	4283      	cmp	r3, r0
 80098ae:	d004      	beq.n	80098ba <__swbuf_r+0x62>
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	07db      	lsls	r3, r3, #31
 80098b4:	d506      	bpl.n	80098c4 <__swbuf_r+0x6c>
 80098b6:	2e0a      	cmp	r6, #10
 80098b8:	d104      	bne.n	80098c4 <__swbuf_r+0x6c>
 80098ba:	4621      	mov	r1, r4
 80098bc:	4628      	mov	r0, r5
 80098be:	f000 ffab 	bl	800a818 <_fflush_r>
 80098c2:	b988      	cbnz	r0, 80098e8 <__swbuf_r+0x90>
 80098c4:	4638      	mov	r0, r7
 80098c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098c8:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <__swbuf_r+0x9c>)
 80098ca:	429c      	cmp	r4, r3
 80098cc:	d101      	bne.n	80098d2 <__swbuf_r+0x7a>
 80098ce:	68ac      	ldr	r4, [r5, #8]
 80098d0:	e7cf      	b.n	8009872 <__swbuf_r+0x1a>
 80098d2:	4b09      	ldr	r3, [pc, #36]	; (80098f8 <__swbuf_r+0xa0>)
 80098d4:	429c      	cmp	r4, r3
 80098d6:	bf08      	it	eq
 80098d8:	68ec      	ldreq	r4, [r5, #12]
 80098da:	e7ca      	b.n	8009872 <__swbuf_r+0x1a>
 80098dc:	4621      	mov	r1, r4
 80098de:	4628      	mov	r0, r5
 80098e0:	f000 f80c 	bl	80098fc <__swsetup_r>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d0cb      	beq.n	8009880 <__swbuf_r+0x28>
 80098e8:	f04f 37ff 	mov.w	r7, #4294967295
 80098ec:	e7ea      	b.n	80098c4 <__swbuf_r+0x6c>
 80098ee:	bf00      	nop
 80098f0:	0800c22c 	.word	0x0800c22c
 80098f4:	0800c24c 	.word	0x0800c24c
 80098f8:	0800c20c 	.word	0x0800c20c

080098fc <__swsetup_r>:
 80098fc:	4b32      	ldr	r3, [pc, #200]	; (80099c8 <__swsetup_r+0xcc>)
 80098fe:	b570      	push	{r4, r5, r6, lr}
 8009900:	681d      	ldr	r5, [r3, #0]
 8009902:	4606      	mov	r6, r0
 8009904:	460c      	mov	r4, r1
 8009906:	b125      	cbz	r5, 8009912 <__swsetup_r+0x16>
 8009908:	69ab      	ldr	r3, [r5, #24]
 800990a:	b913      	cbnz	r3, 8009912 <__swsetup_r+0x16>
 800990c:	4628      	mov	r0, r5
 800990e:	f001 f817 	bl	800a940 <__sinit>
 8009912:	4b2e      	ldr	r3, [pc, #184]	; (80099cc <__swsetup_r+0xd0>)
 8009914:	429c      	cmp	r4, r3
 8009916:	d10f      	bne.n	8009938 <__swsetup_r+0x3c>
 8009918:	686c      	ldr	r4, [r5, #4]
 800991a:	89a3      	ldrh	r3, [r4, #12]
 800991c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009920:	0719      	lsls	r1, r3, #28
 8009922:	d42c      	bmi.n	800997e <__swsetup_r+0x82>
 8009924:	06dd      	lsls	r5, r3, #27
 8009926:	d411      	bmi.n	800994c <__swsetup_r+0x50>
 8009928:	2309      	movs	r3, #9
 800992a:	6033      	str	r3, [r6, #0]
 800992c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009930:	81a3      	strh	r3, [r4, #12]
 8009932:	f04f 30ff 	mov.w	r0, #4294967295
 8009936:	e03e      	b.n	80099b6 <__swsetup_r+0xba>
 8009938:	4b25      	ldr	r3, [pc, #148]	; (80099d0 <__swsetup_r+0xd4>)
 800993a:	429c      	cmp	r4, r3
 800993c:	d101      	bne.n	8009942 <__swsetup_r+0x46>
 800993e:	68ac      	ldr	r4, [r5, #8]
 8009940:	e7eb      	b.n	800991a <__swsetup_r+0x1e>
 8009942:	4b24      	ldr	r3, [pc, #144]	; (80099d4 <__swsetup_r+0xd8>)
 8009944:	429c      	cmp	r4, r3
 8009946:	bf08      	it	eq
 8009948:	68ec      	ldreq	r4, [r5, #12]
 800994a:	e7e6      	b.n	800991a <__swsetup_r+0x1e>
 800994c:	0758      	lsls	r0, r3, #29
 800994e:	d512      	bpl.n	8009976 <__swsetup_r+0x7a>
 8009950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009952:	b141      	cbz	r1, 8009966 <__swsetup_r+0x6a>
 8009954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009958:	4299      	cmp	r1, r3
 800995a:	d002      	beq.n	8009962 <__swsetup_r+0x66>
 800995c:	4630      	mov	r0, r6
 800995e:	f001 fcbb 	bl	800b2d8 <_free_r>
 8009962:	2300      	movs	r3, #0
 8009964:	6363      	str	r3, [r4, #52]	; 0x34
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800996c:	81a3      	strh	r3, [r4, #12]
 800996e:	2300      	movs	r3, #0
 8009970:	6063      	str	r3, [r4, #4]
 8009972:	6923      	ldr	r3, [r4, #16]
 8009974:	6023      	str	r3, [r4, #0]
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	f043 0308 	orr.w	r3, r3, #8
 800997c:	81a3      	strh	r3, [r4, #12]
 800997e:	6923      	ldr	r3, [r4, #16]
 8009980:	b94b      	cbnz	r3, 8009996 <__swsetup_r+0x9a>
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800998c:	d003      	beq.n	8009996 <__swsetup_r+0x9a>
 800998e:	4621      	mov	r1, r4
 8009990:	4630      	mov	r0, r6
 8009992:	f001 f8b1 	bl	800aaf8 <__smakebuf_r>
 8009996:	89a0      	ldrh	r0, [r4, #12]
 8009998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800999c:	f010 0301 	ands.w	r3, r0, #1
 80099a0:	d00a      	beq.n	80099b8 <__swsetup_r+0xbc>
 80099a2:	2300      	movs	r3, #0
 80099a4:	60a3      	str	r3, [r4, #8]
 80099a6:	6963      	ldr	r3, [r4, #20]
 80099a8:	425b      	negs	r3, r3
 80099aa:	61a3      	str	r3, [r4, #24]
 80099ac:	6923      	ldr	r3, [r4, #16]
 80099ae:	b943      	cbnz	r3, 80099c2 <__swsetup_r+0xc6>
 80099b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099b4:	d1ba      	bne.n	800992c <__swsetup_r+0x30>
 80099b6:	bd70      	pop	{r4, r5, r6, pc}
 80099b8:	0781      	lsls	r1, r0, #30
 80099ba:	bf58      	it	pl
 80099bc:	6963      	ldrpl	r3, [r4, #20]
 80099be:	60a3      	str	r3, [r4, #8]
 80099c0:	e7f4      	b.n	80099ac <__swsetup_r+0xb0>
 80099c2:	2000      	movs	r0, #0
 80099c4:	e7f7      	b.n	80099b6 <__swsetup_r+0xba>
 80099c6:	bf00      	nop
 80099c8:	200000a8 	.word	0x200000a8
 80099cc:	0800c22c 	.word	0x0800c22c
 80099d0:	0800c24c 	.word	0x0800c24c
 80099d4:	0800c20c 	.word	0x0800c20c

080099d8 <__assert_func>:
 80099d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099da:	4614      	mov	r4, r2
 80099dc:	461a      	mov	r2, r3
 80099de:	4b09      	ldr	r3, [pc, #36]	; (8009a04 <__assert_func+0x2c>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4605      	mov	r5, r0
 80099e4:	68d8      	ldr	r0, [r3, #12]
 80099e6:	b14c      	cbz	r4, 80099fc <__assert_func+0x24>
 80099e8:	4b07      	ldr	r3, [pc, #28]	; (8009a08 <__assert_func+0x30>)
 80099ea:	9100      	str	r1, [sp, #0]
 80099ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099f0:	4906      	ldr	r1, [pc, #24]	; (8009a0c <__assert_func+0x34>)
 80099f2:	462b      	mov	r3, r5
 80099f4:	f001 f822 	bl	800aa3c <fiprintf>
 80099f8:	f002 f86a 	bl	800bad0 <abort>
 80099fc:	4b04      	ldr	r3, [pc, #16]	; (8009a10 <__assert_func+0x38>)
 80099fe:	461c      	mov	r4, r3
 8009a00:	e7f3      	b.n	80099ea <__assert_func+0x12>
 8009a02:	bf00      	nop
 8009a04:	200000a8 	.word	0x200000a8
 8009a08:	0800c054 	.word	0x0800c054
 8009a0c:	0800c061 	.word	0x0800c061
 8009a10:	0800c08f 	.word	0x0800c08f

08009a14 <quorem>:
 8009a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a18:	6903      	ldr	r3, [r0, #16]
 8009a1a:	690c      	ldr	r4, [r1, #16]
 8009a1c:	42a3      	cmp	r3, r4
 8009a1e:	4607      	mov	r7, r0
 8009a20:	f2c0 8081 	blt.w	8009b26 <quorem+0x112>
 8009a24:	3c01      	subs	r4, #1
 8009a26:	f101 0814 	add.w	r8, r1, #20
 8009a2a:	f100 0514 	add.w	r5, r0, #20
 8009a2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a32:	9301      	str	r3, [sp, #4]
 8009a34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009a44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a48:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a4c:	d331      	bcc.n	8009ab2 <quorem+0x9e>
 8009a4e:	f04f 0e00 	mov.w	lr, #0
 8009a52:	4640      	mov	r0, r8
 8009a54:	46ac      	mov	ip, r5
 8009a56:	46f2      	mov	sl, lr
 8009a58:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a5c:	b293      	uxth	r3, r2
 8009a5e:	fb06 e303 	mla	r3, r6, r3, lr
 8009a62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	ebaa 0303 	sub.w	r3, sl, r3
 8009a6c:	f8dc a000 	ldr.w	sl, [ip]
 8009a70:	0c12      	lsrs	r2, r2, #16
 8009a72:	fa13 f38a 	uxtah	r3, r3, sl
 8009a76:	fb06 e202 	mla	r2, r6, r2, lr
 8009a7a:	9300      	str	r3, [sp, #0]
 8009a7c:	9b00      	ldr	r3, [sp, #0]
 8009a7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009a82:	b292      	uxth	r2, r2
 8009a84:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009a88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a8c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009a90:	4581      	cmp	r9, r0
 8009a92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a96:	f84c 3b04 	str.w	r3, [ip], #4
 8009a9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009a9e:	d2db      	bcs.n	8009a58 <quorem+0x44>
 8009aa0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009aa4:	b92b      	cbnz	r3, 8009ab2 <quorem+0x9e>
 8009aa6:	9b01      	ldr	r3, [sp, #4]
 8009aa8:	3b04      	subs	r3, #4
 8009aaa:	429d      	cmp	r5, r3
 8009aac:	461a      	mov	r2, r3
 8009aae:	d32e      	bcc.n	8009b0e <quorem+0xfa>
 8009ab0:	613c      	str	r4, [r7, #16]
 8009ab2:	4638      	mov	r0, r7
 8009ab4:	f001 faf8 	bl	800b0a8 <__mcmp>
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	db24      	blt.n	8009b06 <quorem+0xf2>
 8009abc:	3601      	adds	r6, #1
 8009abe:	4628      	mov	r0, r5
 8009ac0:	f04f 0c00 	mov.w	ip, #0
 8009ac4:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ac8:	f8d0 e000 	ldr.w	lr, [r0]
 8009acc:	b293      	uxth	r3, r2
 8009ace:	ebac 0303 	sub.w	r3, ip, r3
 8009ad2:	0c12      	lsrs	r2, r2, #16
 8009ad4:	fa13 f38e 	uxtah	r3, r3, lr
 8009ad8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009adc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ae6:	45c1      	cmp	r9, r8
 8009ae8:	f840 3b04 	str.w	r3, [r0], #4
 8009aec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009af0:	d2e8      	bcs.n	8009ac4 <quorem+0xb0>
 8009af2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009af6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009afa:	b922      	cbnz	r2, 8009b06 <quorem+0xf2>
 8009afc:	3b04      	subs	r3, #4
 8009afe:	429d      	cmp	r5, r3
 8009b00:	461a      	mov	r2, r3
 8009b02:	d30a      	bcc.n	8009b1a <quorem+0x106>
 8009b04:	613c      	str	r4, [r7, #16]
 8009b06:	4630      	mov	r0, r6
 8009b08:	b003      	add	sp, #12
 8009b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b0e:	6812      	ldr	r2, [r2, #0]
 8009b10:	3b04      	subs	r3, #4
 8009b12:	2a00      	cmp	r2, #0
 8009b14:	d1cc      	bne.n	8009ab0 <quorem+0x9c>
 8009b16:	3c01      	subs	r4, #1
 8009b18:	e7c7      	b.n	8009aaa <quorem+0x96>
 8009b1a:	6812      	ldr	r2, [r2, #0]
 8009b1c:	3b04      	subs	r3, #4
 8009b1e:	2a00      	cmp	r2, #0
 8009b20:	d1f0      	bne.n	8009b04 <quorem+0xf0>
 8009b22:	3c01      	subs	r4, #1
 8009b24:	e7eb      	b.n	8009afe <quorem+0xea>
 8009b26:	2000      	movs	r0, #0
 8009b28:	e7ee      	b.n	8009b08 <quorem+0xf4>
 8009b2a:	0000      	movs	r0, r0
 8009b2c:	0000      	movs	r0, r0
	...

08009b30 <_dtoa_r>:
 8009b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b34:	ed2d 8b04 	vpush	{d8-d9}
 8009b38:	ec57 6b10 	vmov	r6, r7, d0
 8009b3c:	b093      	sub	sp, #76	; 0x4c
 8009b3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b44:	9106      	str	r1, [sp, #24]
 8009b46:	ee10 aa10 	vmov	sl, s0
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8009b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8009b50:	46bb      	mov	fp, r7
 8009b52:	b975      	cbnz	r5, 8009b72 <_dtoa_r+0x42>
 8009b54:	2010      	movs	r0, #16
 8009b56:	f001 f80f 	bl	800ab78 <malloc>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	6260      	str	r0, [r4, #36]	; 0x24
 8009b5e:	b920      	cbnz	r0, 8009b6a <_dtoa_r+0x3a>
 8009b60:	4ba7      	ldr	r3, [pc, #668]	; (8009e00 <_dtoa_r+0x2d0>)
 8009b62:	21ea      	movs	r1, #234	; 0xea
 8009b64:	48a7      	ldr	r0, [pc, #668]	; (8009e04 <_dtoa_r+0x2d4>)
 8009b66:	f7ff ff37 	bl	80099d8 <__assert_func>
 8009b6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b6e:	6005      	str	r5, [r0, #0]
 8009b70:	60c5      	str	r5, [r0, #12]
 8009b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b74:	6819      	ldr	r1, [r3, #0]
 8009b76:	b151      	cbz	r1, 8009b8e <_dtoa_r+0x5e>
 8009b78:	685a      	ldr	r2, [r3, #4]
 8009b7a:	604a      	str	r2, [r1, #4]
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	4093      	lsls	r3, r2
 8009b80:	608b      	str	r3, [r1, #8]
 8009b82:	4620      	mov	r0, r4
 8009b84:	f001 f84e 	bl	800ac24 <_Bfree>
 8009b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	1e3b      	subs	r3, r7, #0
 8009b90:	bfaa      	itet	ge
 8009b92:	2300      	movge	r3, #0
 8009b94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009b98:	f8c8 3000 	strge.w	r3, [r8]
 8009b9c:	4b9a      	ldr	r3, [pc, #616]	; (8009e08 <_dtoa_r+0x2d8>)
 8009b9e:	bfbc      	itt	lt
 8009ba0:	2201      	movlt	r2, #1
 8009ba2:	f8c8 2000 	strlt.w	r2, [r8]
 8009ba6:	ea33 030b 	bics.w	r3, r3, fp
 8009baa:	d11b      	bne.n	8009be4 <_dtoa_r+0xb4>
 8009bac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bae:	f242 730f 	movw	r3, #9999	; 0x270f
 8009bb2:	6013      	str	r3, [r2, #0]
 8009bb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bb8:	4333      	orrs	r3, r6
 8009bba:	f000 8592 	beq.w	800a6e2 <_dtoa_r+0xbb2>
 8009bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bc0:	b963      	cbnz	r3, 8009bdc <_dtoa_r+0xac>
 8009bc2:	4b92      	ldr	r3, [pc, #584]	; (8009e0c <_dtoa_r+0x2dc>)
 8009bc4:	e022      	b.n	8009c0c <_dtoa_r+0xdc>
 8009bc6:	4b92      	ldr	r3, [pc, #584]	; (8009e10 <_dtoa_r+0x2e0>)
 8009bc8:	9301      	str	r3, [sp, #4]
 8009bca:	3308      	adds	r3, #8
 8009bcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009bce:	6013      	str	r3, [r2, #0]
 8009bd0:	9801      	ldr	r0, [sp, #4]
 8009bd2:	b013      	add	sp, #76	; 0x4c
 8009bd4:	ecbd 8b04 	vpop	{d8-d9}
 8009bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bdc:	4b8b      	ldr	r3, [pc, #556]	; (8009e0c <_dtoa_r+0x2dc>)
 8009bde:	9301      	str	r3, [sp, #4]
 8009be0:	3303      	adds	r3, #3
 8009be2:	e7f3      	b.n	8009bcc <_dtoa_r+0x9c>
 8009be4:	2200      	movs	r2, #0
 8009be6:	2300      	movs	r3, #0
 8009be8:	4650      	mov	r0, sl
 8009bea:	4659      	mov	r1, fp
 8009bec:	f7f6 ffa4 	bl	8000b38 <__aeabi_dcmpeq>
 8009bf0:	ec4b ab19 	vmov	d9, sl, fp
 8009bf4:	4680      	mov	r8, r0
 8009bf6:	b158      	cbz	r0, 8009c10 <_dtoa_r+0xe0>
 8009bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	6013      	str	r3, [r2, #0]
 8009bfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 856b 	beq.w	800a6dc <_dtoa_r+0xbac>
 8009c06:	4883      	ldr	r0, [pc, #524]	; (8009e14 <_dtoa_r+0x2e4>)
 8009c08:	6018      	str	r0, [r3, #0]
 8009c0a:	1e43      	subs	r3, r0, #1
 8009c0c:	9301      	str	r3, [sp, #4]
 8009c0e:	e7df      	b.n	8009bd0 <_dtoa_r+0xa0>
 8009c10:	ec4b ab10 	vmov	d0, sl, fp
 8009c14:	aa10      	add	r2, sp, #64	; 0x40
 8009c16:	a911      	add	r1, sp, #68	; 0x44
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f001 faeb 	bl	800b1f4 <__d2b>
 8009c1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009c22:	ee08 0a10 	vmov	s16, r0
 8009c26:	2d00      	cmp	r5, #0
 8009c28:	f000 8084 	beq.w	8009d34 <_dtoa_r+0x204>
 8009c2c:	ee19 3a90 	vmov	r3, s19
 8009c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009c38:	4656      	mov	r6, sl
 8009c3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009c3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009c46:	4b74      	ldr	r3, [pc, #464]	; (8009e18 <_dtoa_r+0x2e8>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	4639      	mov	r1, r7
 8009c4e:	f7f6 fb53 	bl	80002f8 <__aeabi_dsub>
 8009c52:	a365      	add	r3, pc, #404	; (adr r3, 8009de8 <_dtoa_r+0x2b8>)
 8009c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c58:	f7f6 fd06 	bl	8000668 <__aeabi_dmul>
 8009c5c:	a364      	add	r3, pc, #400	; (adr r3, 8009df0 <_dtoa_r+0x2c0>)
 8009c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c62:	f7f6 fb4b 	bl	80002fc <__adddf3>
 8009c66:	4606      	mov	r6, r0
 8009c68:	4628      	mov	r0, r5
 8009c6a:	460f      	mov	r7, r1
 8009c6c:	f7f6 fc92 	bl	8000594 <__aeabi_i2d>
 8009c70:	a361      	add	r3, pc, #388	; (adr r3, 8009df8 <_dtoa_r+0x2c8>)
 8009c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c76:	f7f6 fcf7 	bl	8000668 <__aeabi_dmul>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4630      	mov	r0, r6
 8009c80:	4639      	mov	r1, r7
 8009c82:	f7f6 fb3b 	bl	80002fc <__adddf3>
 8009c86:	4606      	mov	r6, r0
 8009c88:	460f      	mov	r7, r1
 8009c8a:	f7f6 ff9d 	bl	8000bc8 <__aeabi_d2iz>
 8009c8e:	2200      	movs	r2, #0
 8009c90:	9000      	str	r0, [sp, #0]
 8009c92:	2300      	movs	r3, #0
 8009c94:	4630      	mov	r0, r6
 8009c96:	4639      	mov	r1, r7
 8009c98:	f7f6 ff58 	bl	8000b4c <__aeabi_dcmplt>
 8009c9c:	b150      	cbz	r0, 8009cb4 <_dtoa_r+0x184>
 8009c9e:	9800      	ldr	r0, [sp, #0]
 8009ca0:	f7f6 fc78 	bl	8000594 <__aeabi_i2d>
 8009ca4:	4632      	mov	r2, r6
 8009ca6:	463b      	mov	r3, r7
 8009ca8:	f7f6 ff46 	bl	8000b38 <__aeabi_dcmpeq>
 8009cac:	b910      	cbnz	r0, 8009cb4 <_dtoa_r+0x184>
 8009cae:	9b00      	ldr	r3, [sp, #0]
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	9b00      	ldr	r3, [sp, #0]
 8009cb6:	2b16      	cmp	r3, #22
 8009cb8:	d85a      	bhi.n	8009d70 <_dtoa_r+0x240>
 8009cba:	9a00      	ldr	r2, [sp, #0]
 8009cbc:	4b57      	ldr	r3, [pc, #348]	; (8009e1c <_dtoa_r+0x2ec>)
 8009cbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc6:	ec51 0b19 	vmov	r0, r1, d9
 8009cca:	f7f6 ff3f 	bl	8000b4c <__aeabi_dcmplt>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d050      	beq.n	8009d74 <_dtoa_r+0x244>
 8009cd2:	9b00      	ldr	r3, [sp, #0]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	2300      	movs	r3, #0
 8009cda:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cde:	1b5d      	subs	r5, r3, r5
 8009ce0:	1e6b      	subs	r3, r5, #1
 8009ce2:	9305      	str	r3, [sp, #20]
 8009ce4:	bf45      	ittet	mi
 8009ce6:	f1c5 0301 	rsbmi	r3, r5, #1
 8009cea:	9304      	strmi	r3, [sp, #16]
 8009cec:	2300      	movpl	r3, #0
 8009cee:	2300      	movmi	r3, #0
 8009cf0:	bf4c      	ite	mi
 8009cf2:	9305      	strmi	r3, [sp, #20]
 8009cf4:	9304      	strpl	r3, [sp, #16]
 8009cf6:	9b00      	ldr	r3, [sp, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	db3d      	blt.n	8009d78 <_dtoa_r+0x248>
 8009cfc:	9b05      	ldr	r3, [sp, #20]
 8009cfe:	9a00      	ldr	r2, [sp, #0]
 8009d00:	920a      	str	r2, [sp, #40]	; 0x28
 8009d02:	4413      	add	r3, r2
 8009d04:	9305      	str	r3, [sp, #20]
 8009d06:	2300      	movs	r3, #0
 8009d08:	9307      	str	r3, [sp, #28]
 8009d0a:	9b06      	ldr	r3, [sp, #24]
 8009d0c:	2b09      	cmp	r3, #9
 8009d0e:	f200 8089 	bhi.w	8009e24 <_dtoa_r+0x2f4>
 8009d12:	2b05      	cmp	r3, #5
 8009d14:	bfc4      	itt	gt
 8009d16:	3b04      	subgt	r3, #4
 8009d18:	9306      	strgt	r3, [sp, #24]
 8009d1a:	9b06      	ldr	r3, [sp, #24]
 8009d1c:	f1a3 0302 	sub.w	r3, r3, #2
 8009d20:	bfcc      	ite	gt
 8009d22:	2500      	movgt	r5, #0
 8009d24:	2501      	movle	r5, #1
 8009d26:	2b03      	cmp	r3, #3
 8009d28:	f200 8087 	bhi.w	8009e3a <_dtoa_r+0x30a>
 8009d2c:	e8df f003 	tbb	[pc, r3]
 8009d30:	59383a2d 	.word	0x59383a2d
 8009d34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009d38:	441d      	add	r5, r3
 8009d3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009d3e:	2b20      	cmp	r3, #32
 8009d40:	bfc1      	itttt	gt
 8009d42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009d46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009d4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009d4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009d52:	bfda      	itte	le
 8009d54:	f1c3 0320 	rsble	r3, r3, #32
 8009d58:	fa06 f003 	lslle.w	r0, r6, r3
 8009d5c:	4318      	orrgt	r0, r3
 8009d5e:	f7f6 fc09 	bl	8000574 <__aeabi_ui2d>
 8009d62:	2301      	movs	r3, #1
 8009d64:	4606      	mov	r6, r0
 8009d66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009d6a:	3d01      	subs	r5, #1
 8009d6c:	930e      	str	r3, [sp, #56]	; 0x38
 8009d6e:	e76a      	b.n	8009c46 <_dtoa_r+0x116>
 8009d70:	2301      	movs	r3, #1
 8009d72:	e7b2      	b.n	8009cda <_dtoa_r+0x1aa>
 8009d74:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d76:	e7b1      	b.n	8009cdc <_dtoa_r+0x1ac>
 8009d78:	9b04      	ldr	r3, [sp, #16]
 8009d7a:	9a00      	ldr	r2, [sp, #0]
 8009d7c:	1a9b      	subs	r3, r3, r2
 8009d7e:	9304      	str	r3, [sp, #16]
 8009d80:	4253      	negs	r3, r2
 8009d82:	9307      	str	r3, [sp, #28]
 8009d84:	2300      	movs	r3, #0
 8009d86:	930a      	str	r3, [sp, #40]	; 0x28
 8009d88:	e7bf      	b.n	8009d0a <_dtoa_r+0x1da>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	9308      	str	r3, [sp, #32]
 8009d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	dc55      	bgt.n	8009e40 <_dtoa_r+0x310>
 8009d94:	2301      	movs	r3, #1
 8009d96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d9e:	e00c      	b.n	8009dba <_dtoa_r+0x28a>
 8009da0:	2301      	movs	r3, #1
 8009da2:	e7f3      	b.n	8009d8c <_dtoa_r+0x25c>
 8009da4:	2300      	movs	r3, #0
 8009da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009da8:	9308      	str	r3, [sp, #32]
 8009daa:	9b00      	ldr	r3, [sp, #0]
 8009dac:	4413      	add	r3, r2
 8009dae:	9302      	str	r3, [sp, #8]
 8009db0:	3301      	adds	r3, #1
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	9303      	str	r3, [sp, #12]
 8009db6:	bfb8      	it	lt
 8009db8:	2301      	movlt	r3, #1
 8009dba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	6042      	str	r2, [r0, #4]
 8009dc0:	2204      	movs	r2, #4
 8009dc2:	f102 0614 	add.w	r6, r2, #20
 8009dc6:	429e      	cmp	r6, r3
 8009dc8:	6841      	ldr	r1, [r0, #4]
 8009dca:	d93d      	bls.n	8009e48 <_dtoa_r+0x318>
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f000 fee9 	bl	800aba4 <_Balloc>
 8009dd2:	9001      	str	r0, [sp, #4]
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d13b      	bne.n	8009e50 <_dtoa_r+0x320>
 8009dd8:	4b11      	ldr	r3, [pc, #68]	; (8009e20 <_dtoa_r+0x2f0>)
 8009dda:	4602      	mov	r2, r0
 8009ddc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009de0:	e6c0      	b.n	8009b64 <_dtoa_r+0x34>
 8009de2:	2301      	movs	r3, #1
 8009de4:	e7df      	b.n	8009da6 <_dtoa_r+0x276>
 8009de6:	bf00      	nop
 8009de8:	636f4361 	.word	0x636f4361
 8009dec:	3fd287a7 	.word	0x3fd287a7
 8009df0:	8b60c8b3 	.word	0x8b60c8b3
 8009df4:	3fc68a28 	.word	0x3fc68a28
 8009df8:	509f79fb 	.word	0x509f79fb
 8009dfc:	3fd34413 	.word	0x3fd34413
 8009e00:	0800bfe0 	.word	0x0800bfe0
 8009e04:	0800c19e 	.word	0x0800c19e
 8009e08:	7ff00000 	.word	0x7ff00000
 8009e0c:	0800c19a 	.word	0x0800c19a
 8009e10:	0800c191 	.word	0x0800c191
 8009e14:	0800bfbd 	.word	0x0800bfbd
 8009e18:	3ff80000 	.word	0x3ff80000
 8009e1c:	0800c2f0 	.word	0x0800c2f0
 8009e20:	0800c1f9 	.word	0x0800c1f9
 8009e24:	2501      	movs	r5, #1
 8009e26:	2300      	movs	r3, #0
 8009e28:	9306      	str	r3, [sp, #24]
 8009e2a:	9508      	str	r5, [sp, #32]
 8009e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009e34:	2200      	movs	r2, #0
 8009e36:	2312      	movs	r3, #18
 8009e38:	e7b0      	b.n	8009d9c <_dtoa_r+0x26c>
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	9308      	str	r3, [sp, #32]
 8009e3e:	e7f5      	b.n	8009e2c <_dtoa_r+0x2fc>
 8009e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009e46:	e7b8      	b.n	8009dba <_dtoa_r+0x28a>
 8009e48:	3101      	adds	r1, #1
 8009e4a:	6041      	str	r1, [r0, #4]
 8009e4c:	0052      	lsls	r2, r2, #1
 8009e4e:	e7b8      	b.n	8009dc2 <_dtoa_r+0x292>
 8009e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e52:	9a01      	ldr	r2, [sp, #4]
 8009e54:	601a      	str	r2, [r3, #0]
 8009e56:	9b03      	ldr	r3, [sp, #12]
 8009e58:	2b0e      	cmp	r3, #14
 8009e5a:	f200 809d 	bhi.w	8009f98 <_dtoa_r+0x468>
 8009e5e:	2d00      	cmp	r5, #0
 8009e60:	f000 809a 	beq.w	8009f98 <_dtoa_r+0x468>
 8009e64:	9b00      	ldr	r3, [sp, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	dd32      	ble.n	8009ed0 <_dtoa_r+0x3a0>
 8009e6a:	4ab7      	ldr	r2, [pc, #732]	; (800a148 <_dtoa_r+0x618>)
 8009e6c:	f003 030f 	and.w	r3, r3, #15
 8009e70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009e74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e78:	9b00      	ldr	r3, [sp, #0]
 8009e7a:	05d8      	lsls	r0, r3, #23
 8009e7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009e80:	d516      	bpl.n	8009eb0 <_dtoa_r+0x380>
 8009e82:	4bb2      	ldr	r3, [pc, #712]	; (800a14c <_dtoa_r+0x61c>)
 8009e84:	ec51 0b19 	vmov	r0, r1, d9
 8009e88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e8c:	f7f6 fd16 	bl	80008bc <__aeabi_ddiv>
 8009e90:	f007 070f 	and.w	r7, r7, #15
 8009e94:	4682      	mov	sl, r0
 8009e96:	468b      	mov	fp, r1
 8009e98:	2503      	movs	r5, #3
 8009e9a:	4eac      	ldr	r6, [pc, #688]	; (800a14c <_dtoa_r+0x61c>)
 8009e9c:	b957      	cbnz	r7, 8009eb4 <_dtoa_r+0x384>
 8009e9e:	4642      	mov	r2, r8
 8009ea0:	464b      	mov	r3, r9
 8009ea2:	4650      	mov	r0, sl
 8009ea4:	4659      	mov	r1, fp
 8009ea6:	f7f6 fd09 	bl	80008bc <__aeabi_ddiv>
 8009eaa:	4682      	mov	sl, r0
 8009eac:	468b      	mov	fp, r1
 8009eae:	e028      	b.n	8009f02 <_dtoa_r+0x3d2>
 8009eb0:	2502      	movs	r5, #2
 8009eb2:	e7f2      	b.n	8009e9a <_dtoa_r+0x36a>
 8009eb4:	07f9      	lsls	r1, r7, #31
 8009eb6:	d508      	bpl.n	8009eca <_dtoa_r+0x39a>
 8009eb8:	4640      	mov	r0, r8
 8009eba:	4649      	mov	r1, r9
 8009ebc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ec0:	f7f6 fbd2 	bl	8000668 <__aeabi_dmul>
 8009ec4:	3501      	adds	r5, #1
 8009ec6:	4680      	mov	r8, r0
 8009ec8:	4689      	mov	r9, r1
 8009eca:	107f      	asrs	r7, r7, #1
 8009ecc:	3608      	adds	r6, #8
 8009ece:	e7e5      	b.n	8009e9c <_dtoa_r+0x36c>
 8009ed0:	f000 809b 	beq.w	800a00a <_dtoa_r+0x4da>
 8009ed4:	9b00      	ldr	r3, [sp, #0]
 8009ed6:	4f9d      	ldr	r7, [pc, #628]	; (800a14c <_dtoa_r+0x61c>)
 8009ed8:	425e      	negs	r6, r3
 8009eda:	4b9b      	ldr	r3, [pc, #620]	; (800a148 <_dtoa_r+0x618>)
 8009edc:	f006 020f 	and.w	r2, r6, #15
 8009ee0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	ec51 0b19 	vmov	r0, r1, d9
 8009eec:	f7f6 fbbc 	bl	8000668 <__aeabi_dmul>
 8009ef0:	1136      	asrs	r6, r6, #4
 8009ef2:	4682      	mov	sl, r0
 8009ef4:	468b      	mov	fp, r1
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	2502      	movs	r5, #2
 8009efa:	2e00      	cmp	r6, #0
 8009efc:	d17a      	bne.n	8009ff4 <_dtoa_r+0x4c4>
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1d3      	bne.n	8009eaa <_dtoa_r+0x37a>
 8009f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 8082 	beq.w	800a00e <_dtoa_r+0x4de>
 8009f0a:	4b91      	ldr	r3, [pc, #580]	; (800a150 <_dtoa_r+0x620>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	4650      	mov	r0, sl
 8009f10:	4659      	mov	r1, fp
 8009f12:	f7f6 fe1b 	bl	8000b4c <__aeabi_dcmplt>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d079      	beq.n	800a00e <_dtoa_r+0x4de>
 8009f1a:	9b03      	ldr	r3, [sp, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d076      	beq.n	800a00e <_dtoa_r+0x4de>
 8009f20:	9b02      	ldr	r3, [sp, #8]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	dd36      	ble.n	8009f94 <_dtoa_r+0x464>
 8009f26:	9b00      	ldr	r3, [sp, #0]
 8009f28:	4650      	mov	r0, sl
 8009f2a:	4659      	mov	r1, fp
 8009f2c:	1e5f      	subs	r7, r3, #1
 8009f2e:	2200      	movs	r2, #0
 8009f30:	4b88      	ldr	r3, [pc, #544]	; (800a154 <_dtoa_r+0x624>)
 8009f32:	f7f6 fb99 	bl	8000668 <__aeabi_dmul>
 8009f36:	9e02      	ldr	r6, [sp, #8]
 8009f38:	4682      	mov	sl, r0
 8009f3a:	468b      	mov	fp, r1
 8009f3c:	3501      	adds	r5, #1
 8009f3e:	4628      	mov	r0, r5
 8009f40:	f7f6 fb28 	bl	8000594 <__aeabi_i2d>
 8009f44:	4652      	mov	r2, sl
 8009f46:	465b      	mov	r3, fp
 8009f48:	f7f6 fb8e 	bl	8000668 <__aeabi_dmul>
 8009f4c:	4b82      	ldr	r3, [pc, #520]	; (800a158 <_dtoa_r+0x628>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f7f6 f9d4 	bl	80002fc <__adddf3>
 8009f54:	46d0      	mov	r8, sl
 8009f56:	46d9      	mov	r9, fp
 8009f58:	4682      	mov	sl, r0
 8009f5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009f5e:	2e00      	cmp	r6, #0
 8009f60:	d158      	bne.n	800a014 <_dtoa_r+0x4e4>
 8009f62:	4b7e      	ldr	r3, [pc, #504]	; (800a15c <_dtoa_r+0x62c>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	4640      	mov	r0, r8
 8009f68:	4649      	mov	r1, r9
 8009f6a:	f7f6 f9c5 	bl	80002f8 <__aeabi_dsub>
 8009f6e:	4652      	mov	r2, sl
 8009f70:	465b      	mov	r3, fp
 8009f72:	4680      	mov	r8, r0
 8009f74:	4689      	mov	r9, r1
 8009f76:	f7f6 fe07 	bl	8000b88 <__aeabi_dcmpgt>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	f040 8295 	bne.w	800a4aa <_dtoa_r+0x97a>
 8009f80:	4652      	mov	r2, sl
 8009f82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009f86:	4640      	mov	r0, r8
 8009f88:	4649      	mov	r1, r9
 8009f8a:	f7f6 fddf 	bl	8000b4c <__aeabi_dcmplt>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	f040 8289 	bne.w	800a4a6 <_dtoa_r+0x976>
 8009f94:	ec5b ab19 	vmov	sl, fp, d9
 8009f98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f2c0 8148 	blt.w	800a230 <_dtoa_r+0x700>
 8009fa0:	9a00      	ldr	r2, [sp, #0]
 8009fa2:	2a0e      	cmp	r2, #14
 8009fa4:	f300 8144 	bgt.w	800a230 <_dtoa_r+0x700>
 8009fa8:	4b67      	ldr	r3, [pc, #412]	; (800a148 <_dtoa_r+0x618>)
 8009faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f280 80d5 	bge.w	800a164 <_dtoa_r+0x634>
 8009fba:	9b03      	ldr	r3, [sp, #12]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f300 80d1 	bgt.w	800a164 <_dtoa_r+0x634>
 8009fc2:	f040 826f 	bne.w	800a4a4 <_dtoa_r+0x974>
 8009fc6:	4b65      	ldr	r3, [pc, #404]	; (800a15c <_dtoa_r+0x62c>)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	4640      	mov	r0, r8
 8009fcc:	4649      	mov	r1, r9
 8009fce:	f7f6 fb4b 	bl	8000668 <__aeabi_dmul>
 8009fd2:	4652      	mov	r2, sl
 8009fd4:	465b      	mov	r3, fp
 8009fd6:	f7f6 fdcd 	bl	8000b74 <__aeabi_dcmpge>
 8009fda:	9e03      	ldr	r6, [sp, #12]
 8009fdc:	4637      	mov	r7, r6
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	f040 8245 	bne.w	800a46e <_dtoa_r+0x93e>
 8009fe4:	9d01      	ldr	r5, [sp, #4]
 8009fe6:	2331      	movs	r3, #49	; 0x31
 8009fe8:	f805 3b01 	strb.w	r3, [r5], #1
 8009fec:	9b00      	ldr	r3, [sp, #0]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	e240      	b.n	800a476 <_dtoa_r+0x946>
 8009ff4:	07f2      	lsls	r2, r6, #31
 8009ff6:	d505      	bpl.n	800a004 <_dtoa_r+0x4d4>
 8009ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ffc:	f7f6 fb34 	bl	8000668 <__aeabi_dmul>
 800a000:	3501      	adds	r5, #1
 800a002:	2301      	movs	r3, #1
 800a004:	1076      	asrs	r6, r6, #1
 800a006:	3708      	adds	r7, #8
 800a008:	e777      	b.n	8009efa <_dtoa_r+0x3ca>
 800a00a:	2502      	movs	r5, #2
 800a00c:	e779      	b.n	8009f02 <_dtoa_r+0x3d2>
 800a00e:	9f00      	ldr	r7, [sp, #0]
 800a010:	9e03      	ldr	r6, [sp, #12]
 800a012:	e794      	b.n	8009f3e <_dtoa_r+0x40e>
 800a014:	9901      	ldr	r1, [sp, #4]
 800a016:	4b4c      	ldr	r3, [pc, #304]	; (800a148 <_dtoa_r+0x618>)
 800a018:	4431      	add	r1, r6
 800a01a:	910d      	str	r1, [sp, #52]	; 0x34
 800a01c:	9908      	ldr	r1, [sp, #32]
 800a01e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a022:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a026:	2900      	cmp	r1, #0
 800a028:	d043      	beq.n	800a0b2 <_dtoa_r+0x582>
 800a02a:	494d      	ldr	r1, [pc, #308]	; (800a160 <_dtoa_r+0x630>)
 800a02c:	2000      	movs	r0, #0
 800a02e:	f7f6 fc45 	bl	80008bc <__aeabi_ddiv>
 800a032:	4652      	mov	r2, sl
 800a034:	465b      	mov	r3, fp
 800a036:	f7f6 f95f 	bl	80002f8 <__aeabi_dsub>
 800a03a:	9d01      	ldr	r5, [sp, #4]
 800a03c:	4682      	mov	sl, r0
 800a03e:	468b      	mov	fp, r1
 800a040:	4649      	mov	r1, r9
 800a042:	4640      	mov	r0, r8
 800a044:	f7f6 fdc0 	bl	8000bc8 <__aeabi_d2iz>
 800a048:	4606      	mov	r6, r0
 800a04a:	f7f6 faa3 	bl	8000594 <__aeabi_i2d>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	4640      	mov	r0, r8
 800a054:	4649      	mov	r1, r9
 800a056:	f7f6 f94f 	bl	80002f8 <__aeabi_dsub>
 800a05a:	3630      	adds	r6, #48	; 0x30
 800a05c:	f805 6b01 	strb.w	r6, [r5], #1
 800a060:	4652      	mov	r2, sl
 800a062:	465b      	mov	r3, fp
 800a064:	4680      	mov	r8, r0
 800a066:	4689      	mov	r9, r1
 800a068:	f7f6 fd70 	bl	8000b4c <__aeabi_dcmplt>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	d163      	bne.n	800a138 <_dtoa_r+0x608>
 800a070:	4642      	mov	r2, r8
 800a072:	464b      	mov	r3, r9
 800a074:	4936      	ldr	r1, [pc, #216]	; (800a150 <_dtoa_r+0x620>)
 800a076:	2000      	movs	r0, #0
 800a078:	f7f6 f93e 	bl	80002f8 <__aeabi_dsub>
 800a07c:	4652      	mov	r2, sl
 800a07e:	465b      	mov	r3, fp
 800a080:	f7f6 fd64 	bl	8000b4c <__aeabi_dcmplt>
 800a084:	2800      	cmp	r0, #0
 800a086:	f040 80b5 	bne.w	800a1f4 <_dtoa_r+0x6c4>
 800a08a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a08c:	429d      	cmp	r5, r3
 800a08e:	d081      	beq.n	8009f94 <_dtoa_r+0x464>
 800a090:	4b30      	ldr	r3, [pc, #192]	; (800a154 <_dtoa_r+0x624>)
 800a092:	2200      	movs	r2, #0
 800a094:	4650      	mov	r0, sl
 800a096:	4659      	mov	r1, fp
 800a098:	f7f6 fae6 	bl	8000668 <__aeabi_dmul>
 800a09c:	4b2d      	ldr	r3, [pc, #180]	; (800a154 <_dtoa_r+0x624>)
 800a09e:	4682      	mov	sl, r0
 800a0a0:	468b      	mov	fp, r1
 800a0a2:	4640      	mov	r0, r8
 800a0a4:	4649      	mov	r1, r9
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f7f6 fade 	bl	8000668 <__aeabi_dmul>
 800a0ac:	4680      	mov	r8, r0
 800a0ae:	4689      	mov	r9, r1
 800a0b0:	e7c6      	b.n	800a040 <_dtoa_r+0x510>
 800a0b2:	4650      	mov	r0, sl
 800a0b4:	4659      	mov	r1, fp
 800a0b6:	f7f6 fad7 	bl	8000668 <__aeabi_dmul>
 800a0ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0bc:	9d01      	ldr	r5, [sp, #4]
 800a0be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0c0:	4682      	mov	sl, r0
 800a0c2:	468b      	mov	fp, r1
 800a0c4:	4649      	mov	r1, r9
 800a0c6:	4640      	mov	r0, r8
 800a0c8:	f7f6 fd7e 	bl	8000bc8 <__aeabi_d2iz>
 800a0cc:	4606      	mov	r6, r0
 800a0ce:	f7f6 fa61 	bl	8000594 <__aeabi_i2d>
 800a0d2:	3630      	adds	r6, #48	; 0x30
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4640      	mov	r0, r8
 800a0da:	4649      	mov	r1, r9
 800a0dc:	f7f6 f90c 	bl	80002f8 <__aeabi_dsub>
 800a0e0:	f805 6b01 	strb.w	r6, [r5], #1
 800a0e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0e6:	429d      	cmp	r5, r3
 800a0e8:	4680      	mov	r8, r0
 800a0ea:	4689      	mov	r9, r1
 800a0ec:	f04f 0200 	mov.w	r2, #0
 800a0f0:	d124      	bne.n	800a13c <_dtoa_r+0x60c>
 800a0f2:	4b1b      	ldr	r3, [pc, #108]	; (800a160 <_dtoa_r+0x630>)
 800a0f4:	4650      	mov	r0, sl
 800a0f6:	4659      	mov	r1, fp
 800a0f8:	f7f6 f900 	bl	80002fc <__adddf3>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	460b      	mov	r3, r1
 800a100:	4640      	mov	r0, r8
 800a102:	4649      	mov	r1, r9
 800a104:	f7f6 fd40 	bl	8000b88 <__aeabi_dcmpgt>
 800a108:	2800      	cmp	r0, #0
 800a10a:	d173      	bne.n	800a1f4 <_dtoa_r+0x6c4>
 800a10c:	4652      	mov	r2, sl
 800a10e:	465b      	mov	r3, fp
 800a110:	4913      	ldr	r1, [pc, #76]	; (800a160 <_dtoa_r+0x630>)
 800a112:	2000      	movs	r0, #0
 800a114:	f7f6 f8f0 	bl	80002f8 <__aeabi_dsub>
 800a118:	4602      	mov	r2, r0
 800a11a:	460b      	mov	r3, r1
 800a11c:	4640      	mov	r0, r8
 800a11e:	4649      	mov	r1, r9
 800a120:	f7f6 fd14 	bl	8000b4c <__aeabi_dcmplt>
 800a124:	2800      	cmp	r0, #0
 800a126:	f43f af35 	beq.w	8009f94 <_dtoa_r+0x464>
 800a12a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a12c:	1e6b      	subs	r3, r5, #1
 800a12e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a130:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a134:	2b30      	cmp	r3, #48	; 0x30
 800a136:	d0f8      	beq.n	800a12a <_dtoa_r+0x5fa>
 800a138:	9700      	str	r7, [sp, #0]
 800a13a:	e049      	b.n	800a1d0 <_dtoa_r+0x6a0>
 800a13c:	4b05      	ldr	r3, [pc, #20]	; (800a154 <_dtoa_r+0x624>)
 800a13e:	f7f6 fa93 	bl	8000668 <__aeabi_dmul>
 800a142:	4680      	mov	r8, r0
 800a144:	4689      	mov	r9, r1
 800a146:	e7bd      	b.n	800a0c4 <_dtoa_r+0x594>
 800a148:	0800c2f0 	.word	0x0800c2f0
 800a14c:	0800c2c8 	.word	0x0800c2c8
 800a150:	3ff00000 	.word	0x3ff00000
 800a154:	40240000 	.word	0x40240000
 800a158:	401c0000 	.word	0x401c0000
 800a15c:	40140000 	.word	0x40140000
 800a160:	3fe00000 	.word	0x3fe00000
 800a164:	9d01      	ldr	r5, [sp, #4]
 800a166:	4656      	mov	r6, sl
 800a168:	465f      	mov	r7, fp
 800a16a:	4642      	mov	r2, r8
 800a16c:	464b      	mov	r3, r9
 800a16e:	4630      	mov	r0, r6
 800a170:	4639      	mov	r1, r7
 800a172:	f7f6 fba3 	bl	80008bc <__aeabi_ddiv>
 800a176:	f7f6 fd27 	bl	8000bc8 <__aeabi_d2iz>
 800a17a:	4682      	mov	sl, r0
 800a17c:	f7f6 fa0a 	bl	8000594 <__aeabi_i2d>
 800a180:	4642      	mov	r2, r8
 800a182:	464b      	mov	r3, r9
 800a184:	f7f6 fa70 	bl	8000668 <__aeabi_dmul>
 800a188:	4602      	mov	r2, r0
 800a18a:	460b      	mov	r3, r1
 800a18c:	4630      	mov	r0, r6
 800a18e:	4639      	mov	r1, r7
 800a190:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a194:	f7f6 f8b0 	bl	80002f8 <__aeabi_dsub>
 800a198:	f805 6b01 	strb.w	r6, [r5], #1
 800a19c:	9e01      	ldr	r6, [sp, #4]
 800a19e:	9f03      	ldr	r7, [sp, #12]
 800a1a0:	1bae      	subs	r6, r5, r6
 800a1a2:	42b7      	cmp	r7, r6
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	d135      	bne.n	800a216 <_dtoa_r+0x6e6>
 800a1aa:	f7f6 f8a7 	bl	80002fc <__adddf3>
 800a1ae:	4642      	mov	r2, r8
 800a1b0:	464b      	mov	r3, r9
 800a1b2:	4606      	mov	r6, r0
 800a1b4:	460f      	mov	r7, r1
 800a1b6:	f7f6 fce7 	bl	8000b88 <__aeabi_dcmpgt>
 800a1ba:	b9d0      	cbnz	r0, 800a1f2 <_dtoa_r+0x6c2>
 800a1bc:	4642      	mov	r2, r8
 800a1be:	464b      	mov	r3, r9
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	f7f6 fcb8 	bl	8000b38 <__aeabi_dcmpeq>
 800a1c8:	b110      	cbz	r0, 800a1d0 <_dtoa_r+0x6a0>
 800a1ca:	f01a 0f01 	tst.w	sl, #1
 800a1ce:	d110      	bne.n	800a1f2 <_dtoa_r+0x6c2>
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	ee18 1a10 	vmov	r1, s16
 800a1d6:	f000 fd25 	bl	800ac24 <_Bfree>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	9800      	ldr	r0, [sp, #0]
 800a1de:	702b      	strb	r3, [r5, #0]
 800a1e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	6018      	str	r0, [r3, #0]
 800a1e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f43f acf1 	beq.w	8009bd0 <_dtoa_r+0xa0>
 800a1ee:	601d      	str	r5, [r3, #0]
 800a1f0:	e4ee      	b.n	8009bd0 <_dtoa_r+0xa0>
 800a1f2:	9f00      	ldr	r7, [sp, #0]
 800a1f4:	462b      	mov	r3, r5
 800a1f6:	461d      	mov	r5, r3
 800a1f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1fc:	2a39      	cmp	r2, #57	; 0x39
 800a1fe:	d106      	bne.n	800a20e <_dtoa_r+0x6de>
 800a200:	9a01      	ldr	r2, [sp, #4]
 800a202:	429a      	cmp	r2, r3
 800a204:	d1f7      	bne.n	800a1f6 <_dtoa_r+0x6c6>
 800a206:	9901      	ldr	r1, [sp, #4]
 800a208:	2230      	movs	r2, #48	; 0x30
 800a20a:	3701      	adds	r7, #1
 800a20c:	700a      	strb	r2, [r1, #0]
 800a20e:	781a      	ldrb	r2, [r3, #0]
 800a210:	3201      	adds	r2, #1
 800a212:	701a      	strb	r2, [r3, #0]
 800a214:	e790      	b.n	800a138 <_dtoa_r+0x608>
 800a216:	4ba6      	ldr	r3, [pc, #664]	; (800a4b0 <_dtoa_r+0x980>)
 800a218:	2200      	movs	r2, #0
 800a21a:	f7f6 fa25 	bl	8000668 <__aeabi_dmul>
 800a21e:	2200      	movs	r2, #0
 800a220:	2300      	movs	r3, #0
 800a222:	4606      	mov	r6, r0
 800a224:	460f      	mov	r7, r1
 800a226:	f7f6 fc87 	bl	8000b38 <__aeabi_dcmpeq>
 800a22a:	2800      	cmp	r0, #0
 800a22c:	d09d      	beq.n	800a16a <_dtoa_r+0x63a>
 800a22e:	e7cf      	b.n	800a1d0 <_dtoa_r+0x6a0>
 800a230:	9a08      	ldr	r2, [sp, #32]
 800a232:	2a00      	cmp	r2, #0
 800a234:	f000 80d7 	beq.w	800a3e6 <_dtoa_r+0x8b6>
 800a238:	9a06      	ldr	r2, [sp, #24]
 800a23a:	2a01      	cmp	r2, #1
 800a23c:	f300 80ba 	bgt.w	800a3b4 <_dtoa_r+0x884>
 800a240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a242:	2a00      	cmp	r2, #0
 800a244:	f000 80b2 	beq.w	800a3ac <_dtoa_r+0x87c>
 800a248:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a24c:	9e07      	ldr	r6, [sp, #28]
 800a24e:	9d04      	ldr	r5, [sp, #16]
 800a250:	9a04      	ldr	r2, [sp, #16]
 800a252:	441a      	add	r2, r3
 800a254:	9204      	str	r2, [sp, #16]
 800a256:	9a05      	ldr	r2, [sp, #20]
 800a258:	2101      	movs	r1, #1
 800a25a:	441a      	add	r2, r3
 800a25c:	4620      	mov	r0, r4
 800a25e:	9205      	str	r2, [sp, #20]
 800a260:	f000 fd98 	bl	800ad94 <__i2b>
 800a264:	4607      	mov	r7, r0
 800a266:	2d00      	cmp	r5, #0
 800a268:	dd0c      	ble.n	800a284 <_dtoa_r+0x754>
 800a26a:	9b05      	ldr	r3, [sp, #20]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	dd09      	ble.n	800a284 <_dtoa_r+0x754>
 800a270:	42ab      	cmp	r3, r5
 800a272:	9a04      	ldr	r2, [sp, #16]
 800a274:	bfa8      	it	ge
 800a276:	462b      	movge	r3, r5
 800a278:	1ad2      	subs	r2, r2, r3
 800a27a:	9204      	str	r2, [sp, #16]
 800a27c:	9a05      	ldr	r2, [sp, #20]
 800a27e:	1aed      	subs	r5, r5, r3
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	9305      	str	r3, [sp, #20]
 800a284:	9b07      	ldr	r3, [sp, #28]
 800a286:	b31b      	cbz	r3, 800a2d0 <_dtoa_r+0x7a0>
 800a288:	9b08      	ldr	r3, [sp, #32]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f000 80af 	beq.w	800a3ee <_dtoa_r+0x8be>
 800a290:	2e00      	cmp	r6, #0
 800a292:	dd13      	ble.n	800a2bc <_dtoa_r+0x78c>
 800a294:	4639      	mov	r1, r7
 800a296:	4632      	mov	r2, r6
 800a298:	4620      	mov	r0, r4
 800a29a:	f000 fe3b 	bl	800af14 <__pow5mult>
 800a29e:	ee18 2a10 	vmov	r2, s16
 800a2a2:	4601      	mov	r1, r0
 800a2a4:	4607      	mov	r7, r0
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f000 fd8a 	bl	800adc0 <__multiply>
 800a2ac:	ee18 1a10 	vmov	r1, s16
 800a2b0:	4680      	mov	r8, r0
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f000 fcb6 	bl	800ac24 <_Bfree>
 800a2b8:	ee08 8a10 	vmov	s16, r8
 800a2bc:	9b07      	ldr	r3, [sp, #28]
 800a2be:	1b9a      	subs	r2, r3, r6
 800a2c0:	d006      	beq.n	800a2d0 <_dtoa_r+0x7a0>
 800a2c2:	ee18 1a10 	vmov	r1, s16
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f000 fe24 	bl	800af14 <__pow5mult>
 800a2cc:	ee08 0a10 	vmov	s16, r0
 800a2d0:	2101      	movs	r1, #1
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f000 fd5e 	bl	800ad94 <__i2b>
 800a2d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	4606      	mov	r6, r0
 800a2de:	f340 8088 	ble.w	800a3f2 <_dtoa_r+0x8c2>
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	4601      	mov	r1, r0
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f000 fe14 	bl	800af14 <__pow5mult>
 800a2ec:	9b06      	ldr	r3, [sp, #24]
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	4606      	mov	r6, r0
 800a2f2:	f340 8081 	ble.w	800a3f8 <_dtoa_r+0x8c8>
 800a2f6:	f04f 0800 	mov.w	r8, #0
 800a2fa:	6933      	ldr	r3, [r6, #16]
 800a2fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a300:	6918      	ldr	r0, [r3, #16]
 800a302:	f000 fcf7 	bl	800acf4 <__hi0bits>
 800a306:	f1c0 0020 	rsb	r0, r0, #32
 800a30a:	9b05      	ldr	r3, [sp, #20]
 800a30c:	4418      	add	r0, r3
 800a30e:	f010 001f 	ands.w	r0, r0, #31
 800a312:	f000 8092 	beq.w	800a43a <_dtoa_r+0x90a>
 800a316:	f1c0 0320 	rsb	r3, r0, #32
 800a31a:	2b04      	cmp	r3, #4
 800a31c:	f340 808a 	ble.w	800a434 <_dtoa_r+0x904>
 800a320:	f1c0 001c 	rsb	r0, r0, #28
 800a324:	9b04      	ldr	r3, [sp, #16]
 800a326:	4403      	add	r3, r0
 800a328:	9304      	str	r3, [sp, #16]
 800a32a:	9b05      	ldr	r3, [sp, #20]
 800a32c:	4403      	add	r3, r0
 800a32e:	4405      	add	r5, r0
 800a330:	9305      	str	r3, [sp, #20]
 800a332:	9b04      	ldr	r3, [sp, #16]
 800a334:	2b00      	cmp	r3, #0
 800a336:	dd07      	ble.n	800a348 <_dtoa_r+0x818>
 800a338:	ee18 1a10 	vmov	r1, s16
 800a33c:	461a      	mov	r2, r3
 800a33e:	4620      	mov	r0, r4
 800a340:	f000 fe42 	bl	800afc8 <__lshift>
 800a344:	ee08 0a10 	vmov	s16, r0
 800a348:	9b05      	ldr	r3, [sp, #20]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	dd05      	ble.n	800a35a <_dtoa_r+0x82a>
 800a34e:	4631      	mov	r1, r6
 800a350:	461a      	mov	r2, r3
 800a352:	4620      	mov	r0, r4
 800a354:	f000 fe38 	bl	800afc8 <__lshift>
 800a358:	4606      	mov	r6, r0
 800a35a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d06e      	beq.n	800a43e <_dtoa_r+0x90e>
 800a360:	ee18 0a10 	vmov	r0, s16
 800a364:	4631      	mov	r1, r6
 800a366:	f000 fe9f 	bl	800b0a8 <__mcmp>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	da67      	bge.n	800a43e <_dtoa_r+0x90e>
 800a36e:	9b00      	ldr	r3, [sp, #0]
 800a370:	3b01      	subs	r3, #1
 800a372:	ee18 1a10 	vmov	r1, s16
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	220a      	movs	r2, #10
 800a37a:	2300      	movs	r3, #0
 800a37c:	4620      	mov	r0, r4
 800a37e:	f000 fc73 	bl	800ac68 <__multadd>
 800a382:	9b08      	ldr	r3, [sp, #32]
 800a384:	ee08 0a10 	vmov	s16, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f000 81b1 	beq.w	800a6f0 <_dtoa_r+0xbc0>
 800a38e:	2300      	movs	r3, #0
 800a390:	4639      	mov	r1, r7
 800a392:	220a      	movs	r2, #10
 800a394:	4620      	mov	r0, r4
 800a396:	f000 fc67 	bl	800ac68 <__multadd>
 800a39a:	9b02      	ldr	r3, [sp, #8]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	4607      	mov	r7, r0
 800a3a0:	f300 808e 	bgt.w	800a4c0 <_dtoa_r+0x990>
 800a3a4:	9b06      	ldr	r3, [sp, #24]
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	dc51      	bgt.n	800a44e <_dtoa_r+0x91e>
 800a3aa:	e089      	b.n	800a4c0 <_dtoa_r+0x990>
 800a3ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a3b2:	e74b      	b.n	800a24c <_dtoa_r+0x71c>
 800a3b4:	9b03      	ldr	r3, [sp, #12]
 800a3b6:	1e5e      	subs	r6, r3, #1
 800a3b8:	9b07      	ldr	r3, [sp, #28]
 800a3ba:	42b3      	cmp	r3, r6
 800a3bc:	bfbf      	itttt	lt
 800a3be:	9b07      	ldrlt	r3, [sp, #28]
 800a3c0:	9607      	strlt	r6, [sp, #28]
 800a3c2:	1af2      	sublt	r2, r6, r3
 800a3c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a3c6:	bfb6      	itet	lt
 800a3c8:	189b      	addlt	r3, r3, r2
 800a3ca:	1b9e      	subge	r6, r3, r6
 800a3cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a3ce:	9b03      	ldr	r3, [sp, #12]
 800a3d0:	bfb8      	it	lt
 800a3d2:	2600      	movlt	r6, #0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	bfb7      	itett	lt
 800a3d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a3dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a3e0:	1a9d      	sublt	r5, r3, r2
 800a3e2:	2300      	movlt	r3, #0
 800a3e4:	e734      	b.n	800a250 <_dtoa_r+0x720>
 800a3e6:	9e07      	ldr	r6, [sp, #28]
 800a3e8:	9d04      	ldr	r5, [sp, #16]
 800a3ea:	9f08      	ldr	r7, [sp, #32]
 800a3ec:	e73b      	b.n	800a266 <_dtoa_r+0x736>
 800a3ee:	9a07      	ldr	r2, [sp, #28]
 800a3f0:	e767      	b.n	800a2c2 <_dtoa_r+0x792>
 800a3f2:	9b06      	ldr	r3, [sp, #24]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	dc18      	bgt.n	800a42a <_dtoa_r+0x8fa>
 800a3f8:	f1ba 0f00 	cmp.w	sl, #0
 800a3fc:	d115      	bne.n	800a42a <_dtoa_r+0x8fa>
 800a3fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a402:	b993      	cbnz	r3, 800a42a <_dtoa_r+0x8fa>
 800a404:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a408:	0d1b      	lsrs	r3, r3, #20
 800a40a:	051b      	lsls	r3, r3, #20
 800a40c:	b183      	cbz	r3, 800a430 <_dtoa_r+0x900>
 800a40e:	9b04      	ldr	r3, [sp, #16]
 800a410:	3301      	adds	r3, #1
 800a412:	9304      	str	r3, [sp, #16]
 800a414:	9b05      	ldr	r3, [sp, #20]
 800a416:	3301      	adds	r3, #1
 800a418:	9305      	str	r3, [sp, #20]
 800a41a:	f04f 0801 	mov.w	r8, #1
 800a41e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a420:	2b00      	cmp	r3, #0
 800a422:	f47f af6a 	bne.w	800a2fa <_dtoa_r+0x7ca>
 800a426:	2001      	movs	r0, #1
 800a428:	e76f      	b.n	800a30a <_dtoa_r+0x7da>
 800a42a:	f04f 0800 	mov.w	r8, #0
 800a42e:	e7f6      	b.n	800a41e <_dtoa_r+0x8ee>
 800a430:	4698      	mov	r8, r3
 800a432:	e7f4      	b.n	800a41e <_dtoa_r+0x8ee>
 800a434:	f43f af7d 	beq.w	800a332 <_dtoa_r+0x802>
 800a438:	4618      	mov	r0, r3
 800a43a:	301c      	adds	r0, #28
 800a43c:	e772      	b.n	800a324 <_dtoa_r+0x7f4>
 800a43e:	9b03      	ldr	r3, [sp, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	dc37      	bgt.n	800a4b4 <_dtoa_r+0x984>
 800a444:	9b06      	ldr	r3, [sp, #24]
 800a446:	2b02      	cmp	r3, #2
 800a448:	dd34      	ble.n	800a4b4 <_dtoa_r+0x984>
 800a44a:	9b03      	ldr	r3, [sp, #12]
 800a44c:	9302      	str	r3, [sp, #8]
 800a44e:	9b02      	ldr	r3, [sp, #8]
 800a450:	b96b      	cbnz	r3, 800a46e <_dtoa_r+0x93e>
 800a452:	4631      	mov	r1, r6
 800a454:	2205      	movs	r2, #5
 800a456:	4620      	mov	r0, r4
 800a458:	f000 fc06 	bl	800ac68 <__multadd>
 800a45c:	4601      	mov	r1, r0
 800a45e:	4606      	mov	r6, r0
 800a460:	ee18 0a10 	vmov	r0, s16
 800a464:	f000 fe20 	bl	800b0a8 <__mcmp>
 800a468:	2800      	cmp	r0, #0
 800a46a:	f73f adbb 	bgt.w	8009fe4 <_dtoa_r+0x4b4>
 800a46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a470:	9d01      	ldr	r5, [sp, #4]
 800a472:	43db      	mvns	r3, r3
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	f04f 0800 	mov.w	r8, #0
 800a47a:	4631      	mov	r1, r6
 800a47c:	4620      	mov	r0, r4
 800a47e:	f000 fbd1 	bl	800ac24 <_Bfree>
 800a482:	2f00      	cmp	r7, #0
 800a484:	f43f aea4 	beq.w	800a1d0 <_dtoa_r+0x6a0>
 800a488:	f1b8 0f00 	cmp.w	r8, #0
 800a48c:	d005      	beq.n	800a49a <_dtoa_r+0x96a>
 800a48e:	45b8      	cmp	r8, r7
 800a490:	d003      	beq.n	800a49a <_dtoa_r+0x96a>
 800a492:	4641      	mov	r1, r8
 800a494:	4620      	mov	r0, r4
 800a496:	f000 fbc5 	bl	800ac24 <_Bfree>
 800a49a:	4639      	mov	r1, r7
 800a49c:	4620      	mov	r0, r4
 800a49e:	f000 fbc1 	bl	800ac24 <_Bfree>
 800a4a2:	e695      	b.n	800a1d0 <_dtoa_r+0x6a0>
 800a4a4:	2600      	movs	r6, #0
 800a4a6:	4637      	mov	r7, r6
 800a4a8:	e7e1      	b.n	800a46e <_dtoa_r+0x93e>
 800a4aa:	9700      	str	r7, [sp, #0]
 800a4ac:	4637      	mov	r7, r6
 800a4ae:	e599      	b.n	8009fe4 <_dtoa_r+0x4b4>
 800a4b0:	40240000 	.word	0x40240000
 800a4b4:	9b08      	ldr	r3, [sp, #32]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f000 80ca 	beq.w	800a650 <_dtoa_r+0xb20>
 800a4bc:	9b03      	ldr	r3, [sp, #12]
 800a4be:	9302      	str	r3, [sp, #8]
 800a4c0:	2d00      	cmp	r5, #0
 800a4c2:	dd05      	ble.n	800a4d0 <_dtoa_r+0x9a0>
 800a4c4:	4639      	mov	r1, r7
 800a4c6:	462a      	mov	r2, r5
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f000 fd7d 	bl	800afc8 <__lshift>
 800a4ce:	4607      	mov	r7, r0
 800a4d0:	f1b8 0f00 	cmp.w	r8, #0
 800a4d4:	d05b      	beq.n	800a58e <_dtoa_r+0xa5e>
 800a4d6:	6879      	ldr	r1, [r7, #4]
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f000 fb63 	bl	800aba4 <_Balloc>
 800a4de:	4605      	mov	r5, r0
 800a4e0:	b928      	cbnz	r0, 800a4ee <_dtoa_r+0x9be>
 800a4e2:	4b87      	ldr	r3, [pc, #540]	; (800a700 <_dtoa_r+0xbd0>)
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a4ea:	f7ff bb3b 	b.w	8009b64 <_dtoa_r+0x34>
 800a4ee:	693a      	ldr	r2, [r7, #16]
 800a4f0:	3202      	adds	r2, #2
 800a4f2:	0092      	lsls	r2, r2, #2
 800a4f4:	f107 010c 	add.w	r1, r7, #12
 800a4f8:	300c      	adds	r0, #12
 800a4fa:	f000 fb45 	bl	800ab88 <memcpy>
 800a4fe:	2201      	movs	r2, #1
 800a500:	4629      	mov	r1, r5
 800a502:	4620      	mov	r0, r4
 800a504:	f000 fd60 	bl	800afc8 <__lshift>
 800a508:	9b01      	ldr	r3, [sp, #4]
 800a50a:	f103 0901 	add.w	r9, r3, #1
 800a50e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a512:	4413      	add	r3, r2
 800a514:	9305      	str	r3, [sp, #20]
 800a516:	f00a 0301 	and.w	r3, sl, #1
 800a51a:	46b8      	mov	r8, r7
 800a51c:	9304      	str	r3, [sp, #16]
 800a51e:	4607      	mov	r7, r0
 800a520:	4631      	mov	r1, r6
 800a522:	ee18 0a10 	vmov	r0, s16
 800a526:	f7ff fa75 	bl	8009a14 <quorem>
 800a52a:	4641      	mov	r1, r8
 800a52c:	9002      	str	r0, [sp, #8]
 800a52e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a532:	ee18 0a10 	vmov	r0, s16
 800a536:	f000 fdb7 	bl	800b0a8 <__mcmp>
 800a53a:	463a      	mov	r2, r7
 800a53c:	9003      	str	r0, [sp, #12]
 800a53e:	4631      	mov	r1, r6
 800a540:	4620      	mov	r0, r4
 800a542:	f000 fdcd 	bl	800b0e0 <__mdiff>
 800a546:	68c2      	ldr	r2, [r0, #12]
 800a548:	f109 3bff 	add.w	fp, r9, #4294967295
 800a54c:	4605      	mov	r5, r0
 800a54e:	bb02      	cbnz	r2, 800a592 <_dtoa_r+0xa62>
 800a550:	4601      	mov	r1, r0
 800a552:	ee18 0a10 	vmov	r0, s16
 800a556:	f000 fda7 	bl	800b0a8 <__mcmp>
 800a55a:	4602      	mov	r2, r0
 800a55c:	4629      	mov	r1, r5
 800a55e:	4620      	mov	r0, r4
 800a560:	9207      	str	r2, [sp, #28]
 800a562:	f000 fb5f 	bl	800ac24 <_Bfree>
 800a566:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a56a:	ea43 0102 	orr.w	r1, r3, r2
 800a56e:	9b04      	ldr	r3, [sp, #16]
 800a570:	430b      	orrs	r3, r1
 800a572:	464d      	mov	r5, r9
 800a574:	d10f      	bne.n	800a596 <_dtoa_r+0xa66>
 800a576:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a57a:	d02a      	beq.n	800a5d2 <_dtoa_r+0xaa2>
 800a57c:	9b03      	ldr	r3, [sp, #12]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	dd02      	ble.n	800a588 <_dtoa_r+0xa58>
 800a582:	9b02      	ldr	r3, [sp, #8]
 800a584:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a588:	f88b a000 	strb.w	sl, [fp]
 800a58c:	e775      	b.n	800a47a <_dtoa_r+0x94a>
 800a58e:	4638      	mov	r0, r7
 800a590:	e7ba      	b.n	800a508 <_dtoa_r+0x9d8>
 800a592:	2201      	movs	r2, #1
 800a594:	e7e2      	b.n	800a55c <_dtoa_r+0xa2c>
 800a596:	9b03      	ldr	r3, [sp, #12]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	db04      	blt.n	800a5a6 <_dtoa_r+0xa76>
 800a59c:	9906      	ldr	r1, [sp, #24]
 800a59e:	430b      	orrs	r3, r1
 800a5a0:	9904      	ldr	r1, [sp, #16]
 800a5a2:	430b      	orrs	r3, r1
 800a5a4:	d122      	bne.n	800a5ec <_dtoa_r+0xabc>
 800a5a6:	2a00      	cmp	r2, #0
 800a5a8:	ddee      	ble.n	800a588 <_dtoa_r+0xa58>
 800a5aa:	ee18 1a10 	vmov	r1, s16
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f000 fd09 	bl	800afc8 <__lshift>
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	ee08 0a10 	vmov	s16, r0
 800a5bc:	f000 fd74 	bl	800b0a8 <__mcmp>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	dc03      	bgt.n	800a5cc <_dtoa_r+0xa9c>
 800a5c4:	d1e0      	bne.n	800a588 <_dtoa_r+0xa58>
 800a5c6:	f01a 0f01 	tst.w	sl, #1
 800a5ca:	d0dd      	beq.n	800a588 <_dtoa_r+0xa58>
 800a5cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a5d0:	d1d7      	bne.n	800a582 <_dtoa_r+0xa52>
 800a5d2:	2339      	movs	r3, #57	; 0x39
 800a5d4:	f88b 3000 	strb.w	r3, [fp]
 800a5d8:	462b      	mov	r3, r5
 800a5da:	461d      	mov	r5, r3
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a5e2:	2a39      	cmp	r2, #57	; 0x39
 800a5e4:	d071      	beq.n	800a6ca <_dtoa_r+0xb9a>
 800a5e6:	3201      	adds	r2, #1
 800a5e8:	701a      	strb	r2, [r3, #0]
 800a5ea:	e746      	b.n	800a47a <_dtoa_r+0x94a>
 800a5ec:	2a00      	cmp	r2, #0
 800a5ee:	dd07      	ble.n	800a600 <_dtoa_r+0xad0>
 800a5f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a5f4:	d0ed      	beq.n	800a5d2 <_dtoa_r+0xaa2>
 800a5f6:	f10a 0301 	add.w	r3, sl, #1
 800a5fa:	f88b 3000 	strb.w	r3, [fp]
 800a5fe:	e73c      	b.n	800a47a <_dtoa_r+0x94a>
 800a600:	9b05      	ldr	r3, [sp, #20]
 800a602:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a606:	4599      	cmp	r9, r3
 800a608:	d047      	beq.n	800a69a <_dtoa_r+0xb6a>
 800a60a:	ee18 1a10 	vmov	r1, s16
 800a60e:	2300      	movs	r3, #0
 800a610:	220a      	movs	r2, #10
 800a612:	4620      	mov	r0, r4
 800a614:	f000 fb28 	bl	800ac68 <__multadd>
 800a618:	45b8      	cmp	r8, r7
 800a61a:	ee08 0a10 	vmov	s16, r0
 800a61e:	f04f 0300 	mov.w	r3, #0
 800a622:	f04f 020a 	mov.w	r2, #10
 800a626:	4641      	mov	r1, r8
 800a628:	4620      	mov	r0, r4
 800a62a:	d106      	bne.n	800a63a <_dtoa_r+0xb0a>
 800a62c:	f000 fb1c 	bl	800ac68 <__multadd>
 800a630:	4680      	mov	r8, r0
 800a632:	4607      	mov	r7, r0
 800a634:	f109 0901 	add.w	r9, r9, #1
 800a638:	e772      	b.n	800a520 <_dtoa_r+0x9f0>
 800a63a:	f000 fb15 	bl	800ac68 <__multadd>
 800a63e:	4639      	mov	r1, r7
 800a640:	4680      	mov	r8, r0
 800a642:	2300      	movs	r3, #0
 800a644:	220a      	movs	r2, #10
 800a646:	4620      	mov	r0, r4
 800a648:	f000 fb0e 	bl	800ac68 <__multadd>
 800a64c:	4607      	mov	r7, r0
 800a64e:	e7f1      	b.n	800a634 <_dtoa_r+0xb04>
 800a650:	9b03      	ldr	r3, [sp, #12]
 800a652:	9302      	str	r3, [sp, #8]
 800a654:	9d01      	ldr	r5, [sp, #4]
 800a656:	ee18 0a10 	vmov	r0, s16
 800a65a:	4631      	mov	r1, r6
 800a65c:	f7ff f9da 	bl	8009a14 <quorem>
 800a660:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a664:	9b01      	ldr	r3, [sp, #4]
 800a666:	f805 ab01 	strb.w	sl, [r5], #1
 800a66a:	1aea      	subs	r2, r5, r3
 800a66c:	9b02      	ldr	r3, [sp, #8]
 800a66e:	4293      	cmp	r3, r2
 800a670:	dd09      	ble.n	800a686 <_dtoa_r+0xb56>
 800a672:	ee18 1a10 	vmov	r1, s16
 800a676:	2300      	movs	r3, #0
 800a678:	220a      	movs	r2, #10
 800a67a:	4620      	mov	r0, r4
 800a67c:	f000 faf4 	bl	800ac68 <__multadd>
 800a680:	ee08 0a10 	vmov	s16, r0
 800a684:	e7e7      	b.n	800a656 <_dtoa_r+0xb26>
 800a686:	9b02      	ldr	r3, [sp, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	bfc8      	it	gt
 800a68c:	461d      	movgt	r5, r3
 800a68e:	9b01      	ldr	r3, [sp, #4]
 800a690:	bfd8      	it	le
 800a692:	2501      	movle	r5, #1
 800a694:	441d      	add	r5, r3
 800a696:	f04f 0800 	mov.w	r8, #0
 800a69a:	ee18 1a10 	vmov	r1, s16
 800a69e:	2201      	movs	r2, #1
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f000 fc91 	bl	800afc8 <__lshift>
 800a6a6:	4631      	mov	r1, r6
 800a6a8:	ee08 0a10 	vmov	s16, r0
 800a6ac:	f000 fcfc 	bl	800b0a8 <__mcmp>
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	dc91      	bgt.n	800a5d8 <_dtoa_r+0xaa8>
 800a6b4:	d102      	bne.n	800a6bc <_dtoa_r+0xb8c>
 800a6b6:	f01a 0f01 	tst.w	sl, #1
 800a6ba:	d18d      	bne.n	800a5d8 <_dtoa_r+0xaa8>
 800a6bc:	462b      	mov	r3, r5
 800a6be:	461d      	mov	r5, r3
 800a6c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6c4:	2a30      	cmp	r2, #48	; 0x30
 800a6c6:	d0fa      	beq.n	800a6be <_dtoa_r+0xb8e>
 800a6c8:	e6d7      	b.n	800a47a <_dtoa_r+0x94a>
 800a6ca:	9a01      	ldr	r2, [sp, #4]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d184      	bne.n	800a5da <_dtoa_r+0xaaa>
 800a6d0:	9b00      	ldr	r3, [sp, #0]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	2331      	movs	r3, #49	; 0x31
 800a6d8:	7013      	strb	r3, [r2, #0]
 800a6da:	e6ce      	b.n	800a47a <_dtoa_r+0x94a>
 800a6dc:	4b09      	ldr	r3, [pc, #36]	; (800a704 <_dtoa_r+0xbd4>)
 800a6de:	f7ff ba95 	b.w	8009c0c <_dtoa_r+0xdc>
 800a6e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f47f aa6e 	bne.w	8009bc6 <_dtoa_r+0x96>
 800a6ea:	4b07      	ldr	r3, [pc, #28]	; (800a708 <_dtoa_r+0xbd8>)
 800a6ec:	f7ff ba8e 	b.w	8009c0c <_dtoa_r+0xdc>
 800a6f0:	9b02      	ldr	r3, [sp, #8]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	dcae      	bgt.n	800a654 <_dtoa_r+0xb24>
 800a6f6:	9b06      	ldr	r3, [sp, #24]
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	f73f aea8 	bgt.w	800a44e <_dtoa_r+0x91e>
 800a6fe:	e7a9      	b.n	800a654 <_dtoa_r+0xb24>
 800a700:	0800c1f9 	.word	0x0800c1f9
 800a704:	0800bfbc 	.word	0x0800bfbc
 800a708:	0800c191 	.word	0x0800c191

0800a70c <__sflush_r>:
 800a70c:	898a      	ldrh	r2, [r1, #12]
 800a70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a712:	4605      	mov	r5, r0
 800a714:	0710      	lsls	r0, r2, #28
 800a716:	460c      	mov	r4, r1
 800a718:	d458      	bmi.n	800a7cc <__sflush_r+0xc0>
 800a71a:	684b      	ldr	r3, [r1, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	dc05      	bgt.n	800a72c <__sflush_r+0x20>
 800a720:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a722:	2b00      	cmp	r3, #0
 800a724:	dc02      	bgt.n	800a72c <__sflush_r+0x20>
 800a726:	2000      	movs	r0, #0
 800a728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a72c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a72e:	2e00      	cmp	r6, #0
 800a730:	d0f9      	beq.n	800a726 <__sflush_r+0x1a>
 800a732:	2300      	movs	r3, #0
 800a734:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a738:	682f      	ldr	r7, [r5, #0]
 800a73a:	602b      	str	r3, [r5, #0]
 800a73c:	d032      	beq.n	800a7a4 <__sflush_r+0x98>
 800a73e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a740:	89a3      	ldrh	r3, [r4, #12]
 800a742:	075a      	lsls	r2, r3, #29
 800a744:	d505      	bpl.n	800a752 <__sflush_r+0x46>
 800a746:	6863      	ldr	r3, [r4, #4]
 800a748:	1ac0      	subs	r0, r0, r3
 800a74a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a74c:	b10b      	cbz	r3, 800a752 <__sflush_r+0x46>
 800a74e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a750:	1ac0      	subs	r0, r0, r3
 800a752:	2300      	movs	r3, #0
 800a754:	4602      	mov	r2, r0
 800a756:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a758:	6a21      	ldr	r1, [r4, #32]
 800a75a:	4628      	mov	r0, r5
 800a75c:	47b0      	blx	r6
 800a75e:	1c43      	adds	r3, r0, #1
 800a760:	89a3      	ldrh	r3, [r4, #12]
 800a762:	d106      	bne.n	800a772 <__sflush_r+0x66>
 800a764:	6829      	ldr	r1, [r5, #0]
 800a766:	291d      	cmp	r1, #29
 800a768:	d82c      	bhi.n	800a7c4 <__sflush_r+0xb8>
 800a76a:	4a2a      	ldr	r2, [pc, #168]	; (800a814 <__sflush_r+0x108>)
 800a76c:	40ca      	lsrs	r2, r1
 800a76e:	07d6      	lsls	r6, r2, #31
 800a770:	d528      	bpl.n	800a7c4 <__sflush_r+0xb8>
 800a772:	2200      	movs	r2, #0
 800a774:	6062      	str	r2, [r4, #4]
 800a776:	04d9      	lsls	r1, r3, #19
 800a778:	6922      	ldr	r2, [r4, #16]
 800a77a:	6022      	str	r2, [r4, #0]
 800a77c:	d504      	bpl.n	800a788 <__sflush_r+0x7c>
 800a77e:	1c42      	adds	r2, r0, #1
 800a780:	d101      	bne.n	800a786 <__sflush_r+0x7a>
 800a782:	682b      	ldr	r3, [r5, #0]
 800a784:	b903      	cbnz	r3, 800a788 <__sflush_r+0x7c>
 800a786:	6560      	str	r0, [r4, #84]	; 0x54
 800a788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a78a:	602f      	str	r7, [r5, #0]
 800a78c:	2900      	cmp	r1, #0
 800a78e:	d0ca      	beq.n	800a726 <__sflush_r+0x1a>
 800a790:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a794:	4299      	cmp	r1, r3
 800a796:	d002      	beq.n	800a79e <__sflush_r+0x92>
 800a798:	4628      	mov	r0, r5
 800a79a:	f000 fd9d 	bl	800b2d8 <_free_r>
 800a79e:	2000      	movs	r0, #0
 800a7a0:	6360      	str	r0, [r4, #52]	; 0x34
 800a7a2:	e7c1      	b.n	800a728 <__sflush_r+0x1c>
 800a7a4:	6a21      	ldr	r1, [r4, #32]
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	47b0      	blx	r6
 800a7ac:	1c41      	adds	r1, r0, #1
 800a7ae:	d1c7      	bne.n	800a740 <__sflush_r+0x34>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d0c4      	beq.n	800a740 <__sflush_r+0x34>
 800a7b6:	2b1d      	cmp	r3, #29
 800a7b8:	d001      	beq.n	800a7be <__sflush_r+0xb2>
 800a7ba:	2b16      	cmp	r3, #22
 800a7bc:	d101      	bne.n	800a7c2 <__sflush_r+0xb6>
 800a7be:	602f      	str	r7, [r5, #0]
 800a7c0:	e7b1      	b.n	800a726 <__sflush_r+0x1a>
 800a7c2:	89a3      	ldrh	r3, [r4, #12]
 800a7c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7c8:	81a3      	strh	r3, [r4, #12]
 800a7ca:	e7ad      	b.n	800a728 <__sflush_r+0x1c>
 800a7cc:	690f      	ldr	r7, [r1, #16]
 800a7ce:	2f00      	cmp	r7, #0
 800a7d0:	d0a9      	beq.n	800a726 <__sflush_r+0x1a>
 800a7d2:	0793      	lsls	r3, r2, #30
 800a7d4:	680e      	ldr	r6, [r1, #0]
 800a7d6:	bf08      	it	eq
 800a7d8:	694b      	ldreq	r3, [r1, #20]
 800a7da:	600f      	str	r7, [r1, #0]
 800a7dc:	bf18      	it	ne
 800a7de:	2300      	movne	r3, #0
 800a7e0:	eba6 0807 	sub.w	r8, r6, r7
 800a7e4:	608b      	str	r3, [r1, #8]
 800a7e6:	f1b8 0f00 	cmp.w	r8, #0
 800a7ea:	dd9c      	ble.n	800a726 <__sflush_r+0x1a>
 800a7ec:	6a21      	ldr	r1, [r4, #32]
 800a7ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7f0:	4643      	mov	r3, r8
 800a7f2:	463a      	mov	r2, r7
 800a7f4:	4628      	mov	r0, r5
 800a7f6:	47b0      	blx	r6
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	dc06      	bgt.n	800a80a <__sflush_r+0xfe>
 800a7fc:	89a3      	ldrh	r3, [r4, #12]
 800a7fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a802:	81a3      	strh	r3, [r4, #12]
 800a804:	f04f 30ff 	mov.w	r0, #4294967295
 800a808:	e78e      	b.n	800a728 <__sflush_r+0x1c>
 800a80a:	4407      	add	r7, r0
 800a80c:	eba8 0800 	sub.w	r8, r8, r0
 800a810:	e7e9      	b.n	800a7e6 <__sflush_r+0xda>
 800a812:	bf00      	nop
 800a814:	20400001 	.word	0x20400001

0800a818 <_fflush_r>:
 800a818:	b538      	push	{r3, r4, r5, lr}
 800a81a:	690b      	ldr	r3, [r1, #16]
 800a81c:	4605      	mov	r5, r0
 800a81e:	460c      	mov	r4, r1
 800a820:	b913      	cbnz	r3, 800a828 <_fflush_r+0x10>
 800a822:	2500      	movs	r5, #0
 800a824:	4628      	mov	r0, r5
 800a826:	bd38      	pop	{r3, r4, r5, pc}
 800a828:	b118      	cbz	r0, 800a832 <_fflush_r+0x1a>
 800a82a:	6983      	ldr	r3, [r0, #24]
 800a82c:	b90b      	cbnz	r3, 800a832 <_fflush_r+0x1a>
 800a82e:	f000 f887 	bl	800a940 <__sinit>
 800a832:	4b14      	ldr	r3, [pc, #80]	; (800a884 <_fflush_r+0x6c>)
 800a834:	429c      	cmp	r4, r3
 800a836:	d11b      	bne.n	800a870 <_fflush_r+0x58>
 800a838:	686c      	ldr	r4, [r5, #4]
 800a83a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d0ef      	beq.n	800a822 <_fflush_r+0xa>
 800a842:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a844:	07d0      	lsls	r0, r2, #31
 800a846:	d404      	bmi.n	800a852 <_fflush_r+0x3a>
 800a848:	0599      	lsls	r1, r3, #22
 800a84a:	d402      	bmi.n	800a852 <_fflush_r+0x3a>
 800a84c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a84e:	f000 f92c 	bl	800aaaa <__retarget_lock_acquire_recursive>
 800a852:	4628      	mov	r0, r5
 800a854:	4621      	mov	r1, r4
 800a856:	f7ff ff59 	bl	800a70c <__sflush_r>
 800a85a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a85c:	07da      	lsls	r2, r3, #31
 800a85e:	4605      	mov	r5, r0
 800a860:	d4e0      	bmi.n	800a824 <_fflush_r+0xc>
 800a862:	89a3      	ldrh	r3, [r4, #12]
 800a864:	059b      	lsls	r3, r3, #22
 800a866:	d4dd      	bmi.n	800a824 <_fflush_r+0xc>
 800a868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a86a:	f000 f91f 	bl	800aaac <__retarget_lock_release_recursive>
 800a86e:	e7d9      	b.n	800a824 <_fflush_r+0xc>
 800a870:	4b05      	ldr	r3, [pc, #20]	; (800a888 <_fflush_r+0x70>)
 800a872:	429c      	cmp	r4, r3
 800a874:	d101      	bne.n	800a87a <_fflush_r+0x62>
 800a876:	68ac      	ldr	r4, [r5, #8]
 800a878:	e7df      	b.n	800a83a <_fflush_r+0x22>
 800a87a:	4b04      	ldr	r3, [pc, #16]	; (800a88c <_fflush_r+0x74>)
 800a87c:	429c      	cmp	r4, r3
 800a87e:	bf08      	it	eq
 800a880:	68ec      	ldreq	r4, [r5, #12]
 800a882:	e7da      	b.n	800a83a <_fflush_r+0x22>
 800a884:	0800c22c 	.word	0x0800c22c
 800a888:	0800c24c 	.word	0x0800c24c
 800a88c:	0800c20c 	.word	0x0800c20c

0800a890 <std>:
 800a890:	2300      	movs	r3, #0
 800a892:	b510      	push	{r4, lr}
 800a894:	4604      	mov	r4, r0
 800a896:	e9c0 3300 	strd	r3, r3, [r0]
 800a89a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a89e:	6083      	str	r3, [r0, #8]
 800a8a0:	8181      	strh	r1, [r0, #12]
 800a8a2:	6643      	str	r3, [r0, #100]	; 0x64
 800a8a4:	81c2      	strh	r2, [r0, #14]
 800a8a6:	6183      	str	r3, [r0, #24]
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	2208      	movs	r2, #8
 800a8ac:	305c      	adds	r0, #92	; 0x5c
 800a8ae:	f7fe f9cb 	bl	8008c48 <memset>
 800a8b2:	4b05      	ldr	r3, [pc, #20]	; (800a8c8 <std+0x38>)
 800a8b4:	6263      	str	r3, [r4, #36]	; 0x24
 800a8b6:	4b05      	ldr	r3, [pc, #20]	; (800a8cc <std+0x3c>)
 800a8b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8ba:	4b05      	ldr	r3, [pc, #20]	; (800a8d0 <std+0x40>)
 800a8bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8be:	4b05      	ldr	r3, [pc, #20]	; (800a8d4 <std+0x44>)
 800a8c0:	6224      	str	r4, [r4, #32]
 800a8c2:	6323      	str	r3, [r4, #48]	; 0x30
 800a8c4:	bd10      	pop	{r4, pc}
 800a8c6:	bf00      	nop
 800a8c8:	0800ba25 	.word	0x0800ba25
 800a8cc:	0800ba47 	.word	0x0800ba47
 800a8d0:	0800ba7f 	.word	0x0800ba7f
 800a8d4:	0800baa3 	.word	0x0800baa3

0800a8d8 <_cleanup_r>:
 800a8d8:	4901      	ldr	r1, [pc, #4]	; (800a8e0 <_cleanup_r+0x8>)
 800a8da:	f000 b8c1 	b.w	800aa60 <_fwalk_reent>
 800a8de:	bf00      	nop
 800a8e0:	0800a819 	.word	0x0800a819

0800a8e4 <__sfmoreglue>:
 800a8e4:	b570      	push	{r4, r5, r6, lr}
 800a8e6:	2268      	movs	r2, #104	; 0x68
 800a8e8:	1e4d      	subs	r5, r1, #1
 800a8ea:	4355      	muls	r5, r2
 800a8ec:	460e      	mov	r6, r1
 800a8ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a8f2:	f000 fd5d 	bl	800b3b0 <_malloc_r>
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	b140      	cbz	r0, 800a90c <__sfmoreglue+0x28>
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	e9c0 1600 	strd	r1, r6, [r0]
 800a900:	300c      	adds	r0, #12
 800a902:	60a0      	str	r0, [r4, #8]
 800a904:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a908:	f7fe f99e 	bl	8008c48 <memset>
 800a90c:	4620      	mov	r0, r4
 800a90e:	bd70      	pop	{r4, r5, r6, pc}

0800a910 <__sfp_lock_acquire>:
 800a910:	4801      	ldr	r0, [pc, #4]	; (800a918 <__sfp_lock_acquire+0x8>)
 800a912:	f000 b8ca 	b.w	800aaaa <__retarget_lock_acquire_recursive>
 800a916:	bf00      	nop
 800a918:	2000047d 	.word	0x2000047d

0800a91c <__sfp_lock_release>:
 800a91c:	4801      	ldr	r0, [pc, #4]	; (800a924 <__sfp_lock_release+0x8>)
 800a91e:	f000 b8c5 	b.w	800aaac <__retarget_lock_release_recursive>
 800a922:	bf00      	nop
 800a924:	2000047d 	.word	0x2000047d

0800a928 <__sinit_lock_acquire>:
 800a928:	4801      	ldr	r0, [pc, #4]	; (800a930 <__sinit_lock_acquire+0x8>)
 800a92a:	f000 b8be 	b.w	800aaaa <__retarget_lock_acquire_recursive>
 800a92e:	bf00      	nop
 800a930:	2000047e 	.word	0x2000047e

0800a934 <__sinit_lock_release>:
 800a934:	4801      	ldr	r0, [pc, #4]	; (800a93c <__sinit_lock_release+0x8>)
 800a936:	f000 b8b9 	b.w	800aaac <__retarget_lock_release_recursive>
 800a93a:	bf00      	nop
 800a93c:	2000047e 	.word	0x2000047e

0800a940 <__sinit>:
 800a940:	b510      	push	{r4, lr}
 800a942:	4604      	mov	r4, r0
 800a944:	f7ff fff0 	bl	800a928 <__sinit_lock_acquire>
 800a948:	69a3      	ldr	r3, [r4, #24]
 800a94a:	b11b      	cbz	r3, 800a954 <__sinit+0x14>
 800a94c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a950:	f7ff bff0 	b.w	800a934 <__sinit_lock_release>
 800a954:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a958:	6523      	str	r3, [r4, #80]	; 0x50
 800a95a:	4b13      	ldr	r3, [pc, #76]	; (800a9a8 <__sinit+0x68>)
 800a95c:	4a13      	ldr	r2, [pc, #76]	; (800a9ac <__sinit+0x6c>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	62a2      	str	r2, [r4, #40]	; 0x28
 800a962:	42a3      	cmp	r3, r4
 800a964:	bf04      	itt	eq
 800a966:	2301      	moveq	r3, #1
 800a968:	61a3      	streq	r3, [r4, #24]
 800a96a:	4620      	mov	r0, r4
 800a96c:	f000 f820 	bl	800a9b0 <__sfp>
 800a970:	6060      	str	r0, [r4, #4]
 800a972:	4620      	mov	r0, r4
 800a974:	f000 f81c 	bl	800a9b0 <__sfp>
 800a978:	60a0      	str	r0, [r4, #8]
 800a97a:	4620      	mov	r0, r4
 800a97c:	f000 f818 	bl	800a9b0 <__sfp>
 800a980:	2200      	movs	r2, #0
 800a982:	60e0      	str	r0, [r4, #12]
 800a984:	2104      	movs	r1, #4
 800a986:	6860      	ldr	r0, [r4, #4]
 800a988:	f7ff ff82 	bl	800a890 <std>
 800a98c:	68a0      	ldr	r0, [r4, #8]
 800a98e:	2201      	movs	r2, #1
 800a990:	2109      	movs	r1, #9
 800a992:	f7ff ff7d 	bl	800a890 <std>
 800a996:	68e0      	ldr	r0, [r4, #12]
 800a998:	2202      	movs	r2, #2
 800a99a:	2112      	movs	r1, #18
 800a99c:	f7ff ff78 	bl	800a890 <std>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	61a3      	str	r3, [r4, #24]
 800a9a4:	e7d2      	b.n	800a94c <__sinit+0xc>
 800a9a6:	bf00      	nop
 800a9a8:	0800bfa8 	.word	0x0800bfa8
 800a9ac:	0800a8d9 	.word	0x0800a8d9

0800a9b0 <__sfp>:
 800a9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b2:	4607      	mov	r7, r0
 800a9b4:	f7ff ffac 	bl	800a910 <__sfp_lock_acquire>
 800a9b8:	4b1e      	ldr	r3, [pc, #120]	; (800aa34 <__sfp+0x84>)
 800a9ba:	681e      	ldr	r6, [r3, #0]
 800a9bc:	69b3      	ldr	r3, [r6, #24]
 800a9be:	b913      	cbnz	r3, 800a9c6 <__sfp+0x16>
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	f7ff ffbd 	bl	800a940 <__sinit>
 800a9c6:	3648      	adds	r6, #72	; 0x48
 800a9c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	d503      	bpl.n	800a9d8 <__sfp+0x28>
 800a9d0:	6833      	ldr	r3, [r6, #0]
 800a9d2:	b30b      	cbz	r3, 800aa18 <__sfp+0x68>
 800a9d4:	6836      	ldr	r6, [r6, #0]
 800a9d6:	e7f7      	b.n	800a9c8 <__sfp+0x18>
 800a9d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a9dc:	b9d5      	cbnz	r5, 800aa14 <__sfp+0x64>
 800a9de:	4b16      	ldr	r3, [pc, #88]	; (800aa38 <__sfp+0x88>)
 800a9e0:	60e3      	str	r3, [r4, #12]
 800a9e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a9e6:	6665      	str	r5, [r4, #100]	; 0x64
 800a9e8:	f000 f85e 	bl	800aaa8 <__retarget_lock_init_recursive>
 800a9ec:	f7ff ff96 	bl	800a91c <__sfp_lock_release>
 800a9f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a9f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a9f8:	6025      	str	r5, [r4, #0]
 800a9fa:	61a5      	str	r5, [r4, #24]
 800a9fc:	2208      	movs	r2, #8
 800a9fe:	4629      	mov	r1, r5
 800aa00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa04:	f7fe f920 	bl	8008c48 <memset>
 800aa08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa10:	4620      	mov	r0, r4
 800aa12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa14:	3468      	adds	r4, #104	; 0x68
 800aa16:	e7d9      	b.n	800a9cc <__sfp+0x1c>
 800aa18:	2104      	movs	r1, #4
 800aa1a:	4638      	mov	r0, r7
 800aa1c:	f7ff ff62 	bl	800a8e4 <__sfmoreglue>
 800aa20:	4604      	mov	r4, r0
 800aa22:	6030      	str	r0, [r6, #0]
 800aa24:	2800      	cmp	r0, #0
 800aa26:	d1d5      	bne.n	800a9d4 <__sfp+0x24>
 800aa28:	f7ff ff78 	bl	800a91c <__sfp_lock_release>
 800aa2c:	230c      	movs	r3, #12
 800aa2e:	603b      	str	r3, [r7, #0]
 800aa30:	e7ee      	b.n	800aa10 <__sfp+0x60>
 800aa32:	bf00      	nop
 800aa34:	0800bfa8 	.word	0x0800bfa8
 800aa38:	ffff0001 	.word	0xffff0001

0800aa3c <fiprintf>:
 800aa3c:	b40e      	push	{r1, r2, r3}
 800aa3e:	b503      	push	{r0, r1, lr}
 800aa40:	4601      	mov	r1, r0
 800aa42:	ab03      	add	r3, sp, #12
 800aa44:	4805      	ldr	r0, [pc, #20]	; (800aa5c <fiprintf+0x20>)
 800aa46:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa4a:	6800      	ldr	r0, [r0, #0]
 800aa4c:	9301      	str	r3, [sp, #4]
 800aa4e:	f000 fea9 	bl	800b7a4 <_vfiprintf_r>
 800aa52:	b002      	add	sp, #8
 800aa54:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa58:	b003      	add	sp, #12
 800aa5a:	4770      	bx	lr
 800aa5c:	200000a8 	.word	0x200000a8

0800aa60 <_fwalk_reent>:
 800aa60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa64:	4606      	mov	r6, r0
 800aa66:	4688      	mov	r8, r1
 800aa68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa6c:	2700      	movs	r7, #0
 800aa6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa72:	f1b9 0901 	subs.w	r9, r9, #1
 800aa76:	d505      	bpl.n	800aa84 <_fwalk_reent+0x24>
 800aa78:	6824      	ldr	r4, [r4, #0]
 800aa7a:	2c00      	cmp	r4, #0
 800aa7c:	d1f7      	bne.n	800aa6e <_fwalk_reent+0xe>
 800aa7e:	4638      	mov	r0, r7
 800aa80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa84:	89ab      	ldrh	r3, [r5, #12]
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d907      	bls.n	800aa9a <_fwalk_reent+0x3a>
 800aa8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	d003      	beq.n	800aa9a <_fwalk_reent+0x3a>
 800aa92:	4629      	mov	r1, r5
 800aa94:	4630      	mov	r0, r6
 800aa96:	47c0      	blx	r8
 800aa98:	4307      	orrs	r7, r0
 800aa9a:	3568      	adds	r5, #104	; 0x68
 800aa9c:	e7e9      	b.n	800aa72 <_fwalk_reent+0x12>
	...

0800aaa0 <_localeconv_r>:
 800aaa0:	4800      	ldr	r0, [pc, #0]	; (800aaa4 <_localeconv_r+0x4>)
 800aaa2:	4770      	bx	lr
 800aaa4:	200001fc 	.word	0x200001fc

0800aaa8 <__retarget_lock_init_recursive>:
 800aaa8:	4770      	bx	lr

0800aaaa <__retarget_lock_acquire_recursive>:
 800aaaa:	4770      	bx	lr

0800aaac <__retarget_lock_release_recursive>:
 800aaac:	4770      	bx	lr

0800aaae <__swhatbuf_r>:
 800aaae:	b570      	push	{r4, r5, r6, lr}
 800aab0:	460e      	mov	r6, r1
 800aab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aab6:	2900      	cmp	r1, #0
 800aab8:	b096      	sub	sp, #88	; 0x58
 800aaba:	4614      	mov	r4, r2
 800aabc:	461d      	mov	r5, r3
 800aabe:	da08      	bge.n	800aad2 <__swhatbuf_r+0x24>
 800aac0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aac4:	2200      	movs	r2, #0
 800aac6:	602a      	str	r2, [r5, #0]
 800aac8:	061a      	lsls	r2, r3, #24
 800aaca:	d410      	bmi.n	800aaee <__swhatbuf_r+0x40>
 800aacc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aad0:	e00e      	b.n	800aaf0 <__swhatbuf_r+0x42>
 800aad2:	466a      	mov	r2, sp
 800aad4:	f001 f814 	bl	800bb00 <_fstat_r>
 800aad8:	2800      	cmp	r0, #0
 800aada:	dbf1      	blt.n	800aac0 <__swhatbuf_r+0x12>
 800aadc:	9a01      	ldr	r2, [sp, #4]
 800aade:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aae2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aae6:	425a      	negs	r2, r3
 800aae8:	415a      	adcs	r2, r3
 800aaea:	602a      	str	r2, [r5, #0]
 800aaec:	e7ee      	b.n	800aacc <__swhatbuf_r+0x1e>
 800aaee:	2340      	movs	r3, #64	; 0x40
 800aaf0:	2000      	movs	r0, #0
 800aaf2:	6023      	str	r3, [r4, #0]
 800aaf4:	b016      	add	sp, #88	; 0x58
 800aaf6:	bd70      	pop	{r4, r5, r6, pc}

0800aaf8 <__smakebuf_r>:
 800aaf8:	898b      	ldrh	r3, [r1, #12]
 800aafa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aafc:	079d      	lsls	r5, r3, #30
 800aafe:	4606      	mov	r6, r0
 800ab00:	460c      	mov	r4, r1
 800ab02:	d507      	bpl.n	800ab14 <__smakebuf_r+0x1c>
 800ab04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab08:	6023      	str	r3, [r4, #0]
 800ab0a:	6123      	str	r3, [r4, #16]
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	6163      	str	r3, [r4, #20]
 800ab10:	b002      	add	sp, #8
 800ab12:	bd70      	pop	{r4, r5, r6, pc}
 800ab14:	ab01      	add	r3, sp, #4
 800ab16:	466a      	mov	r2, sp
 800ab18:	f7ff ffc9 	bl	800aaae <__swhatbuf_r>
 800ab1c:	9900      	ldr	r1, [sp, #0]
 800ab1e:	4605      	mov	r5, r0
 800ab20:	4630      	mov	r0, r6
 800ab22:	f000 fc45 	bl	800b3b0 <_malloc_r>
 800ab26:	b948      	cbnz	r0, 800ab3c <__smakebuf_r+0x44>
 800ab28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab2c:	059a      	lsls	r2, r3, #22
 800ab2e:	d4ef      	bmi.n	800ab10 <__smakebuf_r+0x18>
 800ab30:	f023 0303 	bic.w	r3, r3, #3
 800ab34:	f043 0302 	orr.w	r3, r3, #2
 800ab38:	81a3      	strh	r3, [r4, #12]
 800ab3a:	e7e3      	b.n	800ab04 <__smakebuf_r+0xc>
 800ab3c:	4b0d      	ldr	r3, [pc, #52]	; (800ab74 <__smakebuf_r+0x7c>)
 800ab3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab40:	89a3      	ldrh	r3, [r4, #12]
 800ab42:	6020      	str	r0, [r4, #0]
 800ab44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab48:	81a3      	strh	r3, [r4, #12]
 800ab4a:	9b00      	ldr	r3, [sp, #0]
 800ab4c:	6163      	str	r3, [r4, #20]
 800ab4e:	9b01      	ldr	r3, [sp, #4]
 800ab50:	6120      	str	r0, [r4, #16]
 800ab52:	b15b      	cbz	r3, 800ab6c <__smakebuf_r+0x74>
 800ab54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f000 ffe3 	bl	800bb24 <_isatty_r>
 800ab5e:	b128      	cbz	r0, 800ab6c <__smakebuf_r+0x74>
 800ab60:	89a3      	ldrh	r3, [r4, #12]
 800ab62:	f023 0303 	bic.w	r3, r3, #3
 800ab66:	f043 0301 	orr.w	r3, r3, #1
 800ab6a:	81a3      	strh	r3, [r4, #12]
 800ab6c:	89a0      	ldrh	r0, [r4, #12]
 800ab6e:	4305      	orrs	r5, r0
 800ab70:	81a5      	strh	r5, [r4, #12]
 800ab72:	e7cd      	b.n	800ab10 <__smakebuf_r+0x18>
 800ab74:	0800a8d9 	.word	0x0800a8d9

0800ab78 <malloc>:
 800ab78:	4b02      	ldr	r3, [pc, #8]	; (800ab84 <malloc+0xc>)
 800ab7a:	4601      	mov	r1, r0
 800ab7c:	6818      	ldr	r0, [r3, #0]
 800ab7e:	f000 bc17 	b.w	800b3b0 <_malloc_r>
 800ab82:	bf00      	nop
 800ab84:	200000a8 	.word	0x200000a8

0800ab88 <memcpy>:
 800ab88:	440a      	add	r2, r1
 800ab8a:	4291      	cmp	r1, r2
 800ab8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab90:	d100      	bne.n	800ab94 <memcpy+0xc>
 800ab92:	4770      	bx	lr
 800ab94:	b510      	push	{r4, lr}
 800ab96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab9e:	4291      	cmp	r1, r2
 800aba0:	d1f9      	bne.n	800ab96 <memcpy+0xe>
 800aba2:	bd10      	pop	{r4, pc}

0800aba4 <_Balloc>:
 800aba4:	b570      	push	{r4, r5, r6, lr}
 800aba6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aba8:	4604      	mov	r4, r0
 800abaa:	460d      	mov	r5, r1
 800abac:	b976      	cbnz	r6, 800abcc <_Balloc+0x28>
 800abae:	2010      	movs	r0, #16
 800abb0:	f7ff ffe2 	bl	800ab78 <malloc>
 800abb4:	4602      	mov	r2, r0
 800abb6:	6260      	str	r0, [r4, #36]	; 0x24
 800abb8:	b920      	cbnz	r0, 800abc4 <_Balloc+0x20>
 800abba:	4b18      	ldr	r3, [pc, #96]	; (800ac1c <_Balloc+0x78>)
 800abbc:	4818      	ldr	r0, [pc, #96]	; (800ac20 <_Balloc+0x7c>)
 800abbe:	2166      	movs	r1, #102	; 0x66
 800abc0:	f7fe ff0a 	bl	80099d8 <__assert_func>
 800abc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abc8:	6006      	str	r6, [r0, #0]
 800abca:	60c6      	str	r6, [r0, #12]
 800abcc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800abce:	68f3      	ldr	r3, [r6, #12]
 800abd0:	b183      	cbz	r3, 800abf4 <_Balloc+0x50>
 800abd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abda:	b9b8      	cbnz	r0, 800ac0c <_Balloc+0x68>
 800abdc:	2101      	movs	r1, #1
 800abde:	fa01 f605 	lsl.w	r6, r1, r5
 800abe2:	1d72      	adds	r2, r6, #5
 800abe4:	0092      	lsls	r2, r2, #2
 800abe6:	4620      	mov	r0, r4
 800abe8:	f000 fb60 	bl	800b2ac <_calloc_r>
 800abec:	b160      	cbz	r0, 800ac08 <_Balloc+0x64>
 800abee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abf2:	e00e      	b.n	800ac12 <_Balloc+0x6e>
 800abf4:	2221      	movs	r2, #33	; 0x21
 800abf6:	2104      	movs	r1, #4
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 fb57 	bl	800b2ac <_calloc_r>
 800abfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac00:	60f0      	str	r0, [r6, #12]
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1e4      	bne.n	800abd2 <_Balloc+0x2e>
 800ac08:	2000      	movs	r0, #0
 800ac0a:	bd70      	pop	{r4, r5, r6, pc}
 800ac0c:	6802      	ldr	r2, [r0, #0]
 800ac0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac12:	2300      	movs	r3, #0
 800ac14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac18:	e7f7      	b.n	800ac0a <_Balloc+0x66>
 800ac1a:	bf00      	nop
 800ac1c:	0800bfe0 	.word	0x0800bfe0
 800ac20:	0800c26c 	.word	0x0800c26c

0800ac24 <_Bfree>:
 800ac24:	b570      	push	{r4, r5, r6, lr}
 800ac26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac28:	4605      	mov	r5, r0
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	b976      	cbnz	r6, 800ac4c <_Bfree+0x28>
 800ac2e:	2010      	movs	r0, #16
 800ac30:	f7ff ffa2 	bl	800ab78 <malloc>
 800ac34:	4602      	mov	r2, r0
 800ac36:	6268      	str	r0, [r5, #36]	; 0x24
 800ac38:	b920      	cbnz	r0, 800ac44 <_Bfree+0x20>
 800ac3a:	4b09      	ldr	r3, [pc, #36]	; (800ac60 <_Bfree+0x3c>)
 800ac3c:	4809      	ldr	r0, [pc, #36]	; (800ac64 <_Bfree+0x40>)
 800ac3e:	218a      	movs	r1, #138	; 0x8a
 800ac40:	f7fe feca 	bl	80099d8 <__assert_func>
 800ac44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac48:	6006      	str	r6, [r0, #0]
 800ac4a:	60c6      	str	r6, [r0, #12]
 800ac4c:	b13c      	cbz	r4, 800ac5e <_Bfree+0x3a>
 800ac4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac50:	6862      	ldr	r2, [r4, #4]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac58:	6021      	str	r1, [r4, #0]
 800ac5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac5e:	bd70      	pop	{r4, r5, r6, pc}
 800ac60:	0800bfe0 	.word	0x0800bfe0
 800ac64:	0800c26c 	.word	0x0800c26c

0800ac68 <__multadd>:
 800ac68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac6c:	690d      	ldr	r5, [r1, #16]
 800ac6e:	4607      	mov	r7, r0
 800ac70:	460c      	mov	r4, r1
 800ac72:	461e      	mov	r6, r3
 800ac74:	f101 0c14 	add.w	ip, r1, #20
 800ac78:	2000      	movs	r0, #0
 800ac7a:	f8dc 3000 	ldr.w	r3, [ip]
 800ac7e:	b299      	uxth	r1, r3
 800ac80:	fb02 6101 	mla	r1, r2, r1, r6
 800ac84:	0c1e      	lsrs	r6, r3, #16
 800ac86:	0c0b      	lsrs	r3, r1, #16
 800ac88:	fb02 3306 	mla	r3, r2, r6, r3
 800ac8c:	b289      	uxth	r1, r1
 800ac8e:	3001      	adds	r0, #1
 800ac90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac94:	4285      	cmp	r5, r0
 800ac96:	f84c 1b04 	str.w	r1, [ip], #4
 800ac9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac9e:	dcec      	bgt.n	800ac7a <__multadd+0x12>
 800aca0:	b30e      	cbz	r6, 800ace6 <__multadd+0x7e>
 800aca2:	68a3      	ldr	r3, [r4, #8]
 800aca4:	42ab      	cmp	r3, r5
 800aca6:	dc19      	bgt.n	800acdc <__multadd+0x74>
 800aca8:	6861      	ldr	r1, [r4, #4]
 800acaa:	4638      	mov	r0, r7
 800acac:	3101      	adds	r1, #1
 800acae:	f7ff ff79 	bl	800aba4 <_Balloc>
 800acb2:	4680      	mov	r8, r0
 800acb4:	b928      	cbnz	r0, 800acc2 <__multadd+0x5a>
 800acb6:	4602      	mov	r2, r0
 800acb8:	4b0c      	ldr	r3, [pc, #48]	; (800acec <__multadd+0x84>)
 800acba:	480d      	ldr	r0, [pc, #52]	; (800acf0 <__multadd+0x88>)
 800acbc:	21b5      	movs	r1, #181	; 0xb5
 800acbe:	f7fe fe8b 	bl	80099d8 <__assert_func>
 800acc2:	6922      	ldr	r2, [r4, #16]
 800acc4:	3202      	adds	r2, #2
 800acc6:	f104 010c 	add.w	r1, r4, #12
 800acca:	0092      	lsls	r2, r2, #2
 800accc:	300c      	adds	r0, #12
 800acce:	f7ff ff5b 	bl	800ab88 <memcpy>
 800acd2:	4621      	mov	r1, r4
 800acd4:	4638      	mov	r0, r7
 800acd6:	f7ff ffa5 	bl	800ac24 <_Bfree>
 800acda:	4644      	mov	r4, r8
 800acdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ace0:	3501      	adds	r5, #1
 800ace2:	615e      	str	r6, [r3, #20]
 800ace4:	6125      	str	r5, [r4, #16]
 800ace6:	4620      	mov	r0, r4
 800ace8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acec:	0800c1f9 	.word	0x0800c1f9
 800acf0:	0800c26c 	.word	0x0800c26c

0800acf4 <__hi0bits>:
 800acf4:	0c03      	lsrs	r3, r0, #16
 800acf6:	041b      	lsls	r3, r3, #16
 800acf8:	b9d3      	cbnz	r3, 800ad30 <__hi0bits+0x3c>
 800acfa:	0400      	lsls	r0, r0, #16
 800acfc:	2310      	movs	r3, #16
 800acfe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad02:	bf04      	itt	eq
 800ad04:	0200      	lsleq	r0, r0, #8
 800ad06:	3308      	addeq	r3, #8
 800ad08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad0c:	bf04      	itt	eq
 800ad0e:	0100      	lsleq	r0, r0, #4
 800ad10:	3304      	addeq	r3, #4
 800ad12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad16:	bf04      	itt	eq
 800ad18:	0080      	lsleq	r0, r0, #2
 800ad1a:	3302      	addeq	r3, #2
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	db05      	blt.n	800ad2c <__hi0bits+0x38>
 800ad20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad24:	f103 0301 	add.w	r3, r3, #1
 800ad28:	bf08      	it	eq
 800ad2a:	2320      	moveq	r3, #32
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	4770      	bx	lr
 800ad30:	2300      	movs	r3, #0
 800ad32:	e7e4      	b.n	800acfe <__hi0bits+0xa>

0800ad34 <__lo0bits>:
 800ad34:	6803      	ldr	r3, [r0, #0]
 800ad36:	f013 0207 	ands.w	r2, r3, #7
 800ad3a:	4601      	mov	r1, r0
 800ad3c:	d00b      	beq.n	800ad56 <__lo0bits+0x22>
 800ad3e:	07da      	lsls	r2, r3, #31
 800ad40:	d423      	bmi.n	800ad8a <__lo0bits+0x56>
 800ad42:	0798      	lsls	r0, r3, #30
 800ad44:	bf49      	itett	mi
 800ad46:	085b      	lsrmi	r3, r3, #1
 800ad48:	089b      	lsrpl	r3, r3, #2
 800ad4a:	2001      	movmi	r0, #1
 800ad4c:	600b      	strmi	r3, [r1, #0]
 800ad4e:	bf5c      	itt	pl
 800ad50:	600b      	strpl	r3, [r1, #0]
 800ad52:	2002      	movpl	r0, #2
 800ad54:	4770      	bx	lr
 800ad56:	b298      	uxth	r0, r3
 800ad58:	b9a8      	cbnz	r0, 800ad86 <__lo0bits+0x52>
 800ad5a:	0c1b      	lsrs	r3, r3, #16
 800ad5c:	2010      	movs	r0, #16
 800ad5e:	b2da      	uxtb	r2, r3
 800ad60:	b90a      	cbnz	r2, 800ad66 <__lo0bits+0x32>
 800ad62:	3008      	adds	r0, #8
 800ad64:	0a1b      	lsrs	r3, r3, #8
 800ad66:	071a      	lsls	r2, r3, #28
 800ad68:	bf04      	itt	eq
 800ad6a:	091b      	lsreq	r3, r3, #4
 800ad6c:	3004      	addeq	r0, #4
 800ad6e:	079a      	lsls	r2, r3, #30
 800ad70:	bf04      	itt	eq
 800ad72:	089b      	lsreq	r3, r3, #2
 800ad74:	3002      	addeq	r0, #2
 800ad76:	07da      	lsls	r2, r3, #31
 800ad78:	d403      	bmi.n	800ad82 <__lo0bits+0x4e>
 800ad7a:	085b      	lsrs	r3, r3, #1
 800ad7c:	f100 0001 	add.w	r0, r0, #1
 800ad80:	d005      	beq.n	800ad8e <__lo0bits+0x5a>
 800ad82:	600b      	str	r3, [r1, #0]
 800ad84:	4770      	bx	lr
 800ad86:	4610      	mov	r0, r2
 800ad88:	e7e9      	b.n	800ad5e <__lo0bits+0x2a>
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	4770      	bx	lr
 800ad8e:	2020      	movs	r0, #32
 800ad90:	4770      	bx	lr
	...

0800ad94 <__i2b>:
 800ad94:	b510      	push	{r4, lr}
 800ad96:	460c      	mov	r4, r1
 800ad98:	2101      	movs	r1, #1
 800ad9a:	f7ff ff03 	bl	800aba4 <_Balloc>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	b928      	cbnz	r0, 800adae <__i2b+0x1a>
 800ada2:	4b05      	ldr	r3, [pc, #20]	; (800adb8 <__i2b+0x24>)
 800ada4:	4805      	ldr	r0, [pc, #20]	; (800adbc <__i2b+0x28>)
 800ada6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800adaa:	f7fe fe15 	bl	80099d8 <__assert_func>
 800adae:	2301      	movs	r3, #1
 800adb0:	6144      	str	r4, [r0, #20]
 800adb2:	6103      	str	r3, [r0, #16]
 800adb4:	bd10      	pop	{r4, pc}
 800adb6:	bf00      	nop
 800adb8:	0800c1f9 	.word	0x0800c1f9
 800adbc:	0800c26c 	.word	0x0800c26c

0800adc0 <__multiply>:
 800adc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc4:	4691      	mov	r9, r2
 800adc6:	690a      	ldr	r2, [r1, #16]
 800adc8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adcc:	429a      	cmp	r2, r3
 800adce:	bfb8      	it	lt
 800add0:	460b      	movlt	r3, r1
 800add2:	460c      	mov	r4, r1
 800add4:	bfbc      	itt	lt
 800add6:	464c      	movlt	r4, r9
 800add8:	4699      	movlt	r9, r3
 800adda:	6927      	ldr	r7, [r4, #16]
 800addc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ade0:	68a3      	ldr	r3, [r4, #8]
 800ade2:	6861      	ldr	r1, [r4, #4]
 800ade4:	eb07 060a 	add.w	r6, r7, sl
 800ade8:	42b3      	cmp	r3, r6
 800adea:	b085      	sub	sp, #20
 800adec:	bfb8      	it	lt
 800adee:	3101      	addlt	r1, #1
 800adf0:	f7ff fed8 	bl	800aba4 <_Balloc>
 800adf4:	b930      	cbnz	r0, 800ae04 <__multiply+0x44>
 800adf6:	4602      	mov	r2, r0
 800adf8:	4b44      	ldr	r3, [pc, #272]	; (800af0c <__multiply+0x14c>)
 800adfa:	4845      	ldr	r0, [pc, #276]	; (800af10 <__multiply+0x150>)
 800adfc:	f240 115d 	movw	r1, #349	; 0x15d
 800ae00:	f7fe fdea 	bl	80099d8 <__assert_func>
 800ae04:	f100 0514 	add.w	r5, r0, #20
 800ae08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae0c:	462b      	mov	r3, r5
 800ae0e:	2200      	movs	r2, #0
 800ae10:	4543      	cmp	r3, r8
 800ae12:	d321      	bcc.n	800ae58 <__multiply+0x98>
 800ae14:	f104 0314 	add.w	r3, r4, #20
 800ae18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae1c:	f109 0314 	add.w	r3, r9, #20
 800ae20:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae24:	9202      	str	r2, [sp, #8]
 800ae26:	1b3a      	subs	r2, r7, r4
 800ae28:	3a15      	subs	r2, #21
 800ae2a:	f022 0203 	bic.w	r2, r2, #3
 800ae2e:	3204      	adds	r2, #4
 800ae30:	f104 0115 	add.w	r1, r4, #21
 800ae34:	428f      	cmp	r7, r1
 800ae36:	bf38      	it	cc
 800ae38:	2204      	movcc	r2, #4
 800ae3a:	9201      	str	r2, [sp, #4]
 800ae3c:	9a02      	ldr	r2, [sp, #8]
 800ae3e:	9303      	str	r3, [sp, #12]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d80c      	bhi.n	800ae5e <__multiply+0x9e>
 800ae44:	2e00      	cmp	r6, #0
 800ae46:	dd03      	ble.n	800ae50 <__multiply+0x90>
 800ae48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d05a      	beq.n	800af06 <__multiply+0x146>
 800ae50:	6106      	str	r6, [r0, #16]
 800ae52:	b005      	add	sp, #20
 800ae54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae58:	f843 2b04 	str.w	r2, [r3], #4
 800ae5c:	e7d8      	b.n	800ae10 <__multiply+0x50>
 800ae5e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae62:	f1ba 0f00 	cmp.w	sl, #0
 800ae66:	d024      	beq.n	800aeb2 <__multiply+0xf2>
 800ae68:	f104 0e14 	add.w	lr, r4, #20
 800ae6c:	46a9      	mov	r9, r5
 800ae6e:	f04f 0c00 	mov.w	ip, #0
 800ae72:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae76:	f8d9 1000 	ldr.w	r1, [r9]
 800ae7a:	fa1f fb82 	uxth.w	fp, r2
 800ae7e:	b289      	uxth	r1, r1
 800ae80:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae88:	f8d9 2000 	ldr.w	r2, [r9]
 800ae8c:	4461      	add	r1, ip
 800ae8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae92:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae9a:	b289      	uxth	r1, r1
 800ae9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aea0:	4577      	cmp	r7, lr
 800aea2:	f849 1b04 	str.w	r1, [r9], #4
 800aea6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aeaa:	d8e2      	bhi.n	800ae72 <__multiply+0xb2>
 800aeac:	9a01      	ldr	r2, [sp, #4]
 800aeae:	f845 c002 	str.w	ip, [r5, r2]
 800aeb2:	9a03      	ldr	r2, [sp, #12]
 800aeb4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aeb8:	3304      	adds	r3, #4
 800aeba:	f1b9 0f00 	cmp.w	r9, #0
 800aebe:	d020      	beq.n	800af02 <__multiply+0x142>
 800aec0:	6829      	ldr	r1, [r5, #0]
 800aec2:	f104 0c14 	add.w	ip, r4, #20
 800aec6:	46ae      	mov	lr, r5
 800aec8:	f04f 0a00 	mov.w	sl, #0
 800aecc:	f8bc b000 	ldrh.w	fp, [ip]
 800aed0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aed4:	fb09 220b 	mla	r2, r9, fp, r2
 800aed8:	4492      	add	sl, r2
 800aeda:	b289      	uxth	r1, r1
 800aedc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aee0:	f84e 1b04 	str.w	r1, [lr], #4
 800aee4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aee8:	f8be 1000 	ldrh.w	r1, [lr]
 800aeec:	0c12      	lsrs	r2, r2, #16
 800aeee:	fb09 1102 	mla	r1, r9, r2, r1
 800aef2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aef6:	4567      	cmp	r7, ip
 800aef8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aefc:	d8e6      	bhi.n	800aecc <__multiply+0x10c>
 800aefe:	9a01      	ldr	r2, [sp, #4]
 800af00:	50a9      	str	r1, [r5, r2]
 800af02:	3504      	adds	r5, #4
 800af04:	e79a      	b.n	800ae3c <__multiply+0x7c>
 800af06:	3e01      	subs	r6, #1
 800af08:	e79c      	b.n	800ae44 <__multiply+0x84>
 800af0a:	bf00      	nop
 800af0c:	0800c1f9 	.word	0x0800c1f9
 800af10:	0800c26c 	.word	0x0800c26c

0800af14 <__pow5mult>:
 800af14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af18:	4615      	mov	r5, r2
 800af1a:	f012 0203 	ands.w	r2, r2, #3
 800af1e:	4606      	mov	r6, r0
 800af20:	460f      	mov	r7, r1
 800af22:	d007      	beq.n	800af34 <__pow5mult+0x20>
 800af24:	4c25      	ldr	r4, [pc, #148]	; (800afbc <__pow5mult+0xa8>)
 800af26:	3a01      	subs	r2, #1
 800af28:	2300      	movs	r3, #0
 800af2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af2e:	f7ff fe9b 	bl	800ac68 <__multadd>
 800af32:	4607      	mov	r7, r0
 800af34:	10ad      	asrs	r5, r5, #2
 800af36:	d03d      	beq.n	800afb4 <__pow5mult+0xa0>
 800af38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af3a:	b97c      	cbnz	r4, 800af5c <__pow5mult+0x48>
 800af3c:	2010      	movs	r0, #16
 800af3e:	f7ff fe1b 	bl	800ab78 <malloc>
 800af42:	4602      	mov	r2, r0
 800af44:	6270      	str	r0, [r6, #36]	; 0x24
 800af46:	b928      	cbnz	r0, 800af54 <__pow5mult+0x40>
 800af48:	4b1d      	ldr	r3, [pc, #116]	; (800afc0 <__pow5mult+0xac>)
 800af4a:	481e      	ldr	r0, [pc, #120]	; (800afc4 <__pow5mult+0xb0>)
 800af4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af50:	f7fe fd42 	bl	80099d8 <__assert_func>
 800af54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af58:	6004      	str	r4, [r0, #0]
 800af5a:	60c4      	str	r4, [r0, #12]
 800af5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af64:	b94c      	cbnz	r4, 800af7a <__pow5mult+0x66>
 800af66:	f240 2171 	movw	r1, #625	; 0x271
 800af6a:	4630      	mov	r0, r6
 800af6c:	f7ff ff12 	bl	800ad94 <__i2b>
 800af70:	2300      	movs	r3, #0
 800af72:	f8c8 0008 	str.w	r0, [r8, #8]
 800af76:	4604      	mov	r4, r0
 800af78:	6003      	str	r3, [r0, #0]
 800af7a:	f04f 0900 	mov.w	r9, #0
 800af7e:	07eb      	lsls	r3, r5, #31
 800af80:	d50a      	bpl.n	800af98 <__pow5mult+0x84>
 800af82:	4639      	mov	r1, r7
 800af84:	4622      	mov	r2, r4
 800af86:	4630      	mov	r0, r6
 800af88:	f7ff ff1a 	bl	800adc0 <__multiply>
 800af8c:	4639      	mov	r1, r7
 800af8e:	4680      	mov	r8, r0
 800af90:	4630      	mov	r0, r6
 800af92:	f7ff fe47 	bl	800ac24 <_Bfree>
 800af96:	4647      	mov	r7, r8
 800af98:	106d      	asrs	r5, r5, #1
 800af9a:	d00b      	beq.n	800afb4 <__pow5mult+0xa0>
 800af9c:	6820      	ldr	r0, [r4, #0]
 800af9e:	b938      	cbnz	r0, 800afb0 <__pow5mult+0x9c>
 800afa0:	4622      	mov	r2, r4
 800afa2:	4621      	mov	r1, r4
 800afa4:	4630      	mov	r0, r6
 800afa6:	f7ff ff0b 	bl	800adc0 <__multiply>
 800afaa:	6020      	str	r0, [r4, #0]
 800afac:	f8c0 9000 	str.w	r9, [r0]
 800afb0:	4604      	mov	r4, r0
 800afb2:	e7e4      	b.n	800af7e <__pow5mult+0x6a>
 800afb4:	4638      	mov	r0, r7
 800afb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afba:	bf00      	nop
 800afbc:	0800c3b8 	.word	0x0800c3b8
 800afc0:	0800bfe0 	.word	0x0800bfe0
 800afc4:	0800c26c 	.word	0x0800c26c

0800afc8 <__lshift>:
 800afc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afcc:	460c      	mov	r4, r1
 800afce:	6849      	ldr	r1, [r1, #4]
 800afd0:	6923      	ldr	r3, [r4, #16]
 800afd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afd6:	68a3      	ldr	r3, [r4, #8]
 800afd8:	4607      	mov	r7, r0
 800afda:	4691      	mov	r9, r2
 800afdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afe0:	f108 0601 	add.w	r6, r8, #1
 800afe4:	42b3      	cmp	r3, r6
 800afe6:	db0b      	blt.n	800b000 <__lshift+0x38>
 800afe8:	4638      	mov	r0, r7
 800afea:	f7ff fddb 	bl	800aba4 <_Balloc>
 800afee:	4605      	mov	r5, r0
 800aff0:	b948      	cbnz	r0, 800b006 <__lshift+0x3e>
 800aff2:	4602      	mov	r2, r0
 800aff4:	4b2a      	ldr	r3, [pc, #168]	; (800b0a0 <__lshift+0xd8>)
 800aff6:	482b      	ldr	r0, [pc, #172]	; (800b0a4 <__lshift+0xdc>)
 800aff8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800affc:	f7fe fcec 	bl	80099d8 <__assert_func>
 800b000:	3101      	adds	r1, #1
 800b002:	005b      	lsls	r3, r3, #1
 800b004:	e7ee      	b.n	800afe4 <__lshift+0x1c>
 800b006:	2300      	movs	r3, #0
 800b008:	f100 0114 	add.w	r1, r0, #20
 800b00c:	f100 0210 	add.w	r2, r0, #16
 800b010:	4618      	mov	r0, r3
 800b012:	4553      	cmp	r3, sl
 800b014:	db37      	blt.n	800b086 <__lshift+0xbe>
 800b016:	6920      	ldr	r0, [r4, #16]
 800b018:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b01c:	f104 0314 	add.w	r3, r4, #20
 800b020:	f019 091f 	ands.w	r9, r9, #31
 800b024:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b028:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b02c:	d02f      	beq.n	800b08e <__lshift+0xc6>
 800b02e:	f1c9 0e20 	rsb	lr, r9, #32
 800b032:	468a      	mov	sl, r1
 800b034:	f04f 0c00 	mov.w	ip, #0
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	fa02 f209 	lsl.w	r2, r2, r9
 800b03e:	ea42 020c 	orr.w	r2, r2, ip
 800b042:	f84a 2b04 	str.w	r2, [sl], #4
 800b046:	f853 2b04 	ldr.w	r2, [r3], #4
 800b04a:	4298      	cmp	r0, r3
 800b04c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b050:	d8f2      	bhi.n	800b038 <__lshift+0x70>
 800b052:	1b03      	subs	r3, r0, r4
 800b054:	3b15      	subs	r3, #21
 800b056:	f023 0303 	bic.w	r3, r3, #3
 800b05a:	3304      	adds	r3, #4
 800b05c:	f104 0215 	add.w	r2, r4, #21
 800b060:	4290      	cmp	r0, r2
 800b062:	bf38      	it	cc
 800b064:	2304      	movcc	r3, #4
 800b066:	f841 c003 	str.w	ip, [r1, r3]
 800b06a:	f1bc 0f00 	cmp.w	ip, #0
 800b06e:	d001      	beq.n	800b074 <__lshift+0xac>
 800b070:	f108 0602 	add.w	r6, r8, #2
 800b074:	3e01      	subs	r6, #1
 800b076:	4638      	mov	r0, r7
 800b078:	612e      	str	r6, [r5, #16]
 800b07a:	4621      	mov	r1, r4
 800b07c:	f7ff fdd2 	bl	800ac24 <_Bfree>
 800b080:	4628      	mov	r0, r5
 800b082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b086:	f842 0f04 	str.w	r0, [r2, #4]!
 800b08a:	3301      	adds	r3, #1
 800b08c:	e7c1      	b.n	800b012 <__lshift+0x4a>
 800b08e:	3904      	subs	r1, #4
 800b090:	f853 2b04 	ldr.w	r2, [r3], #4
 800b094:	f841 2f04 	str.w	r2, [r1, #4]!
 800b098:	4298      	cmp	r0, r3
 800b09a:	d8f9      	bhi.n	800b090 <__lshift+0xc8>
 800b09c:	e7ea      	b.n	800b074 <__lshift+0xac>
 800b09e:	bf00      	nop
 800b0a0:	0800c1f9 	.word	0x0800c1f9
 800b0a4:	0800c26c 	.word	0x0800c26c

0800b0a8 <__mcmp>:
 800b0a8:	b530      	push	{r4, r5, lr}
 800b0aa:	6902      	ldr	r2, [r0, #16]
 800b0ac:	690c      	ldr	r4, [r1, #16]
 800b0ae:	1b12      	subs	r2, r2, r4
 800b0b0:	d10e      	bne.n	800b0d0 <__mcmp+0x28>
 800b0b2:	f100 0314 	add.w	r3, r0, #20
 800b0b6:	3114      	adds	r1, #20
 800b0b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b0c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0c8:	42a5      	cmp	r5, r4
 800b0ca:	d003      	beq.n	800b0d4 <__mcmp+0x2c>
 800b0cc:	d305      	bcc.n	800b0da <__mcmp+0x32>
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	bd30      	pop	{r4, r5, pc}
 800b0d4:	4283      	cmp	r3, r0
 800b0d6:	d3f3      	bcc.n	800b0c0 <__mcmp+0x18>
 800b0d8:	e7fa      	b.n	800b0d0 <__mcmp+0x28>
 800b0da:	f04f 32ff 	mov.w	r2, #4294967295
 800b0de:	e7f7      	b.n	800b0d0 <__mcmp+0x28>

0800b0e0 <__mdiff>:
 800b0e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e4:	460c      	mov	r4, r1
 800b0e6:	4606      	mov	r6, r0
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	4690      	mov	r8, r2
 800b0ee:	f7ff ffdb 	bl	800b0a8 <__mcmp>
 800b0f2:	1e05      	subs	r5, r0, #0
 800b0f4:	d110      	bne.n	800b118 <__mdiff+0x38>
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	f7ff fd53 	bl	800aba4 <_Balloc>
 800b0fe:	b930      	cbnz	r0, 800b10e <__mdiff+0x2e>
 800b100:	4b3a      	ldr	r3, [pc, #232]	; (800b1ec <__mdiff+0x10c>)
 800b102:	4602      	mov	r2, r0
 800b104:	f240 2132 	movw	r1, #562	; 0x232
 800b108:	4839      	ldr	r0, [pc, #228]	; (800b1f0 <__mdiff+0x110>)
 800b10a:	f7fe fc65 	bl	80099d8 <__assert_func>
 800b10e:	2301      	movs	r3, #1
 800b110:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b114:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b118:	bfa4      	itt	ge
 800b11a:	4643      	movge	r3, r8
 800b11c:	46a0      	movge	r8, r4
 800b11e:	4630      	mov	r0, r6
 800b120:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b124:	bfa6      	itte	ge
 800b126:	461c      	movge	r4, r3
 800b128:	2500      	movge	r5, #0
 800b12a:	2501      	movlt	r5, #1
 800b12c:	f7ff fd3a 	bl	800aba4 <_Balloc>
 800b130:	b920      	cbnz	r0, 800b13c <__mdiff+0x5c>
 800b132:	4b2e      	ldr	r3, [pc, #184]	; (800b1ec <__mdiff+0x10c>)
 800b134:	4602      	mov	r2, r0
 800b136:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b13a:	e7e5      	b.n	800b108 <__mdiff+0x28>
 800b13c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b140:	6926      	ldr	r6, [r4, #16]
 800b142:	60c5      	str	r5, [r0, #12]
 800b144:	f104 0914 	add.w	r9, r4, #20
 800b148:	f108 0514 	add.w	r5, r8, #20
 800b14c:	f100 0e14 	add.w	lr, r0, #20
 800b150:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b154:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b158:	f108 0210 	add.w	r2, r8, #16
 800b15c:	46f2      	mov	sl, lr
 800b15e:	2100      	movs	r1, #0
 800b160:	f859 3b04 	ldr.w	r3, [r9], #4
 800b164:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b168:	fa1f f883 	uxth.w	r8, r3
 800b16c:	fa11 f18b 	uxtah	r1, r1, fp
 800b170:	0c1b      	lsrs	r3, r3, #16
 800b172:	eba1 0808 	sub.w	r8, r1, r8
 800b176:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b17a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b17e:	fa1f f888 	uxth.w	r8, r8
 800b182:	1419      	asrs	r1, r3, #16
 800b184:	454e      	cmp	r6, r9
 800b186:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b18a:	f84a 3b04 	str.w	r3, [sl], #4
 800b18e:	d8e7      	bhi.n	800b160 <__mdiff+0x80>
 800b190:	1b33      	subs	r3, r6, r4
 800b192:	3b15      	subs	r3, #21
 800b194:	f023 0303 	bic.w	r3, r3, #3
 800b198:	3304      	adds	r3, #4
 800b19a:	3415      	adds	r4, #21
 800b19c:	42a6      	cmp	r6, r4
 800b19e:	bf38      	it	cc
 800b1a0:	2304      	movcc	r3, #4
 800b1a2:	441d      	add	r5, r3
 800b1a4:	4473      	add	r3, lr
 800b1a6:	469e      	mov	lr, r3
 800b1a8:	462e      	mov	r6, r5
 800b1aa:	4566      	cmp	r6, ip
 800b1ac:	d30e      	bcc.n	800b1cc <__mdiff+0xec>
 800b1ae:	f10c 0203 	add.w	r2, ip, #3
 800b1b2:	1b52      	subs	r2, r2, r5
 800b1b4:	f022 0203 	bic.w	r2, r2, #3
 800b1b8:	3d03      	subs	r5, #3
 800b1ba:	45ac      	cmp	ip, r5
 800b1bc:	bf38      	it	cc
 800b1be:	2200      	movcc	r2, #0
 800b1c0:	441a      	add	r2, r3
 800b1c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b1c6:	b17b      	cbz	r3, 800b1e8 <__mdiff+0x108>
 800b1c8:	6107      	str	r7, [r0, #16]
 800b1ca:	e7a3      	b.n	800b114 <__mdiff+0x34>
 800b1cc:	f856 8b04 	ldr.w	r8, [r6], #4
 800b1d0:	fa11 f288 	uxtah	r2, r1, r8
 800b1d4:	1414      	asrs	r4, r2, #16
 800b1d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1da:	b292      	uxth	r2, r2
 800b1dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b1e0:	f84e 2b04 	str.w	r2, [lr], #4
 800b1e4:	1421      	asrs	r1, r4, #16
 800b1e6:	e7e0      	b.n	800b1aa <__mdiff+0xca>
 800b1e8:	3f01      	subs	r7, #1
 800b1ea:	e7ea      	b.n	800b1c2 <__mdiff+0xe2>
 800b1ec:	0800c1f9 	.word	0x0800c1f9
 800b1f0:	0800c26c 	.word	0x0800c26c

0800b1f4 <__d2b>:
 800b1f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1f8:	4689      	mov	r9, r1
 800b1fa:	2101      	movs	r1, #1
 800b1fc:	ec57 6b10 	vmov	r6, r7, d0
 800b200:	4690      	mov	r8, r2
 800b202:	f7ff fccf 	bl	800aba4 <_Balloc>
 800b206:	4604      	mov	r4, r0
 800b208:	b930      	cbnz	r0, 800b218 <__d2b+0x24>
 800b20a:	4602      	mov	r2, r0
 800b20c:	4b25      	ldr	r3, [pc, #148]	; (800b2a4 <__d2b+0xb0>)
 800b20e:	4826      	ldr	r0, [pc, #152]	; (800b2a8 <__d2b+0xb4>)
 800b210:	f240 310a 	movw	r1, #778	; 0x30a
 800b214:	f7fe fbe0 	bl	80099d8 <__assert_func>
 800b218:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b21c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b220:	bb35      	cbnz	r5, 800b270 <__d2b+0x7c>
 800b222:	2e00      	cmp	r6, #0
 800b224:	9301      	str	r3, [sp, #4]
 800b226:	d028      	beq.n	800b27a <__d2b+0x86>
 800b228:	4668      	mov	r0, sp
 800b22a:	9600      	str	r6, [sp, #0]
 800b22c:	f7ff fd82 	bl	800ad34 <__lo0bits>
 800b230:	9900      	ldr	r1, [sp, #0]
 800b232:	b300      	cbz	r0, 800b276 <__d2b+0x82>
 800b234:	9a01      	ldr	r2, [sp, #4]
 800b236:	f1c0 0320 	rsb	r3, r0, #32
 800b23a:	fa02 f303 	lsl.w	r3, r2, r3
 800b23e:	430b      	orrs	r3, r1
 800b240:	40c2      	lsrs	r2, r0
 800b242:	6163      	str	r3, [r4, #20]
 800b244:	9201      	str	r2, [sp, #4]
 800b246:	9b01      	ldr	r3, [sp, #4]
 800b248:	61a3      	str	r3, [r4, #24]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	bf14      	ite	ne
 800b24e:	2202      	movne	r2, #2
 800b250:	2201      	moveq	r2, #1
 800b252:	6122      	str	r2, [r4, #16]
 800b254:	b1d5      	cbz	r5, 800b28c <__d2b+0x98>
 800b256:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b25a:	4405      	add	r5, r0
 800b25c:	f8c9 5000 	str.w	r5, [r9]
 800b260:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b264:	f8c8 0000 	str.w	r0, [r8]
 800b268:	4620      	mov	r0, r4
 800b26a:	b003      	add	sp, #12
 800b26c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b270:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b274:	e7d5      	b.n	800b222 <__d2b+0x2e>
 800b276:	6161      	str	r1, [r4, #20]
 800b278:	e7e5      	b.n	800b246 <__d2b+0x52>
 800b27a:	a801      	add	r0, sp, #4
 800b27c:	f7ff fd5a 	bl	800ad34 <__lo0bits>
 800b280:	9b01      	ldr	r3, [sp, #4]
 800b282:	6163      	str	r3, [r4, #20]
 800b284:	2201      	movs	r2, #1
 800b286:	6122      	str	r2, [r4, #16]
 800b288:	3020      	adds	r0, #32
 800b28a:	e7e3      	b.n	800b254 <__d2b+0x60>
 800b28c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b290:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b294:	f8c9 0000 	str.w	r0, [r9]
 800b298:	6918      	ldr	r0, [r3, #16]
 800b29a:	f7ff fd2b 	bl	800acf4 <__hi0bits>
 800b29e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2a2:	e7df      	b.n	800b264 <__d2b+0x70>
 800b2a4:	0800c1f9 	.word	0x0800c1f9
 800b2a8:	0800c26c 	.word	0x0800c26c

0800b2ac <_calloc_r>:
 800b2ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2ae:	fba1 2402 	umull	r2, r4, r1, r2
 800b2b2:	b94c      	cbnz	r4, 800b2c8 <_calloc_r+0x1c>
 800b2b4:	4611      	mov	r1, r2
 800b2b6:	9201      	str	r2, [sp, #4]
 800b2b8:	f000 f87a 	bl	800b3b0 <_malloc_r>
 800b2bc:	9a01      	ldr	r2, [sp, #4]
 800b2be:	4605      	mov	r5, r0
 800b2c0:	b930      	cbnz	r0, 800b2d0 <_calloc_r+0x24>
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	b003      	add	sp, #12
 800b2c6:	bd30      	pop	{r4, r5, pc}
 800b2c8:	220c      	movs	r2, #12
 800b2ca:	6002      	str	r2, [r0, #0]
 800b2cc:	2500      	movs	r5, #0
 800b2ce:	e7f8      	b.n	800b2c2 <_calloc_r+0x16>
 800b2d0:	4621      	mov	r1, r4
 800b2d2:	f7fd fcb9 	bl	8008c48 <memset>
 800b2d6:	e7f4      	b.n	800b2c2 <_calloc_r+0x16>

0800b2d8 <_free_r>:
 800b2d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2da:	2900      	cmp	r1, #0
 800b2dc:	d044      	beq.n	800b368 <_free_r+0x90>
 800b2de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2e2:	9001      	str	r0, [sp, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f1a1 0404 	sub.w	r4, r1, #4
 800b2ea:	bfb8      	it	lt
 800b2ec:	18e4      	addlt	r4, r4, r3
 800b2ee:	f000 fc67 	bl	800bbc0 <__malloc_lock>
 800b2f2:	4a1e      	ldr	r2, [pc, #120]	; (800b36c <_free_r+0x94>)
 800b2f4:	9801      	ldr	r0, [sp, #4]
 800b2f6:	6813      	ldr	r3, [r2, #0]
 800b2f8:	b933      	cbnz	r3, 800b308 <_free_r+0x30>
 800b2fa:	6063      	str	r3, [r4, #4]
 800b2fc:	6014      	str	r4, [r2, #0]
 800b2fe:	b003      	add	sp, #12
 800b300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b304:	f000 bc62 	b.w	800bbcc <__malloc_unlock>
 800b308:	42a3      	cmp	r3, r4
 800b30a:	d908      	bls.n	800b31e <_free_r+0x46>
 800b30c:	6825      	ldr	r5, [r4, #0]
 800b30e:	1961      	adds	r1, r4, r5
 800b310:	428b      	cmp	r3, r1
 800b312:	bf01      	itttt	eq
 800b314:	6819      	ldreq	r1, [r3, #0]
 800b316:	685b      	ldreq	r3, [r3, #4]
 800b318:	1949      	addeq	r1, r1, r5
 800b31a:	6021      	streq	r1, [r4, #0]
 800b31c:	e7ed      	b.n	800b2fa <_free_r+0x22>
 800b31e:	461a      	mov	r2, r3
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	b10b      	cbz	r3, 800b328 <_free_r+0x50>
 800b324:	42a3      	cmp	r3, r4
 800b326:	d9fa      	bls.n	800b31e <_free_r+0x46>
 800b328:	6811      	ldr	r1, [r2, #0]
 800b32a:	1855      	adds	r5, r2, r1
 800b32c:	42a5      	cmp	r5, r4
 800b32e:	d10b      	bne.n	800b348 <_free_r+0x70>
 800b330:	6824      	ldr	r4, [r4, #0]
 800b332:	4421      	add	r1, r4
 800b334:	1854      	adds	r4, r2, r1
 800b336:	42a3      	cmp	r3, r4
 800b338:	6011      	str	r1, [r2, #0]
 800b33a:	d1e0      	bne.n	800b2fe <_free_r+0x26>
 800b33c:	681c      	ldr	r4, [r3, #0]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	6053      	str	r3, [r2, #4]
 800b342:	4421      	add	r1, r4
 800b344:	6011      	str	r1, [r2, #0]
 800b346:	e7da      	b.n	800b2fe <_free_r+0x26>
 800b348:	d902      	bls.n	800b350 <_free_r+0x78>
 800b34a:	230c      	movs	r3, #12
 800b34c:	6003      	str	r3, [r0, #0]
 800b34e:	e7d6      	b.n	800b2fe <_free_r+0x26>
 800b350:	6825      	ldr	r5, [r4, #0]
 800b352:	1961      	adds	r1, r4, r5
 800b354:	428b      	cmp	r3, r1
 800b356:	bf04      	itt	eq
 800b358:	6819      	ldreq	r1, [r3, #0]
 800b35a:	685b      	ldreq	r3, [r3, #4]
 800b35c:	6063      	str	r3, [r4, #4]
 800b35e:	bf04      	itt	eq
 800b360:	1949      	addeq	r1, r1, r5
 800b362:	6021      	streq	r1, [r4, #0]
 800b364:	6054      	str	r4, [r2, #4]
 800b366:	e7ca      	b.n	800b2fe <_free_r+0x26>
 800b368:	b003      	add	sp, #12
 800b36a:	bd30      	pop	{r4, r5, pc}
 800b36c:	20000480 	.word	0x20000480

0800b370 <sbrk_aligned>:
 800b370:	b570      	push	{r4, r5, r6, lr}
 800b372:	4e0e      	ldr	r6, [pc, #56]	; (800b3ac <sbrk_aligned+0x3c>)
 800b374:	460c      	mov	r4, r1
 800b376:	6831      	ldr	r1, [r6, #0]
 800b378:	4605      	mov	r5, r0
 800b37a:	b911      	cbnz	r1, 800b382 <sbrk_aligned+0x12>
 800b37c:	f000 fb42 	bl	800ba04 <_sbrk_r>
 800b380:	6030      	str	r0, [r6, #0]
 800b382:	4621      	mov	r1, r4
 800b384:	4628      	mov	r0, r5
 800b386:	f000 fb3d 	bl	800ba04 <_sbrk_r>
 800b38a:	1c43      	adds	r3, r0, #1
 800b38c:	d00a      	beq.n	800b3a4 <sbrk_aligned+0x34>
 800b38e:	1cc4      	adds	r4, r0, #3
 800b390:	f024 0403 	bic.w	r4, r4, #3
 800b394:	42a0      	cmp	r0, r4
 800b396:	d007      	beq.n	800b3a8 <sbrk_aligned+0x38>
 800b398:	1a21      	subs	r1, r4, r0
 800b39a:	4628      	mov	r0, r5
 800b39c:	f000 fb32 	bl	800ba04 <_sbrk_r>
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d101      	bne.n	800b3a8 <sbrk_aligned+0x38>
 800b3a4:	f04f 34ff 	mov.w	r4, #4294967295
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	bd70      	pop	{r4, r5, r6, pc}
 800b3ac:	20000484 	.word	0x20000484

0800b3b0 <_malloc_r>:
 800b3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b4:	1ccd      	adds	r5, r1, #3
 800b3b6:	f025 0503 	bic.w	r5, r5, #3
 800b3ba:	3508      	adds	r5, #8
 800b3bc:	2d0c      	cmp	r5, #12
 800b3be:	bf38      	it	cc
 800b3c0:	250c      	movcc	r5, #12
 800b3c2:	2d00      	cmp	r5, #0
 800b3c4:	4607      	mov	r7, r0
 800b3c6:	db01      	blt.n	800b3cc <_malloc_r+0x1c>
 800b3c8:	42a9      	cmp	r1, r5
 800b3ca:	d905      	bls.n	800b3d8 <_malloc_r+0x28>
 800b3cc:	230c      	movs	r3, #12
 800b3ce:	603b      	str	r3, [r7, #0]
 800b3d0:	2600      	movs	r6, #0
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d8:	4e2e      	ldr	r6, [pc, #184]	; (800b494 <_malloc_r+0xe4>)
 800b3da:	f000 fbf1 	bl	800bbc0 <__malloc_lock>
 800b3de:	6833      	ldr	r3, [r6, #0]
 800b3e0:	461c      	mov	r4, r3
 800b3e2:	bb34      	cbnz	r4, 800b432 <_malloc_r+0x82>
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	4638      	mov	r0, r7
 800b3e8:	f7ff ffc2 	bl	800b370 <sbrk_aligned>
 800b3ec:	1c43      	adds	r3, r0, #1
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	d14d      	bne.n	800b48e <_malloc_r+0xde>
 800b3f2:	6834      	ldr	r4, [r6, #0]
 800b3f4:	4626      	mov	r6, r4
 800b3f6:	2e00      	cmp	r6, #0
 800b3f8:	d140      	bne.n	800b47c <_malloc_r+0xcc>
 800b3fa:	6823      	ldr	r3, [r4, #0]
 800b3fc:	4631      	mov	r1, r6
 800b3fe:	4638      	mov	r0, r7
 800b400:	eb04 0803 	add.w	r8, r4, r3
 800b404:	f000 fafe 	bl	800ba04 <_sbrk_r>
 800b408:	4580      	cmp	r8, r0
 800b40a:	d13a      	bne.n	800b482 <_malloc_r+0xd2>
 800b40c:	6821      	ldr	r1, [r4, #0]
 800b40e:	3503      	adds	r5, #3
 800b410:	1a6d      	subs	r5, r5, r1
 800b412:	f025 0503 	bic.w	r5, r5, #3
 800b416:	3508      	adds	r5, #8
 800b418:	2d0c      	cmp	r5, #12
 800b41a:	bf38      	it	cc
 800b41c:	250c      	movcc	r5, #12
 800b41e:	4629      	mov	r1, r5
 800b420:	4638      	mov	r0, r7
 800b422:	f7ff ffa5 	bl	800b370 <sbrk_aligned>
 800b426:	3001      	adds	r0, #1
 800b428:	d02b      	beq.n	800b482 <_malloc_r+0xd2>
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	442b      	add	r3, r5
 800b42e:	6023      	str	r3, [r4, #0]
 800b430:	e00e      	b.n	800b450 <_malloc_r+0xa0>
 800b432:	6822      	ldr	r2, [r4, #0]
 800b434:	1b52      	subs	r2, r2, r5
 800b436:	d41e      	bmi.n	800b476 <_malloc_r+0xc6>
 800b438:	2a0b      	cmp	r2, #11
 800b43a:	d916      	bls.n	800b46a <_malloc_r+0xba>
 800b43c:	1961      	adds	r1, r4, r5
 800b43e:	42a3      	cmp	r3, r4
 800b440:	6025      	str	r5, [r4, #0]
 800b442:	bf18      	it	ne
 800b444:	6059      	strne	r1, [r3, #4]
 800b446:	6863      	ldr	r3, [r4, #4]
 800b448:	bf08      	it	eq
 800b44a:	6031      	streq	r1, [r6, #0]
 800b44c:	5162      	str	r2, [r4, r5]
 800b44e:	604b      	str	r3, [r1, #4]
 800b450:	4638      	mov	r0, r7
 800b452:	f104 060b 	add.w	r6, r4, #11
 800b456:	f000 fbb9 	bl	800bbcc <__malloc_unlock>
 800b45a:	f026 0607 	bic.w	r6, r6, #7
 800b45e:	1d23      	adds	r3, r4, #4
 800b460:	1af2      	subs	r2, r6, r3
 800b462:	d0b6      	beq.n	800b3d2 <_malloc_r+0x22>
 800b464:	1b9b      	subs	r3, r3, r6
 800b466:	50a3      	str	r3, [r4, r2]
 800b468:	e7b3      	b.n	800b3d2 <_malloc_r+0x22>
 800b46a:	6862      	ldr	r2, [r4, #4]
 800b46c:	42a3      	cmp	r3, r4
 800b46e:	bf0c      	ite	eq
 800b470:	6032      	streq	r2, [r6, #0]
 800b472:	605a      	strne	r2, [r3, #4]
 800b474:	e7ec      	b.n	800b450 <_malloc_r+0xa0>
 800b476:	4623      	mov	r3, r4
 800b478:	6864      	ldr	r4, [r4, #4]
 800b47a:	e7b2      	b.n	800b3e2 <_malloc_r+0x32>
 800b47c:	4634      	mov	r4, r6
 800b47e:	6876      	ldr	r6, [r6, #4]
 800b480:	e7b9      	b.n	800b3f6 <_malloc_r+0x46>
 800b482:	230c      	movs	r3, #12
 800b484:	603b      	str	r3, [r7, #0]
 800b486:	4638      	mov	r0, r7
 800b488:	f000 fba0 	bl	800bbcc <__malloc_unlock>
 800b48c:	e7a1      	b.n	800b3d2 <_malloc_r+0x22>
 800b48e:	6025      	str	r5, [r4, #0]
 800b490:	e7de      	b.n	800b450 <_malloc_r+0xa0>
 800b492:	bf00      	nop
 800b494:	20000480 	.word	0x20000480

0800b498 <__ssputs_r>:
 800b498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b49c:	688e      	ldr	r6, [r1, #8]
 800b49e:	429e      	cmp	r6, r3
 800b4a0:	4682      	mov	sl, r0
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	4690      	mov	r8, r2
 800b4a6:	461f      	mov	r7, r3
 800b4a8:	d838      	bhi.n	800b51c <__ssputs_r+0x84>
 800b4aa:	898a      	ldrh	r2, [r1, #12]
 800b4ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4b0:	d032      	beq.n	800b518 <__ssputs_r+0x80>
 800b4b2:	6825      	ldr	r5, [r4, #0]
 800b4b4:	6909      	ldr	r1, [r1, #16]
 800b4b6:	eba5 0901 	sub.w	r9, r5, r1
 800b4ba:	6965      	ldr	r5, [r4, #20]
 800b4bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	444b      	add	r3, r9
 800b4c8:	106d      	asrs	r5, r5, #1
 800b4ca:	429d      	cmp	r5, r3
 800b4cc:	bf38      	it	cc
 800b4ce:	461d      	movcc	r5, r3
 800b4d0:	0553      	lsls	r3, r2, #21
 800b4d2:	d531      	bpl.n	800b538 <__ssputs_r+0xa0>
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	f7ff ff6b 	bl	800b3b0 <_malloc_r>
 800b4da:	4606      	mov	r6, r0
 800b4dc:	b950      	cbnz	r0, 800b4f4 <__ssputs_r+0x5c>
 800b4de:	230c      	movs	r3, #12
 800b4e0:	f8ca 3000 	str.w	r3, [sl]
 800b4e4:	89a3      	ldrh	r3, [r4, #12]
 800b4e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4ea:	81a3      	strh	r3, [r4, #12]
 800b4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f4:	6921      	ldr	r1, [r4, #16]
 800b4f6:	464a      	mov	r2, r9
 800b4f8:	f7ff fb46 	bl	800ab88 <memcpy>
 800b4fc:	89a3      	ldrh	r3, [r4, #12]
 800b4fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b506:	81a3      	strh	r3, [r4, #12]
 800b508:	6126      	str	r6, [r4, #16]
 800b50a:	6165      	str	r5, [r4, #20]
 800b50c:	444e      	add	r6, r9
 800b50e:	eba5 0509 	sub.w	r5, r5, r9
 800b512:	6026      	str	r6, [r4, #0]
 800b514:	60a5      	str	r5, [r4, #8]
 800b516:	463e      	mov	r6, r7
 800b518:	42be      	cmp	r6, r7
 800b51a:	d900      	bls.n	800b51e <__ssputs_r+0x86>
 800b51c:	463e      	mov	r6, r7
 800b51e:	6820      	ldr	r0, [r4, #0]
 800b520:	4632      	mov	r2, r6
 800b522:	4641      	mov	r1, r8
 800b524:	f000 fb32 	bl	800bb8c <memmove>
 800b528:	68a3      	ldr	r3, [r4, #8]
 800b52a:	1b9b      	subs	r3, r3, r6
 800b52c:	60a3      	str	r3, [r4, #8]
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	4433      	add	r3, r6
 800b532:	6023      	str	r3, [r4, #0]
 800b534:	2000      	movs	r0, #0
 800b536:	e7db      	b.n	800b4f0 <__ssputs_r+0x58>
 800b538:	462a      	mov	r2, r5
 800b53a:	f000 fb4d 	bl	800bbd8 <_realloc_r>
 800b53e:	4606      	mov	r6, r0
 800b540:	2800      	cmp	r0, #0
 800b542:	d1e1      	bne.n	800b508 <__ssputs_r+0x70>
 800b544:	6921      	ldr	r1, [r4, #16]
 800b546:	4650      	mov	r0, sl
 800b548:	f7ff fec6 	bl	800b2d8 <_free_r>
 800b54c:	e7c7      	b.n	800b4de <__ssputs_r+0x46>
	...

0800b550 <_svfiprintf_r>:
 800b550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b554:	4698      	mov	r8, r3
 800b556:	898b      	ldrh	r3, [r1, #12]
 800b558:	061b      	lsls	r3, r3, #24
 800b55a:	b09d      	sub	sp, #116	; 0x74
 800b55c:	4607      	mov	r7, r0
 800b55e:	460d      	mov	r5, r1
 800b560:	4614      	mov	r4, r2
 800b562:	d50e      	bpl.n	800b582 <_svfiprintf_r+0x32>
 800b564:	690b      	ldr	r3, [r1, #16]
 800b566:	b963      	cbnz	r3, 800b582 <_svfiprintf_r+0x32>
 800b568:	2140      	movs	r1, #64	; 0x40
 800b56a:	f7ff ff21 	bl	800b3b0 <_malloc_r>
 800b56e:	6028      	str	r0, [r5, #0]
 800b570:	6128      	str	r0, [r5, #16]
 800b572:	b920      	cbnz	r0, 800b57e <_svfiprintf_r+0x2e>
 800b574:	230c      	movs	r3, #12
 800b576:	603b      	str	r3, [r7, #0]
 800b578:	f04f 30ff 	mov.w	r0, #4294967295
 800b57c:	e0d1      	b.n	800b722 <_svfiprintf_r+0x1d2>
 800b57e:	2340      	movs	r3, #64	; 0x40
 800b580:	616b      	str	r3, [r5, #20]
 800b582:	2300      	movs	r3, #0
 800b584:	9309      	str	r3, [sp, #36]	; 0x24
 800b586:	2320      	movs	r3, #32
 800b588:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b58c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b590:	2330      	movs	r3, #48	; 0x30
 800b592:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b73c <_svfiprintf_r+0x1ec>
 800b596:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b59a:	f04f 0901 	mov.w	r9, #1
 800b59e:	4623      	mov	r3, r4
 800b5a0:	469a      	mov	sl, r3
 800b5a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5a6:	b10a      	cbz	r2, 800b5ac <_svfiprintf_r+0x5c>
 800b5a8:	2a25      	cmp	r2, #37	; 0x25
 800b5aa:	d1f9      	bne.n	800b5a0 <_svfiprintf_r+0x50>
 800b5ac:	ebba 0b04 	subs.w	fp, sl, r4
 800b5b0:	d00b      	beq.n	800b5ca <_svfiprintf_r+0x7a>
 800b5b2:	465b      	mov	r3, fp
 800b5b4:	4622      	mov	r2, r4
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	4638      	mov	r0, r7
 800b5ba:	f7ff ff6d 	bl	800b498 <__ssputs_r>
 800b5be:	3001      	adds	r0, #1
 800b5c0:	f000 80aa 	beq.w	800b718 <_svfiprintf_r+0x1c8>
 800b5c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5c6:	445a      	add	r2, fp
 800b5c8:	9209      	str	r2, [sp, #36]	; 0x24
 800b5ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f000 80a2 	beq.w	800b718 <_svfiprintf_r+0x1c8>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5de:	f10a 0a01 	add.w	sl, sl, #1
 800b5e2:	9304      	str	r3, [sp, #16]
 800b5e4:	9307      	str	r3, [sp, #28]
 800b5e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5ea:	931a      	str	r3, [sp, #104]	; 0x68
 800b5ec:	4654      	mov	r4, sl
 800b5ee:	2205      	movs	r2, #5
 800b5f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5f4:	4851      	ldr	r0, [pc, #324]	; (800b73c <_svfiprintf_r+0x1ec>)
 800b5f6:	f7f4 fe2b 	bl	8000250 <memchr>
 800b5fa:	9a04      	ldr	r2, [sp, #16]
 800b5fc:	b9d8      	cbnz	r0, 800b636 <_svfiprintf_r+0xe6>
 800b5fe:	06d0      	lsls	r0, r2, #27
 800b600:	bf44      	itt	mi
 800b602:	2320      	movmi	r3, #32
 800b604:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b608:	0711      	lsls	r1, r2, #28
 800b60a:	bf44      	itt	mi
 800b60c:	232b      	movmi	r3, #43	; 0x2b
 800b60e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b612:	f89a 3000 	ldrb.w	r3, [sl]
 800b616:	2b2a      	cmp	r3, #42	; 0x2a
 800b618:	d015      	beq.n	800b646 <_svfiprintf_r+0xf6>
 800b61a:	9a07      	ldr	r2, [sp, #28]
 800b61c:	4654      	mov	r4, sl
 800b61e:	2000      	movs	r0, #0
 800b620:	f04f 0c0a 	mov.w	ip, #10
 800b624:	4621      	mov	r1, r4
 800b626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b62a:	3b30      	subs	r3, #48	; 0x30
 800b62c:	2b09      	cmp	r3, #9
 800b62e:	d94e      	bls.n	800b6ce <_svfiprintf_r+0x17e>
 800b630:	b1b0      	cbz	r0, 800b660 <_svfiprintf_r+0x110>
 800b632:	9207      	str	r2, [sp, #28]
 800b634:	e014      	b.n	800b660 <_svfiprintf_r+0x110>
 800b636:	eba0 0308 	sub.w	r3, r0, r8
 800b63a:	fa09 f303 	lsl.w	r3, r9, r3
 800b63e:	4313      	orrs	r3, r2
 800b640:	9304      	str	r3, [sp, #16]
 800b642:	46a2      	mov	sl, r4
 800b644:	e7d2      	b.n	800b5ec <_svfiprintf_r+0x9c>
 800b646:	9b03      	ldr	r3, [sp, #12]
 800b648:	1d19      	adds	r1, r3, #4
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	9103      	str	r1, [sp, #12]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	bfbb      	ittet	lt
 800b652:	425b      	neglt	r3, r3
 800b654:	f042 0202 	orrlt.w	r2, r2, #2
 800b658:	9307      	strge	r3, [sp, #28]
 800b65a:	9307      	strlt	r3, [sp, #28]
 800b65c:	bfb8      	it	lt
 800b65e:	9204      	strlt	r2, [sp, #16]
 800b660:	7823      	ldrb	r3, [r4, #0]
 800b662:	2b2e      	cmp	r3, #46	; 0x2e
 800b664:	d10c      	bne.n	800b680 <_svfiprintf_r+0x130>
 800b666:	7863      	ldrb	r3, [r4, #1]
 800b668:	2b2a      	cmp	r3, #42	; 0x2a
 800b66a:	d135      	bne.n	800b6d8 <_svfiprintf_r+0x188>
 800b66c:	9b03      	ldr	r3, [sp, #12]
 800b66e:	1d1a      	adds	r2, r3, #4
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	9203      	str	r2, [sp, #12]
 800b674:	2b00      	cmp	r3, #0
 800b676:	bfb8      	it	lt
 800b678:	f04f 33ff 	movlt.w	r3, #4294967295
 800b67c:	3402      	adds	r4, #2
 800b67e:	9305      	str	r3, [sp, #20]
 800b680:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b74c <_svfiprintf_r+0x1fc>
 800b684:	7821      	ldrb	r1, [r4, #0]
 800b686:	2203      	movs	r2, #3
 800b688:	4650      	mov	r0, sl
 800b68a:	f7f4 fde1 	bl	8000250 <memchr>
 800b68e:	b140      	cbz	r0, 800b6a2 <_svfiprintf_r+0x152>
 800b690:	2340      	movs	r3, #64	; 0x40
 800b692:	eba0 000a 	sub.w	r0, r0, sl
 800b696:	fa03 f000 	lsl.w	r0, r3, r0
 800b69a:	9b04      	ldr	r3, [sp, #16]
 800b69c:	4303      	orrs	r3, r0
 800b69e:	3401      	adds	r4, #1
 800b6a0:	9304      	str	r3, [sp, #16]
 800b6a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6a6:	4826      	ldr	r0, [pc, #152]	; (800b740 <_svfiprintf_r+0x1f0>)
 800b6a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6ac:	2206      	movs	r2, #6
 800b6ae:	f7f4 fdcf 	bl	8000250 <memchr>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d038      	beq.n	800b728 <_svfiprintf_r+0x1d8>
 800b6b6:	4b23      	ldr	r3, [pc, #140]	; (800b744 <_svfiprintf_r+0x1f4>)
 800b6b8:	bb1b      	cbnz	r3, 800b702 <_svfiprintf_r+0x1b2>
 800b6ba:	9b03      	ldr	r3, [sp, #12]
 800b6bc:	3307      	adds	r3, #7
 800b6be:	f023 0307 	bic.w	r3, r3, #7
 800b6c2:	3308      	adds	r3, #8
 800b6c4:	9303      	str	r3, [sp, #12]
 800b6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c8:	4433      	add	r3, r6
 800b6ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b6cc:	e767      	b.n	800b59e <_svfiprintf_r+0x4e>
 800b6ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6d2:	460c      	mov	r4, r1
 800b6d4:	2001      	movs	r0, #1
 800b6d6:	e7a5      	b.n	800b624 <_svfiprintf_r+0xd4>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	3401      	adds	r4, #1
 800b6dc:	9305      	str	r3, [sp, #20]
 800b6de:	4619      	mov	r1, r3
 800b6e0:	f04f 0c0a 	mov.w	ip, #10
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6ea:	3a30      	subs	r2, #48	; 0x30
 800b6ec:	2a09      	cmp	r2, #9
 800b6ee:	d903      	bls.n	800b6f8 <_svfiprintf_r+0x1a8>
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d0c5      	beq.n	800b680 <_svfiprintf_r+0x130>
 800b6f4:	9105      	str	r1, [sp, #20]
 800b6f6:	e7c3      	b.n	800b680 <_svfiprintf_r+0x130>
 800b6f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	2301      	movs	r3, #1
 800b700:	e7f0      	b.n	800b6e4 <_svfiprintf_r+0x194>
 800b702:	ab03      	add	r3, sp, #12
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	462a      	mov	r2, r5
 800b708:	4b0f      	ldr	r3, [pc, #60]	; (800b748 <_svfiprintf_r+0x1f8>)
 800b70a:	a904      	add	r1, sp, #16
 800b70c:	4638      	mov	r0, r7
 800b70e:	f7fd fb43 	bl	8008d98 <_printf_float>
 800b712:	1c42      	adds	r2, r0, #1
 800b714:	4606      	mov	r6, r0
 800b716:	d1d6      	bne.n	800b6c6 <_svfiprintf_r+0x176>
 800b718:	89ab      	ldrh	r3, [r5, #12]
 800b71a:	065b      	lsls	r3, r3, #25
 800b71c:	f53f af2c 	bmi.w	800b578 <_svfiprintf_r+0x28>
 800b720:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b722:	b01d      	add	sp, #116	; 0x74
 800b724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b728:	ab03      	add	r3, sp, #12
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	462a      	mov	r2, r5
 800b72e:	4b06      	ldr	r3, [pc, #24]	; (800b748 <_svfiprintf_r+0x1f8>)
 800b730:	a904      	add	r1, sp, #16
 800b732:	4638      	mov	r0, r7
 800b734:	f7fd fdd4 	bl	80092e0 <_printf_i>
 800b738:	e7eb      	b.n	800b712 <_svfiprintf_r+0x1c2>
 800b73a:	bf00      	nop
 800b73c:	0800c3c4 	.word	0x0800c3c4
 800b740:	0800c3ce 	.word	0x0800c3ce
 800b744:	08008d99 	.word	0x08008d99
 800b748:	0800b499 	.word	0x0800b499
 800b74c:	0800c3ca 	.word	0x0800c3ca

0800b750 <__sfputc_r>:
 800b750:	6893      	ldr	r3, [r2, #8]
 800b752:	3b01      	subs	r3, #1
 800b754:	2b00      	cmp	r3, #0
 800b756:	b410      	push	{r4}
 800b758:	6093      	str	r3, [r2, #8]
 800b75a:	da08      	bge.n	800b76e <__sfputc_r+0x1e>
 800b75c:	6994      	ldr	r4, [r2, #24]
 800b75e:	42a3      	cmp	r3, r4
 800b760:	db01      	blt.n	800b766 <__sfputc_r+0x16>
 800b762:	290a      	cmp	r1, #10
 800b764:	d103      	bne.n	800b76e <__sfputc_r+0x1e>
 800b766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b76a:	f7fe b875 	b.w	8009858 <__swbuf_r>
 800b76e:	6813      	ldr	r3, [r2, #0]
 800b770:	1c58      	adds	r0, r3, #1
 800b772:	6010      	str	r0, [r2, #0]
 800b774:	7019      	strb	r1, [r3, #0]
 800b776:	4608      	mov	r0, r1
 800b778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b77c:	4770      	bx	lr

0800b77e <__sfputs_r>:
 800b77e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b780:	4606      	mov	r6, r0
 800b782:	460f      	mov	r7, r1
 800b784:	4614      	mov	r4, r2
 800b786:	18d5      	adds	r5, r2, r3
 800b788:	42ac      	cmp	r4, r5
 800b78a:	d101      	bne.n	800b790 <__sfputs_r+0x12>
 800b78c:	2000      	movs	r0, #0
 800b78e:	e007      	b.n	800b7a0 <__sfputs_r+0x22>
 800b790:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b794:	463a      	mov	r2, r7
 800b796:	4630      	mov	r0, r6
 800b798:	f7ff ffda 	bl	800b750 <__sfputc_r>
 800b79c:	1c43      	adds	r3, r0, #1
 800b79e:	d1f3      	bne.n	800b788 <__sfputs_r+0xa>
 800b7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b7a4 <_vfiprintf_r>:
 800b7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a8:	460d      	mov	r5, r1
 800b7aa:	b09d      	sub	sp, #116	; 0x74
 800b7ac:	4614      	mov	r4, r2
 800b7ae:	4698      	mov	r8, r3
 800b7b0:	4606      	mov	r6, r0
 800b7b2:	b118      	cbz	r0, 800b7bc <_vfiprintf_r+0x18>
 800b7b4:	6983      	ldr	r3, [r0, #24]
 800b7b6:	b90b      	cbnz	r3, 800b7bc <_vfiprintf_r+0x18>
 800b7b8:	f7ff f8c2 	bl	800a940 <__sinit>
 800b7bc:	4b89      	ldr	r3, [pc, #548]	; (800b9e4 <_vfiprintf_r+0x240>)
 800b7be:	429d      	cmp	r5, r3
 800b7c0:	d11b      	bne.n	800b7fa <_vfiprintf_r+0x56>
 800b7c2:	6875      	ldr	r5, [r6, #4]
 800b7c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7c6:	07d9      	lsls	r1, r3, #31
 800b7c8:	d405      	bmi.n	800b7d6 <_vfiprintf_r+0x32>
 800b7ca:	89ab      	ldrh	r3, [r5, #12]
 800b7cc:	059a      	lsls	r2, r3, #22
 800b7ce:	d402      	bmi.n	800b7d6 <_vfiprintf_r+0x32>
 800b7d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7d2:	f7ff f96a 	bl	800aaaa <__retarget_lock_acquire_recursive>
 800b7d6:	89ab      	ldrh	r3, [r5, #12]
 800b7d8:	071b      	lsls	r3, r3, #28
 800b7da:	d501      	bpl.n	800b7e0 <_vfiprintf_r+0x3c>
 800b7dc:	692b      	ldr	r3, [r5, #16]
 800b7de:	b9eb      	cbnz	r3, 800b81c <_vfiprintf_r+0x78>
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	f7fe f88a 	bl	80098fc <__swsetup_r>
 800b7e8:	b1c0      	cbz	r0, 800b81c <_vfiprintf_r+0x78>
 800b7ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7ec:	07dc      	lsls	r4, r3, #31
 800b7ee:	d50e      	bpl.n	800b80e <_vfiprintf_r+0x6a>
 800b7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f4:	b01d      	add	sp, #116	; 0x74
 800b7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7fa:	4b7b      	ldr	r3, [pc, #492]	; (800b9e8 <_vfiprintf_r+0x244>)
 800b7fc:	429d      	cmp	r5, r3
 800b7fe:	d101      	bne.n	800b804 <_vfiprintf_r+0x60>
 800b800:	68b5      	ldr	r5, [r6, #8]
 800b802:	e7df      	b.n	800b7c4 <_vfiprintf_r+0x20>
 800b804:	4b79      	ldr	r3, [pc, #484]	; (800b9ec <_vfiprintf_r+0x248>)
 800b806:	429d      	cmp	r5, r3
 800b808:	bf08      	it	eq
 800b80a:	68f5      	ldreq	r5, [r6, #12]
 800b80c:	e7da      	b.n	800b7c4 <_vfiprintf_r+0x20>
 800b80e:	89ab      	ldrh	r3, [r5, #12]
 800b810:	0598      	lsls	r0, r3, #22
 800b812:	d4ed      	bmi.n	800b7f0 <_vfiprintf_r+0x4c>
 800b814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b816:	f7ff f949 	bl	800aaac <__retarget_lock_release_recursive>
 800b81a:	e7e9      	b.n	800b7f0 <_vfiprintf_r+0x4c>
 800b81c:	2300      	movs	r3, #0
 800b81e:	9309      	str	r3, [sp, #36]	; 0x24
 800b820:	2320      	movs	r3, #32
 800b822:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b826:	f8cd 800c 	str.w	r8, [sp, #12]
 800b82a:	2330      	movs	r3, #48	; 0x30
 800b82c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b9f0 <_vfiprintf_r+0x24c>
 800b830:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b834:	f04f 0901 	mov.w	r9, #1
 800b838:	4623      	mov	r3, r4
 800b83a:	469a      	mov	sl, r3
 800b83c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b840:	b10a      	cbz	r2, 800b846 <_vfiprintf_r+0xa2>
 800b842:	2a25      	cmp	r2, #37	; 0x25
 800b844:	d1f9      	bne.n	800b83a <_vfiprintf_r+0x96>
 800b846:	ebba 0b04 	subs.w	fp, sl, r4
 800b84a:	d00b      	beq.n	800b864 <_vfiprintf_r+0xc0>
 800b84c:	465b      	mov	r3, fp
 800b84e:	4622      	mov	r2, r4
 800b850:	4629      	mov	r1, r5
 800b852:	4630      	mov	r0, r6
 800b854:	f7ff ff93 	bl	800b77e <__sfputs_r>
 800b858:	3001      	adds	r0, #1
 800b85a:	f000 80aa 	beq.w	800b9b2 <_vfiprintf_r+0x20e>
 800b85e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b860:	445a      	add	r2, fp
 800b862:	9209      	str	r2, [sp, #36]	; 0x24
 800b864:	f89a 3000 	ldrb.w	r3, [sl]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f000 80a2 	beq.w	800b9b2 <_vfiprintf_r+0x20e>
 800b86e:	2300      	movs	r3, #0
 800b870:	f04f 32ff 	mov.w	r2, #4294967295
 800b874:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b878:	f10a 0a01 	add.w	sl, sl, #1
 800b87c:	9304      	str	r3, [sp, #16]
 800b87e:	9307      	str	r3, [sp, #28]
 800b880:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b884:	931a      	str	r3, [sp, #104]	; 0x68
 800b886:	4654      	mov	r4, sl
 800b888:	2205      	movs	r2, #5
 800b88a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b88e:	4858      	ldr	r0, [pc, #352]	; (800b9f0 <_vfiprintf_r+0x24c>)
 800b890:	f7f4 fcde 	bl	8000250 <memchr>
 800b894:	9a04      	ldr	r2, [sp, #16]
 800b896:	b9d8      	cbnz	r0, 800b8d0 <_vfiprintf_r+0x12c>
 800b898:	06d1      	lsls	r1, r2, #27
 800b89a:	bf44      	itt	mi
 800b89c:	2320      	movmi	r3, #32
 800b89e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8a2:	0713      	lsls	r3, r2, #28
 800b8a4:	bf44      	itt	mi
 800b8a6:	232b      	movmi	r3, #43	; 0x2b
 800b8a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b8b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b8b2:	d015      	beq.n	800b8e0 <_vfiprintf_r+0x13c>
 800b8b4:	9a07      	ldr	r2, [sp, #28]
 800b8b6:	4654      	mov	r4, sl
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	f04f 0c0a 	mov.w	ip, #10
 800b8be:	4621      	mov	r1, r4
 800b8c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8c4:	3b30      	subs	r3, #48	; 0x30
 800b8c6:	2b09      	cmp	r3, #9
 800b8c8:	d94e      	bls.n	800b968 <_vfiprintf_r+0x1c4>
 800b8ca:	b1b0      	cbz	r0, 800b8fa <_vfiprintf_r+0x156>
 800b8cc:	9207      	str	r2, [sp, #28]
 800b8ce:	e014      	b.n	800b8fa <_vfiprintf_r+0x156>
 800b8d0:	eba0 0308 	sub.w	r3, r0, r8
 800b8d4:	fa09 f303 	lsl.w	r3, r9, r3
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	9304      	str	r3, [sp, #16]
 800b8dc:	46a2      	mov	sl, r4
 800b8de:	e7d2      	b.n	800b886 <_vfiprintf_r+0xe2>
 800b8e0:	9b03      	ldr	r3, [sp, #12]
 800b8e2:	1d19      	adds	r1, r3, #4
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	9103      	str	r1, [sp, #12]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	bfbb      	ittet	lt
 800b8ec:	425b      	neglt	r3, r3
 800b8ee:	f042 0202 	orrlt.w	r2, r2, #2
 800b8f2:	9307      	strge	r3, [sp, #28]
 800b8f4:	9307      	strlt	r3, [sp, #28]
 800b8f6:	bfb8      	it	lt
 800b8f8:	9204      	strlt	r2, [sp, #16]
 800b8fa:	7823      	ldrb	r3, [r4, #0]
 800b8fc:	2b2e      	cmp	r3, #46	; 0x2e
 800b8fe:	d10c      	bne.n	800b91a <_vfiprintf_r+0x176>
 800b900:	7863      	ldrb	r3, [r4, #1]
 800b902:	2b2a      	cmp	r3, #42	; 0x2a
 800b904:	d135      	bne.n	800b972 <_vfiprintf_r+0x1ce>
 800b906:	9b03      	ldr	r3, [sp, #12]
 800b908:	1d1a      	adds	r2, r3, #4
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	9203      	str	r2, [sp, #12]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	bfb8      	it	lt
 800b912:	f04f 33ff 	movlt.w	r3, #4294967295
 800b916:	3402      	adds	r4, #2
 800b918:	9305      	str	r3, [sp, #20]
 800b91a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba00 <_vfiprintf_r+0x25c>
 800b91e:	7821      	ldrb	r1, [r4, #0]
 800b920:	2203      	movs	r2, #3
 800b922:	4650      	mov	r0, sl
 800b924:	f7f4 fc94 	bl	8000250 <memchr>
 800b928:	b140      	cbz	r0, 800b93c <_vfiprintf_r+0x198>
 800b92a:	2340      	movs	r3, #64	; 0x40
 800b92c:	eba0 000a 	sub.w	r0, r0, sl
 800b930:	fa03 f000 	lsl.w	r0, r3, r0
 800b934:	9b04      	ldr	r3, [sp, #16]
 800b936:	4303      	orrs	r3, r0
 800b938:	3401      	adds	r4, #1
 800b93a:	9304      	str	r3, [sp, #16]
 800b93c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b940:	482c      	ldr	r0, [pc, #176]	; (800b9f4 <_vfiprintf_r+0x250>)
 800b942:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b946:	2206      	movs	r2, #6
 800b948:	f7f4 fc82 	bl	8000250 <memchr>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	d03f      	beq.n	800b9d0 <_vfiprintf_r+0x22c>
 800b950:	4b29      	ldr	r3, [pc, #164]	; (800b9f8 <_vfiprintf_r+0x254>)
 800b952:	bb1b      	cbnz	r3, 800b99c <_vfiprintf_r+0x1f8>
 800b954:	9b03      	ldr	r3, [sp, #12]
 800b956:	3307      	adds	r3, #7
 800b958:	f023 0307 	bic.w	r3, r3, #7
 800b95c:	3308      	adds	r3, #8
 800b95e:	9303      	str	r3, [sp, #12]
 800b960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b962:	443b      	add	r3, r7
 800b964:	9309      	str	r3, [sp, #36]	; 0x24
 800b966:	e767      	b.n	800b838 <_vfiprintf_r+0x94>
 800b968:	fb0c 3202 	mla	r2, ip, r2, r3
 800b96c:	460c      	mov	r4, r1
 800b96e:	2001      	movs	r0, #1
 800b970:	e7a5      	b.n	800b8be <_vfiprintf_r+0x11a>
 800b972:	2300      	movs	r3, #0
 800b974:	3401      	adds	r4, #1
 800b976:	9305      	str	r3, [sp, #20]
 800b978:	4619      	mov	r1, r3
 800b97a:	f04f 0c0a 	mov.w	ip, #10
 800b97e:	4620      	mov	r0, r4
 800b980:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b984:	3a30      	subs	r2, #48	; 0x30
 800b986:	2a09      	cmp	r2, #9
 800b988:	d903      	bls.n	800b992 <_vfiprintf_r+0x1ee>
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d0c5      	beq.n	800b91a <_vfiprintf_r+0x176>
 800b98e:	9105      	str	r1, [sp, #20]
 800b990:	e7c3      	b.n	800b91a <_vfiprintf_r+0x176>
 800b992:	fb0c 2101 	mla	r1, ip, r1, r2
 800b996:	4604      	mov	r4, r0
 800b998:	2301      	movs	r3, #1
 800b99a:	e7f0      	b.n	800b97e <_vfiprintf_r+0x1da>
 800b99c:	ab03      	add	r3, sp, #12
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	462a      	mov	r2, r5
 800b9a2:	4b16      	ldr	r3, [pc, #88]	; (800b9fc <_vfiprintf_r+0x258>)
 800b9a4:	a904      	add	r1, sp, #16
 800b9a6:	4630      	mov	r0, r6
 800b9a8:	f7fd f9f6 	bl	8008d98 <_printf_float>
 800b9ac:	4607      	mov	r7, r0
 800b9ae:	1c78      	adds	r0, r7, #1
 800b9b0:	d1d6      	bne.n	800b960 <_vfiprintf_r+0x1bc>
 800b9b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9b4:	07d9      	lsls	r1, r3, #31
 800b9b6:	d405      	bmi.n	800b9c4 <_vfiprintf_r+0x220>
 800b9b8:	89ab      	ldrh	r3, [r5, #12]
 800b9ba:	059a      	lsls	r2, r3, #22
 800b9bc:	d402      	bmi.n	800b9c4 <_vfiprintf_r+0x220>
 800b9be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9c0:	f7ff f874 	bl	800aaac <__retarget_lock_release_recursive>
 800b9c4:	89ab      	ldrh	r3, [r5, #12]
 800b9c6:	065b      	lsls	r3, r3, #25
 800b9c8:	f53f af12 	bmi.w	800b7f0 <_vfiprintf_r+0x4c>
 800b9cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9ce:	e711      	b.n	800b7f4 <_vfiprintf_r+0x50>
 800b9d0:	ab03      	add	r3, sp, #12
 800b9d2:	9300      	str	r3, [sp, #0]
 800b9d4:	462a      	mov	r2, r5
 800b9d6:	4b09      	ldr	r3, [pc, #36]	; (800b9fc <_vfiprintf_r+0x258>)
 800b9d8:	a904      	add	r1, sp, #16
 800b9da:	4630      	mov	r0, r6
 800b9dc:	f7fd fc80 	bl	80092e0 <_printf_i>
 800b9e0:	e7e4      	b.n	800b9ac <_vfiprintf_r+0x208>
 800b9e2:	bf00      	nop
 800b9e4:	0800c22c 	.word	0x0800c22c
 800b9e8:	0800c24c 	.word	0x0800c24c
 800b9ec:	0800c20c 	.word	0x0800c20c
 800b9f0:	0800c3c4 	.word	0x0800c3c4
 800b9f4:	0800c3ce 	.word	0x0800c3ce
 800b9f8:	08008d99 	.word	0x08008d99
 800b9fc:	0800b77f 	.word	0x0800b77f
 800ba00:	0800c3ca 	.word	0x0800c3ca

0800ba04 <_sbrk_r>:
 800ba04:	b538      	push	{r3, r4, r5, lr}
 800ba06:	4d06      	ldr	r5, [pc, #24]	; (800ba20 <_sbrk_r+0x1c>)
 800ba08:	2300      	movs	r3, #0
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	4608      	mov	r0, r1
 800ba0e:	602b      	str	r3, [r5, #0]
 800ba10:	f7f6 fa60 	bl	8001ed4 <_sbrk>
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	d102      	bne.n	800ba1e <_sbrk_r+0x1a>
 800ba18:	682b      	ldr	r3, [r5, #0]
 800ba1a:	b103      	cbz	r3, 800ba1e <_sbrk_r+0x1a>
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}
 800ba20:	20000488 	.word	0x20000488

0800ba24 <__sread>:
 800ba24:	b510      	push	{r4, lr}
 800ba26:	460c      	mov	r4, r1
 800ba28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba2c:	f000 f904 	bl	800bc38 <_read_r>
 800ba30:	2800      	cmp	r0, #0
 800ba32:	bfab      	itete	ge
 800ba34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba36:	89a3      	ldrhlt	r3, [r4, #12]
 800ba38:	181b      	addge	r3, r3, r0
 800ba3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba3e:	bfac      	ite	ge
 800ba40:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba42:	81a3      	strhlt	r3, [r4, #12]
 800ba44:	bd10      	pop	{r4, pc}

0800ba46 <__swrite>:
 800ba46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4a:	461f      	mov	r7, r3
 800ba4c:	898b      	ldrh	r3, [r1, #12]
 800ba4e:	05db      	lsls	r3, r3, #23
 800ba50:	4605      	mov	r5, r0
 800ba52:	460c      	mov	r4, r1
 800ba54:	4616      	mov	r6, r2
 800ba56:	d505      	bpl.n	800ba64 <__swrite+0x1e>
 800ba58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f000 f870 	bl	800bb44 <_lseek_r>
 800ba64:	89a3      	ldrh	r3, [r4, #12]
 800ba66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba6e:	81a3      	strh	r3, [r4, #12]
 800ba70:	4632      	mov	r2, r6
 800ba72:	463b      	mov	r3, r7
 800ba74:	4628      	mov	r0, r5
 800ba76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba7a:	f000 b817 	b.w	800baac <_write_r>

0800ba7e <__sseek>:
 800ba7e:	b510      	push	{r4, lr}
 800ba80:	460c      	mov	r4, r1
 800ba82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba86:	f000 f85d 	bl	800bb44 <_lseek_r>
 800ba8a:	1c43      	adds	r3, r0, #1
 800ba8c:	89a3      	ldrh	r3, [r4, #12]
 800ba8e:	bf15      	itete	ne
 800ba90:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba9a:	81a3      	strheq	r3, [r4, #12]
 800ba9c:	bf18      	it	ne
 800ba9e:	81a3      	strhne	r3, [r4, #12]
 800baa0:	bd10      	pop	{r4, pc}

0800baa2 <__sclose>:
 800baa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa6:	f000 b81b 	b.w	800bae0 <_close_r>
	...

0800baac <_write_r>:
 800baac:	b538      	push	{r3, r4, r5, lr}
 800baae:	4d07      	ldr	r5, [pc, #28]	; (800bacc <_write_r+0x20>)
 800bab0:	4604      	mov	r4, r0
 800bab2:	4608      	mov	r0, r1
 800bab4:	4611      	mov	r1, r2
 800bab6:	2200      	movs	r2, #0
 800bab8:	602a      	str	r2, [r5, #0]
 800baba:	461a      	mov	r2, r3
 800babc:	f7f6 f9b9 	bl	8001e32 <_write>
 800bac0:	1c43      	adds	r3, r0, #1
 800bac2:	d102      	bne.n	800baca <_write_r+0x1e>
 800bac4:	682b      	ldr	r3, [r5, #0]
 800bac6:	b103      	cbz	r3, 800baca <_write_r+0x1e>
 800bac8:	6023      	str	r3, [r4, #0]
 800baca:	bd38      	pop	{r3, r4, r5, pc}
 800bacc:	20000488 	.word	0x20000488

0800bad0 <abort>:
 800bad0:	b508      	push	{r3, lr}
 800bad2:	2006      	movs	r0, #6
 800bad4:	f000 f8ea 	bl	800bcac <raise>
 800bad8:	2001      	movs	r0, #1
 800bada:	f7f6 f983 	bl	8001de4 <_exit>
	...

0800bae0 <_close_r>:
 800bae0:	b538      	push	{r3, r4, r5, lr}
 800bae2:	4d06      	ldr	r5, [pc, #24]	; (800bafc <_close_r+0x1c>)
 800bae4:	2300      	movs	r3, #0
 800bae6:	4604      	mov	r4, r0
 800bae8:	4608      	mov	r0, r1
 800baea:	602b      	str	r3, [r5, #0]
 800baec:	f7f6 f9bd 	bl	8001e6a <_close>
 800baf0:	1c43      	adds	r3, r0, #1
 800baf2:	d102      	bne.n	800bafa <_close_r+0x1a>
 800baf4:	682b      	ldr	r3, [r5, #0]
 800baf6:	b103      	cbz	r3, 800bafa <_close_r+0x1a>
 800baf8:	6023      	str	r3, [r4, #0]
 800bafa:	bd38      	pop	{r3, r4, r5, pc}
 800bafc:	20000488 	.word	0x20000488

0800bb00 <_fstat_r>:
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	4d07      	ldr	r5, [pc, #28]	; (800bb20 <_fstat_r+0x20>)
 800bb04:	2300      	movs	r3, #0
 800bb06:	4604      	mov	r4, r0
 800bb08:	4608      	mov	r0, r1
 800bb0a:	4611      	mov	r1, r2
 800bb0c:	602b      	str	r3, [r5, #0]
 800bb0e:	f7f6 f9b8 	bl	8001e82 <_fstat>
 800bb12:	1c43      	adds	r3, r0, #1
 800bb14:	d102      	bne.n	800bb1c <_fstat_r+0x1c>
 800bb16:	682b      	ldr	r3, [r5, #0]
 800bb18:	b103      	cbz	r3, 800bb1c <_fstat_r+0x1c>
 800bb1a:	6023      	str	r3, [r4, #0]
 800bb1c:	bd38      	pop	{r3, r4, r5, pc}
 800bb1e:	bf00      	nop
 800bb20:	20000488 	.word	0x20000488

0800bb24 <_isatty_r>:
 800bb24:	b538      	push	{r3, r4, r5, lr}
 800bb26:	4d06      	ldr	r5, [pc, #24]	; (800bb40 <_isatty_r+0x1c>)
 800bb28:	2300      	movs	r3, #0
 800bb2a:	4604      	mov	r4, r0
 800bb2c:	4608      	mov	r0, r1
 800bb2e:	602b      	str	r3, [r5, #0]
 800bb30:	f7f6 f9b7 	bl	8001ea2 <_isatty>
 800bb34:	1c43      	adds	r3, r0, #1
 800bb36:	d102      	bne.n	800bb3e <_isatty_r+0x1a>
 800bb38:	682b      	ldr	r3, [r5, #0]
 800bb3a:	b103      	cbz	r3, 800bb3e <_isatty_r+0x1a>
 800bb3c:	6023      	str	r3, [r4, #0]
 800bb3e:	bd38      	pop	{r3, r4, r5, pc}
 800bb40:	20000488 	.word	0x20000488

0800bb44 <_lseek_r>:
 800bb44:	b538      	push	{r3, r4, r5, lr}
 800bb46:	4d07      	ldr	r5, [pc, #28]	; (800bb64 <_lseek_r+0x20>)
 800bb48:	4604      	mov	r4, r0
 800bb4a:	4608      	mov	r0, r1
 800bb4c:	4611      	mov	r1, r2
 800bb4e:	2200      	movs	r2, #0
 800bb50:	602a      	str	r2, [r5, #0]
 800bb52:	461a      	mov	r2, r3
 800bb54:	f7f6 f9b0 	bl	8001eb8 <_lseek>
 800bb58:	1c43      	adds	r3, r0, #1
 800bb5a:	d102      	bne.n	800bb62 <_lseek_r+0x1e>
 800bb5c:	682b      	ldr	r3, [r5, #0]
 800bb5e:	b103      	cbz	r3, 800bb62 <_lseek_r+0x1e>
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	bd38      	pop	{r3, r4, r5, pc}
 800bb64:	20000488 	.word	0x20000488

0800bb68 <__ascii_mbtowc>:
 800bb68:	b082      	sub	sp, #8
 800bb6a:	b901      	cbnz	r1, 800bb6e <__ascii_mbtowc+0x6>
 800bb6c:	a901      	add	r1, sp, #4
 800bb6e:	b142      	cbz	r2, 800bb82 <__ascii_mbtowc+0x1a>
 800bb70:	b14b      	cbz	r3, 800bb86 <__ascii_mbtowc+0x1e>
 800bb72:	7813      	ldrb	r3, [r2, #0]
 800bb74:	600b      	str	r3, [r1, #0]
 800bb76:	7812      	ldrb	r2, [r2, #0]
 800bb78:	1e10      	subs	r0, r2, #0
 800bb7a:	bf18      	it	ne
 800bb7c:	2001      	movne	r0, #1
 800bb7e:	b002      	add	sp, #8
 800bb80:	4770      	bx	lr
 800bb82:	4610      	mov	r0, r2
 800bb84:	e7fb      	b.n	800bb7e <__ascii_mbtowc+0x16>
 800bb86:	f06f 0001 	mvn.w	r0, #1
 800bb8a:	e7f8      	b.n	800bb7e <__ascii_mbtowc+0x16>

0800bb8c <memmove>:
 800bb8c:	4288      	cmp	r0, r1
 800bb8e:	b510      	push	{r4, lr}
 800bb90:	eb01 0402 	add.w	r4, r1, r2
 800bb94:	d902      	bls.n	800bb9c <memmove+0x10>
 800bb96:	4284      	cmp	r4, r0
 800bb98:	4623      	mov	r3, r4
 800bb9a:	d807      	bhi.n	800bbac <memmove+0x20>
 800bb9c:	1e43      	subs	r3, r0, #1
 800bb9e:	42a1      	cmp	r1, r4
 800bba0:	d008      	beq.n	800bbb4 <memmove+0x28>
 800bba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbaa:	e7f8      	b.n	800bb9e <memmove+0x12>
 800bbac:	4402      	add	r2, r0
 800bbae:	4601      	mov	r1, r0
 800bbb0:	428a      	cmp	r2, r1
 800bbb2:	d100      	bne.n	800bbb6 <memmove+0x2a>
 800bbb4:	bd10      	pop	{r4, pc}
 800bbb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbbe:	e7f7      	b.n	800bbb0 <memmove+0x24>

0800bbc0 <__malloc_lock>:
 800bbc0:	4801      	ldr	r0, [pc, #4]	; (800bbc8 <__malloc_lock+0x8>)
 800bbc2:	f7fe bf72 	b.w	800aaaa <__retarget_lock_acquire_recursive>
 800bbc6:	bf00      	nop
 800bbc8:	2000047c 	.word	0x2000047c

0800bbcc <__malloc_unlock>:
 800bbcc:	4801      	ldr	r0, [pc, #4]	; (800bbd4 <__malloc_unlock+0x8>)
 800bbce:	f7fe bf6d 	b.w	800aaac <__retarget_lock_release_recursive>
 800bbd2:	bf00      	nop
 800bbd4:	2000047c 	.word	0x2000047c

0800bbd8 <_realloc_r>:
 800bbd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbdc:	4680      	mov	r8, r0
 800bbde:	4614      	mov	r4, r2
 800bbe0:	460e      	mov	r6, r1
 800bbe2:	b921      	cbnz	r1, 800bbee <_realloc_r+0x16>
 800bbe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe8:	4611      	mov	r1, r2
 800bbea:	f7ff bbe1 	b.w	800b3b0 <_malloc_r>
 800bbee:	b92a      	cbnz	r2, 800bbfc <_realloc_r+0x24>
 800bbf0:	f7ff fb72 	bl	800b2d8 <_free_r>
 800bbf4:	4625      	mov	r5, r4
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbfc:	f000 f87f 	bl	800bcfe <_malloc_usable_size_r>
 800bc00:	4284      	cmp	r4, r0
 800bc02:	4607      	mov	r7, r0
 800bc04:	d802      	bhi.n	800bc0c <_realloc_r+0x34>
 800bc06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc0a:	d812      	bhi.n	800bc32 <_realloc_r+0x5a>
 800bc0c:	4621      	mov	r1, r4
 800bc0e:	4640      	mov	r0, r8
 800bc10:	f7ff fbce 	bl	800b3b0 <_malloc_r>
 800bc14:	4605      	mov	r5, r0
 800bc16:	2800      	cmp	r0, #0
 800bc18:	d0ed      	beq.n	800bbf6 <_realloc_r+0x1e>
 800bc1a:	42bc      	cmp	r4, r7
 800bc1c:	4622      	mov	r2, r4
 800bc1e:	4631      	mov	r1, r6
 800bc20:	bf28      	it	cs
 800bc22:	463a      	movcs	r2, r7
 800bc24:	f7fe ffb0 	bl	800ab88 <memcpy>
 800bc28:	4631      	mov	r1, r6
 800bc2a:	4640      	mov	r0, r8
 800bc2c:	f7ff fb54 	bl	800b2d8 <_free_r>
 800bc30:	e7e1      	b.n	800bbf6 <_realloc_r+0x1e>
 800bc32:	4635      	mov	r5, r6
 800bc34:	e7df      	b.n	800bbf6 <_realloc_r+0x1e>
	...

0800bc38 <_read_r>:
 800bc38:	b538      	push	{r3, r4, r5, lr}
 800bc3a:	4d07      	ldr	r5, [pc, #28]	; (800bc58 <_read_r+0x20>)
 800bc3c:	4604      	mov	r4, r0
 800bc3e:	4608      	mov	r0, r1
 800bc40:	4611      	mov	r1, r2
 800bc42:	2200      	movs	r2, #0
 800bc44:	602a      	str	r2, [r5, #0]
 800bc46:	461a      	mov	r2, r3
 800bc48:	f7f6 f8d6 	bl	8001df8 <_read>
 800bc4c:	1c43      	adds	r3, r0, #1
 800bc4e:	d102      	bne.n	800bc56 <_read_r+0x1e>
 800bc50:	682b      	ldr	r3, [r5, #0]
 800bc52:	b103      	cbz	r3, 800bc56 <_read_r+0x1e>
 800bc54:	6023      	str	r3, [r4, #0]
 800bc56:	bd38      	pop	{r3, r4, r5, pc}
 800bc58:	20000488 	.word	0x20000488

0800bc5c <_raise_r>:
 800bc5c:	291f      	cmp	r1, #31
 800bc5e:	b538      	push	{r3, r4, r5, lr}
 800bc60:	4604      	mov	r4, r0
 800bc62:	460d      	mov	r5, r1
 800bc64:	d904      	bls.n	800bc70 <_raise_r+0x14>
 800bc66:	2316      	movs	r3, #22
 800bc68:	6003      	str	r3, [r0, #0]
 800bc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc6e:	bd38      	pop	{r3, r4, r5, pc}
 800bc70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc72:	b112      	cbz	r2, 800bc7a <_raise_r+0x1e>
 800bc74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc78:	b94b      	cbnz	r3, 800bc8e <_raise_r+0x32>
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f000 f830 	bl	800bce0 <_getpid_r>
 800bc80:	462a      	mov	r2, r5
 800bc82:	4601      	mov	r1, r0
 800bc84:	4620      	mov	r0, r4
 800bc86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc8a:	f000 b817 	b.w	800bcbc <_kill_r>
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d00a      	beq.n	800bca8 <_raise_r+0x4c>
 800bc92:	1c59      	adds	r1, r3, #1
 800bc94:	d103      	bne.n	800bc9e <_raise_r+0x42>
 800bc96:	2316      	movs	r3, #22
 800bc98:	6003      	str	r3, [r0, #0]
 800bc9a:	2001      	movs	r0, #1
 800bc9c:	e7e7      	b.n	800bc6e <_raise_r+0x12>
 800bc9e:	2400      	movs	r4, #0
 800bca0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bca4:	4628      	mov	r0, r5
 800bca6:	4798      	blx	r3
 800bca8:	2000      	movs	r0, #0
 800bcaa:	e7e0      	b.n	800bc6e <_raise_r+0x12>

0800bcac <raise>:
 800bcac:	4b02      	ldr	r3, [pc, #8]	; (800bcb8 <raise+0xc>)
 800bcae:	4601      	mov	r1, r0
 800bcb0:	6818      	ldr	r0, [r3, #0]
 800bcb2:	f7ff bfd3 	b.w	800bc5c <_raise_r>
 800bcb6:	bf00      	nop
 800bcb8:	200000a8 	.word	0x200000a8

0800bcbc <_kill_r>:
 800bcbc:	b538      	push	{r3, r4, r5, lr}
 800bcbe:	4d07      	ldr	r5, [pc, #28]	; (800bcdc <_kill_r+0x20>)
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	4608      	mov	r0, r1
 800bcc6:	4611      	mov	r1, r2
 800bcc8:	602b      	str	r3, [r5, #0]
 800bcca:	f7f6 f87b 	bl	8001dc4 <_kill>
 800bcce:	1c43      	adds	r3, r0, #1
 800bcd0:	d102      	bne.n	800bcd8 <_kill_r+0x1c>
 800bcd2:	682b      	ldr	r3, [r5, #0]
 800bcd4:	b103      	cbz	r3, 800bcd8 <_kill_r+0x1c>
 800bcd6:	6023      	str	r3, [r4, #0]
 800bcd8:	bd38      	pop	{r3, r4, r5, pc}
 800bcda:	bf00      	nop
 800bcdc:	20000488 	.word	0x20000488

0800bce0 <_getpid_r>:
 800bce0:	f7f6 b868 	b.w	8001db4 <_getpid>

0800bce4 <__ascii_wctomb>:
 800bce4:	b149      	cbz	r1, 800bcfa <__ascii_wctomb+0x16>
 800bce6:	2aff      	cmp	r2, #255	; 0xff
 800bce8:	bf85      	ittet	hi
 800bcea:	238a      	movhi	r3, #138	; 0x8a
 800bcec:	6003      	strhi	r3, [r0, #0]
 800bcee:	700a      	strbls	r2, [r1, #0]
 800bcf0:	f04f 30ff 	movhi.w	r0, #4294967295
 800bcf4:	bf98      	it	ls
 800bcf6:	2001      	movls	r0, #1
 800bcf8:	4770      	bx	lr
 800bcfa:	4608      	mov	r0, r1
 800bcfc:	4770      	bx	lr

0800bcfe <_malloc_usable_size_r>:
 800bcfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd02:	1f18      	subs	r0, r3, #4
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	bfbc      	itt	lt
 800bd08:	580b      	ldrlt	r3, [r1, r0]
 800bd0a:	18c0      	addlt	r0, r0, r3
 800bd0c:	4770      	bx	lr
	...

0800bd10 <_init>:
 800bd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd12:	bf00      	nop
 800bd14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd16:	bc08      	pop	{r3}
 800bd18:	469e      	mov	lr, r3
 800bd1a:	4770      	bx	lr

0800bd1c <_fini>:
 800bd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd1e:	bf00      	nop
 800bd20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd22:	bc08      	pop	{r3}
 800bd24:	469e      	mov	lr, r3
 800bd26:	4770      	bx	lr
