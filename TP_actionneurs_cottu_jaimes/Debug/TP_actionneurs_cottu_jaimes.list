
TP_actionneurs_cottu_jaimes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d08  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08007ee8  08007ee8  00017ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008364  08008364  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08008364  08008364  00018364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800836c  0800836c  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800836c  0800836c  0001836c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008370  08008370  00018370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08008374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000010c  08008480  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08008480  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d66  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000281d  00000000  00000000  00034ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  000376c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  00038810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002762a  00000000  00000000  00039868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001400c  00000000  00000000  00060e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd4ee  00000000  00000000  00074e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017238c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055ac  00000000  00000000  001723dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000010c 	.word	0x2000010c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007ed0 	.word	0x08007ed0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000110 	.word	0x20000110
 800021c:	08007ed0 	.word	0x08007ed0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
  * @brief  The application entry point.
  * Fonction de gestion de l'interface utilisateur : gestion du shell et du traitement des commandes.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09e      	sub	sp, #120	; 0x78
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];		//!< Contient la commande reconstruite apres chaque interruption UART
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 feda 	bl	80013aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f97d 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fb03 	bl	8000c04 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005fe:	f000 f9c5 	bl	800098c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000602:	f000 fab3 	bl	8000b6c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000606:	f000 fa65 	bl	8000ad4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	memset(argv,(int)NULL,MAX_ARGS*sizeof(char*));
 800060a:	463b      	mov	r3, r7
 800060c:	2224      	movs	r2, #36	; 0x24
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f006 f97f 	bl	8006914 <memset>
	memset(cmdBuffer,(int)NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061a:	2240      	movs	r2, #64	; 0x40
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 f978 	bl	8006914 <memset>
 8000624:	4b9b      	ldr	r3, [pc, #620]	; (8000894 <main+0x2b0>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,(int)NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,(int)NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 800062a:	2240      	movs	r2, #64	; 0x40
 800062c:	2100      	movs	r1, #0
 800062e:	489a      	ldr	r0, [pc, #616]	; (8000898 <main+0x2b4>)
 8000630:	f006 f970 	bl	8006914 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000634:	2201      	movs	r2, #1
 8000636:	4997      	ldr	r1, [pc, #604]	; (8000894 <main+0x2b0>)
 8000638:	4898      	ldr	r0, [pc, #608]	; (800089c <main+0x2b8>)
 800063a:	f004 f9ad 	bl	8004998 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 800063e:	200a      	movs	r0, #10
 8000640:	f000 ff24 	bl	800148c <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2266      	movs	r2, #102	; 0x66
 800064a:	4995      	ldr	r1, [pc, #596]	; (80008a0 <main+0x2bc>)
 800064c:	4893      	ldr	r0, [pc, #588]	; (800089c <main+0x2b8>)
 800064e:	f004 f90c 	bl	800486a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	2218      	movs	r2, #24
 8000658:	4992      	ldr	r1, [pc, #584]	; (80008a4 <main+0x2c0>)
 800065a:	4890      	ldr	r0, [pc, #576]	; (800089c <main+0x2b8>)
 800065c:	f004 f905 	bl	800486a <HAL_UART_Transmit>

	//valeur de rapport cyclique initial
	TIM1->CCR1=660;
 8000660:	4b91      	ldr	r3, [pc, #580]	; (80008a8 <main+0x2c4>)
 8000662:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=SPEED_MAX-660;
 8000668:	4b8f      	ldr	r3, [pc, #572]	; (80008a8 <main+0x2c4>)
 800066a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800066e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 8000670:	4b8e      	ldr	r3, [pc, #568]	; (80008ac <main+0x2c8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d056      	beq.n	8000726 <main+0x142>
			switch(uartRxBuffer[0]){
 8000678:	4b86      	ldr	r3, [pc, #536]	; (8000894 <main+0x2b0>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b0d      	cmp	r3, #13
 800067e:	d002      	beq.n	8000686 <main+0xa2>
 8000680:	2b7f      	cmp	r3, #127	; 0x7f
 8000682:	d02d      	beq.n	80006e0 <main+0xfc>
 8000684:	e03c      	b.n	8000700 <main+0x11c>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	2203      	movs	r2, #3
 800068c:	4988      	ldr	r1, [pc, #544]	; (80008b0 <main+0x2cc>)
 800068e:	4883      	ldr	r0, [pc, #524]	; (800089c <main+0x2b8>)
 8000690:	f004 f8eb 	bl	800486a <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 8000694:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000698:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800069a:	4413      	add	r3, r2
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
				argc = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, " ");
 80006a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a8:	4982      	ldr	r1, [pc, #520]	; (80008b4 <main+0x2d0>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f006 f972 	bl	8006994 <strtok>
 80006b0:	66f8      	str	r0, [r7, #108]	; 0x6c
				while(token!=NULL){
 80006b2:	e00d      	b.n	80006d0 <main+0xec>
					argv[argc++] = token;
 80006b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	673a      	str	r2, [r7, #112]	; 0x70
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	3378      	adds	r3, #120	; 0x78
 80006be:	443b      	add	r3, r7
 80006c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80006c2:	f843 2c78 	str.w	r2, [r3, #-120]
					token = strtok(NULL, " ");
 80006c6:	497b      	ldr	r1, [pc, #492]	; (80008b4 <main+0x2d0>)
 80006c8:	2000      	movs	r0, #0
 80006ca:	f006 f963 	bl	8006994 <strtok>
 80006ce:	66f8      	str	r0, [r7, #108]	; 0x6c
				while(token!=NULL){
 80006d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1ee      	bne.n	80006b4 <main+0xd0>
				}

				idx_cmd = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 80006da:	2301      	movs	r3, #1
 80006dc:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 80006de:	e01f      	b.n	8000720 <main+0x13c>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 80006e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006e2:	1e5a      	subs	r2, r3, #1
 80006e4:	677a      	str	r2, [r7, #116]	; 0x74
 80006e6:	3378      	adds	r3, #120	; 0x78
 80006e8:	443b      	add	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	2201      	movs	r2, #1
 80006f6:	4967      	ldr	r1, [pc, #412]	; (8000894 <main+0x2b0>)
 80006f8:	4868      	ldr	r0, [pc, #416]	; (800089c <main+0x2b8>)
 80006fa:	f004 f8b6 	bl	800486a <HAL_UART_Transmit>
				break;
 80006fe:	e00f      	b.n	8000720 <main+0x13c>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	677a      	str	r2, [r7, #116]	; 0x74
 8000706:	4a63      	ldr	r2, [pc, #396]	; (8000894 <main+0x2b0>)
 8000708:	7812      	ldrb	r2, [r2, #0]
 800070a:	3378      	adds	r3, #120	; 0x78
 800070c:	443b      	add	r3, r7
 800070e:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	2201      	movs	r2, #1
 8000718:	495e      	ldr	r1, [pc, #376]	; (8000894 <main+0x2b0>)
 800071a:	4860      	ldr	r0, [pc, #384]	; (800089c <main+0x2b8>)
 800071c:	f004 f8a5 	bl	800486a <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 8000720:	4b62      	ldr	r3, [pc, #392]	; (80008ac <main+0x2c8>)
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 8000726:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000728:	2b00      	cmp	r3, #0
 800072a:	d0a1      	beq.n	8000670 <main+0x8c>
			if(strcmp(argv[0],"set")==0){
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	4962      	ldr	r1, [pc, #392]	; (80008b8 <main+0x2d4>)
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd75 	bl	8000220 <strcmp>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d12d      	bne.n	8000798 <main+0x1b4>
				if(strcmp(argv[1],"PA5")==0){
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	495f      	ldr	r1, [pc, #380]	; (80008bc <main+0x2d8>)
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fd6d 	bl	8000220 <strcmp>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d11d      	bne.n	8000788 <main+0x1a4>
					HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	4618      	mov	r0, r3
 8000750:	f006 f8b2 	bl	80068b8 <atoi>
 8000754:	4603      	mov	r3, r0
 8000756:	b2db      	uxtb	r3, r3
 8000758:	461a      	mov	r2, r3
 800075a:	2120      	movs	r1, #32
 800075c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000760:	f001 fa08 	bl	8001b74 <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	4618      	mov	r0, r3
 8000768:	f006 f8a6 	bl	80068b8 <atoi>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	4953      	ldr	r1, [pc, #332]	; (80008c0 <main+0x2dc>)
 8000772:	4849      	ldr	r0, [pc, #292]	; (8000898 <main+0x2b4>)
 8000774:	f006 f8ee 	bl	8006954 <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	2220      	movs	r2, #32
 800077e:	4946      	ldr	r1, [pc, #280]	; (8000898 <main+0x2b4>)
 8000780:	4846      	ldr	r0, [pc, #280]	; (800089c <main+0x2b8>)
 8000782:	f004 f872 	bl	800486a <HAL_UART_Transmit>
 8000786:	e07a      	b.n	800087e <main+0x29a>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
 800078c:	2215      	movs	r2, #21
 800078e:	494d      	ldr	r1, [pc, #308]	; (80008c4 <main+0x2e0>)
 8000790:	4842      	ldr	r0, [pc, #264]	; (800089c <main+0x2b8>)
 8000792:	f004 f86a 	bl	800486a <HAL_UART_Transmit>
 8000796:	e072      	b.n	800087e <main+0x29a>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	494b      	ldr	r1, [pc, #300]	; (80008c8 <main+0x2e4>)
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fd3f 	bl	8000220 <strcmp>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d107      	bne.n	80007b8 <main+0x1d4>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	2215      	movs	r2, #21
 80007ae:	4945      	ldr	r1, [pc, #276]	; (80008c4 <main+0x2e0>)
 80007b0:	483a      	ldr	r0, [pc, #232]	; (800089c <main+0x2b8>)
 80007b2:	f004 f85a 	bl	800486a <HAL_UART_Transmit>
 80007b6:	e062      	b.n	800087e <main+0x29a>
			}
			else if(strcmp(argv[0],"pinout")==0)
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	4944      	ldr	r1, [pc, #272]	; (80008cc <main+0x2e8>)
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fd2f 	bl	8000220 <strcmp>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d107      	bne.n	80007d8 <main+0x1f4>
			{
				HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	223d      	movs	r2, #61	; 0x3d
 80007ce:	4940      	ldr	r1, [pc, #256]	; (80008d0 <main+0x2ec>)
 80007d0:	4832      	ldr	r0, [pc, #200]	; (800089c <main+0x2b8>)
 80007d2:	f004 f84a 	bl	800486a <HAL_UART_Transmit>
 80007d6:	e052      	b.n	800087e <main+0x29a>
			}
			else if(strcmp(argv[0],"start")==0)
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	493e      	ldr	r1, [pc, #248]	; (80008d4 <main+0x2f0>)
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fd1f 	bl	8000220 <strcmp>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d109      	bne.n	80007fc <main+0x218>
			{
				HAL_UART_Transmit(&huart2, start, sizeof(start), HAL_MAX_DELAY);
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	220c      	movs	r2, #12
 80007ee:	493a      	ldr	r1, [pc, #232]	; (80008d8 <main+0x2f4>)
 80007f0:	482a      	ldr	r0, [pc, #168]	; (800089c <main+0x2b8>)
 80007f2:	f004 f83a 	bl	800486a <HAL_UART_Transmit>
				motor_start();
 80007f6:	f000 fad3 	bl	8000da0 <motor_start>
 80007fa:	e040      	b.n	800087e <main+0x29a>
			}
			else if(strcmp(argv[0],"stop")==0)
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	4937      	ldr	r1, [pc, #220]	; (80008dc <main+0x2f8>)
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fd0d 	bl	8000220 <strcmp>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d109      	bne.n	8000820 <main+0x23c>
			{
				HAL_UART_Transmit(&huart2, stop, sizeof(stop), HAL_MAX_DELAY);
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	220d      	movs	r2, #13
 8000812:	4933      	ldr	r1, [pc, #204]	; (80008e0 <main+0x2fc>)
 8000814:	4821      	ldr	r0, [pc, #132]	; (800089c <main+0x2b8>)
 8000816:	f004 f828 	bl	800486a <HAL_UART_Transmit>
				motor_stop_PWM();
 800081a:	f000 fad9 	bl	8000dd0 <motor_stop_PWM>
 800081e:	e02e      	b.n	800087e <main+0x29a>
			}
			else if(strcmp(argv[0],"help")==0)
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	4930      	ldr	r1, [pc, #192]	; (80008e4 <main+0x300>)
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fcfb 	bl	8000220 <strcmp>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d107      	bne.n	8000840 <main+0x25c>
			{
				HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	22f9      	movs	r2, #249	; 0xf9
 8000836:	492c      	ldr	r1, [pc, #176]	; (80008e8 <main+0x304>)
 8000838:	4818      	ldr	r0, [pc, #96]	; (800089c <main+0x2b8>)
 800083a:	f004 f816 	bl	800486a <HAL_UART_Transmit>
 800083e:	e01e      	b.n	800087e <main+0x29a>
			}
			else if(strcmp(argv[0],"speed")==0)
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	492a      	ldr	r1, [pc, #168]	; (80008ec <main+0x308>)
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fceb 	bl	8000220 <strcmp>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d10f      	bne.n	8000870 <main+0x28c>
			{
				HAL_UART_Transmit(&huart2,speed_msg, sizeof(speed_msg), HAL_MAX_DELAY);
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	2210      	movs	r2, #16
 8000856:	4926      	ldr	r1, [pc, #152]	; (80008f0 <main+0x30c>)
 8000858:	4810      	ldr	r0, [pc, #64]	; (800089c <main+0x2b8>)
 800085a:	f004 f806 	bl	800486a <HAL_UART_Transmit>
				int speed;
				speed=atoi(argv[1]);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4618      	mov	r0, r3
 8000862:	f006 f829 	bl	80068b8 <atoi>
 8000866:	6678      	str	r0, [r7, #100]	; 0x64
				motor_set_speed(speed);
 8000868:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800086a:	f000 faeb 	bl	8000e44 <motor_set_speed>
 800086e:	e006      	b.n	800087e <main+0x29a>
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	2215      	movs	r2, #21
 8000876:	4913      	ldr	r1, [pc, #76]	; (80008c4 <main+0x2e0>)
 8000878:	4808      	ldr	r0, [pc, #32]	; (800089c <main+0x2b8>)
 800087a:	f003 fff6 	bl	800486a <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	2218      	movs	r2, #24
 8000884:	4907      	ldr	r1, [pc, #28]	; (80008a4 <main+0x2c0>)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <main+0x2b8>)
 8000888:	f003 ffef 	bl	800486a <HAL_UART_Transmit>
			newCmdReady = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	66bb      	str	r3, [r7, #104]	; 0x68
		if(uartRxReceived){
 8000890:	e6ee      	b.n	8000670 <main+0x8c>
 8000892:	bf00      	nop
 8000894:	20000254 	.word	0x20000254
 8000898:	20000258 	.word	0x20000258
 800089c:	200001c0 	.word	0x200001c0
 80008a0:	20000018 	.word	0x20000018
 80008a4:	20000000 	.word	0x20000000
 80008a8:	40012c00 	.word	0x40012c00
 80008ac:	20000250 	.word	0x20000250
 80008b0:	20000080 	.word	0x20000080
 80008b4:	08007ee8 	.word	0x08007ee8
 80008b8:	08007eec 	.word	0x08007eec
 80008bc:	08007ef0 	.word	0x08007ef0
 80008c0:	08007ef4 	.word	0x08007ef4
 80008c4:	20000084 	.word	0x20000084
 80008c8:	08007f10 	.word	0x08007f10
 80008cc:	08007f14 	.word	0x08007f14
 80008d0:	0800806c 	.word	0x0800806c
 80008d4:	08007f1c 	.word	0x08007f1c
 80008d8:	080080ac 	.word	0x080080ac
 80008dc:	08007f24 	.word	0x08007f24
 80008e0:	080080b8 	.word	0x080080b8
 80008e4:	08007f2c 	.word	0x08007f2c
 80008e8:	08007f70 	.word	0x08007f70
 80008ec:	08007f34 	.word	0x08007f34
 80008f0:	080080c8 	.word	0x080080c8

080008f4 <SystemClock_Config>:
/*
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b094      	sub	sp, #80	; 0x50
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0318 	add.w	r3, r7, #24
 80008fe:	2238      	movs	r2, #56	; 0x38
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f006 f806 	bl	8006914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]

  /* Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000916:	2000      	movs	r0, #0
 8000918:	f001 f95c 	bl	8001bd4 <HAL_PWREx_ControlVoltageScaling>

  /* Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091c:	2302      	movs	r3, #2
 800091e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000926:	2340      	movs	r3, #64	; 0x40
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092a:	2302      	movs	r3, #2
 800092c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800092e:	2302      	movs	r3, #2
 8000930:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000932:	2304      	movs	r3, #4
 8000934:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000936:	2355      	movs	r3, #85	; 0x55
 8000938:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800093a:	2302      	movs	r3, #2
 800093c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800093e:	2302      	movs	r3, #2
 8000940:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000942:	2302      	movs	r3, #2
 8000944:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000946:	f107 0318 	add.w	r3, r7, #24
 800094a:	4618      	mov	r0, r3
 800094c:	f001 f9f6 	bl	8001d3c <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000956:	f000 f9e1 	bl	8000d1c <Error_Handler>
  }

  /* Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	230f      	movs	r3, #15
 800095c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2303      	movs	r3, #3
 8000960:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2104      	movs	r1, #4
 8000972:	4618      	mov	r0, r3
 8000974:	f001 fcfa 	bl	800236c <HAL_RCC_ClockConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800097e:	f000 f9cd 	bl	8000d1c <Error_Handler>
  }
}
 8000982:	bf00      	nop
 8000984:	3750      	adds	r7, #80	; 0x50
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b098      	sub	sp, #96	; 0x60
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000992:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
 80009ae:	615a      	str	r2, [r3, #20]
 80009b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2234      	movs	r2, #52	; 0x34
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f005 ffab 	bl	8006914 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009be:	4b43      	ldr	r3, [pc, #268]	; (8000acc <MX_TIM1_Init+0x140>)
 80009c0:	4a43      	ldr	r2, [pc, #268]	; (8000ad0 <MX_TIM1_Init+0x144>)
 80009c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3-1;
 80009c4:	4b41      	ldr	r3, [pc, #260]	; (8000acc <MX_TIM1_Init+0x140>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80009ca:	4b40      	ldr	r3, [pc, #256]	; (8000acc <MX_TIM1_Init+0x140>)
 80009cc:	2220      	movs	r2, #32
 80009ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1749;
 80009d0:	4b3e      	ldr	r3, [pc, #248]	; (8000acc <MX_TIM1_Init+0x140>)
 80009d2:	f240 62d5 	movw	r2, #1749	; 0x6d5
 80009d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b3c      	ldr	r3, [pc, #240]	; (8000acc <MX_TIM1_Init+0x140>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009de:	4b3b      	ldr	r3, [pc, #236]	; (8000acc <MX_TIM1_Init+0x140>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b39      	ldr	r3, [pc, #228]	; (8000acc <MX_TIM1_Init+0x140>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009ea:	4838      	ldr	r0, [pc, #224]	; (8000acc <MX_TIM1_Init+0x140>)
 80009ec:	f002 f9ae 	bl	8002d4c <HAL_TIM_PWM_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80009f6:	f000 f991 	bl	8000d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fa:	2300      	movs	r3, #0
 80009fc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009fe:	2300      	movs	r3, #0
 8000a00:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	482f      	ldr	r0, [pc, #188]	; (8000acc <MX_TIM1_Init+0x140>)
 8000a0e:	f003 fd29 	bl	8004464 <HAL_TIMEx_MasterConfigSynchronization>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a18:	f000 f980 	bl	8000d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a1c:	2360      	movs	r3, #96	; 0x60
 8000a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1050;
 8000a20:	f240 431a 	movw	r3, #1050	; 0x41a
 8000a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a26:	2300      	movs	r3, #0
 8000a28:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4619      	mov	r1, r3
 8000a42:	4822      	ldr	r0, [pc, #136]	; (8000acc <MX_TIM1_Init+0x140>)
 8000a44:	f002 fd08 	bl	8003458 <HAL_TIM_PWM_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000a4e:	f000 f965 	bl	8000d1c <Error_Handler>
  }
  sConfigOC.Pulse = 700;
 8000a52:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	481a      	ldr	r0, [pc, #104]	; (8000acc <MX_TIM1_Init+0x140>)
 8000a62:	f002 fcf9 	bl	8003458 <HAL_TIM_PWM_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000a6c:	f000 f956 	bl	8000d1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 200;
 8000a7c:	23c8      	movs	r3, #200	; 0xc8
 8000a7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000aa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	4807      	ldr	r0, [pc, #28]	; (8000acc <MX_TIM1_Init+0x140>)
 8000ab0:	f003 fd6e 	bl	8004590 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8000aba:	f000 f92f 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000abe:	4803      	ldr	r0, [pc, #12]	; (8000acc <MX_TIM1_Init+0x140>)
 8000ac0:	f000 fa94 	bl	8000fec <HAL_TIM_MspPostInit>

}
 8000ac4:	bf00      	nop
 8000ac6:	3760      	adds	r7, #96	; 0x60
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000128 	.word	0x20000128
 8000ad0:	40012c00 	.word	0x40012c00

08000ad4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170;
 8000afa:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000afc:	22aa      	movs	r2, #170	; 0xaa
 8000afe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b08:	2202      	movs	r2, #2
 8000b0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b18:	4813      	ldr	r0, [pc, #76]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b1a:	f002 f891 	bl	8002c40 <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b24:	f000 f8fa 	bl	8000d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	4619      	mov	r1, r3
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b36:	f002 fda3 	bl	8003680 <HAL_TIM_ConfigClockSource>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b40:	f000 f8ec 	bl	8000d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b52:	f003 fc87 	bl	8004464 <HAL_TIMEx_MasterConfigSynchronization>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b5c:	f000 f8de 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	3720      	adds	r7, #32
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000174 	.word	0x20000174

08000b6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b70:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b72:	4a23      	ldr	r2, [pc, #140]	; (8000c00 <MX_USART2_UART_Init+0x94>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb4:	4811      	ldr	r0, [pc, #68]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000bb6:	f003 fe08 	bl	80047ca <HAL_UART_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bc0:	f000 f8ac 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	480d      	ldr	r0, [pc, #52]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000bc8:	f005 fdab 	bl	8006722 <HAL_UARTEx_SetTxFifoThreshold>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bd2:	f000 f8a3 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4808      	ldr	r0, [pc, #32]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000bda:	f005 fde0 	bl	800679e <HAL_UARTEx_SetRxFifoThreshold>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000be4:	f000 f89a 	bl	8000d1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_USART2_UART_Init+0x90>)
 8000bea:	f005 fd61 	bl	80066b0 <HAL_UARTEx_DisableFifoMode>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bf4:	f000 f892 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200001c0 	.word	0x200001c0
 8000c00:	40004400 	.word	0x40004400

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	4a32      	ldr	r2, [pc, #200]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c26:	4b30      	ldr	r3, [pc, #192]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c32:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a2c      	ldr	r2, [pc, #176]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c38:	f043 0320 	orr.w	r3, r3, #32
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0320 	and.w	r3, r3, #32
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c56:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <MX_GPIO_Init+0xe4>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2108      	movs	r1, #8
 8000c66:	4821      	ldr	r0, [pc, #132]	; (8000cec <MX_GPIO_Init+0xe8>)
 8000c68:	f000 ff84 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2120      	movs	r1, #32
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c74:	f000 ff7e 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4817      	ldr	r0, [pc, #92]	; (8000cec <MX_GPIO_Init+0xe8>)
 8000c90:	f000 fdee 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISO_RESET_Pin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8000c94:	2308      	movs	r3, #8
 8000c96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4810      	ldr	r0, [pc, #64]	; (8000cec <MX_GPIO_Init+0xe8>)
 8000cac:	f000 fde0 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000cb0:	2320      	movs	r3, #32
 8000cb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cca:	f000 fdd1 	bl	8001870 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2028      	movs	r0, #40	; 0x28
 8000cd4:	f000 fcd7 	bl	8001686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cd8:	2028      	movs	r0, #40	; 0x28
 8000cda:	f000 fcee 	bl	80016ba <HAL_NVIC_EnableIRQ>

}
 8000cde:	bf00      	nop
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	48000800 	.word	0x48000800

08000cf0 <HAL_UART_RxCpltCallback>:
/**
 * \fn void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
 * \brief Gestion des interruptions des périphériques UART:
 * Met le flag de réception a 1 et met le caractère reçu dans uartRxBuffer
 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_UART_RxCpltCallback+0x20>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4904      	ldr	r1, [pc, #16]	; (8000d14 <HAL_UART_RxCpltCallback+0x24>)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <HAL_UART_RxCpltCallback+0x28>)
 8000d04:	f003 fe48 	bl	8004998 <HAL_UART_Receive_IT>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000250 	.word	0x20000250
 8000d14:	20000254 	.word	0x20000254
 8000d18:	200001c0 	.word	0x200001c0

08000d1c <Error_Handler>:
/*
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x8>
	...

08000d28 <HAL_TIM_PeriodElapsedCallback>:
 * \fn void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 * \brief Gestion des interruptions des timers :
 * Désactive le timer 2 et remet la Pin ISO_RESET lorsque le tim2 déclenche son interruption.
 * Termine la séquence d'allumage en démarrant les PWM
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	if(htim==&htim2){
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d109      	bne.n	8000d4c <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d3a:	f001 ffd8 	bl	8002cee <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(ISO_RESET_GPIO_Port,ISO_RESET_Pin,0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2108      	movs	r1, #8
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d44:	f000 ff16 	bl	8001b74 <HAL_GPIO_WritePin>

		//Start les PWM moteurs
		motor_start_PWM();
 8000d48:	f000 f866 	bl	8000e18 <motor_start_PWM>
	}

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000174 	.word	0x20000174
 8000d58:	48000800 	.word	0x48000800

08000d5c <HAL_GPIO_EXTI_Callback>:
/**
 * \fn void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 * \brief Gestion des interruptions GPÏO_EXTI :
 * Déclenche la procédure d'allumage du moteur sur appui du bouton utilisateur
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==BUTTON_Pin){
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d6c:	d101      	bne.n	8000d72 <HAL_GPIO_EXTI_Callback+0x16>
		motor_start();
 8000d6e:	f000 f817 	bl	8000da0 <motor_start>
	}
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <__io_putchar>:

int __io_putchar(int ch){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000d84:	1d39      	adds	r1, r7, #4
 8000d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <__io_putchar+0x20>)
 8000d8e:	f003 fd6c 	bl	800486a <HAL_UART_Transmit>
	return ch;
 8000d92:	687b      	ldr	r3, [r7, #4]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200001c0 	.word	0x200001c0

08000da0 <motor_start>:

/**
 * \fn void motor_start(void)
 * \brief Démarre le timer 2 et met la Pin ISO_RESET à 1 pendant le temps requis (2us). Le reset de ISO_RESET se fait dans l'interruption de tim2
 */
void motor_start(void){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	motor_stop_PWM();
 8000da4:	f000 f814 	bl	8000dd0 <motor_stop_PWM>
	//printf("moteur start entered\r\n");						// debogage
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port,ISO_RESET_Pin,1);
 8000da8:	2201      	movs	r2, #1
 8000daa:	2108      	movs	r1, #8
 8000dac:	4807      	ldr	r0, [pc, #28]	; (8000dcc <motor_start+0x2c>)
 8000dae:	f000 fee1 	bl	8001b74 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000db2:	2001      	movs	r0, #1
 8000db4:	f000 fb6a 	bl	800148c <HAL_Delay>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port,ISO_RESET_Pin,0);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2108      	movs	r1, #8
 8000dbc:	4803      	ldr	r0, [pc, #12]	; (8000dcc <motor_start+0x2c>)
 8000dbe:	f000 fed9 	bl	8001b74 <HAL_GPIO_WritePin>
	motor_start_PWM();
 8000dc2:	f000 f829 	bl	8000e18 <motor_start_PWM>
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	48000800 	.word	0x48000800

08000dd0 <motor_stop_PWM>:

void motor_stop_PWM(void){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	//printf("moteur_stop_entered\r\n");						// debogage
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	480e      	ldr	r0, [pc, #56]	; (8000e10 <motor_stop_PWM+0x40>)
 8000dd8:	f002 f922 	bl	8003020 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000ddc:	2104      	movs	r1, #4
 8000dde:	480c      	ldr	r0, [pc, #48]	; (8000e10 <motor_stop_PWM+0x40>)
 8000de0:	f002 f91e 	bl	8003020 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000de4:	2100      	movs	r1, #0
 8000de6:	480a      	ldr	r0, [pc, #40]	; (8000e10 <motor_stop_PWM+0x40>)
 8000de8:	f003 fade 	bl	80043a8 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000dec:	2104      	movs	r1, #4
 8000dee:	4808      	ldr	r0, [pc, #32]	; (8000e10 <motor_stop_PWM+0x40>)
 8000df0:	f003 fada 	bl	80043a8 <HAL_TIMEx_PWMN_Stop>
	TIM1->CCR1=660;
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <motor_stop_PWM+0x44>)
 8000df6:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000dfa:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=SPEED_MAX-660;
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <motor_stop_PWM+0x44>)
 8000dfe:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8000e02:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Init(&htim1);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <motor_stop_PWM+0x40>)
 8000e06:	f001 ffa1 	bl	8002d4c <HAL_TIM_PWM_Init>
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000128 	.word	0x20000128
 8000e14:	40012c00 	.word	0x40012c00

08000e18 <motor_start_PWM>:

/**
 * \fn void motor_start_PWM(void)
 * \brief Fonction de racourci pour éviter de réécrire le redémarage des PWM à chaque fois
 */
void motor_start_PWM(void){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	//printf("start_PWM\r\n");									// debogage
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4808      	ldr	r0, [pc, #32]	; (8000e40 <motor_start_PWM+0x28>)
 8000e20:	f001 ffec 	bl	8002dfc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000e24:	2104      	movs	r1, #4
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <motor_start_PWM+0x28>)
 8000e28:	f001 ffe8 	bl	8002dfc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4804      	ldr	r0, [pc, #16]	; (8000e40 <motor_start_PWM+0x28>)
 8000e30:	f003 f9f8 	bl	8004224 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000e34:	2104      	movs	r1, #4
 8000e36:	4802      	ldr	r0, [pc, #8]	; (8000e40 <motor_start_PWM+0x28>)
 8000e38:	f003 f9f4 	bl	8004224 <HAL_TIMEx_PWMN_Start>
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000128 	.word	0x20000128

08000e44 <motor_set_speed>:

/**
 * \fn void motor_set_speed(int *speed)
 * \brief Récupère et traite la commande de vitesse du moteur
 */
void motor_set_speed(int speed){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	//printf("motor_speed_entered\r\n");							// debogage
	if(speed>SPEED_MAX){
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8000e52:	4293      	cmp	r3, r2
 8000e54:	dd03      	ble.n	8000e5e <motor_set_speed+0x1a>
		speed=SPEED_MAX;
 8000e56:	f240 63cc 	movw	r3, #1740	; 0x6cc
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	e004      	b.n	8000e68 <motor_set_speed+0x24>
	}
	else if (speed<0){
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	da01      	bge.n	8000e68 <motor_set_speed+0x24>
		speed=0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
	}
	printf("consigne appliquée : %d\r\n",speed);				// debogage
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	4828      	ldr	r0, [pc, #160]	; (8000f0c <motor_set_speed+0xc8>)
 8000e6c:	f005 fd5a 	bl	8006924 <iprintf>
	TIM1->CCR2=SPEED_MAX-speed;
	HAL_TIM_PWM_Init(&htim1);
	motor_start_PWM();*/

	//----- methode gradation du rapport cyclique -----
	int rapport_cyclique=0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]

	// en montée
	rapport_cyclique= TIM1->CCR1;						//<! prise en compte de la vitesse actuelle
 8000e74:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <motor_set_speed+0xcc>)
 8000e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e78:	60fb      	str	r3, [r7, #12]
	if (speed>rapport_cyclique){
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	dd1e      	ble.n	8000ec0 <motor_set_speed+0x7c>
		while(rapport_cyclique<speed){
 8000e82:	e018      	b.n	8000eb6 <motor_set_speed+0x72>
			TIM1->CCR1=rapport_cyclique;
 8000e84:	4a22      	ldr	r2, [pc, #136]	; (8000f10 <motor_set_speed+0xcc>)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2=SPEED_MAX-rapport_cyclique;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f5c3 63d9 	rsb	r3, r3, #1736	; 0x6c8
 8000e90:	3304      	adds	r3, #4
 8000e92:	4a1f      	ldr	r2, [pc, #124]	; (8000f10 <motor_set_speed+0xcc>)
 8000e94:	6393      	str	r3, [r2, #56]	; 0x38
			printf("rapport_cyclique : %d\r\n",rapport_cyclique);
 8000e96:	68f9      	ldr	r1, [r7, #12]
 8000e98:	481e      	ldr	r0, [pc, #120]	; (8000f14 <motor_set_speed+0xd0>)
 8000e9a:	f005 fd43 	bl	8006924 <iprintf>
			HAL_TIM_PWM_Init(&htim1);
 8000e9e:	481e      	ldr	r0, [pc, #120]	; (8000f18 <motor_set_speed+0xd4>)
 8000ea0:	f001 ff54 	bl	8002d4c <HAL_TIM_PWM_Init>
			motor_start_PWM();
 8000ea4:	f7ff ffb8 	bl	8000e18 <motor_start_PWM>
			HAL_Delay(DELAY_GRADATION);
 8000ea8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000eac:	f000 faee 	bl	800148c <HAL_Delay>
			rapport_cyclique=rapport_cyclique+GRADATION_UN_POURCENT;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3311      	adds	r3, #17
 8000eb4:	60fb      	str	r3, [r7, #12]
		while(rapport_cyclique<speed){
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	dbe2      	blt.n	8000e84 <motor_set_speed+0x40>
			motor_start_PWM();
			HAL_Delay(DELAY_GRADATION);
			rapport_cyclique=rapport_cyclique-GRADATION_UN_POURCENT;
		}
	}
}
 8000ebe:	e021      	b.n	8000f04 <motor_set_speed+0xc0>
	else if (speed<rapport_cyclique){
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	da1d      	bge.n	8000f04 <motor_set_speed+0xc0>
		while(rapport_cyclique>speed){
 8000ec8:	e018      	b.n	8000efc <motor_set_speed+0xb8>
			TIM1->CCR1=rapport_cyclique;
 8000eca:	4a11      	ldr	r2, [pc, #68]	; (8000f10 <motor_set_speed+0xcc>)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6353      	str	r3, [r2, #52]	; 0x34
			TIM1->CCR2=SPEED_MAX-rapport_cyclique;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f5c3 63d9 	rsb	r3, r3, #1736	; 0x6c8
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <motor_set_speed+0xcc>)
 8000eda:	6393      	str	r3, [r2, #56]	; 0x38
			printf("rapport_cyclique : %d\r\n",rapport_cyclique);
 8000edc:	68f9      	ldr	r1, [r7, #12]
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <motor_set_speed+0xd0>)
 8000ee0:	f005 fd20 	bl	8006924 <iprintf>
			HAL_TIM_PWM_Init(&htim1);
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <motor_set_speed+0xd4>)
 8000ee6:	f001 ff31 	bl	8002d4c <HAL_TIM_PWM_Init>
			motor_start_PWM();
 8000eea:	f7ff ff95 	bl	8000e18 <motor_start_PWM>
			HAL_Delay(DELAY_GRADATION);
 8000eee:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000ef2:	f000 facb 	bl	800148c <HAL_Delay>
			rapport_cyclique=rapport_cyclique-GRADATION_UN_POURCENT;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	3b11      	subs	r3, #17
 8000efa:	60fb      	str	r3, [r7, #12]
		while(rapport_cyclique>speed){
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	dce2      	bgt.n	8000eca <motor_set_speed+0x86>
}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	08007f3c 	.word	0x08007f3c
 8000f10:	40012c00 	.word	0x40012c00
 8000f14:	08007f58 	.word	0x08007f58
 8000f18:	20000128 	.word	0x20000128

08000f1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_MspInit+0x44>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_MspInit+0x44>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_MspInit+0x44>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_MspInit+0x44>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_MspInit+0x44>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6593      	str	r3, [r2, #88]	; 0x58
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_MspInit+0x44>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f52:	f000 fee3 	bl	8001d1c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_TIM_PWM_MspInit+0x38>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d10b      	bne.n	8000f8e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7a:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f80:	6613      	str	r3, [r2, #96]	; 0x60
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40012c00 	.word	0x40012c00
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb4:	d113      	bne.n	8000fde <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <HAL_TIM_Base_MspInit+0x44>)
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <HAL_TIM_Base_MspInit+0x44>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <HAL_TIM_Base_MspInit+0x44>)
 8000fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	201c      	movs	r0, #28
 8000fd4:	f000 fb57 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fd8:	201c      	movs	r0, #28
 8000fda:	f000 fb6e 	bl	80016ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000

08000fec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a12      	ldr	r2, [pc, #72]	; (8001054 <HAL_TIM_MspPostInit+0x68>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d11d      	bne.n	800104a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_TIM_MspPostInit+0x6c>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a11      	ldr	r2, [pc, #68]	; (8001058 <HAL_TIM_MspPostInit+0x6c>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <HAL_TIM_MspPostInit+0x6c>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001026:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 800102a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001038:	2306      	movs	r3, #6
 800103a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	4619      	mov	r1, r3
 8001042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001046:	f000 fc13 	bl	8001870 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3720      	adds	r7, #32
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40012c00 	.word	0x40012c00
 8001058:	40021000 	.word	0x40021000

0800105c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b09e      	sub	sp, #120	; 0x78
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	2254      	movs	r2, #84	; 0x54
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f005 fc49 	bl	8006914 <memset>
  if(huart->Instance==USART2)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a23      	ldr	r2, [pc, #140]	; (8001114 <HAL_UART_MspInit+0xb8>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d13e      	bne.n	800110a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800108c:	2302      	movs	r3, #2
 800108e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	4618      	mov	r0, r3
 800109a:	f001 fb83 	bl	80027a4 <HAL_RCCEx_PeriphCLKConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010a4:	f7ff fe3a 	bl	8000d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <HAL_UART_MspInit+0xbc>)
 80010aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ac:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <HAL_UART_MspInit+0xbc>)
 80010ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b2:	6593      	str	r3, [r2, #88]	; 0x58
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_UART_MspInit+0xbc>)
 80010b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_UART_MspInit+0xbc>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <HAL_UART_MspInit+0xbc>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_UART_MspInit+0xbc>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010d8:	230c      	movs	r3, #12
 80010da:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010e8:	2307      	movs	r3, #7
 80010ea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010f0:	4619      	mov	r1, r3
 80010f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f6:	f000 fbbb 	bl	8001870 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	2026      	movs	r0, #38	; 0x26
 8001100:	f000 fac1 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001104:	2026      	movs	r0, #38	; 0x26
 8001106:	f000 fad8 	bl	80016ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800110a:	bf00      	nop
 800110c:	3778      	adds	r7, #120	; 0x78
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40004400 	.word	0x40004400
 8001118:	40021000 	.word	0x40021000

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <NMI_Handler+0x4>

08001122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <HardFault_Handler+0x4>

08001128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <MemManage_Handler+0x4>

0800112e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <UsageFault_Handler+0x4>

0800113a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001168:	f000 f972 	bl	8001450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <TIM2_IRQHandler+0x10>)
 8001176:	f001 ffef 	bl	8003158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000174 	.word	0x20000174

08001184 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <USART2_IRQHandler+0x10>)
 800118a:	f003 fc5b 	bl	8004a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200001c0 	.word	0x200001c0

08001198 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 800119c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011a0:	f000 fd00 	bl	8001ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
	return 1;
 80011ac:	2301      	movs	r3, #1
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <_kill>:

int _kill(int pid, int sig)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011c2:	f005 fb7d 	bl	80068c0 <__errno>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2216      	movs	r2, #22
 80011ca:	601a      	str	r2, [r3, #0]
	return -1;
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <_exit>:

void _exit (int status)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ffe7 	bl	80011b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80011ea:	e7fe      	b.n	80011ea <_exit+0x12>

080011ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	e00a      	b.n	8001214 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011fe:	f3af 8000 	nop.w
 8001202:	4601      	mov	r1, r0
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	60ba      	str	r2, [r7, #8]
 800120a:	b2ca      	uxtb	r2, r1
 800120c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	dbf0      	blt.n	80011fe <_read+0x12>
	}

return len;
 800121c:	687b      	ldr	r3, [r7, #4]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	e009      	b.n	800124c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	60ba      	str	r2, [r7, #8]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fd9b 	bl	8000d7c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	429a      	cmp	r2, r3
 8001252:	dbf1      	blt.n	8001238 <_write+0x12>
	}
	return len;
 8001254:	687b      	ldr	r3, [r7, #4]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <_close>:

int _close(int file)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
	return -1;
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001286:	605a      	str	r2, [r3, #4]
	return 0;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <_isatty>:

int _isatty(int file)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
	return 1;
 800129e:	2301      	movs	r3, #1
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
	return 0;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d0:	4a14      	ldr	r2, [pc, #80]	; (8001324 <_sbrk+0x5c>)
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <_sbrk+0x60>)
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <_sbrk+0x64>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	; (8001330 <_sbrk+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d207      	bcs.n	8001308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f8:	f005 fae2 	bl	80068c0 <__errno>
 80012fc:	4603      	mov	r3, r0
 80012fe:	220c      	movs	r2, #12
 8001300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e009      	b.n	800131c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <_sbrk+0x64>)
 8001318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20020000 	.word	0x20020000
 8001328:	00000400 	.word	0x00000400
 800132c:	20000298 	.word	0x20000298
 8001330:	200002b0 	.word	0x200002b0

08001334 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <SystemInit+0x20>)
 800133a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <SystemInit+0x20>)
 8001340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001344:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800135a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <LoopForever+0x6>)
  ldr r1, =_edata
 800135e:	490e      	ldr	r1, [pc, #56]	; (8001398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001360:	4a0e      	ldr	r2, [pc, #56]	; (800139c <LoopForever+0xe>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001364:	e002      	b.n	800136c <LoopCopyDataInit>

08001366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136a:	3304      	adds	r3, #4

0800136c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800136c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001370:	d3f9      	bcc.n	8001366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001372:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001374:	4c0b      	ldr	r4, [pc, #44]	; (80013a4 <LoopForever+0x16>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001378:	e001      	b.n	800137e <LoopFillZerobss>

0800137a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137c:	3204      	adds	r2, #4

0800137e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001380:	d3fb      	bcc.n	800137a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001382:	f7ff ffd7 	bl	8001334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001386:	f005 faa1 	bl	80068cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800138a:	f7ff f92b 	bl	80005e4 <main>

0800138e <LoopForever>:

LoopForever:
    b LoopForever
 800138e:	e7fe      	b.n	800138e <LoopForever>
  ldr   r0, =_estack
 8001390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001398:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 800139c:	08008374 	.word	0x08008374
  ldr r2, =_sbss
 80013a0:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80013a4:	200002b0 	.word	0x200002b0

080013a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC1_2_IRQHandler>

080013aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 f95b 	bl	8001670 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ba:	2000      	movs	r0, #0
 80013bc:	f000 f80e 	bl	80013dc <HAL_InitTick>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d002      	beq.n	80013cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	71fb      	strb	r3, [r7, #7]
 80013ca:	e001      	b.n	80013d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013cc:	f7ff fda6 	bl	8000f1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013d0:	79fb      	ldrb	r3, [r7, #7]

}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <HAL_InitTick+0x68>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d022      	beq.n	8001436 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_InitTick+0x6c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <HAL_InitTick+0x68>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001400:	fbb2 f3f3 	udiv	r3, r2, r3
 8001404:	4618      	mov	r0, r3
 8001406:	f000 f966 	bl	80016d6 <HAL_SYSTICK_Config>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10f      	bne.n	8001430 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b0f      	cmp	r3, #15
 8001414:	d809      	bhi.n	800142a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001416:	2200      	movs	r2, #0
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	f04f 30ff 	mov.w	r0, #4294967295
 800141e:	f000 f932 	bl	8001686 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <HAL_InitTick+0x70>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	e007      	b.n	800143a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	73fb      	strb	r3, [r7, #15]
 800142e:	e004      	b.n	800143a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	73fb      	strb	r3, [r7, #15]
 8001434:	e001      	b.n	800143a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800143a:	7bfb      	ldrb	r3, [r7, #15]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200000a4 	.word	0x200000a4
 8001448:	2000009c 	.word	0x2000009c
 800144c:	200000a0 	.word	0x200000a0

08001450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_IncTick+0x1c>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_IncTick+0x20>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4413      	add	r3, r2
 800145e:	4a03      	ldr	r2, [pc, #12]	; (800146c <HAL_IncTick+0x1c>)
 8001460:	6013      	str	r3, [r2, #0]
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	2000029c 	.word	0x2000029c
 8001470:	200000a4 	.word	0x200000a4

08001474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return uwTick;
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <HAL_GetTick+0x14>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	2000029c 	.word	0x2000029c

0800148c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001494:	f7ff ffee 	bl	8001474 <HAL_GetTick>
 8001498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a4:	d004      	beq.n	80014b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_Delay+0x40>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4413      	add	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014b0:	bf00      	nop
 80014b2:	f7ff ffdf 	bl	8001474 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d8f7      	bhi.n	80014b2 <HAL_Delay+0x26>
  {
  }
}
 80014c2:	bf00      	nop
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000a4 	.word	0x200000a4

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	db0b      	blt.n	800155e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f003 021f 	and.w	r2, r3, #31
 800154c:	4907      	ldr	r1, [pc, #28]	; (800156c <__NVIC_EnableIRQ+0x38>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	2001      	movs	r0, #1
 8001556:	fa00 f202 	lsl.w	r2, r0, r2
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000e100 	.word	0xe000e100

08001570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	db0a      	blt.n	800159a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	490c      	ldr	r1, [pc, #48]	; (80015bc <__NVIC_SetPriority+0x4c>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	0112      	lsls	r2, r2, #4
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	440b      	add	r3, r1
 8001594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001598:	e00a      	b.n	80015b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4908      	ldr	r1, [pc, #32]	; (80015c0 <__NVIC_SetPriority+0x50>)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	3b04      	subs	r3, #4
 80015a8:	0112      	lsls	r2, r2, #4
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	440b      	add	r3, r1
 80015ae:	761a      	strb	r2, [r3, #24]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000e100 	.word	0xe000e100
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f1c3 0307 	rsb	r3, r3, #7
 80015de:	2b04      	cmp	r3, #4
 80015e0:	bf28      	it	cs
 80015e2:	2304      	movcs	r3, #4
 80015e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3304      	adds	r3, #4
 80015ea:	2b06      	cmp	r3, #6
 80015ec:	d902      	bls.n	80015f4 <NVIC_EncodePriority+0x30>
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3b03      	subs	r3, #3
 80015f2:	e000      	b.n	80015f6 <NVIC_EncodePriority+0x32>
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	f04f 32ff 	mov.w	r2, #4294967295
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800160c:	f04f 31ff 	mov.w	r1, #4294967295
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43d9      	mvns	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	4313      	orrs	r3, r2
         );
}
 800161e:	4618      	mov	r0, r3
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800163c:	d301      	bcc.n	8001642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163e:	2301      	movs	r3, #1
 8001640:	e00f      	b.n	8001662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <SysTick_Config+0x40>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164a:	210f      	movs	r1, #15
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f7ff ff8e 	bl	8001570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <SysTick_Config+0x40>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165a:	4b04      	ldr	r3, [pc, #16]	; (800166c <SysTick_Config+0x40>)
 800165c:	2207      	movs	r2, #7
 800165e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	e000e010 	.word	0xe000e010

08001670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff29 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001694:	f7ff ff40 	bl	8001518 <__NVIC_GetPriorityGrouping>
 8001698:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	6978      	ldr	r0, [r7, #20]
 80016a0:	f7ff ff90 	bl	80015c4 <NVIC_EncodePriority>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff5f 	bl	8001570 <__NVIC_SetPriority>
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff33 	bl	8001534 <__NVIC_EnableIRQ>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ffa4 	bl	800162c <SysTick_Config>
 80016e4:	4603      	mov	r3, r0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b085      	sub	sp, #20
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d005      	beq.n	8001712 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2204      	movs	r2, #4
 800170a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
 8001710:	e037      	b.n	8001782 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 020e 	bic.w	r2, r2, #14
 8001720:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001730:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0201 	bic.w	r2, r2, #1
 8001740:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f003 021f 	and.w	r2, r3, #31
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	2101      	movs	r1, #1
 8001750:	fa01 f202 	lsl.w	r2, r1, r2
 8001754:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800175e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00c      	beq.n	8001782 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001772:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001776:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001780:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d00d      	beq.n	80017d4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2204      	movs	r2, #4
 80017bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
 80017d2:	e047      	b.n	8001864 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 020e 	bic.w	r2, r2, #14
 80017e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001802:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	2101      	movs	r1, #1
 8001812:	fa01 f202 	lsl.w	r2, r1, r2
 8001816:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001820:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00c      	beq.n	8001844 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001838:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001842:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	4798      	blx	r3
    }
  }
  return status;
 8001864:	7bfb      	ldrb	r3, [r7, #15]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001870:	b480      	push	{r7}
 8001872:	b087      	sub	sp, #28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800187e:	e15a      	b.n	8001b36 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	2101      	movs	r1, #1
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	fa01 f303 	lsl.w	r3, r1, r3
 800188c:	4013      	ands	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 814c 	beq.w	8001b30 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d005      	beq.n	80018b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d130      	bne.n	8001912 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	2203      	movs	r2, #3
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018e6:	2201      	movs	r2, #1
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	091b      	lsrs	r3, r3, #4
 80018fc:	f003 0201 	and.w	r2, r3, #1
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b03      	cmp	r3, #3
 800191c:	d017      	beq.n	800194e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	2203      	movs	r2, #3
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d123      	bne.n	80019a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	08da      	lsrs	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3208      	adds	r2, #8
 8001962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	220f      	movs	r2, #15
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	691a      	ldr	r2, [r3, #16]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	08da      	lsrs	r2, r3, #3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3208      	adds	r2, #8
 800199c:	6939      	ldr	r1, [r7, #16]
 800199e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	2203      	movs	r2, #3
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0203 	and.w	r2, r3, #3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 80a6 	beq.w	8001b30 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e4:	4b5b      	ldr	r3, [pc, #364]	; (8001b54 <HAL_GPIO_Init+0x2e4>)
 80019e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e8:	4a5a      	ldr	r2, [pc, #360]	; (8001b54 <HAL_GPIO_Init+0x2e4>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	6613      	str	r3, [r2, #96]	; 0x60
 80019f0:	4b58      	ldr	r3, [pc, #352]	; (8001b54 <HAL_GPIO_Init+0x2e4>)
 80019f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019fc:	4a56      	ldr	r2, [pc, #344]	; (8001b58 <HAL_GPIO_Init+0x2e8>)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	220f      	movs	r2, #15
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a26:	d01f      	beq.n	8001a68 <HAL_GPIO_Init+0x1f8>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a4c      	ldr	r2, [pc, #304]	; (8001b5c <HAL_GPIO_Init+0x2ec>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d019      	beq.n	8001a64 <HAL_GPIO_Init+0x1f4>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a4b      	ldr	r2, [pc, #300]	; (8001b60 <HAL_GPIO_Init+0x2f0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d013      	beq.n	8001a60 <HAL_GPIO_Init+0x1f0>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a4a      	ldr	r2, [pc, #296]	; (8001b64 <HAL_GPIO_Init+0x2f4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d00d      	beq.n	8001a5c <HAL_GPIO_Init+0x1ec>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a49      	ldr	r2, [pc, #292]	; (8001b68 <HAL_GPIO_Init+0x2f8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d007      	beq.n	8001a58 <HAL_GPIO_Init+0x1e8>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a48      	ldr	r2, [pc, #288]	; (8001b6c <HAL_GPIO_Init+0x2fc>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d101      	bne.n	8001a54 <HAL_GPIO_Init+0x1e4>
 8001a50:	2305      	movs	r3, #5
 8001a52:	e00a      	b.n	8001a6a <HAL_GPIO_Init+0x1fa>
 8001a54:	2306      	movs	r3, #6
 8001a56:	e008      	b.n	8001a6a <HAL_GPIO_Init+0x1fa>
 8001a58:	2304      	movs	r3, #4
 8001a5a:	e006      	b.n	8001a6a <HAL_GPIO_Init+0x1fa>
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e004      	b.n	8001a6a <HAL_GPIO_Init+0x1fa>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e002      	b.n	8001a6a <HAL_GPIO_Init+0x1fa>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <HAL_GPIO_Init+0x1fa>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	f002 0203 	and.w	r2, r2, #3
 8001a70:	0092      	lsls	r2, r2, #2
 8001a72:	4093      	lsls	r3, r2
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a7a:	4937      	ldr	r1, [pc, #220]	; (8001b58 <HAL_GPIO_Init+0x2e8>)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a88:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aac:	4a30      	ldr	r2, [pc, #192]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ab2:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ad6:	4a26      	ldr	r2, [pc, #152]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001adc:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b00:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b2a:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <HAL_GPIO_Init+0x300>)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f47f ae9d 	bne.w	8001880 <HAL_GPIO_Init+0x10>
  }
}
 8001b46:	bf00      	nop
 8001b48:	bf00      	nop
 8001b4a:	371c      	adds	r7, #28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010000 	.word	0x40010000
 8001b5c:	48000400 	.word	0x48000400
 8001b60:	48000800 	.word	0x48000800
 8001b64:	48000c00 	.word	0x48000c00
 8001b68:	48001000 	.word	0x48001000
 8001b6c:	48001400 	.word	0x48001400
 8001b70:	40010400 	.word	0x40010400

08001b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
 8001b80:	4613      	mov	r3, r2
 8001b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b90:	e002      	b.n	8001b98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb0:	695a      	ldr	r2, [r3, #20]
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d006      	beq.n	8001bc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff f8ca 	bl	8000d5c <HAL_GPIO_EXTI_Callback>
  }
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d141      	bne.n	8001c66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001be2:	4b4b      	ldr	r3, [pc, #300]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bee:	d131      	bne.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bf0:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bf6:	4a46      	ldr	r2, [pc, #280]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c00:	4b43      	ldr	r3, [pc, #268]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c08:	4a41      	ldr	r2, [pc, #260]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c10:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2232      	movs	r2, #50	; 0x32
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	4a3f      	ldr	r2, [pc, #252]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c20:	0c9b      	lsrs	r3, r3, #18
 8001c22:	3301      	adds	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c26:	e002      	b.n	8001c2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c2e:	4b38      	ldr	r3, [pc, #224]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c3a:	d102      	bne.n	8001c42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f2      	bne.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c42:	4b33      	ldr	r3, [pc, #204]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c4e:	d158      	bne.n	8001d02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e057      	b.n	8001d04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c54:	4b2e      	ldr	r3, [pc, #184]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c5a:	4a2d      	ldr	r2, [pc, #180]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c64:	e04d      	b.n	8001d02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c6c:	d141      	bne.n	8001cf2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c6e:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c7a:	d131      	bne.n	8001ce0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c7c:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c82:	4a23      	ldr	r2, [pc, #140]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c8c:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c94:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2232      	movs	r2, #50	; 0x32
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cac:	0c9b      	lsrs	r3, r3, #18
 8001cae:	3301      	adds	r3, #1
 8001cb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cb2:	e002      	b.n	8001cba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc6:	d102      	bne.n	8001cce <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f2      	bne.n	8001cb4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cda:	d112      	bne.n	8001d02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e011      	b.n	8001d04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001cf0:	e007      	b.n	8001d02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d00:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	40007000 	.word	0x40007000
 8001d14:	2000009c 	.word	0x2000009c
 8001d18:	431bde83 	.word	0x431bde83

08001d1c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2a:	6093      	str	r3, [r2, #8]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40007000 	.word	0x40007000

08001d3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e306      	b.n	800235c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d075      	beq.n	8001e46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d5a:	4b97      	ldr	r3, [pc, #604]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d64:	4b94      	ldr	r3, [pc, #592]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b0c      	cmp	r3, #12
 8001d72:	d102      	bne.n	8001d7a <HAL_RCC_OscConfig+0x3e>
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d002      	beq.n	8001d80 <HAL_RCC_OscConfig+0x44>
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d10b      	bne.n	8001d98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d80:	4b8d      	ldr	r3, [pc, #564]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d05b      	beq.n	8001e44 <HAL_RCC_OscConfig+0x108>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d157      	bne.n	8001e44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e2e1      	b.n	800235c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da0:	d106      	bne.n	8001db0 <HAL_RCC_OscConfig+0x74>
 8001da2:	4b85      	ldr	r3, [pc, #532]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a84      	ldr	r2, [pc, #528]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e01d      	b.n	8001dec <HAL_RCC_OscConfig+0xb0>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x98>
 8001dba:	4b7f      	ldr	r3, [pc, #508]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a7e      	ldr	r2, [pc, #504]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b7c      	ldr	r3, [pc, #496]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a7b      	ldr	r2, [pc, #492]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e00b      	b.n	8001dec <HAL_RCC_OscConfig+0xb0>
 8001dd4:	4b78      	ldr	r3, [pc, #480]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a77      	ldr	r2, [pc, #476]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b75      	ldr	r3, [pc, #468]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a74      	ldr	r2, [pc, #464]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d013      	beq.n	8001e1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff fb3e 	bl	8001474 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fb3a 	bl	8001474 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e2a6      	b.n	800235c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0e:	4b6a      	ldr	r3, [pc, #424]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0xc0>
 8001e1a:	e014      	b.n	8001e46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fb2a 	bl	8001474 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e24:	f7ff fb26 	bl	8001474 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	; 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e292      	b.n	800235c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e36:	4b60      	ldr	r3, [pc, #384]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0xe8>
 8001e42:	e000      	b.n	8001e46 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d075      	beq.n	8001f3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e52:	4b59      	ldr	r3, [pc, #356]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e5c:	4b56      	ldr	r3, [pc, #344]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	2b0c      	cmp	r3, #12
 8001e6a:	d102      	bne.n	8001e72 <HAL_RCC_OscConfig+0x136>
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d002      	beq.n	8001e78 <HAL_RCC_OscConfig+0x13c>
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d11f      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e78:	4b4f      	ldr	r3, [pc, #316]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_RCC_OscConfig+0x154>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e265      	b.n	800235c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e90:	4b49      	ldr	r3, [pc, #292]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	061b      	lsls	r3, r3, #24
 8001e9e:	4946      	ldr	r1, [pc, #280]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ea4:	4b45      	ldr	r3, [pc, #276]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fa97 	bl	80013dc <HAL_InitTick>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d043      	beq.n	8001f3c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e251      	b.n	800235c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d023      	beq.n	8001f08 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec0:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a3c      	ldr	r2, [pc, #240]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff fad2 	bl	8001474 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed4:	f7ff face 	bl	8001474 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e23a      	b.n	800235c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee6:	4b34      	ldr	r3, [pc, #208]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef2:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	061b      	lsls	r3, r3, #24
 8001f00:	492d      	ldr	r1, [pc, #180]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	604b      	str	r3, [r1, #4]
 8001f06:	e01a      	b.n	8001f3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f08:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a2a      	ldr	r2, [pc, #168]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001f0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7ff faae 	bl	8001474 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1c:	f7ff faaa 	bl	8001474 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e216      	b.n	800235c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f2e:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x1e0>
 8001f3a:	e000      	b.n	8001f3e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d041      	beq.n	8001fce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01c      	beq.n	8001f8c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f58:	4a17      	ldr	r2, [pc, #92]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f62:	f7ff fa87 	bl	8001474 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6a:	f7ff fa83 	bl	8001474 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e1ef      	b.n	800235c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0ef      	beq.n	8001f6a <HAL_RCC_OscConfig+0x22e>
 8001f8a:	e020      	b.n	8001fce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f92:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <HAL_RCC_OscConfig+0x27c>)
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9c:	f7ff fa6a 	bl	8001474 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa2:	e00d      	b.n	8001fc0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa4:	f7ff fa66 	bl	8001474 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d906      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e1d2      	b.n	800235c <HAL_RCC_OscConfig+0x620>
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	200000a0 	.word	0x200000a0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc0:	4b8c      	ldr	r3, [pc, #560]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 8001fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1ea      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80a6 	beq.w	8002128 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fe0:	4b84      	ldr	r3, [pc, #528]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x2b4>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_OscConfig+0x2b6>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00d      	beq.n	8002012 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff6:	4b7f      	ldr	r3, [pc, #508]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	4a7e      	ldr	r2, [pc, #504]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 8001ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002000:	6593      	str	r3, [r2, #88]	; 0x58
 8002002:	4b7c      	ldr	r3, [pc, #496]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800200e:	2301      	movs	r3, #1
 8002010:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002012:	4b79      	ldr	r3, [pc, #484]	; (80021f8 <HAL_RCC_OscConfig+0x4bc>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d118      	bne.n	8002050 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800201e:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <HAL_RCC_OscConfig+0x4bc>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a75      	ldr	r2, [pc, #468]	; (80021f8 <HAL_RCC_OscConfig+0x4bc>)
 8002024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800202a:	f7ff fa23 	bl	8001474 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002032:	f7ff fa1f 	bl	8001474 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e18b      	b.n	800235c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002044:	4b6c      	ldr	r3, [pc, #432]	; (80021f8 <HAL_RCC_OscConfig+0x4bc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f0      	beq.n	8002032 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d108      	bne.n	800206a <HAL_RCC_OscConfig+0x32e>
 8002058:	4b66      	ldr	r3, [pc, #408]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 800205a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205e:	4a65      	ldr	r2, [pc, #404]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002068:	e024      	b.n	80020b4 <HAL_RCC_OscConfig+0x378>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b05      	cmp	r3, #5
 8002070:	d110      	bne.n	8002094 <HAL_RCC_OscConfig+0x358>
 8002072:	4b60      	ldr	r3, [pc, #384]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	4a5e      	ldr	r2, [pc, #376]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 800207a:	f043 0304 	orr.w	r3, r3, #4
 800207e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002082:	4b5c      	ldr	r3, [pc, #368]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002088:	4a5a      	ldr	r2, [pc, #360]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002092:	e00f      	b.n	80020b4 <HAL_RCC_OscConfig+0x378>
 8002094:	4b57      	ldr	r3, [pc, #348]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209a:	4a56      	ldr	r2, [pc, #344]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a4:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020aa:	4a52      	ldr	r2, [pc, #328]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 80020ac:	f023 0304 	bic.w	r3, r3, #4
 80020b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d016      	beq.n	80020ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020bc:	f7ff f9da 	bl	8001474 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c2:	e00a      	b.n	80020da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c4:	f7ff f9d6 	bl	8001474 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e140      	b.n	800235c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020da:	4b46      	ldr	r3, [pc, #280]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ed      	beq.n	80020c4 <HAL_RCC_OscConfig+0x388>
 80020e8:	e015      	b.n	8002116 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ea:	f7ff f9c3 	bl	8001474 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f2:	f7ff f9bf 	bl	8001474 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e129      	b.n	800235c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002108:	4b3a      	ldr	r3, [pc, #232]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1ed      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002116:	7ffb      	ldrb	r3, [r7, #31]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d105      	bne.n	8002128 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211c:	4b35      	ldr	r3, [pc, #212]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	4a34      	ldr	r2, [pc, #208]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 8002122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002126:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	2b00      	cmp	r3, #0
 8002132:	d03c      	beq.n	80021ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01c      	beq.n	8002176 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800213c:	4b2d      	ldr	r3, [pc, #180]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 800213e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002142:	4a2c      	ldr	r2, [pc, #176]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7ff f992 	bl	8001474 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002154:	f7ff f98e 	bl	8001474 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e0fa      	b.n	800235c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002166:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 8002168:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0ef      	beq.n	8002154 <HAL_RCC_OscConfig+0x418>
 8002174:	e01b      	b.n	80021ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002176:	4b1f      	ldr	r3, [pc, #124]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 8002178:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800217c:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 800217e:	f023 0301 	bic.w	r3, r3, #1
 8002182:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002186:	f7ff f975 	bl	8001474 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800218e:	f7ff f971 	bl	8001474 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0dd      	b.n	800235c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 80021a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1ef      	bne.n	800218e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80d1 	beq.w	800235a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b0c      	cmp	r3, #12
 80021c2:	f000 808b 	beq.w	80022dc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d15e      	bne.n	800228c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a08      	ldr	r2, [pc, #32]	; (80021f4 <HAL_RCC_OscConfig+0x4b8>)
 80021d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021da:	f7ff f94b 	bl	8001474 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e0:	e00c      	b.n	80021fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e2:	f7ff f947 	bl	8001474 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d905      	bls.n	80021fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e0b3      	b.n	800235c <HAL_RCC_OscConfig+0x620>
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fc:	4b59      	ldr	r3, [pc, #356]	; (8002364 <HAL_RCC_OscConfig+0x628>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1ec      	bne.n	80021e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002208:	4b56      	ldr	r3, [pc, #344]	; (8002364 <HAL_RCC_OscConfig+0x628>)
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	4b56      	ldr	r3, [pc, #344]	; (8002368 <HAL_RCC_OscConfig+0x62c>)
 800220e:	4013      	ands	r3, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6a11      	ldr	r1, [r2, #32]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002218:	3a01      	subs	r2, #1
 800221a:	0112      	lsls	r2, r2, #4
 800221c:	4311      	orrs	r1, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002222:	0212      	lsls	r2, r2, #8
 8002224:	4311      	orrs	r1, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800222a:	0852      	lsrs	r2, r2, #1
 800222c:	3a01      	subs	r2, #1
 800222e:	0552      	lsls	r2, r2, #21
 8002230:	4311      	orrs	r1, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002236:	0852      	lsrs	r2, r2, #1
 8002238:	3a01      	subs	r2, #1
 800223a:	0652      	lsls	r2, r2, #25
 800223c:	4311      	orrs	r1, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002242:	06d2      	lsls	r2, r2, #27
 8002244:	430a      	orrs	r2, r1
 8002246:	4947      	ldr	r1, [pc, #284]	; (8002364 <HAL_RCC_OscConfig+0x628>)
 8002248:	4313      	orrs	r3, r2
 800224a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800224c:	4b45      	ldr	r3, [pc, #276]	; (8002364 <HAL_RCC_OscConfig+0x628>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a44      	ldr	r2, [pc, #272]	; (8002364 <HAL_RCC_OscConfig+0x628>)
 8002252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002256:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002258:	4b42      	ldr	r3, [pc, #264]	; (8002364 <HAL_RCC_OscConfig+0x628>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a41      	ldr	r2, [pc, #260]	; (8002364 <HAL_RCC_OscConfig+0x628>)
 800225e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002262:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7ff f906 	bl	8001474 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226c:	f7ff f902 	bl	8001474 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e06e      	b.n	800235c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227e:	4b39      	ldr	r3, [pc, #228]	; (8002364 <HAL_RCC_OscConfig+0x628>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x530>
 800228a:	e066      	b.n	800235a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228c:	4b35      	ldr	r3, [pc, #212]	; (8002364 <HAL_RCC_OscConfig+0x628>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a34      	ldr	r2, [pc, #208]	; (8002364 <HAL_RCC_OscConfig+0x628>)
 8002292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002296:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002298:	4b32      	ldr	r3, [pc, #200]	; (8002364 <HAL_RCC_OscConfig+0x628>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4a31      	ldr	r2, [pc, #196]	; (8002364 <HAL_RCC_OscConfig+0x628>)
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022a4:	4b2f      	ldr	r3, [pc, #188]	; (8002364 <HAL_RCC_OscConfig+0x628>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4a2e      	ldr	r2, [pc, #184]	; (8002364 <HAL_RCC_OscConfig+0x628>)
 80022aa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7ff f8de 	bl	8001474 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022bc:	f7ff f8da 	bl	8001474 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e046      	b.n	800235c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ce:	4b25      	ldr	r3, [pc, #148]	; (8002364 <HAL_RCC_OscConfig+0x628>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x580>
 80022da:	e03e      	b.n	800235a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e039      	b.n	800235c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80022e8:	4b1e      	ldr	r3, [pc, #120]	; (8002364 <HAL_RCC_OscConfig+0x628>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f003 0203 	and.w	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d12c      	bne.n	8002356 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	3b01      	subs	r3, #1
 8002308:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d123      	bne.n	8002356 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800231a:	429a      	cmp	r2, r3
 800231c:	d11b      	bne.n	8002356 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d113      	bne.n	8002356 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	085b      	lsrs	r3, r3, #1
 800233a:	3b01      	subs	r3, #1
 800233c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d109      	bne.n	8002356 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234c:	085b      	lsrs	r3, r3, #1
 800234e:	3b01      	subs	r3, #1
 8002350:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002352:	429a      	cmp	r2, r3
 8002354:	d001      	beq.n	800235a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3720      	adds	r7, #32
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	019f800c 	.word	0x019f800c

0800236c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e11e      	b.n	80025c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002384:	4b91      	ldr	r3, [pc, #580]	; (80025cc <HAL_RCC_ClockConfig+0x260>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d910      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b8e      	ldr	r3, [pc, #568]	; (80025cc <HAL_RCC_ClockConfig+0x260>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 020f 	bic.w	r2, r3, #15
 800239a:	498c      	ldr	r1, [pc, #560]	; (80025cc <HAL_RCC_ClockConfig+0x260>)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	4313      	orrs	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a2:	4b8a      	ldr	r3, [pc, #552]	; (80025cc <HAL_RCC_ClockConfig+0x260>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e106      	b.n	80025c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d073      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d129      	bne.n	800241c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c8:	4b81      	ldr	r3, [pc, #516]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0f4      	b.n	80025c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023d8:	f000 f99e 	bl	8002718 <RCC_GetSysClockFreqFromPLLSource>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4a7c      	ldr	r2, [pc, #496]	; (80025d4 <HAL_RCC_ClockConfig+0x268>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d93f      	bls.n	8002466 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023e6:	4b7a      	ldr	r3, [pc, #488]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d033      	beq.n	8002466 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002402:	2b00      	cmp	r3, #0
 8002404:	d12f      	bne.n	8002466 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002406:	4b72      	ldr	r3, [pc, #456]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800240e:	4a70      	ldr	r2, [pc, #448]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 8002410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002414:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	e024      	b.n	8002466 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d107      	bne.n	8002434 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002424:	4b6a      	ldr	r3, [pc, #424]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d109      	bne.n	8002444 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0c6      	b.n	80025c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002434:	4b66      	ldr	r3, [pc, #408]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0be      	b.n	80025c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002444:	f000 f8ce 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8002448:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4a61      	ldr	r2, [pc, #388]	; (80025d4 <HAL_RCC_ClockConfig+0x268>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d909      	bls.n	8002466 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002452:	4b5f      	ldr	r3, [pc, #380]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800245a:	4a5d      	ldr	r2, [pc, #372]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 800245c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002460:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4b5a      	ldr	r3, [pc, #360]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4957      	ldr	r1, [pc, #348]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002478:	f7fe fffc 	bl	8001474 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7fe fff8 	bl	8001474 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e095      	b.n	80025c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b4e      	ldr	r3, [pc, #312]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d023      	beq.n	80024fc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c0:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4a42      	ldr	r2, [pc, #264]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 80024c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d007      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024d8:	4b3d      	ldr	r3, [pc, #244]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80024e0:	4a3b      	ldr	r2, [pc, #236]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 80024e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e8:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4936      	ldr	r1, [pc, #216]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
 80024fa:	e008      	b.n	800250e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b80      	cmp	r3, #128	; 0x80
 8002500:	d105      	bne.n	800250e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002502:	4b33      	ldr	r3, [pc, #204]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	4a32      	ldr	r2, [pc, #200]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 8002508:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800250c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800250e:	4b2f      	ldr	r3, [pc, #188]	; (80025cc <HAL_RCC_ClockConfig+0x260>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d21d      	bcs.n	8002558 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251c:	4b2b      	ldr	r3, [pc, #172]	; (80025cc <HAL_RCC_ClockConfig+0x260>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 020f 	bic.w	r2, r3, #15
 8002524:	4929      	ldr	r1, [pc, #164]	; (80025cc <HAL_RCC_ClockConfig+0x260>)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800252c:	f7fe ffa2 	bl	8001474 <HAL_GetTick>
 8002530:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	e00a      	b.n	800254a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002534:	f7fe ff9e 	bl	8001474 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e03b      	b.n	80025c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <HAL_RCC_ClockConfig+0x260>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d1ed      	bne.n	8002534 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002564:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4917      	ldr	r1, [pc, #92]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002582:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	490f      	ldr	r1, [pc, #60]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002596:	f000 f825 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 800259a:	4602      	mov	r2, r0
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_RCC_ClockConfig+0x264>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	490c      	ldr	r1, [pc, #48]	; (80025d8 <HAL_RCC_ClockConfig+0x26c>)
 80025a8:	5ccb      	ldrb	r3, [r1, r3]
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	fa22 f303 	lsr.w	r3, r2, r3
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_RCC_ClockConfig+0x270>)
 80025b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <HAL_RCC_ClockConfig+0x274>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe ff0e 	bl	80013dc <HAL_InitTick>
 80025c0:	4603      	mov	r3, r0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40022000 	.word	0x40022000
 80025d0:	40021000 	.word	0x40021000
 80025d4:	04c4b400 	.word	0x04c4b400
 80025d8:	080080d8 	.word	0x080080d8
 80025dc:	2000009c 	.word	0x2000009c
 80025e0:	200000a0 	.word	0x200000a0

080025e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025ea:	4b2c      	ldr	r3, [pc, #176]	; (800269c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d102      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025f6:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	e047      	b.n	800268c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025fc:	4b27      	ldr	r3, [pc, #156]	; (800269c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b08      	cmp	r3, #8
 8002606:	d102      	bne.n	800260e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002608:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	e03e      	b.n	800268c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800260e:	4b23      	ldr	r3, [pc, #140]	; (800269c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d136      	bne.n	8002688 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800261a:	4b20      	ldr	r3, [pc, #128]	; (800269c <HAL_RCC_GetSysClockFreq+0xb8>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002624:	4b1d      	ldr	r3, [pc, #116]	; (800269c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	3301      	adds	r3, #1
 8002630:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d10c      	bne.n	8002652 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002638:	4a1a      	ldr	r2, [pc, #104]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002640:	4a16      	ldr	r2, [pc, #88]	; (800269c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002642:	68d2      	ldr	r2, [r2, #12]
 8002644:	0a12      	lsrs	r2, r2, #8
 8002646:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	617b      	str	r3, [r7, #20]
      break;
 8002650:	e00c      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002652:	4a13      	ldr	r2, [pc, #76]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	fbb2 f3f3 	udiv	r3, r2, r3
 800265a:	4a10      	ldr	r2, [pc, #64]	; (800269c <HAL_RCC_GetSysClockFreq+0xb8>)
 800265c:	68d2      	ldr	r2, [r2, #12]
 800265e:	0a12      	lsrs	r2, r2, #8
 8002660:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002664:	fb02 f303 	mul.w	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
      break;
 800266a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_GetSysClockFreq+0xb8>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	0e5b      	lsrs	r3, r3, #25
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	3301      	adds	r3, #1
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	fbb2 f3f3 	udiv	r3, r2, r3
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	e001      	b.n	800268c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800268c:	693b      	ldr	r3, [r7, #16]
}
 800268e:	4618      	mov	r0, r3
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	00f42400 	.word	0x00f42400
 80026a4:	016e3600 	.word	0x016e3600

080026a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	2000009c 	.word	0x2000009c

080026c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026c4:	f7ff fff0 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4904      	ldr	r1, [pc, #16]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40021000 	.word	0x40021000
 80026e8:	080080e8 	.word	0x080080e8

080026ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026f0:	f7ff ffda 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	0adb      	lsrs	r3, r3, #11
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4904      	ldr	r1, [pc, #16]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000
 8002714:	080080e8 	.word	0x080080e8

08002718 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800271e:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002728:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	3301      	adds	r3, #1
 8002734:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d10c      	bne.n	8002756 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800273c:	4a17      	ldr	r2, [pc, #92]	; (800279c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	fbb2 f3f3 	udiv	r3, r2, r3
 8002744:	4a14      	ldr	r2, [pc, #80]	; (8002798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002746:	68d2      	ldr	r2, [r2, #12]
 8002748:	0a12      	lsrs	r2, r2, #8
 800274a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800274e:	fb02 f303 	mul.w	r3, r2, r3
 8002752:	617b      	str	r3, [r7, #20]
    break;
 8002754:	e00c      	b.n	8002770 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002756:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	fbb2 f3f3 	udiv	r3, r2, r3
 800275e:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002760:	68d2      	ldr	r2, [r2, #12]
 8002762:	0a12      	lsrs	r2, r2, #8
 8002764:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002768:	fb02 f303 	mul.w	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]
    break;
 800276e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	0e5b      	lsrs	r3, r3, #25
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	3301      	adds	r3, #1
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800278a:	687b      	ldr	r3, [r7, #4]
}
 800278c:	4618      	mov	r0, r3
 800278e:	371c      	adds	r7, #28
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	40021000 	.word	0x40021000
 800279c:	016e3600 	.word	0x016e3600
 80027a0:	00f42400 	.word	0x00f42400

080027a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027ac:	2300      	movs	r3, #0
 80027ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027b0:	2300      	movs	r3, #0
 80027b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 8098 	beq.w	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c6:	4b43      	ldr	r3, [pc, #268]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10d      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	4b40      	ldr	r3, [pc, #256]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	4a3f      	ldr	r2, [pc, #252]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6593      	str	r3, [r2, #88]	; 0x58
 80027de:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ea:	2301      	movs	r3, #1
 80027ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ee:	4b3a      	ldr	r3, [pc, #232]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a39      	ldr	r2, [pc, #228]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027fa:	f7fe fe3b 	bl	8001474 <HAL_GetTick>
 80027fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002800:	e009      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002802:	f7fe fe37 	bl	8001474 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d902      	bls.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	74fb      	strb	r3, [r7, #19]
        break;
 8002814:	e005      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002816:	4b30      	ldr	r3, [pc, #192]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0ef      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d159      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002828:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002832:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01e      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	429a      	cmp	r2, r3
 8002842:	d019      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002844:	4b23      	ldr	r3, [pc, #140]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800284e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002850:	4b20      	ldr	r3, [pc, #128]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	4a1f      	ldr	r2, [pc, #124]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002860:	4b1c      	ldr	r3, [pc, #112]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002866:	4a1b      	ldr	r2, [pc, #108]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002870:	4a18      	ldr	r2, [pc, #96]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d016      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fe fdf7 	bl	8001474 <HAL_GetTick>
 8002886:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002888:	e00b      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7fe fdf3 	bl	8001474 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	; 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d902      	bls.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	74fb      	strb	r3, [r7, #19]
            break;
 80028a0:	e006      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0ec      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10b      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c4:	4903      	ldr	r1, [pc, #12]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028cc:	e008      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028ce:	7cfb      	ldrb	r3, [r7, #19]
 80028d0:	74bb      	strb	r3, [r7, #18]
 80028d2:	e005      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e0:	7c7b      	ldrb	r3, [r7, #17]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d105      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e6:	4ba7      	ldr	r3, [pc, #668]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	4aa6      	ldr	r2, [pc, #664]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028fe:	4ba1      	ldr	r3, [pc, #644]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002904:	f023 0203 	bic.w	r2, r3, #3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	499d      	ldr	r1, [pc, #628]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002920:	4b98      	ldr	r3, [pc, #608]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	f023 020c 	bic.w	r2, r3, #12
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	4995      	ldr	r1, [pc, #596]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002942:	4b90      	ldr	r3, [pc, #576]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002948:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	498c      	ldr	r1, [pc, #560]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002964:	4b87      	ldr	r3, [pc, #540]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	4984      	ldr	r1, [pc, #528]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002986:	4b7f      	ldr	r3, [pc, #508]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	497b      	ldr	r1, [pc, #492]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00a      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029a8:	4b76      	ldr	r3, [pc, #472]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	4973      	ldr	r1, [pc, #460]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ca:	4b6e      	ldr	r3, [pc, #440]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	496a      	ldr	r1, [pc, #424]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029ec:	4b65      	ldr	r3, [pc, #404]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	4962      	ldr	r1, [pc, #392]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a0e:	4b5d      	ldr	r3, [pc, #372]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	4959      	ldr	r1, [pc, #356]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a30:	4b54      	ldr	r3, [pc, #336]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a36:	f023 0203 	bic.w	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	4951      	ldr	r1, [pc, #324]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a52:	4b4c      	ldr	r3, [pc, #304]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	4948      	ldr	r1, [pc, #288]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d015      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a74:	4b43      	ldr	r3, [pc, #268]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4940      	ldr	r1, [pc, #256]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a92:	d105      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a94:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4a3a      	ldr	r2, [pc, #232]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d015      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002aac:	4b35      	ldr	r3, [pc, #212]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aba:	4932      	ldr	r1, [pc, #200]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aca:	d105      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002acc:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4a2c      	ldr	r2, [pc, #176]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ad6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d015      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ae4:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af2:	4924      	ldr	r1, [pc, #144]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b02:	d105      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b04:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a1e      	ldr	r2, [pc, #120]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b0e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d015      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2a:	4916      	ldr	r1, [pc, #88]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4a10      	ldr	r2, [pc, #64]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b46:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d019      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	4908      	ldr	r1, [pc, #32]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b72:	d109      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b74:	4b03      	ldr	r3, [pc, #12]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4a02      	ldr	r2, [pc, #8]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b7e:	60d3      	str	r3, [r2, #12]
 8002b80:	e002      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d015      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b94:	4b29      	ldr	r3, [pc, #164]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	4926      	ldr	r1, [pc, #152]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bb2:	d105      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bb4:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4a20      	ldr	r2, [pc, #128]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d015      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bda:	4918      	ldr	r1, [pc, #96]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bea:	d105      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bec:	4b13      	ldr	r3, [pc, #76]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4a12      	ldr	r2, [pc, #72]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d015      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c04:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c12:	490a      	ldr	r1, [pc, #40]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c22:	d105      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c2e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c30:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000

08002c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e049      	b.n	8002ce6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe f99c 	bl	8000fa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	f000 fe3c 	bl	80038fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0201 	bic.w	r2, r2, #1
 8002d04:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6a1a      	ldr	r2, [r3, #32]
 8002d0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10f      	bne.n	8002d36 <HAL_TIM_Base_Stop_IT+0x48>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6a1a      	ldr	r2, [r3, #32]
 8002d1c:	f244 4344 	movw	r3, #17476	; 0x4444
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d107      	bne.n	8002d36 <HAL_TIM_Base_Stop_IT+0x48>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0201 	bic.w	r2, r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e049      	b.n	8002df2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fe f8f6 	bl	8000f64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3304      	adds	r3, #4
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	f000 fdb6 	bl	80038fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d109      	bne.n	8002e20 <HAL_TIM_PWM_Start+0x24>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	bf14      	ite	ne
 8002e18:	2301      	movne	r3, #1
 8002e1a:	2300      	moveq	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	e03c      	b.n	8002e9a <HAL_TIM_PWM_Start+0x9e>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d109      	bne.n	8002e3a <HAL_TIM_PWM_Start+0x3e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	bf14      	ite	ne
 8002e32:	2301      	movne	r3, #1
 8002e34:	2300      	moveq	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	e02f      	b.n	8002e9a <HAL_TIM_PWM_Start+0x9e>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d109      	bne.n	8002e54 <HAL_TIM_PWM_Start+0x58>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e022      	b.n	8002e9a <HAL_TIM_PWM_Start+0x9e>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b0c      	cmp	r3, #12
 8002e58:	d109      	bne.n	8002e6e <HAL_TIM_PWM_Start+0x72>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	bf14      	ite	ne
 8002e66:	2301      	movne	r3, #1
 8002e68:	2300      	moveq	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	e015      	b.n	8002e9a <HAL_TIM_PWM_Start+0x9e>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b10      	cmp	r3, #16
 8002e72:	d109      	bne.n	8002e88 <HAL_TIM_PWM_Start+0x8c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	bf14      	ite	ne
 8002e80:	2301      	movne	r3, #1
 8002e82:	2300      	moveq	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	e008      	b.n	8002e9a <HAL_TIM_PWM_Start+0x9e>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	bf14      	ite	ne
 8002e94:	2301      	movne	r3, #1
 8002e96:	2300      	moveq	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e0a6      	b.n	8002ff0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d104      	bne.n	8002eb2 <HAL_TIM_PWM_Start+0xb6>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eb0:	e023      	b.n	8002efa <HAL_TIM_PWM_Start+0xfe>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d104      	bne.n	8002ec2 <HAL_TIM_PWM_Start+0xc6>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec0:	e01b      	b.n	8002efa <HAL_TIM_PWM_Start+0xfe>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d104      	bne.n	8002ed2 <HAL_TIM_PWM_Start+0xd6>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed0:	e013      	b.n	8002efa <HAL_TIM_PWM_Start+0xfe>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b0c      	cmp	r3, #12
 8002ed6:	d104      	bne.n	8002ee2 <HAL_TIM_PWM_Start+0xe6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ee0:	e00b      	b.n	8002efa <HAL_TIM_PWM_Start+0xfe>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	2b10      	cmp	r3, #16
 8002ee6:	d104      	bne.n	8002ef2 <HAL_TIM_PWM_Start+0xf6>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ef0:	e003      	b.n	8002efa <HAL_TIM_PWM_Start+0xfe>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2201      	movs	r2, #1
 8002f00:	6839      	ldr	r1, [r7, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f001 f968 	bl	80041d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a3a      	ldr	r2, [pc, #232]	; (8002ff8 <HAL_TIM_PWM_Start+0x1fc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d018      	beq.n	8002f44 <HAL_TIM_PWM_Start+0x148>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a39      	ldr	r2, [pc, #228]	; (8002ffc <HAL_TIM_PWM_Start+0x200>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d013      	beq.n	8002f44 <HAL_TIM_PWM_Start+0x148>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a37      	ldr	r2, [pc, #220]	; (8003000 <HAL_TIM_PWM_Start+0x204>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00e      	beq.n	8002f44 <HAL_TIM_PWM_Start+0x148>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a36      	ldr	r2, [pc, #216]	; (8003004 <HAL_TIM_PWM_Start+0x208>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d009      	beq.n	8002f44 <HAL_TIM_PWM_Start+0x148>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a34      	ldr	r2, [pc, #208]	; (8003008 <HAL_TIM_PWM_Start+0x20c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d004      	beq.n	8002f44 <HAL_TIM_PWM_Start+0x148>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a33      	ldr	r2, [pc, #204]	; (800300c <HAL_TIM_PWM_Start+0x210>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d101      	bne.n	8002f48 <HAL_TIM_PWM_Start+0x14c>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <HAL_TIM_PWM_Start+0x14e>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a25      	ldr	r2, [pc, #148]	; (8002ff8 <HAL_TIM_PWM_Start+0x1fc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d022      	beq.n	8002fae <HAL_TIM_PWM_Start+0x1b2>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f70:	d01d      	beq.n	8002fae <HAL_TIM_PWM_Start+0x1b2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a26      	ldr	r2, [pc, #152]	; (8003010 <HAL_TIM_PWM_Start+0x214>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d018      	beq.n	8002fae <HAL_TIM_PWM_Start+0x1b2>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a24      	ldr	r2, [pc, #144]	; (8003014 <HAL_TIM_PWM_Start+0x218>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d013      	beq.n	8002fae <HAL_TIM_PWM_Start+0x1b2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a23      	ldr	r2, [pc, #140]	; (8003018 <HAL_TIM_PWM_Start+0x21c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00e      	beq.n	8002fae <HAL_TIM_PWM_Start+0x1b2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a19      	ldr	r2, [pc, #100]	; (8002ffc <HAL_TIM_PWM_Start+0x200>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d009      	beq.n	8002fae <HAL_TIM_PWM_Start+0x1b2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a18      	ldr	r2, [pc, #96]	; (8003000 <HAL_TIM_PWM_Start+0x204>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d004      	beq.n	8002fae <HAL_TIM_PWM_Start+0x1b2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a18      	ldr	r2, [pc, #96]	; (800300c <HAL_TIM_PWM_Start+0x210>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d115      	bne.n	8002fda <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_TIM_PWM_Start+0x220>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b06      	cmp	r3, #6
 8002fbe:	d015      	beq.n	8002fec <HAL_TIM_PWM_Start+0x1f0>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc6:	d011      	beq.n	8002fec <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd8:	e008      	b.n	8002fec <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0201 	orr.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	e000      	b.n	8002fee <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40012c00 	.word	0x40012c00
 8002ffc:	40013400 	.word	0x40013400
 8003000:	40014000 	.word	0x40014000
 8003004:	40014400 	.word	0x40014400
 8003008:	40014800 	.word	0x40014800
 800300c:	40015000 	.word	0x40015000
 8003010:	40000400 	.word	0x40000400
 8003014:	40000800 	.word	0x40000800
 8003018:	40000c00 	.word	0x40000c00
 800301c:	00010007 	.word	0x00010007

08003020 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	6839      	ldr	r1, [r7, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f001 f8d0 	bl	80041d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a40      	ldr	r2, [pc, #256]	; (8003140 <HAL_TIM_PWM_Stop+0x120>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d018      	beq.n	8003074 <HAL_TIM_PWM_Stop+0x54>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a3f      	ldr	r2, [pc, #252]	; (8003144 <HAL_TIM_PWM_Stop+0x124>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d013      	beq.n	8003074 <HAL_TIM_PWM_Stop+0x54>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a3d      	ldr	r2, [pc, #244]	; (8003148 <HAL_TIM_PWM_Stop+0x128>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00e      	beq.n	8003074 <HAL_TIM_PWM_Stop+0x54>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a3c      	ldr	r2, [pc, #240]	; (800314c <HAL_TIM_PWM_Stop+0x12c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d009      	beq.n	8003074 <HAL_TIM_PWM_Stop+0x54>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a3a      	ldr	r2, [pc, #232]	; (8003150 <HAL_TIM_PWM_Stop+0x130>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d004      	beq.n	8003074 <HAL_TIM_PWM_Stop+0x54>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a39      	ldr	r2, [pc, #228]	; (8003154 <HAL_TIM_PWM_Stop+0x134>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d101      	bne.n	8003078 <HAL_TIM_PWM_Stop+0x58>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <HAL_TIM_PWM_Stop+0x5a>
 8003078:	2300      	movs	r3, #0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d017      	beq.n	80030ae <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6a1a      	ldr	r2, [r3, #32]
 8003084:	f241 1311 	movw	r3, #4369	; 0x1111
 8003088:	4013      	ands	r3, r2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10f      	bne.n	80030ae <HAL_TIM_PWM_Stop+0x8e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6a1a      	ldr	r2, [r3, #32]
 8003094:	f244 4344 	movw	r3, #17476	; 0x4444
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d107      	bne.n	80030ae <HAL_TIM_PWM_Stop+0x8e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6a1a      	ldr	r2, [r3, #32]
 80030b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10f      	bne.n	80030de <HAL_TIM_PWM_Stop+0xbe>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6a1a      	ldr	r2, [r3, #32]
 80030c4:	f244 4344 	movw	r3, #17476	; 0x4444
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d107      	bne.n	80030de <HAL_TIM_PWM_Stop+0xbe>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0201 	bic.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d104      	bne.n	80030ee <HAL_TIM_PWM_Stop+0xce>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ec:	e023      	b.n	8003136 <HAL_TIM_PWM_Stop+0x116>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d104      	bne.n	80030fe <HAL_TIM_PWM_Stop+0xde>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030fc:	e01b      	b.n	8003136 <HAL_TIM_PWM_Stop+0x116>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b08      	cmp	r3, #8
 8003102:	d104      	bne.n	800310e <HAL_TIM_PWM_Stop+0xee>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800310c:	e013      	b.n	8003136 <HAL_TIM_PWM_Stop+0x116>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b0c      	cmp	r3, #12
 8003112:	d104      	bne.n	800311e <HAL_TIM_PWM_Stop+0xfe>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800311c:	e00b      	b.n	8003136 <HAL_TIM_PWM_Stop+0x116>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b10      	cmp	r3, #16
 8003122:	d104      	bne.n	800312e <HAL_TIM_PWM_Stop+0x10e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800312c:	e003      	b.n	8003136 <HAL_TIM_PWM_Stop+0x116>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40012c00 	.word	0x40012c00
 8003144:	40013400 	.word	0x40013400
 8003148:	40014000 	.word	0x40014000
 800314c:	40014400 	.word	0x40014400
 8003150:	40014800 	.word	0x40014800
 8003154:	40015000 	.word	0x40015000

08003158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d122      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b02      	cmp	r3, #2
 800317a:	d11b      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0202 	mvn.w	r2, #2
 8003184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fb90 	bl	80038c0 <HAL_TIM_IC_CaptureCallback>
 80031a0:	e005      	b.n	80031ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fb82 	bl	80038ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fb93 	bl	80038d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d122      	bne.n	8003208 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d11b      	bne.n	8003208 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0204 	mvn.w	r2, #4
 80031d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fb66 	bl	80038c0 <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fb58 	bl	80038ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fb69 	bl	80038d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b08      	cmp	r3, #8
 8003214:	d122      	bne.n	800325c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b08      	cmp	r3, #8
 8003222:	d11b      	bne.n	800325c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0208 	mvn.w	r2, #8
 800322c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2204      	movs	r2, #4
 8003232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fb3c 	bl	80038c0 <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fb2e 	bl	80038ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fb3f 	bl	80038d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b10      	cmp	r3, #16
 8003268:	d122      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b10      	cmp	r3, #16
 8003276:	d11b      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0210 	mvn.w	r2, #16
 8003280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2208      	movs	r2, #8
 8003286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fb12 	bl	80038c0 <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fb04 	bl	80038ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fb15 	bl	80038d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d10e      	bne.n	80032dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d107      	bne.n	80032dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0201 	mvn.w	r2, #1
 80032d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fd fd26 	bl	8000d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b80      	cmp	r3, #128	; 0x80
 80032e8:	d10e      	bne.n	8003308 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f4:	2b80      	cmp	r3, #128	; 0x80
 80032f6:	d107      	bne.n	8003308 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f001 fa00 	bl	8004708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003316:	d10e      	bne.n	8003336 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003322:	2b80      	cmp	r3, #128	; 0x80
 8003324:	d107      	bne.n	8003336 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800332e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f001 f9f3 	bl	800471c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003340:	2b40      	cmp	r3, #64	; 0x40
 8003342:	d10e      	bne.n	8003362 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b40      	cmp	r3, #64	; 0x40
 8003350:	d107      	bne.n	8003362 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800335a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fac3 	bl	80038e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	2b20      	cmp	r3, #32
 800336e:	d10e      	bne.n	800338e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b20      	cmp	r3, #32
 800337c:	d107      	bne.n	800338e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f06f 0220 	mvn.w	r2, #32
 8003386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f001 f9b3 	bl	80046f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800339c:	d10f      	bne.n	80033be <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ac:	d107      	bne.n	80033be <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80033b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f001 f9b9 	bl	8004730 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033cc:	d10f      	bne.n	80033ee <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033dc:	d107      	bne.n	80033ee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80033e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f001 f9ab 	bl	8004744 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033fc:	d10f      	bne.n	800341e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800340c:	d107      	bne.n	800341e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f001 f99d 	bl	8004758 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003428:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800342c:	d10f      	bne.n	800344e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003438:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800343c:	d107      	bne.n	800344e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f001 f98f 	bl	800476c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003472:	2302      	movs	r3, #2
 8003474:	e0ff      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b14      	cmp	r3, #20
 8003482:	f200 80f0 	bhi.w	8003666 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003486:	a201      	add	r2, pc, #4	; (adr r2, 800348c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348c:	080034e1 	.word	0x080034e1
 8003490:	08003667 	.word	0x08003667
 8003494:	08003667 	.word	0x08003667
 8003498:	08003667 	.word	0x08003667
 800349c:	08003521 	.word	0x08003521
 80034a0:	08003667 	.word	0x08003667
 80034a4:	08003667 	.word	0x08003667
 80034a8:	08003667 	.word	0x08003667
 80034ac:	08003563 	.word	0x08003563
 80034b0:	08003667 	.word	0x08003667
 80034b4:	08003667 	.word	0x08003667
 80034b8:	08003667 	.word	0x08003667
 80034bc:	080035a3 	.word	0x080035a3
 80034c0:	08003667 	.word	0x08003667
 80034c4:	08003667 	.word	0x08003667
 80034c8:	08003667 	.word	0x08003667
 80034cc:	080035e5 	.word	0x080035e5
 80034d0:	08003667 	.word	0x08003667
 80034d4:	08003667 	.word	0x08003667
 80034d8:	08003667 	.word	0x08003667
 80034dc:	08003625 	.word	0x08003625
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fab0 	bl	8003a4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0208 	orr.w	r2, r2, #8
 80034fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699a      	ldr	r2, [r3, #24]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0204 	bic.w	r2, r2, #4
 800350a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6999      	ldr	r1, [r3, #24]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	619a      	str	r2, [r3, #24]
      break;
 800351e:	e0a5      	b.n	800366c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fb2a 	bl	8003b80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800353a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6999      	ldr	r1, [r3, #24]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	021a      	lsls	r2, r3, #8
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	619a      	str	r2, [r3, #24]
      break;
 8003560:	e084      	b.n	800366c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fb9d 	bl	8003ca8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0208 	orr.w	r2, r2, #8
 800357c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0204 	bic.w	r2, r2, #4
 800358c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69d9      	ldr	r1, [r3, #28]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	61da      	str	r2, [r3, #28]
      break;
 80035a0:	e064      	b.n	800366c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fc0f 	bl	8003dcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69da      	ldr	r2, [r3, #28]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69da      	ldr	r2, [r3, #28]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69d9      	ldr	r1, [r3, #28]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	021a      	lsls	r2, r3, #8
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	61da      	str	r2, [r3, #28]
      break;
 80035e2:	e043      	b.n	800366c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fc82 	bl	8003ef4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0208 	orr.w	r2, r2, #8
 80035fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0204 	bic.w	r2, r2, #4
 800360e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003622:	e023      	b.n	800366c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fccc 	bl	8003fc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800363e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800364e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	021a      	lsls	r2, r3, #8
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003664:	e002      	b.n	800366c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	75fb      	strb	r3, [r7, #23]
      break;
 800366a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003674:	7dfb      	ldrb	r3, [r7, #23]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop

08003680 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_TIM_ConfigClockSource+0x1c>
 8003698:	2302      	movs	r3, #2
 800369a:	e0f6      	b.n	800388a <HAL_TIM_ConfigClockSource+0x20a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80036ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a6f      	ldr	r2, [pc, #444]	; (8003894 <HAL_TIM_ConfigClockSource+0x214>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	f000 80c1 	beq.w	800385e <HAL_TIM_ConfigClockSource+0x1de>
 80036dc:	4a6d      	ldr	r2, [pc, #436]	; (8003894 <HAL_TIM_ConfigClockSource+0x214>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	f200 80c6 	bhi.w	8003870 <HAL_TIM_ConfigClockSource+0x1f0>
 80036e4:	4a6c      	ldr	r2, [pc, #432]	; (8003898 <HAL_TIM_ConfigClockSource+0x218>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	f000 80b9 	beq.w	800385e <HAL_TIM_ConfigClockSource+0x1de>
 80036ec:	4a6a      	ldr	r2, [pc, #424]	; (8003898 <HAL_TIM_ConfigClockSource+0x218>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	f200 80be 	bhi.w	8003870 <HAL_TIM_ConfigClockSource+0x1f0>
 80036f4:	4a69      	ldr	r2, [pc, #420]	; (800389c <HAL_TIM_ConfigClockSource+0x21c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	f000 80b1 	beq.w	800385e <HAL_TIM_ConfigClockSource+0x1de>
 80036fc:	4a67      	ldr	r2, [pc, #412]	; (800389c <HAL_TIM_ConfigClockSource+0x21c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	f200 80b6 	bhi.w	8003870 <HAL_TIM_ConfigClockSource+0x1f0>
 8003704:	4a66      	ldr	r2, [pc, #408]	; (80038a0 <HAL_TIM_ConfigClockSource+0x220>)
 8003706:	4293      	cmp	r3, r2
 8003708:	f000 80a9 	beq.w	800385e <HAL_TIM_ConfigClockSource+0x1de>
 800370c:	4a64      	ldr	r2, [pc, #400]	; (80038a0 <HAL_TIM_ConfigClockSource+0x220>)
 800370e:	4293      	cmp	r3, r2
 8003710:	f200 80ae 	bhi.w	8003870 <HAL_TIM_ConfigClockSource+0x1f0>
 8003714:	4a63      	ldr	r2, [pc, #396]	; (80038a4 <HAL_TIM_ConfigClockSource+0x224>)
 8003716:	4293      	cmp	r3, r2
 8003718:	f000 80a1 	beq.w	800385e <HAL_TIM_ConfigClockSource+0x1de>
 800371c:	4a61      	ldr	r2, [pc, #388]	; (80038a4 <HAL_TIM_ConfigClockSource+0x224>)
 800371e:	4293      	cmp	r3, r2
 8003720:	f200 80a6 	bhi.w	8003870 <HAL_TIM_ConfigClockSource+0x1f0>
 8003724:	4a60      	ldr	r2, [pc, #384]	; (80038a8 <HAL_TIM_ConfigClockSource+0x228>)
 8003726:	4293      	cmp	r3, r2
 8003728:	f000 8099 	beq.w	800385e <HAL_TIM_ConfigClockSource+0x1de>
 800372c:	4a5e      	ldr	r2, [pc, #376]	; (80038a8 <HAL_TIM_ConfigClockSource+0x228>)
 800372e:	4293      	cmp	r3, r2
 8003730:	f200 809e 	bhi.w	8003870 <HAL_TIM_ConfigClockSource+0x1f0>
 8003734:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003738:	f000 8091 	beq.w	800385e <HAL_TIM_ConfigClockSource+0x1de>
 800373c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003740:	f200 8096 	bhi.w	8003870 <HAL_TIM_ConfigClockSource+0x1f0>
 8003744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003748:	f000 8089 	beq.w	800385e <HAL_TIM_ConfigClockSource+0x1de>
 800374c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003750:	f200 808e 	bhi.w	8003870 <HAL_TIM_ConfigClockSource+0x1f0>
 8003754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003758:	d03e      	beq.n	80037d8 <HAL_TIM_ConfigClockSource+0x158>
 800375a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375e:	f200 8087 	bhi.w	8003870 <HAL_TIM_ConfigClockSource+0x1f0>
 8003762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003766:	f000 8086 	beq.w	8003876 <HAL_TIM_ConfigClockSource+0x1f6>
 800376a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376e:	d87f      	bhi.n	8003870 <HAL_TIM_ConfigClockSource+0x1f0>
 8003770:	2b70      	cmp	r3, #112	; 0x70
 8003772:	d01a      	beq.n	80037aa <HAL_TIM_ConfigClockSource+0x12a>
 8003774:	2b70      	cmp	r3, #112	; 0x70
 8003776:	d87b      	bhi.n	8003870 <HAL_TIM_ConfigClockSource+0x1f0>
 8003778:	2b60      	cmp	r3, #96	; 0x60
 800377a:	d050      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x19e>
 800377c:	2b60      	cmp	r3, #96	; 0x60
 800377e:	d877      	bhi.n	8003870 <HAL_TIM_ConfigClockSource+0x1f0>
 8003780:	2b50      	cmp	r3, #80	; 0x50
 8003782:	d03c      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x17e>
 8003784:	2b50      	cmp	r3, #80	; 0x50
 8003786:	d873      	bhi.n	8003870 <HAL_TIM_ConfigClockSource+0x1f0>
 8003788:	2b40      	cmp	r3, #64	; 0x40
 800378a:	d058      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x1be>
 800378c:	2b40      	cmp	r3, #64	; 0x40
 800378e:	d86f      	bhi.n	8003870 <HAL_TIM_ConfigClockSource+0x1f0>
 8003790:	2b30      	cmp	r3, #48	; 0x30
 8003792:	d064      	beq.n	800385e <HAL_TIM_ConfigClockSource+0x1de>
 8003794:	2b30      	cmp	r3, #48	; 0x30
 8003796:	d86b      	bhi.n	8003870 <HAL_TIM_ConfigClockSource+0x1f0>
 8003798:	2b20      	cmp	r3, #32
 800379a:	d060      	beq.n	800385e <HAL_TIM_ConfigClockSource+0x1de>
 800379c:	2b20      	cmp	r3, #32
 800379e:	d867      	bhi.n	8003870 <HAL_TIM_ConfigClockSource+0x1f0>
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d05c      	beq.n	800385e <HAL_TIM_ConfigClockSource+0x1de>
 80037a4:	2b10      	cmp	r3, #16
 80037a6:	d05a      	beq.n	800385e <HAL_TIM_ConfigClockSource+0x1de>
 80037a8:	e062      	b.n	8003870 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	6899      	ldr	r1, [r3, #8]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f000 fced 	bl	8004198 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	609a      	str	r2, [r3, #8]
      break;
 80037d6:	e04f      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	6899      	ldr	r1, [r3, #8]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f000 fcd6 	bl	8004198 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037fa:	609a      	str	r2, [r3, #8]
      break;
 80037fc:	e03c      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	461a      	mov	r2, r3
 800380c:	f000 fc48 	bl	80040a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2150      	movs	r1, #80	; 0x50
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fca1 	bl	800415e <TIM_ITRx_SetConfig>
      break;
 800381c:	e02c      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	461a      	mov	r2, r3
 800382c:	f000 fc67 	bl	80040fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2160      	movs	r1, #96	; 0x60
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fc91 	bl	800415e <TIM_ITRx_SetConfig>
      break;
 800383c:	e01c      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6859      	ldr	r1, [r3, #4]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	461a      	mov	r2, r3
 800384c:	f000 fc28 	bl	80040a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2140      	movs	r1, #64	; 0x40
 8003856:	4618      	mov	r0, r3
 8003858:	f000 fc81 	bl	800415e <TIM_ITRx_SetConfig>
      break;
 800385c:	e00c      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4619      	mov	r1, r3
 8003868:	4610      	mov	r0, r2
 800386a:	f000 fc78 	bl	800415e <TIM_ITRx_SetConfig>
      break;
 800386e:	e003      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
      break;
 8003874:	e000      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003876:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003888:	7bfb      	ldrb	r3, [r7, #15]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	00100070 	.word	0x00100070
 8003898:	00100060 	.word	0x00100060
 800389c:	00100050 	.word	0x00100050
 80038a0:	00100040 	.word	0x00100040
 80038a4:	00100030 	.word	0x00100030
 80038a8:	00100020 	.word	0x00100020

080038ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a46      	ldr	r2, [pc, #280]	; (8003a28 <TIM_Base_SetConfig+0x12c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d017      	beq.n	8003944 <TIM_Base_SetConfig+0x48>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391a:	d013      	beq.n	8003944 <TIM_Base_SetConfig+0x48>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a43      	ldr	r2, [pc, #268]	; (8003a2c <TIM_Base_SetConfig+0x130>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d00f      	beq.n	8003944 <TIM_Base_SetConfig+0x48>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a42      	ldr	r2, [pc, #264]	; (8003a30 <TIM_Base_SetConfig+0x134>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00b      	beq.n	8003944 <TIM_Base_SetConfig+0x48>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a41      	ldr	r2, [pc, #260]	; (8003a34 <TIM_Base_SetConfig+0x138>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d007      	beq.n	8003944 <TIM_Base_SetConfig+0x48>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a40      	ldr	r2, [pc, #256]	; (8003a38 <TIM_Base_SetConfig+0x13c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d003      	beq.n	8003944 <TIM_Base_SetConfig+0x48>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a3f      	ldr	r2, [pc, #252]	; (8003a3c <TIM_Base_SetConfig+0x140>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d108      	bne.n	8003956 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a33      	ldr	r2, [pc, #204]	; (8003a28 <TIM_Base_SetConfig+0x12c>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d023      	beq.n	80039a6 <TIM_Base_SetConfig+0xaa>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003964:	d01f      	beq.n	80039a6 <TIM_Base_SetConfig+0xaa>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a30      	ldr	r2, [pc, #192]	; (8003a2c <TIM_Base_SetConfig+0x130>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d01b      	beq.n	80039a6 <TIM_Base_SetConfig+0xaa>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a2f      	ldr	r2, [pc, #188]	; (8003a30 <TIM_Base_SetConfig+0x134>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d017      	beq.n	80039a6 <TIM_Base_SetConfig+0xaa>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a2e      	ldr	r2, [pc, #184]	; (8003a34 <TIM_Base_SetConfig+0x138>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <TIM_Base_SetConfig+0xaa>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a2d      	ldr	r2, [pc, #180]	; (8003a38 <TIM_Base_SetConfig+0x13c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00f      	beq.n	80039a6 <TIM_Base_SetConfig+0xaa>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a2d      	ldr	r2, [pc, #180]	; (8003a40 <TIM_Base_SetConfig+0x144>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00b      	beq.n	80039a6 <TIM_Base_SetConfig+0xaa>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a2c      	ldr	r2, [pc, #176]	; (8003a44 <TIM_Base_SetConfig+0x148>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d007      	beq.n	80039a6 <TIM_Base_SetConfig+0xaa>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a2b      	ldr	r2, [pc, #172]	; (8003a48 <TIM_Base_SetConfig+0x14c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d003      	beq.n	80039a6 <TIM_Base_SetConfig+0xaa>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a26      	ldr	r2, [pc, #152]	; (8003a3c <TIM_Base_SetConfig+0x140>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d108      	bne.n	80039b8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <TIM_Base_SetConfig+0x12c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d013      	beq.n	8003a0c <TIM_Base_SetConfig+0x110>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a14      	ldr	r2, [pc, #80]	; (8003a38 <TIM_Base_SetConfig+0x13c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d00f      	beq.n	8003a0c <TIM_Base_SetConfig+0x110>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a14      	ldr	r2, [pc, #80]	; (8003a40 <TIM_Base_SetConfig+0x144>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d00b      	beq.n	8003a0c <TIM_Base_SetConfig+0x110>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a13      	ldr	r2, [pc, #76]	; (8003a44 <TIM_Base_SetConfig+0x148>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d007      	beq.n	8003a0c <TIM_Base_SetConfig+0x110>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a12      	ldr	r2, [pc, #72]	; (8003a48 <TIM_Base_SetConfig+0x14c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d003      	beq.n	8003a0c <TIM_Base_SetConfig+0x110>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a0d      	ldr	r2, [pc, #52]	; (8003a3c <TIM_Base_SetConfig+0x140>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d103      	bne.n	8003a14 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	615a      	str	r2, [r3, #20]
}
 8003a1a:	bf00      	nop
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	40000400 	.word	0x40000400
 8003a30:	40000800 	.word	0x40000800
 8003a34:	40000c00 	.word	0x40000c00
 8003a38:	40013400 	.word	0x40013400
 8003a3c:	40015000 	.word	0x40015000
 8003a40:	40014000 	.word	0x40014000
 8003a44:	40014400 	.word	0x40014400
 8003a48:	40014800 	.word	0x40014800

08003a4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	f023 0201 	bic.w	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0303 	bic.w	r3, r3, #3
 8003a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f023 0302 	bic.w	r3, r3, #2
 8003a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a30      	ldr	r2, [pc, #192]	; (8003b68 <TIM_OC1_SetConfig+0x11c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d013      	beq.n	8003ad4 <TIM_OC1_SetConfig+0x88>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a2f      	ldr	r2, [pc, #188]	; (8003b6c <TIM_OC1_SetConfig+0x120>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00f      	beq.n	8003ad4 <TIM_OC1_SetConfig+0x88>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a2e      	ldr	r2, [pc, #184]	; (8003b70 <TIM_OC1_SetConfig+0x124>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00b      	beq.n	8003ad4 <TIM_OC1_SetConfig+0x88>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a2d      	ldr	r2, [pc, #180]	; (8003b74 <TIM_OC1_SetConfig+0x128>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d007      	beq.n	8003ad4 <TIM_OC1_SetConfig+0x88>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a2c      	ldr	r2, [pc, #176]	; (8003b78 <TIM_OC1_SetConfig+0x12c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d003      	beq.n	8003ad4 <TIM_OC1_SetConfig+0x88>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a2b      	ldr	r2, [pc, #172]	; (8003b7c <TIM_OC1_SetConfig+0x130>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d10c      	bne.n	8003aee <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f023 0308 	bic.w	r3, r3, #8
 8003ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f023 0304 	bic.w	r3, r3, #4
 8003aec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a1d      	ldr	r2, [pc, #116]	; (8003b68 <TIM_OC1_SetConfig+0x11c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <TIM_OC1_SetConfig+0xd2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a1c      	ldr	r2, [pc, #112]	; (8003b6c <TIM_OC1_SetConfig+0x120>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00f      	beq.n	8003b1e <TIM_OC1_SetConfig+0xd2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1b      	ldr	r2, [pc, #108]	; (8003b70 <TIM_OC1_SetConfig+0x124>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00b      	beq.n	8003b1e <TIM_OC1_SetConfig+0xd2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a1a      	ldr	r2, [pc, #104]	; (8003b74 <TIM_OC1_SetConfig+0x128>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d007      	beq.n	8003b1e <TIM_OC1_SetConfig+0xd2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <TIM_OC1_SetConfig+0x12c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d003      	beq.n	8003b1e <TIM_OC1_SetConfig+0xd2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a18      	ldr	r2, [pc, #96]	; (8003b7c <TIM_OC1_SetConfig+0x130>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d111      	bne.n	8003b42 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	621a      	str	r2, [r3, #32]
}
 8003b5c:	bf00      	nop
 8003b5e:	371c      	adds	r7, #28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	40012c00 	.word	0x40012c00
 8003b6c:	40013400 	.word	0x40013400
 8003b70:	40014000 	.word	0x40014000
 8003b74:	40014400 	.word	0x40014400
 8003b78:	40014800 	.word	0x40014800
 8003b7c:	40015000 	.word	0x40015000

08003b80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	f023 0210 	bic.w	r2, r3, #16
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f023 0320 	bic.w	r3, r3, #32
 8003bce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a2c      	ldr	r2, [pc, #176]	; (8003c90 <TIM_OC2_SetConfig+0x110>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d007      	beq.n	8003bf4 <TIM_OC2_SetConfig+0x74>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a2b      	ldr	r2, [pc, #172]	; (8003c94 <TIM_OC2_SetConfig+0x114>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_OC2_SetConfig+0x74>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a2a      	ldr	r2, [pc, #168]	; (8003c98 <TIM_OC2_SetConfig+0x118>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d10d      	bne.n	8003c10 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <TIM_OC2_SetConfig+0x110>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d013      	beq.n	8003c40 <TIM_OC2_SetConfig+0xc0>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a1e      	ldr	r2, [pc, #120]	; (8003c94 <TIM_OC2_SetConfig+0x114>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00f      	beq.n	8003c40 <TIM_OC2_SetConfig+0xc0>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a1e      	ldr	r2, [pc, #120]	; (8003c9c <TIM_OC2_SetConfig+0x11c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00b      	beq.n	8003c40 <TIM_OC2_SetConfig+0xc0>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a1d      	ldr	r2, [pc, #116]	; (8003ca0 <TIM_OC2_SetConfig+0x120>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d007      	beq.n	8003c40 <TIM_OC2_SetConfig+0xc0>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a1c      	ldr	r2, [pc, #112]	; (8003ca4 <TIM_OC2_SetConfig+0x124>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_OC2_SetConfig+0xc0>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a17      	ldr	r2, [pc, #92]	; (8003c98 <TIM_OC2_SetConfig+0x118>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d113      	bne.n	8003c68 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	621a      	str	r2, [r3, #32]
}
 8003c82:	bf00      	nop
 8003c84:	371c      	adds	r7, #28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40012c00 	.word	0x40012c00
 8003c94:	40013400 	.word	0x40013400
 8003c98:	40015000 	.word	0x40015000
 8003c9c:	40014000 	.word	0x40014000
 8003ca0:	40014400 	.word	0x40014400
 8003ca4:	40014800 	.word	0x40014800

08003ca8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0303 	bic.w	r3, r3, #3
 8003ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a2b      	ldr	r2, [pc, #172]	; (8003db4 <TIM_OC3_SetConfig+0x10c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d007      	beq.n	8003d1a <TIM_OC3_SetConfig+0x72>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a2a      	ldr	r2, [pc, #168]	; (8003db8 <TIM_OC3_SetConfig+0x110>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d003      	beq.n	8003d1a <TIM_OC3_SetConfig+0x72>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a29      	ldr	r2, [pc, #164]	; (8003dbc <TIM_OC3_SetConfig+0x114>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d10d      	bne.n	8003d36 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a1e      	ldr	r2, [pc, #120]	; (8003db4 <TIM_OC3_SetConfig+0x10c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <TIM_OC3_SetConfig+0xbe>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a1d      	ldr	r2, [pc, #116]	; (8003db8 <TIM_OC3_SetConfig+0x110>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00f      	beq.n	8003d66 <TIM_OC3_SetConfig+0xbe>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a1d      	ldr	r2, [pc, #116]	; (8003dc0 <TIM_OC3_SetConfig+0x118>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00b      	beq.n	8003d66 <TIM_OC3_SetConfig+0xbe>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <TIM_OC3_SetConfig+0x11c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d007      	beq.n	8003d66 <TIM_OC3_SetConfig+0xbe>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a1b      	ldr	r2, [pc, #108]	; (8003dc8 <TIM_OC3_SetConfig+0x120>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d003      	beq.n	8003d66 <TIM_OC3_SetConfig+0xbe>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a16      	ldr	r2, [pc, #88]	; (8003dbc <TIM_OC3_SetConfig+0x114>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d113      	bne.n	8003d8e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	621a      	str	r2, [r3, #32]
}
 8003da8:	bf00      	nop
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	40012c00 	.word	0x40012c00
 8003db8:	40013400 	.word	0x40013400
 8003dbc:	40015000 	.word	0x40015000
 8003dc0:	40014000 	.word	0x40014000
 8003dc4:	40014400 	.word	0x40014400
 8003dc8:	40014800 	.word	0x40014800

08003dcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	021b      	lsls	r3, r3, #8
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	031b      	lsls	r3, r3, #12
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a2c      	ldr	r2, [pc, #176]	; (8003edc <TIM_OC4_SetConfig+0x110>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d007      	beq.n	8003e40 <TIM_OC4_SetConfig+0x74>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a2b      	ldr	r2, [pc, #172]	; (8003ee0 <TIM_OC4_SetConfig+0x114>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d003      	beq.n	8003e40 <TIM_OC4_SetConfig+0x74>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a2a      	ldr	r2, [pc, #168]	; (8003ee4 <TIM_OC4_SetConfig+0x118>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d10d      	bne.n	8003e5c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	031b      	lsls	r3, r3, #12
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a1f      	ldr	r2, [pc, #124]	; (8003edc <TIM_OC4_SetConfig+0x110>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d013      	beq.n	8003e8c <TIM_OC4_SetConfig+0xc0>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a1e      	ldr	r2, [pc, #120]	; (8003ee0 <TIM_OC4_SetConfig+0x114>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00f      	beq.n	8003e8c <TIM_OC4_SetConfig+0xc0>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ee8 <TIM_OC4_SetConfig+0x11c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00b      	beq.n	8003e8c <TIM_OC4_SetConfig+0xc0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a1d      	ldr	r2, [pc, #116]	; (8003eec <TIM_OC4_SetConfig+0x120>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d007      	beq.n	8003e8c <TIM_OC4_SetConfig+0xc0>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a1c      	ldr	r2, [pc, #112]	; (8003ef0 <TIM_OC4_SetConfig+0x124>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d003      	beq.n	8003e8c <TIM_OC4_SetConfig+0xc0>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a17      	ldr	r2, [pc, #92]	; (8003ee4 <TIM_OC4_SetConfig+0x118>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d113      	bne.n	8003eb4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e92:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e9a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	019b      	lsls	r3, r3, #6
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	019b      	lsls	r3, r3, #6
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	621a      	str	r2, [r3, #32]
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40012c00 	.word	0x40012c00
 8003ee0:	40013400 	.word	0x40013400
 8003ee4:	40015000 	.word	0x40015000
 8003ee8:	40014000 	.word	0x40014000
 8003eec:	40014400 	.word	0x40014400
 8003ef0:	40014800 	.word	0x40014800

08003ef4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	041b      	lsls	r3, r3, #16
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a19      	ldr	r2, [pc, #100]	; (8003fb0 <TIM_OC5_SetConfig+0xbc>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <TIM_OC5_SetConfig+0x82>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <TIM_OC5_SetConfig+0xc0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00f      	beq.n	8003f76 <TIM_OC5_SetConfig+0x82>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a17      	ldr	r2, [pc, #92]	; (8003fb8 <TIM_OC5_SetConfig+0xc4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00b      	beq.n	8003f76 <TIM_OC5_SetConfig+0x82>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a16      	ldr	r2, [pc, #88]	; (8003fbc <TIM_OC5_SetConfig+0xc8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d007      	beq.n	8003f76 <TIM_OC5_SetConfig+0x82>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a15      	ldr	r2, [pc, #84]	; (8003fc0 <TIM_OC5_SetConfig+0xcc>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d003      	beq.n	8003f76 <TIM_OC5_SetConfig+0x82>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a14      	ldr	r2, [pc, #80]	; (8003fc4 <TIM_OC5_SetConfig+0xd0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d109      	bne.n	8003f8a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	621a      	str	r2, [r3, #32]
}
 8003fa4:	bf00      	nop
 8003fa6:	371c      	adds	r7, #28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	40012c00 	.word	0x40012c00
 8003fb4:	40013400 	.word	0x40013400
 8003fb8:	40014000 	.word	0x40014000
 8003fbc:	40014400 	.word	0x40014400
 8003fc0:	40014800 	.word	0x40014800
 8003fc4:	40015000 	.word	0x40015000

08003fc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	021b      	lsls	r3, r3, #8
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800400e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	051b      	lsls	r3, r3, #20
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a1a      	ldr	r2, [pc, #104]	; (8004088 <TIM_OC6_SetConfig+0xc0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d013      	beq.n	800404c <TIM_OC6_SetConfig+0x84>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a19      	ldr	r2, [pc, #100]	; (800408c <TIM_OC6_SetConfig+0xc4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00f      	beq.n	800404c <TIM_OC6_SetConfig+0x84>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a18      	ldr	r2, [pc, #96]	; (8004090 <TIM_OC6_SetConfig+0xc8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00b      	beq.n	800404c <TIM_OC6_SetConfig+0x84>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a17      	ldr	r2, [pc, #92]	; (8004094 <TIM_OC6_SetConfig+0xcc>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d007      	beq.n	800404c <TIM_OC6_SetConfig+0x84>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a16      	ldr	r2, [pc, #88]	; (8004098 <TIM_OC6_SetConfig+0xd0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d003      	beq.n	800404c <TIM_OC6_SetConfig+0x84>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a15      	ldr	r2, [pc, #84]	; (800409c <TIM_OC6_SetConfig+0xd4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d109      	bne.n	8004060 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004052:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	029b      	lsls	r3, r3, #10
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	621a      	str	r2, [r3, #32]
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40012c00 	.word	0x40012c00
 800408c:	40013400 	.word	0x40013400
 8004090:	40014000 	.word	0x40014000
 8004094:	40014400 	.word	0x40014400
 8004098:	40014800 	.word	0x40014800
 800409c:	40015000 	.word	0x40015000

080040a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f023 0201 	bic.w	r2, r3, #1
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f023 030a 	bic.w	r3, r3, #10
 80040dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	621a      	str	r2, [r3, #32]
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040fe:	b480      	push	{r7}
 8004100:	b087      	sub	sp, #28
 8004102:	af00      	add	r7, sp, #0
 8004104:	60f8      	str	r0, [r7, #12]
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f023 0210 	bic.w	r2, r3, #16
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004128:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	031b      	lsls	r3, r3, #12
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800413a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	621a      	str	r2, [r3, #32]
}
 8004152:	bf00      	nop
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800415e:	b480      	push	{r7}
 8004160:	b085      	sub	sp, #20
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004178:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	f043 0307 	orr.w	r3, r3, #7
 8004184:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	609a      	str	r2, [r3, #8]
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	021a      	lsls	r2, r3, #8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4313      	orrs	r3, r2
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	609a      	str	r2, [r3, #8]
}
 80041cc:	bf00      	nop
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	2201      	movs	r2, #1
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a1a      	ldr	r2, [r3, #32]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	43db      	mvns	r3, r3
 80041fa:	401a      	ands	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1a      	ldr	r2, [r3, #32]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	fa01 f303 	lsl.w	r3, r1, r3
 8004210:	431a      	orrs	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	621a      	str	r2, [r3, #32]
}
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <HAL_TIMEx_PWMN_Start+0x24>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b01      	cmp	r3, #1
 800423e:	bf14      	ite	ne
 8004240:	2301      	movne	r3, #1
 8004242:	2300      	moveq	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	e022      	b.n	800428e <HAL_TIMEx_PWMN_Start+0x6a>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2b04      	cmp	r3, #4
 800424c:	d109      	bne.n	8004262 <HAL_TIMEx_PWMN_Start+0x3e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b01      	cmp	r3, #1
 8004258:	bf14      	ite	ne
 800425a:	2301      	movne	r3, #1
 800425c:	2300      	moveq	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	e015      	b.n	800428e <HAL_TIMEx_PWMN_Start+0x6a>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b08      	cmp	r3, #8
 8004266:	d109      	bne.n	800427c <HAL_TIMEx_PWMN_Start+0x58>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	e008      	b.n	800428e <HAL_TIMEx_PWMN_Start+0x6a>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	bf14      	ite	ne
 8004288:	2301      	movne	r3, #1
 800428a:	2300      	moveq	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e073      	b.n	800437e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d104      	bne.n	80042a6 <HAL_TIMEx_PWMN_Start+0x82>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042a4:	e013      	b.n	80042ce <HAL_TIMEx_PWMN_Start+0xaa>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d104      	bne.n	80042b6 <HAL_TIMEx_PWMN_Start+0x92>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042b4:	e00b      	b.n	80042ce <HAL_TIMEx_PWMN_Start+0xaa>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d104      	bne.n	80042c6 <HAL_TIMEx_PWMN_Start+0xa2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042c4:	e003      	b.n	80042ce <HAL_TIMEx_PWMN_Start+0xaa>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2202      	movs	r2, #2
 80042ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2204      	movs	r2, #4
 80042d4:	6839      	ldr	r1, [r7, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fa52 	bl	8004780 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a25      	ldr	r2, [pc, #148]	; (8004388 <HAL_TIMEx_PWMN_Start+0x164>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d022      	beq.n	800433c <HAL_TIMEx_PWMN_Start+0x118>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fe:	d01d      	beq.n	800433c <HAL_TIMEx_PWMN_Start+0x118>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a21      	ldr	r2, [pc, #132]	; (800438c <HAL_TIMEx_PWMN_Start+0x168>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d018      	beq.n	800433c <HAL_TIMEx_PWMN_Start+0x118>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a20      	ldr	r2, [pc, #128]	; (8004390 <HAL_TIMEx_PWMN_Start+0x16c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d013      	beq.n	800433c <HAL_TIMEx_PWMN_Start+0x118>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1e      	ldr	r2, [pc, #120]	; (8004394 <HAL_TIMEx_PWMN_Start+0x170>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00e      	beq.n	800433c <HAL_TIMEx_PWMN_Start+0x118>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a1d      	ldr	r2, [pc, #116]	; (8004398 <HAL_TIMEx_PWMN_Start+0x174>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d009      	beq.n	800433c <HAL_TIMEx_PWMN_Start+0x118>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a1b      	ldr	r2, [pc, #108]	; (800439c <HAL_TIMEx_PWMN_Start+0x178>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d004      	beq.n	800433c <HAL_TIMEx_PWMN_Start+0x118>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a1a      	ldr	r2, [pc, #104]	; (80043a0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d115      	bne.n	8004368 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	4b18      	ldr	r3, [pc, #96]	; (80043a4 <HAL_TIMEx_PWMN_Start+0x180>)
 8004344:	4013      	ands	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2b06      	cmp	r3, #6
 800434c:	d015      	beq.n	800437a <HAL_TIMEx_PWMN_Start+0x156>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004354:	d011      	beq.n	800437a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0201 	orr.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004366:	e008      	b.n	800437a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	e000      	b.n	800437c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40012c00 	.word	0x40012c00
 800438c:	40000400 	.word	0x40000400
 8004390:	40000800 	.word	0x40000800
 8004394:	40000c00 	.word	0x40000c00
 8004398:	40013400 	.word	0x40013400
 800439c:	40014000 	.word	0x40014000
 80043a0:	40015000 	.word	0x40015000
 80043a4:	00010007 	.word	0x00010007

080043a8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2200      	movs	r2, #0
 80043b8:	6839      	ldr	r1, [r7, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 f9e0 	bl	8004780 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6a1a      	ldr	r2, [r3, #32]
 80043c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10f      	bne.n	80043f0 <HAL_TIMEx_PWMN_Stop+0x48>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6a1a      	ldr	r2, [r3, #32]
 80043d6:	f244 4344 	movw	r3, #17476	; 0x4444
 80043da:	4013      	ands	r3, r2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d107      	bne.n	80043f0 <HAL_TIMEx_PWMN_Stop+0x48>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6a1a      	ldr	r2, [r3, #32]
 80043f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10f      	bne.n	8004420 <HAL_TIMEx_PWMN_Stop+0x78>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6a1a      	ldr	r2, [r3, #32]
 8004406:	f244 4344 	movw	r3, #17476	; 0x4444
 800440a:	4013      	ands	r3, r2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d107      	bne.n	8004420 <HAL_TIMEx_PWMN_Stop+0x78>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0201 	bic.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d104      	bne.n	8004430 <HAL_TIMEx_PWMN_Stop+0x88>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800442e:	e013      	b.n	8004458 <HAL_TIMEx_PWMN_Stop+0xb0>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	2b04      	cmp	r3, #4
 8004434:	d104      	bne.n	8004440 <HAL_TIMEx_PWMN_Stop+0x98>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800443e:	e00b      	b.n	8004458 <HAL_TIMEx_PWMN_Stop+0xb0>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	2b08      	cmp	r3, #8
 8004444:	d104      	bne.n	8004450 <HAL_TIMEx_PWMN_Stop+0xa8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800444e:	e003      	b.n	8004458 <HAL_TIMEx_PWMN_Stop+0xb0>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004478:	2302      	movs	r3, #2
 800447a:	e074      	b.n	8004566 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a34      	ldr	r2, [pc, #208]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d009      	beq.n	80044ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a33      	ldr	r2, [pc, #204]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d004      	beq.n	80044ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a31      	ldr	r2, [pc, #196]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d108      	bne.n	80044cc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80044c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a21      	ldr	r2, [pc, #132]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d022      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044fc:	d01d      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d018      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a1d      	ldr	r2, [pc, #116]	; (8004584 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d013      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1c      	ldr	r2, [pc, #112]	; (8004588 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00e      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a15      	ldr	r2, [pc, #84]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d009      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a18      	ldr	r2, [pc, #96]	; (800458c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d004      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a11      	ldr	r2, [pc, #68]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d10c      	bne.n	8004554 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	4313      	orrs	r3, r2
 800454a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40012c00 	.word	0x40012c00
 8004578:	40013400 	.word	0x40013400
 800457c:	40015000 	.word	0x40015000
 8004580:	40000400 	.word	0x40000400
 8004584:	40000800 	.word	0x40000800
 8004588:	40000c00 	.word	0x40000c00
 800458c:	40014000 	.word	0x40014000

08004590 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045a8:	2302      	movs	r3, #2
 80045aa:	e096      	b.n	80046da <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	041b      	lsls	r3, r3, #16
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a2f      	ldr	r2, [pc, #188]	; (80046e8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d009      	beq.n	8004644 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a2d      	ldr	r2, [pc, #180]	; (80046ec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d004      	beq.n	8004644 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a2c      	ldr	r2, [pc, #176]	; (80046f0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d106      	bne.n	8004652 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	4313      	orrs	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a24      	ldr	r2, [pc, #144]	; (80046e8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d009      	beq.n	8004670 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a22      	ldr	r2, [pc, #136]	; (80046ec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a21      	ldr	r2, [pc, #132]	; (80046f0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d12b      	bne.n	80046c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	051b      	lsls	r3, r3, #20
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a11      	ldr	r2, [pc, #68]	; (80046e8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d009      	beq.n	80046ba <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a10      	ldr	r2, [pc, #64]	; (80046ec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d004      	beq.n	80046ba <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0e      	ldr	r2, [pc, #56]	; (80046f0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d106      	bne.n	80046c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40012c00 	.word	0x40012c00
 80046ec:	40013400 	.word	0x40013400
 80046f0:	40015000 	.word	0x40015000

080046f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f003 031f 	and.w	r3, r3, #31
 8004792:	2204      	movs	r2, #4
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a1a      	ldr	r2, [r3, #32]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	401a      	ands	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a1a      	ldr	r2, [r3, #32]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f003 031f 	and.w	r3, r3, #31
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	fa01 f303 	lsl.w	r3, r1, r3
 80047b8:	431a      	orrs	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	621a      	str	r2, [r3, #32]
}
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e042      	b.n	8004862 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc fc34 	bl	800105c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2224      	movs	r2, #36	; 0x24
 80047f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0201 	bic.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fc51 	bl	80050b4 <UART_SetConfig>
 8004812:	4603      	mov	r3, r0
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e022      	b.n	8004862 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 ff41 	bl	80056ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004838:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004848:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f042 0201 	orr.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 ffc8 	bl	80057f0 <UART_CheckIdleState>
 8004860:	4603      	mov	r3, r0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b08a      	sub	sp, #40	; 0x28
 800486e:	af02      	add	r7, sp, #8
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	603b      	str	r3, [r7, #0]
 8004876:	4613      	mov	r3, r2
 8004878:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004880:	2b20      	cmp	r3, #32
 8004882:	f040 8083 	bne.w	800498c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <HAL_UART_Transmit+0x28>
 800488c:	88fb      	ldrh	r3, [r7, #6]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e07b      	b.n	800498e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_UART_Transmit+0x3a>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e074      	b.n	800498e <HAL_UART_Transmit+0x124>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2221      	movs	r2, #33	; 0x21
 80048b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048bc:	f7fc fdda 	bl	8001474 <HAL_GetTick>
 80048c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	88fa      	ldrh	r2, [r7, #6]
 80048c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	88fa      	ldrh	r2, [r7, #6]
 80048ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048da:	d108      	bne.n	80048ee <HAL_UART_Transmit+0x84>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d104      	bne.n	80048ee <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	61bb      	str	r3, [r7, #24]
 80048ec:	e003      	b.n	80048f6 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80048fe:	e02c      	b.n	800495a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2200      	movs	r2, #0
 8004908:	2180      	movs	r1, #128	; 0x80
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 ffbb 	bl	8005886 <UART_WaitOnFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e039      	b.n	800498e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10b      	bne.n	8004938 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800492e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	3302      	adds	r3, #2
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	e007      	b.n	8004948 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	781a      	ldrb	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	3301      	adds	r3, #1
 8004946:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1cc      	bne.n	8004900 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2200      	movs	r2, #0
 800496e:	2140      	movs	r1, #64	; 0x40
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 ff88 	bl	8005886 <UART_WaitOnFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e006      	b.n	800498e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	e000      	b.n	800498e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	3720      	adds	r7, #32
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08a      	sub	sp, #40	; 0x28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d142      	bne.n	8004a36 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_UART_Receive_IT+0x24>
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e03b      	b.n	8004a38 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_UART_Receive_IT+0x36>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e034      	b.n	8004a38 <HAL_UART_Receive_IT+0xa0>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a17      	ldr	r2, [pc, #92]	; (8004a40 <HAL_UART_Receive_IT+0xa8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d01f      	beq.n	8004a26 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d018      	beq.n	8004a26 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	613b      	str	r3, [r7, #16]
   return(result);
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	623b      	str	r3, [r7, #32]
 8004a14:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a16:	69f9      	ldr	r1, [r7, #28]
 8004a18:	6a3a      	ldr	r2, [r7, #32]
 8004a1a:	e841 2300 	strex	r3, r2, [r1]
 8004a1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1e6      	bne.n	80049f4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a26:	88fb      	ldrh	r3, [r7, #6]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 fff3 	bl	8005a18 <UART_Start_Receive_IT>
 8004a32:	4603      	mov	r3, r0
 8004a34:	e000      	b.n	8004a38 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004a36:	2302      	movs	r3, #2
  }
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3728      	adds	r7, #40	; 0x28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40008000 	.word	0x40008000

08004a44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b0ba      	sub	sp, #232	; 0xe8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004a6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a72:	4013      	ands	r3, r2
 8004a74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004a78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d11b      	bne.n	8004ab8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d015      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d105      	bne.n	8004aa4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d009      	beq.n	8004ab8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 82d6 	beq.w	800505a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	4798      	blx	r3
      }
      return;
 8004ab6:	e2d0      	b.n	800505a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ab8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 811f 	beq.w	8004d00 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004ac2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004ac6:	4b8b      	ldr	r3, [pc, #556]	; (8004cf4 <HAL_UART_IRQHandler+0x2b0>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004ace:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004ad2:	4b89      	ldr	r3, [pc, #548]	; (8004cf8 <HAL_UART_IRQHandler+0x2b4>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 8112 	beq.w	8004d00 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d011      	beq.n	8004b0c <HAL_UART_IRQHandler+0xc8>
 8004ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00b      	beq.n	8004b0c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2201      	movs	r2, #1
 8004afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b02:	f043 0201 	orr.w	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d011      	beq.n	8004b3c <HAL_UART_IRQHandler+0xf8>
 8004b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00b      	beq.n	8004b3c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b32:	f043 0204 	orr.w	r2, r3, #4
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d011      	beq.n	8004b6c <HAL_UART_IRQHandler+0x128>
 8004b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2204      	movs	r2, #4
 8004b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b62:	f043 0202 	orr.w	r2, r3, #2
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d017      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d105      	bne.n	8004b90 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004b84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004b88:	4b5a      	ldr	r3, [pc, #360]	; (8004cf4 <HAL_UART_IRQHandler+0x2b0>)
 8004b8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00b      	beq.n	8004ba8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2208      	movs	r2, #8
 8004b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b9e:	f043 0208 	orr.w	r2, r3, #8
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d012      	beq.n	8004bda <HAL_UART_IRQHandler+0x196>
 8004bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00c      	beq.n	8004bda <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bd0:	f043 0220 	orr.w	r2, r3, #32
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 823c 	beq.w	800505e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d013      	beq.n	8004c1a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d105      	bne.n	8004c0a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d007      	beq.n	8004c1a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	d005      	beq.n	8004c3e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d04f      	beq.n	8004cde <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f001 f814 	bl	8005c6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4e:	2b40      	cmp	r3, #64	; 0x40
 8004c50:	d141      	bne.n	8004cd6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3308      	adds	r3, #8
 8004c58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3308      	adds	r3, #8
 8004c7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1d9      	bne.n	8004c52 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d013      	beq.n	8004cce <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004caa:	4a14      	ldr	r2, [pc, #80]	; (8004cfc <HAL_UART_IRQHandler+0x2b8>)
 8004cac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fc fd74 	bl	80017a0 <HAL_DMA_Abort_IT>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d017      	beq.n	8004cee <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004cc8:	4610      	mov	r0, r2
 8004cca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ccc:	e00f      	b.n	8004cee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f9da 	bl	8005088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd4:	e00b      	b.n	8004cee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f9d6 	bl	8005088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cdc:	e007      	b.n	8004cee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f9d2 	bl	8005088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004cec:	e1b7      	b.n	800505e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cee:	bf00      	nop
    return;
 8004cf0:	e1b5      	b.n	800505e <HAL_UART_IRQHandler+0x61a>
 8004cf2:	bf00      	nop
 8004cf4:	10000001 	.word	0x10000001
 8004cf8:	04000120 	.word	0x04000120
 8004cfc:	08005d39 	.word	0x08005d39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	f040 814a 	bne.w	8004f9e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 8143 	beq.w	8004f9e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 813c 	beq.w	8004f9e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2210      	movs	r2, #16
 8004d2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b40      	cmp	r3, #64	; 0x40
 8004d3a:	f040 80b5 	bne.w	8004ea8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 8187 	beq.w	8005062 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	f080 817f 	bcs.w	8005062 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f040 8086 	bne.w	8004e8c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	461a      	mov	r2, r3
 8004da6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004daa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004dae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004db6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004dba:	e841 2300 	strex	r3, r2, [r1]
 8004dbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1da      	bne.n	8004d80 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3308      	adds	r3, #8
 8004dd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ddc:	f023 0301 	bic.w	r3, r3, #1
 8004de0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3308      	adds	r3, #8
 8004dea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004df2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004df6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e1      	bne.n	8004dca <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3308      	adds	r3, #8
 8004e0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3308      	adds	r3, #8
 8004e26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e32:	e841 2300 	strex	r3, r2, [r1]
 8004e36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1e3      	bne.n	8004e06 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5c:	f023 0310 	bic.w	r3, r3, #16
 8004e60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e70:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e4      	bne.n	8004e4c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fc fc31 	bl	80016ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f8fb 	bl	800509c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ea6:	e0dc      	b.n	8005062 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80ce 	beq.w	8005066 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004eca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80c9 	beq.w	8005066 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ee8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004efc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e4      	bne.n	8004ed4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	623b      	str	r3, [r7, #32]
   return(result);
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f20:	f023 0301 	bic.w	r3, r3, #1
 8004f24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3308      	adds	r3, #8
 8004f2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f32:	633a      	str	r2, [r7, #48]	; 0x30
 8004f34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f3a:	e841 2300 	strex	r3, r2, [r1]
 8004f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1e1      	bne.n	8004f0a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	e853 3f00 	ldrex	r3, [r3]
 8004f66:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0310 	bic.w	r3, r3, #16
 8004f6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	69b9      	ldr	r1, [r7, #24]
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	617b      	str	r3, [r7, #20]
   return(result);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e4      	bne.n	8004f5a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f94:	4619      	mov	r1, r3
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f880 	bl	800509c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f9c:	e063      	b.n	8005066 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00e      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x584>
 8004faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d008      	beq.n	8004fc8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004fbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f001 fb57 	bl	8006674 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fc6:	e051      	b.n	800506c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d014      	beq.n	8004ffe <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d105      	bne.n	8004fec <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fe4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d008      	beq.n	8004ffe <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d03a      	beq.n	800506a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	4798      	blx	r3
    }
    return;
 8004ffc:	e035      	b.n	800506a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d009      	beq.n	800501e <HAL_UART_IRQHandler+0x5da>
 800500a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800500e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fea4 	bl	8005d64 <UART_EndTransmit_IT>
    return;
 800501c:	e026      	b.n	800506c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800501e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005022:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d009      	beq.n	800503e <HAL_UART_IRQHandler+0x5fa>
 800502a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800502e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f001 fb30 	bl	800669c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800503c:	e016      	b.n	800506c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800503e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005042:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d010      	beq.n	800506c <HAL_UART_IRQHandler+0x628>
 800504a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800504e:	2b00      	cmp	r3, #0
 8005050:	da0c      	bge.n	800506c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f001 fb18 	bl	8006688 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005058:	e008      	b.n	800506c <HAL_UART_IRQHandler+0x628>
      return;
 800505a:	bf00      	nop
 800505c:	e006      	b.n	800506c <HAL_UART_IRQHandler+0x628>
    return;
 800505e:	bf00      	nop
 8005060:	e004      	b.n	800506c <HAL_UART_IRQHandler+0x628>
      return;
 8005062:	bf00      	nop
 8005064:	e002      	b.n	800506c <HAL_UART_IRQHandler+0x628>
      return;
 8005066:	bf00      	nop
 8005068:	e000      	b.n	800506c <HAL_UART_IRQHandler+0x628>
    return;
 800506a:	bf00      	nop
  }
}
 800506c:	37e8      	adds	r7, #232	; 0xe8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop

08005074 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050b8:	b08c      	sub	sp, #48	; 0x30
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	431a      	orrs	r2, r3
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	431a      	orrs	r2, r3
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	4313      	orrs	r3, r2
 80050da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	4baa      	ldr	r3, [pc, #680]	; (800538c <UART_SetConfig+0x2d8>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	6812      	ldr	r2, [r2, #0]
 80050ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050ec:	430b      	orrs	r3, r1
 80050ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a9f      	ldr	r2, [pc, #636]	; (8005390 <UART_SetConfig+0x2dc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d004      	beq.n	8005120 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800511c:	4313      	orrs	r3, r2
 800511e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800512a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	6812      	ldr	r2, [r2, #0]
 8005132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005134:	430b      	orrs	r3, r1
 8005136:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	f023 010f 	bic.w	r1, r3, #15
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a90      	ldr	r2, [pc, #576]	; (8005394 <UART_SetConfig+0x2e0>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d125      	bne.n	80051a4 <UART_SetConfig+0xf0>
 8005158:	4b8f      	ldr	r3, [pc, #572]	; (8005398 <UART_SetConfig+0x2e4>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	2b03      	cmp	r3, #3
 8005164:	d81a      	bhi.n	800519c <UART_SetConfig+0xe8>
 8005166:	a201      	add	r2, pc, #4	; (adr r2, 800516c <UART_SetConfig+0xb8>)
 8005168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516c:	0800517d 	.word	0x0800517d
 8005170:	0800518d 	.word	0x0800518d
 8005174:	08005185 	.word	0x08005185
 8005178:	08005195 	.word	0x08005195
 800517c:	2301      	movs	r3, #1
 800517e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005182:	e116      	b.n	80053b2 <UART_SetConfig+0x2fe>
 8005184:	2302      	movs	r3, #2
 8005186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800518a:	e112      	b.n	80053b2 <UART_SetConfig+0x2fe>
 800518c:	2304      	movs	r3, #4
 800518e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005192:	e10e      	b.n	80053b2 <UART_SetConfig+0x2fe>
 8005194:	2308      	movs	r3, #8
 8005196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800519a:	e10a      	b.n	80053b2 <UART_SetConfig+0x2fe>
 800519c:	2310      	movs	r3, #16
 800519e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051a2:	e106      	b.n	80053b2 <UART_SetConfig+0x2fe>
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a7c      	ldr	r2, [pc, #496]	; (800539c <UART_SetConfig+0x2e8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d138      	bne.n	8005220 <UART_SetConfig+0x16c>
 80051ae:	4b7a      	ldr	r3, [pc, #488]	; (8005398 <UART_SetConfig+0x2e4>)
 80051b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b4:	f003 030c 	and.w	r3, r3, #12
 80051b8:	2b0c      	cmp	r3, #12
 80051ba:	d82d      	bhi.n	8005218 <UART_SetConfig+0x164>
 80051bc:	a201      	add	r2, pc, #4	; (adr r2, 80051c4 <UART_SetConfig+0x110>)
 80051be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c2:	bf00      	nop
 80051c4:	080051f9 	.word	0x080051f9
 80051c8:	08005219 	.word	0x08005219
 80051cc:	08005219 	.word	0x08005219
 80051d0:	08005219 	.word	0x08005219
 80051d4:	08005209 	.word	0x08005209
 80051d8:	08005219 	.word	0x08005219
 80051dc:	08005219 	.word	0x08005219
 80051e0:	08005219 	.word	0x08005219
 80051e4:	08005201 	.word	0x08005201
 80051e8:	08005219 	.word	0x08005219
 80051ec:	08005219 	.word	0x08005219
 80051f0:	08005219 	.word	0x08005219
 80051f4:	08005211 	.word	0x08005211
 80051f8:	2300      	movs	r3, #0
 80051fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051fe:	e0d8      	b.n	80053b2 <UART_SetConfig+0x2fe>
 8005200:	2302      	movs	r3, #2
 8005202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005206:	e0d4      	b.n	80053b2 <UART_SetConfig+0x2fe>
 8005208:	2304      	movs	r3, #4
 800520a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800520e:	e0d0      	b.n	80053b2 <UART_SetConfig+0x2fe>
 8005210:	2308      	movs	r3, #8
 8005212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005216:	e0cc      	b.n	80053b2 <UART_SetConfig+0x2fe>
 8005218:	2310      	movs	r3, #16
 800521a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800521e:	e0c8      	b.n	80053b2 <UART_SetConfig+0x2fe>
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a5e      	ldr	r2, [pc, #376]	; (80053a0 <UART_SetConfig+0x2ec>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d125      	bne.n	8005276 <UART_SetConfig+0x1c2>
 800522a:	4b5b      	ldr	r3, [pc, #364]	; (8005398 <UART_SetConfig+0x2e4>)
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005230:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005234:	2b30      	cmp	r3, #48	; 0x30
 8005236:	d016      	beq.n	8005266 <UART_SetConfig+0x1b2>
 8005238:	2b30      	cmp	r3, #48	; 0x30
 800523a:	d818      	bhi.n	800526e <UART_SetConfig+0x1ba>
 800523c:	2b20      	cmp	r3, #32
 800523e:	d00a      	beq.n	8005256 <UART_SetConfig+0x1a2>
 8005240:	2b20      	cmp	r3, #32
 8005242:	d814      	bhi.n	800526e <UART_SetConfig+0x1ba>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <UART_SetConfig+0x19a>
 8005248:	2b10      	cmp	r3, #16
 800524a:	d008      	beq.n	800525e <UART_SetConfig+0x1aa>
 800524c:	e00f      	b.n	800526e <UART_SetConfig+0x1ba>
 800524e:	2300      	movs	r3, #0
 8005250:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005254:	e0ad      	b.n	80053b2 <UART_SetConfig+0x2fe>
 8005256:	2302      	movs	r3, #2
 8005258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525c:	e0a9      	b.n	80053b2 <UART_SetConfig+0x2fe>
 800525e:	2304      	movs	r3, #4
 8005260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005264:	e0a5      	b.n	80053b2 <UART_SetConfig+0x2fe>
 8005266:	2308      	movs	r3, #8
 8005268:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800526c:	e0a1      	b.n	80053b2 <UART_SetConfig+0x2fe>
 800526e:	2310      	movs	r3, #16
 8005270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005274:	e09d      	b.n	80053b2 <UART_SetConfig+0x2fe>
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a4a      	ldr	r2, [pc, #296]	; (80053a4 <UART_SetConfig+0x2f0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d125      	bne.n	80052cc <UART_SetConfig+0x218>
 8005280:	4b45      	ldr	r3, [pc, #276]	; (8005398 <UART_SetConfig+0x2e4>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005286:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800528a:	2bc0      	cmp	r3, #192	; 0xc0
 800528c:	d016      	beq.n	80052bc <UART_SetConfig+0x208>
 800528e:	2bc0      	cmp	r3, #192	; 0xc0
 8005290:	d818      	bhi.n	80052c4 <UART_SetConfig+0x210>
 8005292:	2b80      	cmp	r3, #128	; 0x80
 8005294:	d00a      	beq.n	80052ac <UART_SetConfig+0x1f8>
 8005296:	2b80      	cmp	r3, #128	; 0x80
 8005298:	d814      	bhi.n	80052c4 <UART_SetConfig+0x210>
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <UART_SetConfig+0x1f0>
 800529e:	2b40      	cmp	r3, #64	; 0x40
 80052a0:	d008      	beq.n	80052b4 <UART_SetConfig+0x200>
 80052a2:	e00f      	b.n	80052c4 <UART_SetConfig+0x210>
 80052a4:	2300      	movs	r3, #0
 80052a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052aa:	e082      	b.n	80053b2 <UART_SetConfig+0x2fe>
 80052ac:	2302      	movs	r3, #2
 80052ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052b2:	e07e      	b.n	80053b2 <UART_SetConfig+0x2fe>
 80052b4:	2304      	movs	r3, #4
 80052b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ba:	e07a      	b.n	80053b2 <UART_SetConfig+0x2fe>
 80052bc:	2308      	movs	r3, #8
 80052be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052c2:	e076      	b.n	80053b2 <UART_SetConfig+0x2fe>
 80052c4:	2310      	movs	r3, #16
 80052c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ca:	e072      	b.n	80053b2 <UART_SetConfig+0x2fe>
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a35      	ldr	r2, [pc, #212]	; (80053a8 <UART_SetConfig+0x2f4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d12a      	bne.n	800532c <UART_SetConfig+0x278>
 80052d6:	4b30      	ldr	r3, [pc, #192]	; (8005398 <UART_SetConfig+0x2e4>)
 80052d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052e4:	d01a      	beq.n	800531c <UART_SetConfig+0x268>
 80052e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052ea:	d81b      	bhi.n	8005324 <UART_SetConfig+0x270>
 80052ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f0:	d00c      	beq.n	800530c <UART_SetConfig+0x258>
 80052f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f6:	d815      	bhi.n	8005324 <UART_SetConfig+0x270>
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <UART_SetConfig+0x250>
 80052fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005300:	d008      	beq.n	8005314 <UART_SetConfig+0x260>
 8005302:	e00f      	b.n	8005324 <UART_SetConfig+0x270>
 8005304:	2300      	movs	r3, #0
 8005306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800530a:	e052      	b.n	80053b2 <UART_SetConfig+0x2fe>
 800530c:	2302      	movs	r3, #2
 800530e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005312:	e04e      	b.n	80053b2 <UART_SetConfig+0x2fe>
 8005314:	2304      	movs	r3, #4
 8005316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800531a:	e04a      	b.n	80053b2 <UART_SetConfig+0x2fe>
 800531c:	2308      	movs	r3, #8
 800531e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005322:	e046      	b.n	80053b2 <UART_SetConfig+0x2fe>
 8005324:	2310      	movs	r3, #16
 8005326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800532a:	e042      	b.n	80053b2 <UART_SetConfig+0x2fe>
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a17      	ldr	r2, [pc, #92]	; (8005390 <UART_SetConfig+0x2dc>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d13a      	bne.n	80053ac <UART_SetConfig+0x2f8>
 8005336:	4b18      	ldr	r3, [pc, #96]	; (8005398 <UART_SetConfig+0x2e4>)
 8005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005340:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005344:	d01a      	beq.n	800537c <UART_SetConfig+0x2c8>
 8005346:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800534a:	d81b      	bhi.n	8005384 <UART_SetConfig+0x2d0>
 800534c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005350:	d00c      	beq.n	800536c <UART_SetConfig+0x2b8>
 8005352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005356:	d815      	bhi.n	8005384 <UART_SetConfig+0x2d0>
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <UART_SetConfig+0x2b0>
 800535c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005360:	d008      	beq.n	8005374 <UART_SetConfig+0x2c0>
 8005362:	e00f      	b.n	8005384 <UART_SetConfig+0x2d0>
 8005364:	2300      	movs	r3, #0
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800536a:	e022      	b.n	80053b2 <UART_SetConfig+0x2fe>
 800536c:	2302      	movs	r3, #2
 800536e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005372:	e01e      	b.n	80053b2 <UART_SetConfig+0x2fe>
 8005374:	2304      	movs	r3, #4
 8005376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800537a:	e01a      	b.n	80053b2 <UART_SetConfig+0x2fe>
 800537c:	2308      	movs	r3, #8
 800537e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005382:	e016      	b.n	80053b2 <UART_SetConfig+0x2fe>
 8005384:	2310      	movs	r3, #16
 8005386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800538a:	e012      	b.n	80053b2 <UART_SetConfig+0x2fe>
 800538c:	cfff69f3 	.word	0xcfff69f3
 8005390:	40008000 	.word	0x40008000
 8005394:	40013800 	.word	0x40013800
 8005398:	40021000 	.word	0x40021000
 800539c:	40004400 	.word	0x40004400
 80053a0:	40004800 	.word	0x40004800
 80053a4:	40004c00 	.word	0x40004c00
 80053a8:	40005000 	.word	0x40005000
 80053ac:	2310      	movs	r3, #16
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4aae      	ldr	r2, [pc, #696]	; (8005670 <UART_SetConfig+0x5bc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	f040 8097 	bne.w	80054ec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d823      	bhi.n	800540e <UART_SetConfig+0x35a>
 80053c6:	a201      	add	r2, pc, #4	; (adr r2, 80053cc <UART_SetConfig+0x318>)
 80053c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053cc:	080053f1 	.word	0x080053f1
 80053d0:	0800540f 	.word	0x0800540f
 80053d4:	080053f9 	.word	0x080053f9
 80053d8:	0800540f 	.word	0x0800540f
 80053dc:	080053ff 	.word	0x080053ff
 80053e0:	0800540f 	.word	0x0800540f
 80053e4:	0800540f 	.word	0x0800540f
 80053e8:	0800540f 	.word	0x0800540f
 80053ec:	08005407 	.word	0x08005407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f0:	f7fd f966 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 80053f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053f6:	e010      	b.n	800541a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053f8:	4b9e      	ldr	r3, [pc, #632]	; (8005674 <UART_SetConfig+0x5c0>)
 80053fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053fc:	e00d      	b.n	800541a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053fe:	f7fd f8f1 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8005402:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005404:	e009      	b.n	800541a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800540c:	e005      	b.n	800541a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005418:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 8130 	beq.w	8005682 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	4a94      	ldr	r2, [pc, #592]	; (8005678 <UART_SetConfig+0x5c4>)
 8005428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800542c:	461a      	mov	r2, r3
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	fbb3 f3f2 	udiv	r3, r3, r2
 8005434:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	4413      	add	r3, r2
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	429a      	cmp	r2, r3
 8005444:	d305      	bcc.n	8005452 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	429a      	cmp	r2, r3
 8005450:	d903      	bls.n	800545a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005458:	e113      	b.n	8005682 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	2200      	movs	r2, #0
 800545e:	60bb      	str	r3, [r7, #8]
 8005460:	60fa      	str	r2, [r7, #12]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	4a84      	ldr	r2, [pc, #528]	; (8005678 <UART_SetConfig+0x5c4>)
 8005468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800546c:	b29b      	uxth	r3, r3
 800546e:	2200      	movs	r2, #0
 8005470:	603b      	str	r3, [r7, #0]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005478:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800547c:	f7fa ff30 	bl	80002e0 <__aeabi_uldivmod>
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	4610      	mov	r0, r2
 8005486:	4619      	mov	r1, r3
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	020b      	lsls	r3, r1, #8
 8005492:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005496:	0202      	lsls	r2, r0, #8
 8005498:	6979      	ldr	r1, [r7, #20]
 800549a:	6849      	ldr	r1, [r1, #4]
 800549c:	0849      	lsrs	r1, r1, #1
 800549e:	2000      	movs	r0, #0
 80054a0:	460c      	mov	r4, r1
 80054a2:	4605      	mov	r5, r0
 80054a4:	eb12 0804 	adds.w	r8, r2, r4
 80054a8:	eb43 0905 	adc.w	r9, r3, r5
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	469a      	mov	sl, r3
 80054b4:	4693      	mov	fp, r2
 80054b6:	4652      	mov	r2, sl
 80054b8:	465b      	mov	r3, fp
 80054ba:	4640      	mov	r0, r8
 80054bc:	4649      	mov	r1, r9
 80054be:	f7fa ff0f 	bl	80002e0 <__aeabi_uldivmod>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4613      	mov	r3, r2
 80054c8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054d0:	d308      	bcc.n	80054e4 <UART_SetConfig+0x430>
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d8:	d204      	bcs.n	80054e4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6a3a      	ldr	r2, [r7, #32]
 80054e0:	60da      	str	r2, [r3, #12]
 80054e2:	e0ce      	b.n	8005682 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80054ea:	e0ca      	b.n	8005682 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f4:	d166      	bne.n	80055c4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80054f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d827      	bhi.n	800554e <UART_SetConfig+0x49a>
 80054fe:	a201      	add	r2, pc, #4	; (adr r2, 8005504 <UART_SetConfig+0x450>)
 8005500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005504:	08005529 	.word	0x08005529
 8005508:	08005531 	.word	0x08005531
 800550c:	08005539 	.word	0x08005539
 8005510:	0800554f 	.word	0x0800554f
 8005514:	0800553f 	.word	0x0800553f
 8005518:	0800554f 	.word	0x0800554f
 800551c:	0800554f 	.word	0x0800554f
 8005520:	0800554f 	.word	0x0800554f
 8005524:	08005547 	.word	0x08005547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005528:	f7fd f8ca 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 800552c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800552e:	e014      	b.n	800555a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005530:	f7fd f8dc 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 8005534:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005536:	e010      	b.n	800555a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005538:	4b4e      	ldr	r3, [pc, #312]	; (8005674 <UART_SetConfig+0x5c0>)
 800553a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800553c:	e00d      	b.n	800555a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800553e:	f7fd f851 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8005542:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005544:	e009      	b.n	800555a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800554a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800554c:	e005      	b.n	800555a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800554e:	2300      	movs	r3, #0
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005558:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 8090 	beq.w	8005682 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	4a44      	ldr	r2, [pc, #272]	; (8005678 <UART_SetConfig+0x5c4>)
 8005568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800556c:	461a      	mov	r2, r3
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	fbb3 f3f2 	udiv	r3, r3, r2
 8005574:	005a      	lsls	r2, r3, #1
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	085b      	lsrs	r3, r3, #1
 800557c:	441a      	add	r2, r3
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	fbb2 f3f3 	udiv	r3, r2, r3
 8005586:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	2b0f      	cmp	r3, #15
 800558c:	d916      	bls.n	80055bc <UART_SetConfig+0x508>
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005594:	d212      	bcs.n	80055bc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	b29b      	uxth	r3, r3
 800559a:	f023 030f 	bic.w	r3, r3, #15
 800559e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	085b      	lsrs	r3, r3, #1
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	8bfb      	ldrh	r3, [r7, #30]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	8bfa      	ldrh	r2, [r7, #30]
 80055b8:	60da      	str	r2, [r3, #12]
 80055ba:	e062      	b.n	8005682 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80055c2:	e05e      	b.n	8005682 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d828      	bhi.n	800561e <UART_SetConfig+0x56a>
 80055cc:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <UART_SetConfig+0x520>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	080055f9 	.word	0x080055f9
 80055d8:	08005601 	.word	0x08005601
 80055dc:	08005609 	.word	0x08005609
 80055e0:	0800561f 	.word	0x0800561f
 80055e4:	0800560f 	.word	0x0800560f
 80055e8:	0800561f 	.word	0x0800561f
 80055ec:	0800561f 	.word	0x0800561f
 80055f0:	0800561f 	.word	0x0800561f
 80055f4:	08005617 	.word	0x08005617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055f8:	f7fd f862 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 80055fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80055fe:	e014      	b.n	800562a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005600:	f7fd f874 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 8005604:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005606:	e010      	b.n	800562a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005608:	4b1a      	ldr	r3, [pc, #104]	; (8005674 <UART_SetConfig+0x5c0>)
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800560c:	e00d      	b.n	800562a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800560e:	f7fc ffe9 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8005612:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005614:	e009      	b.n	800562a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800561c:	e005      	b.n	800562a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005628:	bf00      	nop
    }

    if (pclk != 0U)
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	2b00      	cmp	r3, #0
 800562e:	d028      	beq.n	8005682 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	4a10      	ldr	r2, [pc, #64]	; (8005678 <UART_SetConfig+0x5c4>)
 8005636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800563a:	461a      	mov	r2, r3
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	085b      	lsrs	r3, r3, #1
 8005648:	441a      	add	r2, r3
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005652:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	2b0f      	cmp	r3, #15
 8005658:	d910      	bls.n	800567c <UART_SetConfig+0x5c8>
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005660:	d20c      	bcs.n	800567c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	b29a      	uxth	r2, r3
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60da      	str	r2, [r3, #12]
 800566c:	e009      	b.n	8005682 <UART_SetConfig+0x5ce>
 800566e:	bf00      	nop
 8005670:	40008000 	.word	0x40008000
 8005674:	00f42400 	.word	0x00f42400
 8005678:	080080f0 	.word	0x080080f0
      }
      else
      {
        ret = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2201      	movs	r2, #1
 8005686:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2201      	movs	r2, #1
 800568e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2200      	movs	r2, #0
 8005696:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2200      	movs	r2, #0
 800569c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800569e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3730      	adds	r7, #48	; 0x30
 80056a6:	46bd      	mov	sp, r7
 80056a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080056ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01a      	beq.n	80057c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057aa:	d10a      	bne.n	80057c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	605a      	str	r2, [r3, #4]
  }
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af02      	add	r7, sp, #8
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005800:	f7fb fe38 	bl	8001474 <HAL_GetTick>
 8005804:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b08      	cmp	r3, #8
 8005812:	d10e      	bne.n	8005832 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f82f 	bl	8005886 <UART_WaitOnFlagUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e025      	b.n	800587e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b04      	cmp	r3, #4
 800583e:	d10e      	bne.n	800585e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005840:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f819 	bl	8005886 <UART_WaitOnFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e00f      	b.n	800587e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2220      	movs	r2, #32
 800586a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b09c      	sub	sp, #112	; 0x70
 800588a:	af00      	add	r7, sp, #0
 800588c:	60f8      	str	r0, [r7, #12]
 800588e:	60b9      	str	r1, [r7, #8]
 8005890:	603b      	str	r3, [r7, #0]
 8005892:	4613      	mov	r3, r2
 8005894:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005896:	e0a9      	b.n	80059ec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800589a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589e:	f000 80a5 	beq.w	80059ec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a2:	f7fb fde7 	bl	8001474 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d302      	bcc.n	80058b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80058b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d140      	bne.n	800593a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80058c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058cc:	667b      	str	r3, [r7, #100]	; 0x64
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80058e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e6      	bne.n	80058b8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3308      	adds	r3, #8
 80058f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	f023 0301 	bic.w	r3, r3, #1
 8005900:	663b      	str	r3, [r7, #96]	; 0x60
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3308      	adds	r3, #8
 8005908:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800590a:	64ba      	str	r2, [r7, #72]	; 0x48
 800590c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e5      	bne.n	80058ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2220      	movs	r2, #32
 8005922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2220      	movs	r2, #32
 800592a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e069      	b.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d051      	beq.n	80059ec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005956:	d149      	bne.n	80059ec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005960:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005976:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
 8005982:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e6      	bne.n	8005962 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3308      	adds	r3, #8
 800599a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	613b      	str	r3, [r7, #16]
   return(result);
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f023 0301 	bic.w	r3, r3, #1
 80059aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3308      	adds	r3, #8
 80059b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059b4:	623a      	str	r2, [r7, #32]
 80059b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	69f9      	ldr	r1, [r7, #28]
 80059ba:	6a3a      	ldr	r2, [r7, #32]
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e5      	bne.n	8005994 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2220      	movs	r2, #32
 80059dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e010      	b.n	8005a0e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69da      	ldr	r2, [r3, #28]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	4013      	ands	r3, r2
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	bf0c      	ite	eq
 80059fc:	2301      	moveq	r3, #1
 80059fe:	2300      	movne	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	461a      	mov	r2, r3
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	f43f af46 	beq.w	8005898 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3770      	adds	r7, #112	; 0x70
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b0a3      	sub	sp, #140	; 0x8c
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	4613      	mov	r3, r2
 8005a24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	88fa      	ldrh	r2, [r7, #6]
 8005a30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	88fa      	ldrh	r2, [r7, #6]
 8005a38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4a:	d10e      	bne.n	8005a6a <UART_Start_Receive_IT+0x52>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d105      	bne.n	8005a60 <UART_Start_Receive_IT+0x48>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a5e:	e02d      	b.n	8005abc <UART_Start_Receive_IT+0xa4>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	22ff      	movs	r2, #255	; 0xff
 8005a64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a68:	e028      	b.n	8005abc <UART_Start_Receive_IT+0xa4>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10d      	bne.n	8005a8e <UART_Start_Receive_IT+0x76>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d104      	bne.n	8005a84 <UART_Start_Receive_IT+0x6c>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	22ff      	movs	r2, #255	; 0xff
 8005a7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a82:	e01b      	b.n	8005abc <UART_Start_Receive_IT+0xa4>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	227f      	movs	r2, #127	; 0x7f
 8005a88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005a8c:	e016      	b.n	8005abc <UART_Start_Receive_IT+0xa4>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a96:	d10d      	bne.n	8005ab4 <UART_Start_Receive_IT+0x9c>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <UART_Start_Receive_IT+0x92>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	227f      	movs	r2, #127	; 0x7f
 8005aa4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005aa8:	e008      	b.n	8005abc <UART_Start_Receive_IT+0xa4>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	223f      	movs	r2, #63	; 0x3f
 8005aae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ab2:	e003      	b.n	8005abc <UART_Start_Receive_IT+0xa4>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2222      	movs	r2, #34	; 0x22
 8005ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005adc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ade:	f043 0301 	orr.w	r3, r3, #1
 8005ae2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3308      	adds	r3, #8
 8005aec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005af0:	673a      	str	r2, [r7, #112]	; 0x70
 8005af2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005af6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005afe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e3      	bne.n	8005acc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b0c:	d153      	bne.n	8005bb6 <UART_Start_Receive_IT+0x19e>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005b14:	88fa      	ldrh	r2, [r7, #6]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d34d      	bcc.n	8005bb6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b22:	d107      	bne.n	8005b34 <UART_Start_Receive_IT+0x11c>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d103      	bne.n	8005b34 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4a4b      	ldr	r2, [pc, #300]	; (8005c5c <UART_Start_Receive_IT+0x244>)
 8005b30:	671a      	str	r2, [r3, #112]	; 0x70
 8005b32:	e002      	b.n	8005b3a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4a4a      	ldr	r2, [pc, #296]	; (8005c60 <UART_Start_Receive_IT+0x248>)
 8005b38:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d01a      	beq.n	8005b80 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b52:	e853 3f00 	ldrex	r3, [r3]
 8005b56:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b6e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b74:	e841 2300 	strex	r3, r2, [r1]
 8005b78:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1e4      	bne.n	8005b4a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3308      	adds	r3, #8
 8005b86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
 8005b8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3308      	adds	r3, #8
 8005b9e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005ba0:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ba2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e5      	bne.n	8005b80 <UART_Start_Receive_IT+0x168>
 8005bb4:	e04a      	b.n	8005c4c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bbe:	d107      	bne.n	8005bd0 <UART_Start_Receive_IT+0x1b8>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d103      	bne.n	8005bd0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4a26      	ldr	r2, [pc, #152]	; (8005c64 <UART_Start_Receive_IT+0x24c>)
 8005bcc:	671a      	str	r2, [r3, #112]	; 0x70
 8005bce:	e002      	b.n	8005bd6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4a25      	ldr	r2, [pc, #148]	; (8005c68 <UART_Start_Receive_IT+0x250>)
 8005bd4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d019      	beq.n	8005c1a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	e853 3f00 	ldrex	r3, [r3]
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005bfa:	677b      	str	r3, [r7, #116]	; 0x74
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c04:	637b      	str	r3, [r7, #52]	; 0x34
 8005c06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c0c:	e841 2300 	strex	r3, r2, [r1]
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1e6      	bne.n	8005be6 <UART_Start_Receive_IT+0x1ce>
 8005c18:	e018      	b.n	8005c4c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	613b      	str	r3, [r7, #16]
   return(result);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f043 0320 	orr.w	r3, r3, #32
 8005c2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	461a      	mov	r2, r3
 8005c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c38:	623b      	str	r3, [r7, #32]
 8005c3a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3c:	69f9      	ldr	r1, [r7, #28]
 8005c3e:	6a3a      	ldr	r2, [r7, #32]
 8005c40:	e841 2300 	strex	r3, r2, [r1]
 8005c44:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e6      	bne.n	8005c1a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	378c      	adds	r7, #140	; 0x8c
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	08006375 	.word	0x08006375
 8005c60:	0800607d 	.word	0x0800607d
 8005c64:	08005f1b 	.word	0x08005f1b
 8005c68:	08005dbb 	.word	0x08005dbb

08005c6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b095      	sub	sp, #84	; 0x54
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c92:	643b      	str	r3, [r7, #64]	; 0x40
 8005c94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e6      	bne.n	8005c74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3308      	adds	r3, #8
 8005cac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cbc:	f023 0301 	bic.w	r3, r3, #1
 8005cc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ccc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cd2:	e841 2300 	strex	r3, r2, [r1]
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1e3      	bne.n	8005ca6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d118      	bne.n	8005d18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f023 0310 	bic.w	r3, r3, #16
 8005cfa:	647b      	str	r3, [r7, #68]	; 0x44
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	461a      	mov	r2, r3
 8005d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6979      	ldr	r1, [r7, #20]
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	613b      	str	r3, [r7, #16]
   return(result);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e6      	bne.n	8005ce6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005d2c:	bf00      	nop
 8005d2e:	3754      	adds	r7, #84	; 0x54
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7ff f996 	bl	8005088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d5c:	bf00      	nop
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b088      	sub	sp, #32
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	461a      	mov	r2, r3
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	61bb      	str	r3, [r7, #24]
 8005d8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	6979      	ldr	r1, [r7, #20]
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	613b      	str	r3, [r7, #16]
   return(result);
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e6      	bne.n	8005d6c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff f961 	bl	8005074 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005db2:	bf00      	nop
 8005db4:	3720      	adds	r7, #32
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b096      	sub	sp, #88	; 0x58
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005dc8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd2:	2b22      	cmp	r3, #34	; 0x22
 8005dd4:	f040 8095 	bne.w	8005f02 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005de2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005de6:	b2d9      	uxtb	r1, r3
 8005de8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df2:	400a      	ands	r2, r1
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d178      	bne.n	8005f12 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e34:	653b      	str	r3, [r7, #80]	; 0x50
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e6      	bne.n	8005e20 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3308      	adds	r3, #8
 8005e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	623b      	str	r3, [r7, #32]
   return(result);
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3308      	adds	r3, #8
 8005e70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e72:	633a      	str	r2, [r7, #48]	; 0x30
 8005e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e7a:	e841 2300 	strex	r3, r2, [r1]
 8005e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e5      	bne.n	8005e52 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d12e      	bne.n	8005efa <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	e853 3f00 	ldrex	r3, [r3]
 8005eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0310 	bic.w	r3, r3, #16
 8005eb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec0:	61fb      	str	r3, [r7, #28]
 8005ec2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	69b9      	ldr	r1, [r7, #24]
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	e841 2300 	strex	r3, r2, [r1]
 8005ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e6      	bne.n	8005ea2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	f003 0310 	and.w	r3, r3, #16
 8005ede:	2b10      	cmp	r3, #16
 8005ee0:	d103      	bne.n	8005eea <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2210      	movs	r2, #16
 8005ee8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7ff f8d2 	bl	800509c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ef8:	e00b      	b.n	8005f12 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7fa fef8 	bl	8000cf0 <HAL_UART_RxCpltCallback>
}
 8005f00:	e007      	b.n	8005f12 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	699a      	ldr	r2, [r3, #24]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0208 	orr.w	r2, r2, #8
 8005f10:	619a      	str	r2, [r3, #24]
}
 8005f12:	bf00      	nop
 8005f14:	3758      	adds	r7, #88	; 0x58
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b096      	sub	sp, #88	; 0x58
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005f28:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f32:	2b22      	cmp	r3, #34	; 0x22
 8005f34:	f040 8095 	bne.w	8006062 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f46:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005f48:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005f4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005f50:	4013      	ands	r3, r2
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f56:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5c:	1c9a      	adds	r2, r3, #2
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d178      	bne.n	8006072 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f9e:	643b      	str	r3, [r7, #64]	; 0x40
 8005fa0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e6      	bne.n	8005f80 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3308      	adds	r3, #8
 8005fb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	f023 0301 	bic.w	r3, r3, #1
 8005fc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3308      	adds	r3, #8
 8005fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e5      	bne.n	8005fb2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d12e      	bne.n	800605a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f023 0310 	bic.w	r3, r3, #16
 8006016:	647b      	str	r3, [r7, #68]	; 0x44
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	6979      	ldr	r1, [r7, #20]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	613b      	str	r3, [r7, #16]
   return(result);
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e6      	bne.n	8006002 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	f003 0310 	and.w	r3, r3, #16
 800603e:	2b10      	cmp	r3, #16
 8006040:	d103      	bne.n	800604a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2210      	movs	r2, #16
 8006048:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff f822 	bl	800509c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006058:	e00b      	b.n	8006072 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fa fe48 	bl	8000cf0 <HAL_UART_RxCpltCallback>
}
 8006060:	e007      	b.n	8006072 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	699a      	ldr	r2, [r3, #24]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0208 	orr.w	r2, r2, #8
 8006070:	619a      	str	r2, [r3, #24]
}
 8006072:	bf00      	nop
 8006074:	3758      	adds	r7, #88	; 0x58
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
	...

0800607c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b0a6      	sub	sp, #152	; 0x98
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800608a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b2:	2b22      	cmp	r3, #34	; 0x22
 80060b4:	f040 814f 	bne.w	8006356 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80060be:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060c2:	e0f6      	b.n	80062b2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80060ce:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80060d2:	b2d9      	uxtb	r1, r3
 80060d4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060de:	400a      	ands	r2, r1
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800610a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	2b00      	cmp	r3, #0
 8006114:	d053      	beq.n	80061be <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006116:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d011      	beq.n	8006146 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006122:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00b      	beq.n	8006146 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2201      	movs	r2, #1
 8006134:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800613c:	f043 0201 	orr.w	r2, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006146:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d011      	beq.n	8006176 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006152:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00b      	beq.n	8006176 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2202      	movs	r2, #2
 8006164:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800616c:	f043 0204 	orr.w	r2, r3, #4
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006176:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	2b00      	cmp	r3, #0
 8006180:	d011      	beq.n	80061a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006182:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00b      	beq.n	80061a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2204      	movs	r2, #4
 8006194:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800619c:	f043 0202 	orr.w	r2, r3, #2
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d006      	beq.n	80061be <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7fe ff69 	bl	8005088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d173      	bne.n	80062b2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061d2:	e853 3f00 	ldrex	r3, [r3]
 80061d6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80061d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80061ee:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80061f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061f4:	e841 2300 	strex	r3, r2, [r1]
 80061f8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80061fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e4      	bne.n	80061ca <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3308      	adds	r3, #8
 8006206:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800620a:	e853 3f00 	ldrex	r3, [r3]
 800620e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006216:	f023 0301 	bic.w	r3, r3, #1
 800621a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3308      	adds	r3, #8
 8006222:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006224:	657a      	str	r2, [r7, #84]	; 0x54
 8006226:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006228:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800622a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800622c:	e841 2300 	strex	r3, r2, [r1]
 8006230:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1e3      	bne.n	8006200 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2220      	movs	r2, #32
 800623c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800624a:	2b01      	cmp	r3, #1
 800624c:	d12e      	bne.n	80062ac <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625c:	e853 3f00 	ldrex	r3, [r3]
 8006260:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	f023 0310 	bic.w	r3, r3, #16
 8006268:	67bb      	str	r3, [r7, #120]	; 0x78
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006272:	643b      	str	r3, [r7, #64]	; 0x40
 8006274:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006278:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e6      	bne.n	8006254 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	f003 0310 	and.w	r3, r3, #16
 8006290:	2b10      	cmp	r3, #16
 8006292:	d103      	bne.n	800629c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2210      	movs	r2, #16
 800629a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7fe fef9 	bl	800509c <HAL_UARTEx_RxEventCallback>
 80062aa:	e002      	b.n	80062b2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7fa fd1f 	bl	8000cf0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80062b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d006      	beq.n	80062c8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80062ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f47f aefe 	bne.w	80060c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80062d2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d045      	beq.n	8006366 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80062e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d23e      	bcs.n	8006366 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3308      	adds	r3, #8
 80062ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062fe:	673b      	str	r3, [r7, #112]	; 0x70
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3308      	adds	r3, #8
 8006306:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006308:	62fa      	str	r2, [r7, #44]	; 0x2c
 800630a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800630e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e5      	bne.n	80062e8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a14      	ldr	r2, [pc, #80]	; (8006370 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8006320:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f043 0320 	orr.w	r3, r3, #32
 8006336:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006340:	61bb      	str	r3, [r7, #24]
 8006342:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	6979      	ldr	r1, [r7, #20]
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	613b      	str	r3, [r7, #16]
   return(result);
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e6      	bne.n	8006322 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006354:	e007      	b.n	8006366 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	699a      	ldr	r2, [r3, #24]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f042 0208 	orr.w	r2, r2, #8
 8006364:	619a      	str	r2, [r3, #24]
}
 8006366:	bf00      	nop
 8006368:	3798      	adds	r7, #152	; 0x98
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	08005dbb 	.word	0x08005dbb

08006374 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b0a8      	sub	sp, #160	; 0xa0
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006382:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063aa:	2b22      	cmp	r3, #34	; 0x22
 80063ac:	f040 8153 	bne.w	8006656 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80063b6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80063ba:	e0fa      	b.n	80065b2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80063ce:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80063d2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80063d6:	4013      	ands	r3, r2
 80063d8:	b29a      	uxth	r2, r3
 80063da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e4:	1c9a      	adds	r2, r3, #2
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006406:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	2b00      	cmp	r3, #0
 8006410:	d053      	beq.n	80064ba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006412:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d011      	beq.n	8006442 <UART_RxISR_16BIT_FIFOEN+0xce>
 800641e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00b      	beq.n	8006442 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2201      	movs	r2, #1
 8006430:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006438:	f043 0201 	orr.w	r2, r3, #1
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006442:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d011      	beq.n	8006472 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800644e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00b      	beq.n	8006472 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2202      	movs	r2, #2
 8006460:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006468:	f043 0204 	orr.w	r2, r3, #4
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006472:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b00      	cmp	r3, #0
 800647c:	d011      	beq.n	80064a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800647e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00b      	beq.n	80064a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2204      	movs	r2, #4
 8006490:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006498:	f043 0202 	orr.w	r2, r3, #2
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d006      	beq.n	80064ba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7fe fdeb 	bl	8005088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d175      	bne.n	80065b2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064ce:	e853 3f00 	ldrex	r3, [r3]
 80064d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	461a      	mov	r2, r3
 80064e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064ea:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064f0:	e841 2300 	strex	r3, r2, [r1]
 80064f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1e4      	bne.n	80064c6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3308      	adds	r3, #8
 8006502:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006506:	e853 3f00 	ldrex	r3, [r3]
 800650a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800650c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800650e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006512:	f023 0301 	bic.w	r3, r3, #1
 8006516:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	3308      	adds	r3, #8
 8006520:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006524:	65ba      	str	r2, [r7, #88]	; 0x58
 8006526:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006528:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800652a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800652c:	e841 2300 	strex	r3, r2, [r1]
 8006530:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1e1      	bne.n	80064fc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800654a:	2b01      	cmp	r3, #1
 800654c:	d12e      	bne.n	80065ac <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006564:	f023 0310 	bic.w	r3, r3, #16
 8006568:	67fb      	str	r3, [r7, #124]	; 0x7c
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	461a      	mov	r2, r3
 8006570:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006572:	647b      	str	r3, [r7, #68]	; 0x44
 8006574:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006576:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006578:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1e6      	bne.n	8006554 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	f003 0310 	and.w	r3, r3, #16
 8006590:	2b10      	cmp	r3, #16
 8006592:	d103      	bne.n	800659c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2210      	movs	r2, #16
 800659a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7fe fd79 	bl	800509c <HAL_UARTEx_RxEventCallback>
 80065aa:	e002      	b.n	80065b2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7fa fb9f 	bl	8000cf0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80065b2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d006      	beq.n	80065c8 <UART_RxISR_16BIT_FIFOEN+0x254>
 80065ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f47f aefa 	bne.w	80063bc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065ce:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80065d2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d045      	beq.n	8006666 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80065e0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d23e      	bcs.n	8006666 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3308      	adds	r3, #8
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f2:	e853 3f00 	ldrex	r3, [r3]
 80065f6:	623b      	str	r3, [r7, #32]
   return(result);
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065fe:	677b      	str	r3, [r7, #116]	; 0x74
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3308      	adds	r3, #8
 8006606:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006608:	633a      	str	r2, [r7, #48]	; 0x30
 800660a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800660e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006610:	e841 2300 	strex	r3, r2, [r1]
 8006614:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e5      	bne.n	80065e8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a14      	ldr	r2, [pc, #80]	; (8006670 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8006620:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f043 0320 	orr.w	r3, r3, #32
 8006636:	673b      	str	r3, [r7, #112]	; 0x70
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	461a      	mov	r2, r3
 800663e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006640:	61fb      	str	r3, [r7, #28]
 8006642:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	69b9      	ldr	r1, [r7, #24]
 8006646:	69fa      	ldr	r2, [r7, #28]
 8006648:	e841 2300 	strex	r3, r2, [r1]
 800664c:	617b      	str	r3, [r7, #20]
   return(result);
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1e6      	bne.n	8006622 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006654:	e007      	b.n	8006666 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	699a      	ldr	r2, [r3, #24]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f042 0208 	orr.w	r2, r2, #8
 8006664:	619a      	str	r2, [r3, #24]
}
 8006666:	bf00      	nop
 8006668:	37a0      	adds	r7, #160	; 0xa0
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	08005f1b 	.word	0x08005f1b

08006674 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d101      	bne.n	80066c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80066c2:	2302      	movs	r3, #2
 80066c4:	e027      	b.n	8006716 <HAL_UARTEx_DisableFifoMode+0x66>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2224      	movs	r2, #36	; 0x24
 80066d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0201 	bic.w	r2, r2, #1
 80066ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b084      	sub	sp, #16
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006732:	2b01      	cmp	r3, #1
 8006734:	d101      	bne.n	800673a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006736:	2302      	movs	r3, #2
 8006738:	e02d      	b.n	8006796 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2224      	movs	r2, #36	; 0x24
 8006746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0201 	bic.w	r2, r2, #1
 8006760:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f850 	bl	800681c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2220      	movs	r2, #32
 8006788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d101      	bne.n	80067b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067b2:	2302      	movs	r3, #2
 80067b4:	e02d      	b.n	8006812 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2224      	movs	r2, #36	; 0x24
 80067c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0201 	bic.w	r2, r2, #1
 80067dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f812 	bl	800681c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2220      	movs	r2, #32
 8006804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006828:	2b00      	cmp	r3, #0
 800682a:	d108      	bne.n	800683e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800683c:	e031      	b.n	80068a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800683e:	2308      	movs	r3, #8
 8006840:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006842:	2308      	movs	r3, #8
 8006844:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	0e5b      	lsrs	r3, r3, #25
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	0f5b      	lsrs	r3, r3, #29
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f003 0307 	and.w	r3, r3, #7
 8006864:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006866:	7bbb      	ldrb	r3, [r7, #14]
 8006868:	7b3a      	ldrb	r2, [r7, #12]
 800686a:	4911      	ldr	r1, [pc, #68]	; (80068b0 <UARTEx_SetNbDataToProcess+0x94>)
 800686c:	5c8a      	ldrb	r2, [r1, r2]
 800686e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006872:	7b3a      	ldrb	r2, [r7, #12]
 8006874:	490f      	ldr	r1, [pc, #60]	; (80068b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006876:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006878:	fb93 f3f2 	sdiv	r3, r3, r2
 800687c:	b29a      	uxth	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	7b7a      	ldrb	r2, [r7, #13]
 8006888:	4909      	ldr	r1, [pc, #36]	; (80068b0 <UARTEx_SetNbDataToProcess+0x94>)
 800688a:	5c8a      	ldrb	r2, [r1, r2]
 800688c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006890:	7b7a      	ldrb	r2, [r7, #13]
 8006892:	4908      	ldr	r1, [pc, #32]	; (80068b4 <UARTEx_SetNbDataToProcess+0x98>)
 8006894:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006896:	fb93 f3f2 	sdiv	r3, r3, r2
 800689a:	b29a      	uxth	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80068a2:	bf00      	nop
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	08008108 	.word	0x08008108
 80068b4:	08008110 	.word	0x08008110

080068b8 <atoi>:
 80068b8:	220a      	movs	r2, #10
 80068ba:	2100      	movs	r1, #0
 80068bc:	f000 b948 	b.w	8006b50 <strtol>

080068c0 <__errno>:
 80068c0:	4b01      	ldr	r3, [pc, #4]	; (80068c8 <__errno+0x8>)
 80068c2:	6818      	ldr	r0, [r3, #0]
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	200000a8 	.word	0x200000a8

080068cc <__libc_init_array>:
 80068cc:	b570      	push	{r4, r5, r6, lr}
 80068ce:	4d0d      	ldr	r5, [pc, #52]	; (8006904 <__libc_init_array+0x38>)
 80068d0:	4c0d      	ldr	r4, [pc, #52]	; (8006908 <__libc_init_array+0x3c>)
 80068d2:	1b64      	subs	r4, r4, r5
 80068d4:	10a4      	asrs	r4, r4, #2
 80068d6:	2600      	movs	r6, #0
 80068d8:	42a6      	cmp	r6, r4
 80068da:	d109      	bne.n	80068f0 <__libc_init_array+0x24>
 80068dc:	4d0b      	ldr	r5, [pc, #44]	; (800690c <__libc_init_array+0x40>)
 80068de:	4c0c      	ldr	r4, [pc, #48]	; (8006910 <__libc_init_array+0x44>)
 80068e0:	f001 faf6 	bl	8007ed0 <_init>
 80068e4:	1b64      	subs	r4, r4, r5
 80068e6:	10a4      	asrs	r4, r4, #2
 80068e8:	2600      	movs	r6, #0
 80068ea:	42a6      	cmp	r6, r4
 80068ec:	d105      	bne.n	80068fa <__libc_init_array+0x2e>
 80068ee:	bd70      	pop	{r4, r5, r6, pc}
 80068f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068f4:	4798      	blx	r3
 80068f6:	3601      	adds	r6, #1
 80068f8:	e7ee      	b.n	80068d8 <__libc_init_array+0xc>
 80068fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80068fe:	4798      	blx	r3
 8006900:	3601      	adds	r6, #1
 8006902:	e7f2      	b.n	80068ea <__libc_init_array+0x1e>
 8006904:	0800836c 	.word	0x0800836c
 8006908:	0800836c 	.word	0x0800836c
 800690c:	0800836c 	.word	0x0800836c
 8006910:	08008370 	.word	0x08008370

08006914 <memset>:
 8006914:	4402      	add	r2, r0
 8006916:	4603      	mov	r3, r0
 8006918:	4293      	cmp	r3, r2
 800691a:	d100      	bne.n	800691e <memset+0xa>
 800691c:	4770      	bx	lr
 800691e:	f803 1b01 	strb.w	r1, [r3], #1
 8006922:	e7f9      	b.n	8006918 <memset+0x4>

08006924 <iprintf>:
 8006924:	b40f      	push	{r0, r1, r2, r3}
 8006926:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <iprintf+0x2c>)
 8006928:	b513      	push	{r0, r1, r4, lr}
 800692a:	681c      	ldr	r4, [r3, #0]
 800692c:	b124      	cbz	r4, 8006938 <iprintf+0x14>
 800692e:	69a3      	ldr	r3, [r4, #24]
 8006930:	b913      	cbnz	r3, 8006938 <iprintf+0x14>
 8006932:	4620      	mov	r0, r4
 8006934:	f000 f98c 	bl	8006c50 <__sinit>
 8006938:	ab05      	add	r3, sp, #20
 800693a:	9a04      	ldr	r2, [sp, #16]
 800693c:	68a1      	ldr	r1, [r4, #8]
 800693e:	9301      	str	r3, [sp, #4]
 8006940:	4620      	mov	r0, r4
 8006942:	f000 fca5 	bl	8007290 <_vfiprintf_r>
 8006946:	b002      	add	sp, #8
 8006948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800694c:	b004      	add	sp, #16
 800694e:	4770      	bx	lr
 8006950:	200000a8 	.word	0x200000a8

08006954 <siprintf>:
 8006954:	b40e      	push	{r1, r2, r3}
 8006956:	b500      	push	{lr}
 8006958:	b09c      	sub	sp, #112	; 0x70
 800695a:	ab1d      	add	r3, sp, #116	; 0x74
 800695c:	9002      	str	r0, [sp, #8]
 800695e:	9006      	str	r0, [sp, #24]
 8006960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006964:	4809      	ldr	r0, [pc, #36]	; (800698c <siprintf+0x38>)
 8006966:	9107      	str	r1, [sp, #28]
 8006968:	9104      	str	r1, [sp, #16]
 800696a:	4909      	ldr	r1, [pc, #36]	; (8006990 <siprintf+0x3c>)
 800696c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006970:	9105      	str	r1, [sp, #20]
 8006972:	6800      	ldr	r0, [r0, #0]
 8006974:	9301      	str	r3, [sp, #4]
 8006976:	a902      	add	r1, sp, #8
 8006978:	f000 fb60 	bl	800703c <_svfiprintf_r>
 800697c:	9b02      	ldr	r3, [sp, #8]
 800697e:	2200      	movs	r2, #0
 8006980:	701a      	strb	r2, [r3, #0]
 8006982:	b01c      	add	sp, #112	; 0x70
 8006984:	f85d eb04 	ldr.w	lr, [sp], #4
 8006988:	b003      	add	sp, #12
 800698a:	4770      	bx	lr
 800698c:	200000a8 	.word	0x200000a8
 8006990:	ffff0208 	.word	0xffff0208

08006994 <strtok>:
 8006994:	4b16      	ldr	r3, [pc, #88]	; (80069f0 <strtok+0x5c>)
 8006996:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006998:	681e      	ldr	r6, [r3, #0]
 800699a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800699c:	4605      	mov	r5, r0
 800699e:	b9fc      	cbnz	r4, 80069e0 <strtok+0x4c>
 80069a0:	2050      	movs	r0, #80	; 0x50
 80069a2:	9101      	str	r1, [sp, #4]
 80069a4:	f000 fa06 	bl	8006db4 <malloc>
 80069a8:	9901      	ldr	r1, [sp, #4]
 80069aa:	65b0      	str	r0, [r6, #88]	; 0x58
 80069ac:	4602      	mov	r2, r0
 80069ae:	b920      	cbnz	r0, 80069ba <strtok+0x26>
 80069b0:	4b10      	ldr	r3, [pc, #64]	; (80069f4 <strtok+0x60>)
 80069b2:	4811      	ldr	r0, [pc, #68]	; (80069f8 <strtok+0x64>)
 80069b4:	2157      	movs	r1, #87	; 0x57
 80069b6:	f000 f8d5 	bl	8006b64 <__assert_func>
 80069ba:	e9c0 4400 	strd	r4, r4, [r0]
 80069be:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80069c2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80069c6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80069ca:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80069ce:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80069d2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80069d6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80069da:	6184      	str	r4, [r0, #24]
 80069dc:	7704      	strb	r4, [r0, #28]
 80069de:	6244      	str	r4, [r0, #36]	; 0x24
 80069e0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80069e2:	2301      	movs	r3, #1
 80069e4:	4628      	mov	r0, r5
 80069e6:	b002      	add	sp, #8
 80069e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80069ec:	f000 b806 	b.w	80069fc <__strtok_r>
 80069f0:	200000a8 	.word	0x200000a8
 80069f4:	0800811c 	.word	0x0800811c
 80069f8:	08008133 	.word	0x08008133

080069fc <__strtok_r>:
 80069fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069fe:	b908      	cbnz	r0, 8006a04 <__strtok_r+0x8>
 8006a00:	6810      	ldr	r0, [r2, #0]
 8006a02:	b188      	cbz	r0, 8006a28 <__strtok_r+0x2c>
 8006a04:	4604      	mov	r4, r0
 8006a06:	4620      	mov	r0, r4
 8006a08:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006a0c:	460f      	mov	r7, r1
 8006a0e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006a12:	b91e      	cbnz	r6, 8006a1c <__strtok_r+0x20>
 8006a14:	b965      	cbnz	r5, 8006a30 <__strtok_r+0x34>
 8006a16:	6015      	str	r5, [r2, #0]
 8006a18:	4628      	mov	r0, r5
 8006a1a:	e005      	b.n	8006a28 <__strtok_r+0x2c>
 8006a1c:	42b5      	cmp	r5, r6
 8006a1e:	d1f6      	bne.n	8006a0e <__strtok_r+0x12>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1f0      	bne.n	8006a06 <__strtok_r+0xa>
 8006a24:	6014      	str	r4, [r2, #0]
 8006a26:	7003      	strb	r3, [r0, #0]
 8006a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a2a:	461c      	mov	r4, r3
 8006a2c:	e00c      	b.n	8006a48 <__strtok_r+0x4c>
 8006a2e:	b915      	cbnz	r5, 8006a36 <__strtok_r+0x3a>
 8006a30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a34:	460e      	mov	r6, r1
 8006a36:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006a3a:	42ab      	cmp	r3, r5
 8006a3c:	d1f7      	bne.n	8006a2e <__strtok_r+0x32>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0f3      	beq.n	8006a2a <__strtok_r+0x2e>
 8006a42:	2300      	movs	r3, #0
 8006a44:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006a48:	6014      	str	r4, [r2, #0]
 8006a4a:	e7ed      	b.n	8006a28 <__strtok_r+0x2c>

08006a4c <_strtol_l.constprop.0>:
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a52:	d001      	beq.n	8006a58 <_strtol_l.constprop.0+0xc>
 8006a54:	2b24      	cmp	r3, #36	; 0x24
 8006a56:	d906      	bls.n	8006a66 <_strtol_l.constprop.0+0x1a>
 8006a58:	f7ff ff32 	bl	80068c0 <__errno>
 8006a5c:	2316      	movs	r3, #22
 8006a5e:	6003      	str	r3, [r0, #0]
 8006a60:	2000      	movs	r0, #0
 8006a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a66:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006b4c <_strtol_l.constprop.0+0x100>
 8006a6a:	460d      	mov	r5, r1
 8006a6c:	462e      	mov	r6, r5
 8006a6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a72:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006a76:	f017 0708 	ands.w	r7, r7, #8
 8006a7a:	d1f7      	bne.n	8006a6c <_strtol_l.constprop.0+0x20>
 8006a7c:	2c2d      	cmp	r4, #45	; 0x2d
 8006a7e:	d132      	bne.n	8006ae6 <_strtol_l.constprop.0+0x9a>
 8006a80:	782c      	ldrb	r4, [r5, #0]
 8006a82:	2701      	movs	r7, #1
 8006a84:	1cb5      	adds	r5, r6, #2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d05b      	beq.n	8006b42 <_strtol_l.constprop.0+0xf6>
 8006a8a:	2b10      	cmp	r3, #16
 8006a8c:	d109      	bne.n	8006aa2 <_strtol_l.constprop.0+0x56>
 8006a8e:	2c30      	cmp	r4, #48	; 0x30
 8006a90:	d107      	bne.n	8006aa2 <_strtol_l.constprop.0+0x56>
 8006a92:	782c      	ldrb	r4, [r5, #0]
 8006a94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006a98:	2c58      	cmp	r4, #88	; 0x58
 8006a9a:	d14d      	bne.n	8006b38 <_strtol_l.constprop.0+0xec>
 8006a9c:	786c      	ldrb	r4, [r5, #1]
 8006a9e:	2310      	movs	r3, #16
 8006aa0:	3502      	adds	r5, #2
 8006aa2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006aa6:	f108 38ff 	add.w	r8, r8, #4294967295
 8006aaa:	f04f 0c00 	mov.w	ip, #0
 8006aae:	fbb8 f9f3 	udiv	r9, r8, r3
 8006ab2:	4666      	mov	r6, ip
 8006ab4:	fb03 8a19 	mls	sl, r3, r9, r8
 8006ab8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006abc:	f1be 0f09 	cmp.w	lr, #9
 8006ac0:	d816      	bhi.n	8006af0 <_strtol_l.constprop.0+0xa4>
 8006ac2:	4674      	mov	r4, lr
 8006ac4:	42a3      	cmp	r3, r4
 8006ac6:	dd24      	ble.n	8006b12 <_strtol_l.constprop.0+0xc6>
 8006ac8:	f1bc 0f00 	cmp.w	ip, #0
 8006acc:	db1e      	blt.n	8006b0c <_strtol_l.constprop.0+0xc0>
 8006ace:	45b1      	cmp	r9, r6
 8006ad0:	d31c      	bcc.n	8006b0c <_strtol_l.constprop.0+0xc0>
 8006ad2:	d101      	bne.n	8006ad8 <_strtol_l.constprop.0+0x8c>
 8006ad4:	45a2      	cmp	sl, r4
 8006ad6:	db19      	blt.n	8006b0c <_strtol_l.constprop.0+0xc0>
 8006ad8:	fb06 4603 	mla	r6, r6, r3, r4
 8006adc:	f04f 0c01 	mov.w	ip, #1
 8006ae0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ae4:	e7e8      	b.n	8006ab8 <_strtol_l.constprop.0+0x6c>
 8006ae6:	2c2b      	cmp	r4, #43	; 0x2b
 8006ae8:	bf04      	itt	eq
 8006aea:	782c      	ldrbeq	r4, [r5, #0]
 8006aec:	1cb5      	addeq	r5, r6, #2
 8006aee:	e7ca      	b.n	8006a86 <_strtol_l.constprop.0+0x3a>
 8006af0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006af4:	f1be 0f19 	cmp.w	lr, #25
 8006af8:	d801      	bhi.n	8006afe <_strtol_l.constprop.0+0xb2>
 8006afa:	3c37      	subs	r4, #55	; 0x37
 8006afc:	e7e2      	b.n	8006ac4 <_strtol_l.constprop.0+0x78>
 8006afe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006b02:	f1be 0f19 	cmp.w	lr, #25
 8006b06:	d804      	bhi.n	8006b12 <_strtol_l.constprop.0+0xc6>
 8006b08:	3c57      	subs	r4, #87	; 0x57
 8006b0a:	e7db      	b.n	8006ac4 <_strtol_l.constprop.0+0x78>
 8006b0c:	f04f 3cff 	mov.w	ip, #4294967295
 8006b10:	e7e6      	b.n	8006ae0 <_strtol_l.constprop.0+0x94>
 8006b12:	f1bc 0f00 	cmp.w	ip, #0
 8006b16:	da05      	bge.n	8006b24 <_strtol_l.constprop.0+0xd8>
 8006b18:	2322      	movs	r3, #34	; 0x22
 8006b1a:	6003      	str	r3, [r0, #0]
 8006b1c:	4646      	mov	r6, r8
 8006b1e:	b942      	cbnz	r2, 8006b32 <_strtol_l.constprop.0+0xe6>
 8006b20:	4630      	mov	r0, r6
 8006b22:	e79e      	b.n	8006a62 <_strtol_l.constprop.0+0x16>
 8006b24:	b107      	cbz	r7, 8006b28 <_strtol_l.constprop.0+0xdc>
 8006b26:	4276      	negs	r6, r6
 8006b28:	2a00      	cmp	r2, #0
 8006b2a:	d0f9      	beq.n	8006b20 <_strtol_l.constprop.0+0xd4>
 8006b2c:	f1bc 0f00 	cmp.w	ip, #0
 8006b30:	d000      	beq.n	8006b34 <_strtol_l.constprop.0+0xe8>
 8006b32:	1e69      	subs	r1, r5, #1
 8006b34:	6011      	str	r1, [r2, #0]
 8006b36:	e7f3      	b.n	8006b20 <_strtol_l.constprop.0+0xd4>
 8006b38:	2430      	movs	r4, #48	; 0x30
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1b1      	bne.n	8006aa2 <_strtol_l.constprop.0+0x56>
 8006b3e:	2308      	movs	r3, #8
 8006b40:	e7af      	b.n	8006aa2 <_strtol_l.constprop.0+0x56>
 8006b42:	2c30      	cmp	r4, #48	; 0x30
 8006b44:	d0a5      	beq.n	8006a92 <_strtol_l.constprop.0+0x46>
 8006b46:	230a      	movs	r3, #10
 8006b48:	e7ab      	b.n	8006aa2 <_strtol_l.constprop.0+0x56>
 8006b4a:	bf00      	nop
 8006b4c:	080081cd 	.word	0x080081cd

08006b50 <strtol>:
 8006b50:	4613      	mov	r3, r2
 8006b52:	460a      	mov	r2, r1
 8006b54:	4601      	mov	r1, r0
 8006b56:	4802      	ldr	r0, [pc, #8]	; (8006b60 <strtol+0x10>)
 8006b58:	6800      	ldr	r0, [r0, #0]
 8006b5a:	f7ff bf77 	b.w	8006a4c <_strtol_l.constprop.0>
 8006b5e:	bf00      	nop
 8006b60:	200000a8 	.word	0x200000a8

08006b64 <__assert_func>:
 8006b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b66:	4614      	mov	r4, r2
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <__assert_func+0x2c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4605      	mov	r5, r0
 8006b70:	68d8      	ldr	r0, [r3, #12]
 8006b72:	b14c      	cbz	r4, 8006b88 <__assert_func+0x24>
 8006b74:	4b07      	ldr	r3, [pc, #28]	; (8006b94 <__assert_func+0x30>)
 8006b76:	9100      	str	r1, [sp, #0]
 8006b78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b7c:	4906      	ldr	r1, [pc, #24]	; (8006b98 <__assert_func+0x34>)
 8006b7e:	462b      	mov	r3, r5
 8006b80:	f000 f8e4 	bl	8006d4c <fiprintf>
 8006b84:	f000 ff6e 	bl	8007a64 <abort>
 8006b88:	4b04      	ldr	r3, [pc, #16]	; (8006b9c <__assert_func+0x38>)
 8006b8a:	461c      	mov	r4, r3
 8006b8c:	e7f3      	b.n	8006b76 <__assert_func+0x12>
 8006b8e:	bf00      	nop
 8006b90:	200000a8 	.word	0x200000a8
 8006b94:	08008190 	.word	0x08008190
 8006b98:	0800819d 	.word	0x0800819d
 8006b9c:	080081cb 	.word	0x080081cb

08006ba0 <std>:
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	b510      	push	{r4, lr}
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8006baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bae:	6083      	str	r3, [r0, #8]
 8006bb0:	8181      	strh	r1, [r0, #12]
 8006bb2:	6643      	str	r3, [r0, #100]	; 0x64
 8006bb4:	81c2      	strh	r2, [r0, #14]
 8006bb6:	6183      	str	r3, [r0, #24]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	2208      	movs	r2, #8
 8006bbc:	305c      	adds	r0, #92	; 0x5c
 8006bbe:	f7ff fea9 	bl	8006914 <memset>
 8006bc2:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <std+0x38>)
 8006bc4:	6263      	str	r3, [r4, #36]	; 0x24
 8006bc6:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <std+0x3c>)
 8006bc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bca:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <std+0x40>)
 8006bcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bce:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <std+0x44>)
 8006bd0:	6224      	str	r4, [r4, #32]
 8006bd2:	6323      	str	r3, [r4, #48]	; 0x30
 8006bd4:	bd10      	pop	{r4, pc}
 8006bd6:	bf00      	nop
 8006bd8:	08007839 	.word	0x08007839
 8006bdc:	0800785b 	.word	0x0800785b
 8006be0:	08007893 	.word	0x08007893
 8006be4:	080078b7 	.word	0x080078b7

08006be8 <_cleanup_r>:
 8006be8:	4901      	ldr	r1, [pc, #4]	; (8006bf0 <_cleanup_r+0x8>)
 8006bea:	f000 b8c1 	b.w	8006d70 <_fwalk_reent>
 8006bee:	bf00      	nop
 8006bf0:	08007ba1 	.word	0x08007ba1

08006bf4 <__sfmoreglue>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	2268      	movs	r2, #104	; 0x68
 8006bf8:	1e4d      	subs	r5, r1, #1
 8006bfa:	4355      	muls	r5, r2
 8006bfc:	460e      	mov	r6, r1
 8006bfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c02:	f000 f94b 	bl	8006e9c <_malloc_r>
 8006c06:	4604      	mov	r4, r0
 8006c08:	b140      	cbz	r0, 8006c1c <__sfmoreglue+0x28>
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	e9c0 1600 	strd	r1, r6, [r0]
 8006c10:	300c      	adds	r0, #12
 8006c12:	60a0      	str	r0, [r4, #8]
 8006c14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c18:	f7ff fe7c 	bl	8006914 <memset>
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	bd70      	pop	{r4, r5, r6, pc}

08006c20 <__sfp_lock_acquire>:
 8006c20:	4801      	ldr	r0, [pc, #4]	; (8006c28 <__sfp_lock_acquire+0x8>)
 8006c22:	f000 b8c5 	b.w	8006db0 <__retarget_lock_acquire_recursive>
 8006c26:	bf00      	nop
 8006c28:	200002a1 	.word	0x200002a1

08006c2c <__sfp_lock_release>:
 8006c2c:	4801      	ldr	r0, [pc, #4]	; (8006c34 <__sfp_lock_release+0x8>)
 8006c2e:	f000 b8c0 	b.w	8006db2 <__retarget_lock_release_recursive>
 8006c32:	bf00      	nop
 8006c34:	200002a1 	.word	0x200002a1

08006c38 <__sinit_lock_acquire>:
 8006c38:	4801      	ldr	r0, [pc, #4]	; (8006c40 <__sinit_lock_acquire+0x8>)
 8006c3a:	f000 b8b9 	b.w	8006db0 <__retarget_lock_acquire_recursive>
 8006c3e:	bf00      	nop
 8006c40:	200002a2 	.word	0x200002a2

08006c44 <__sinit_lock_release>:
 8006c44:	4801      	ldr	r0, [pc, #4]	; (8006c4c <__sinit_lock_release+0x8>)
 8006c46:	f000 b8b4 	b.w	8006db2 <__retarget_lock_release_recursive>
 8006c4a:	bf00      	nop
 8006c4c:	200002a2 	.word	0x200002a2

08006c50 <__sinit>:
 8006c50:	b510      	push	{r4, lr}
 8006c52:	4604      	mov	r4, r0
 8006c54:	f7ff fff0 	bl	8006c38 <__sinit_lock_acquire>
 8006c58:	69a3      	ldr	r3, [r4, #24]
 8006c5a:	b11b      	cbz	r3, 8006c64 <__sinit+0x14>
 8006c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c60:	f7ff bff0 	b.w	8006c44 <__sinit_lock_release>
 8006c64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c68:	6523      	str	r3, [r4, #80]	; 0x50
 8006c6a:	4b13      	ldr	r3, [pc, #76]	; (8006cb8 <__sinit+0x68>)
 8006c6c:	4a13      	ldr	r2, [pc, #76]	; (8006cbc <__sinit+0x6c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c72:	42a3      	cmp	r3, r4
 8006c74:	bf04      	itt	eq
 8006c76:	2301      	moveq	r3, #1
 8006c78:	61a3      	streq	r3, [r4, #24]
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f000 f820 	bl	8006cc0 <__sfp>
 8006c80:	6060      	str	r0, [r4, #4]
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 f81c 	bl	8006cc0 <__sfp>
 8006c88:	60a0      	str	r0, [r4, #8]
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f000 f818 	bl	8006cc0 <__sfp>
 8006c90:	2200      	movs	r2, #0
 8006c92:	60e0      	str	r0, [r4, #12]
 8006c94:	2104      	movs	r1, #4
 8006c96:	6860      	ldr	r0, [r4, #4]
 8006c98:	f7ff ff82 	bl	8006ba0 <std>
 8006c9c:	68a0      	ldr	r0, [r4, #8]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	2109      	movs	r1, #9
 8006ca2:	f7ff ff7d 	bl	8006ba0 <std>
 8006ca6:	68e0      	ldr	r0, [r4, #12]
 8006ca8:	2202      	movs	r2, #2
 8006caa:	2112      	movs	r1, #18
 8006cac:	f7ff ff78 	bl	8006ba0 <std>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	61a3      	str	r3, [r4, #24]
 8006cb4:	e7d2      	b.n	8006c5c <__sinit+0xc>
 8006cb6:	bf00      	nop
 8006cb8:	08008118 	.word	0x08008118
 8006cbc:	08006be9 	.word	0x08006be9

08006cc0 <__sfp>:
 8006cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc2:	4607      	mov	r7, r0
 8006cc4:	f7ff ffac 	bl	8006c20 <__sfp_lock_acquire>
 8006cc8:	4b1e      	ldr	r3, [pc, #120]	; (8006d44 <__sfp+0x84>)
 8006cca:	681e      	ldr	r6, [r3, #0]
 8006ccc:	69b3      	ldr	r3, [r6, #24]
 8006cce:	b913      	cbnz	r3, 8006cd6 <__sfp+0x16>
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f7ff ffbd 	bl	8006c50 <__sinit>
 8006cd6:	3648      	adds	r6, #72	; 0x48
 8006cd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	d503      	bpl.n	8006ce8 <__sfp+0x28>
 8006ce0:	6833      	ldr	r3, [r6, #0]
 8006ce2:	b30b      	cbz	r3, 8006d28 <__sfp+0x68>
 8006ce4:	6836      	ldr	r6, [r6, #0]
 8006ce6:	e7f7      	b.n	8006cd8 <__sfp+0x18>
 8006ce8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006cec:	b9d5      	cbnz	r5, 8006d24 <__sfp+0x64>
 8006cee:	4b16      	ldr	r3, [pc, #88]	; (8006d48 <__sfp+0x88>)
 8006cf0:	60e3      	str	r3, [r4, #12]
 8006cf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006cf6:	6665      	str	r5, [r4, #100]	; 0x64
 8006cf8:	f000 f859 	bl	8006dae <__retarget_lock_init_recursive>
 8006cfc:	f7ff ff96 	bl	8006c2c <__sfp_lock_release>
 8006d00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d08:	6025      	str	r5, [r4, #0]
 8006d0a:	61a5      	str	r5, [r4, #24]
 8006d0c:	2208      	movs	r2, #8
 8006d0e:	4629      	mov	r1, r5
 8006d10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d14:	f7ff fdfe 	bl	8006914 <memset>
 8006d18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d20:	4620      	mov	r0, r4
 8006d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d24:	3468      	adds	r4, #104	; 0x68
 8006d26:	e7d9      	b.n	8006cdc <__sfp+0x1c>
 8006d28:	2104      	movs	r1, #4
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	f7ff ff62 	bl	8006bf4 <__sfmoreglue>
 8006d30:	4604      	mov	r4, r0
 8006d32:	6030      	str	r0, [r6, #0]
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d1d5      	bne.n	8006ce4 <__sfp+0x24>
 8006d38:	f7ff ff78 	bl	8006c2c <__sfp_lock_release>
 8006d3c:	230c      	movs	r3, #12
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	e7ee      	b.n	8006d20 <__sfp+0x60>
 8006d42:	bf00      	nop
 8006d44:	08008118 	.word	0x08008118
 8006d48:	ffff0001 	.word	0xffff0001

08006d4c <fiprintf>:
 8006d4c:	b40e      	push	{r1, r2, r3}
 8006d4e:	b503      	push	{r0, r1, lr}
 8006d50:	4601      	mov	r1, r0
 8006d52:	ab03      	add	r3, sp, #12
 8006d54:	4805      	ldr	r0, [pc, #20]	; (8006d6c <fiprintf+0x20>)
 8006d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d5a:	6800      	ldr	r0, [r0, #0]
 8006d5c:	9301      	str	r3, [sp, #4]
 8006d5e:	f000 fa97 	bl	8007290 <_vfiprintf_r>
 8006d62:	b002      	add	sp, #8
 8006d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d68:	b003      	add	sp, #12
 8006d6a:	4770      	bx	lr
 8006d6c:	200000a8 	.word	0x200000a8

08006d70 <_fwalk_reent>:
 8006d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d74:	4606      	mov	r6, r0
 8006d76:	4688      	mov	r8, r1
 8006d78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d7c:	2700      	movs	r7, #0
 8006d7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d82:	f1b9 0901 	subs.w	r9, r9, #1
 8006d86:	d505      	bpl.n	8006d94 <_fwalk_reent+0x24>
 8006d88:	6824      	ldr	r4, [r4, #0]
 8006d8a:	2c00      	cmp	r4, #0
 8006d8c:	d1f7      	bne.n	8006d7e <_fwalk_reent+0xe>
 8006d8e:	4638      	mov	r0, r7
 8006d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d94:	89ab      	ldrh	r3, [r5, #12]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d907      	bls.n	8006daa <_fwalk_reent+0x3a>
 8006d9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	d003      	beq.n	8006daa <_fwalk_reent+0x3a>
 8006da2:	4629      	mov	r1, r5
 8006da4:	4630      	mov	r0, r6
 8006da6:	47c0      	blx	r8
 8006da8:	4307      	orrs	r7, r0
 8006daa:	3568      	adds	r5, #104	; 0x68
 8006dac:	e7e9      	b.n	8006d82 <_fwalk_reent+0x12>

08006dae <__retarget_lock_init_recursive>:
 8006dae:	4770      	bx	lr

08006db0 <__retarget_lock_acquire_recursive>:
 8006db0:	4770      	bx	lr

08006db2 <__retarget_lock_release_recursive>:
 8006db2:	4770      	bx	lr

08006db4 <malloc>:
 8006db4:	4b02      	ldr	r3, [pc, #8]	; (8006dc0 <malloc+0xc>)
 8006db6:	4601      	mov	r1, r0
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	f000 b86f 	b.w	8006e9c <_malloc_r>
 8006dbe:	bf00      	nop
 8006dc0:	200000a8 	.word	0x200000a8

08006dc4 <_free_r>:
 8006dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dc6:	2900      	cmp	r1, #0
 8006dc8:	d044      	beq.n	8006e54 <_free_r+0x90>
 8006dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dce:	9001      	str	r0, [sp, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f1a1 0404 	sub.w	r4, r1, #4
 8006dd6:	bfb8      	it	lt
 8006dd8:	18e4      	addlt	r4, r4, r3
 8006dda:	f000 ffbd 	bl	8007d58 <__malloc_lock>
 8006dde:	4a1e      	ldr	r2, [pc, #120]	; (8006e58 <_free_r+0x94>)
 8006de0:	9801      	ldr	r0, [sp, #4]
 8006de2:	6813      	ldr	r3, [r2, #0]
 8006de4:	b933      	cbnz	r3, 8006df4 <_free_r+0x30>
 8006de6:	6063      	str	r3, [r4, #4]
 8006de8:	6014      	str	r4, [r2, #0]
 8006dea:	b003      	add	sp, #12
 8006dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006df0:	f000 bfb8 	b.w	8007d64 <__malloc_unlock>
 8006df4:	42a3      	cmp	r3, r4
 8006df6:	d908      	bls.n	8006e0a <_free_r+0x46>
 8006df8:	6825      	ldr	r5, [r4, #0]
 8006dfa:	1961      	adds	r1, r4, r5
 8006dfc:	428b      	cmp	r3, r1
 8006dfe:	bf01      	itttt	eq
 8006e00:	6819      	ldreq	r1, [r3, #0]
 8006e02:	685b      	ldreq	r3, [r3, #4]
 8006e04:	1949      	addeq	r1, r1, r5
 8006e06:	6021      	streq	r1, [r4, #0]
 8006e08:	e7ed      	b.n	8006de6 <_free_r+0x22>
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	b10b      	cbz	r3, 8006e14 <_free_r+0x50>
 8006e10:	42a3      	cmp	r3, r4
 8006e12:	d9fa      	bls.n	8006e0a <_free_r+0x46>
 8006e14:	6811      	ldr	r1, [r2, #0]
 8006e16:	1855      	adds	r5, r2, r1
 8006e18:	42a5      	cmp	r5, r4
 8006e1a:	d10b      	bne.n	8006e34 <_free_r+0x70>
 8006e1c:	6824      	ldr	r4, [r4, #0]
 8006e1e:	4421      	add	r1, r4
 8006e20:	1854      	adds	r4, r2, r1
 8006e22:	42a3      	cmp	r3, r4
 8006e24:	6011      	str	r1, [r2, #0]
 8006e26:	d1e0      	bne.n	8006dea <_free_r+0x26>
 8006e28:	681c      	ldr	r4, [r3, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	6053      	str	r3, [r2, #4]
 8006e2e:	4421      	add	r1, r4
 8006e30:	6011      	str	r1, [r2, #0]
 8006e32:	e7da      	b.n	8006dea <_free_r+0x26>
 8006e34:	d902      	bls.n	8006e3c <_free_r+0x78>
 8006e36:	230c      	movs	r3, #12
 8006e38:	6003      	str	r3, [r0, #0]
 8006e3a:	e7d6      	b.n	8006dea <_free_r+0x26>
 8006e3c:	6825      	ldr	r5, [r4, #0]
 8006e3e:	1961      	adds	r1, r4, r5
 8006e40:	428b      	cmp	r3, r1
 8006e42:	bf04      	itt	eq
 8006e44:	6819      	ldreq	r1, [r3, #0]
 8006e46:	685b      	ldreq	r3, [r3, #4]
 8006e48:	6063      	str	r3, [r4, #4]
 8006e4a:	bf04      	itt	eq
 8006e4c:	1949      	addeq	r1, r1, r5
 8006e4e:	6021      	streq	r1, [r4, #0]
 8006e50:	6054      	str	r4, [r2, #4]
 8006e52:	e7ca      	b.n	8006dea <_free_r+0x26>
 8006e54:	b003      	add	sp, #12
 8006e56:	bd30      	pop	{r4, r5, pc}
 8006e58:	200002a4 	.word	0x200002a4

08006e5c <sbrk_aligned>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	4e0e      	ldr	r6, [pc, #56]	; (8006e98 <sbrk_aligned+0x3c>)
 8006e60:	460c      	mov	r4, r1
 8006e62:	6831      	ldr	r1, [r6, #0]
 8006e64:	4605      	mov	r5, r0
 8006e66:	b911      	cbnz	r1, 8006e6e <sbrk_aligned+0x12>
 8006e68:	f000 fcd6 	bl	8007818 <_sbrk_r>
 8006e6c:	6030      	str	r0, [r6, #0]
 8006e6e:	4621      	mov	r1, r4
 8006e70:	4628      	mov	r0, r5
 8006e72:	f000 fcd1 	bl	8007818 <_sbrk_r>
 8006e76:	1c43      	adds	r3, r0, #1
 8006e78:	d00a      	beq.n	8006e90 <sbrk_aligned+0x34>
 8006e7a:	1cc4      	adds	r4, r0, #3
 8006e7c:	f024 0403 	bic.w	r4, r4, #3
 8006e80:	42a0      	cmp	r0, r4
 8006e82:	d007      	beq.n	8006e94 <sbrk_aligned+0x38>
 8006e84:	1a21      	subs	r1, r4, r0
 8006e86:	4628      	mov	r0, r5
 8006e88:	f000 fcc6 	bl	8007818 <_sbrk_r>
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	d101      	bne.n	8006e94 <sbrk_aligned+0x38>
 8006e90:	f04f 34ff 	mov.w	r4, #4294967295
 8006e94:	4620      	mov	r0, r4
 8006e96:	bd70      	pop	{r4, r5, r6, pc}
 8006e98:	200002a8 	.word	0x200002a8

08006e9c <_malloc_r>:
 8006e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea0:	1ccd      	adds	r5, r1, #3
 8006ea2:	f025 0503 	bic.w	r5, r5, #3
 8006ea6:	3508      	adds	r5, #8
 8006ea8:	2d0c      	cmp	r5, #12
 8006eaa:	bf38      	it	cc
 8006eac:	250c      	movcc	r5, #12
 8006eae:	2d00      	cmp	r5, #0
 8006eb0:	4607      	mov	r7, r0
 8006eb2:	db01      	blt.n	8006eb8 <_malloc_r+0x1c>
 8006eb4:	42a9      	cmp	r1, r5
 8006eb6:	d905      	bls.n	8006ec4 <_malloc_r+0x28>
 8006eb8:	230c      	movs	r3, #12
 8006eba:	603b      	str	r3, [r7, #0]
 8006ebc:	2600      	movs	r6, #0
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec4:	4e2e      	ldr	r6, [pc, #184]	; (8006f80 <_malloc_r+0xe4>)
 8006ec6:	f000 ff47 	bl	8007d58 <__malloc_lock>
 8006eca:	6833      	ldr	r3, [r6, #0]
 8006ecc:	461c      	mov	r4, r3
 8006ece:	bb34      	cbnz	r4, 8006f1e <_malloc_r+0x82>
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	f7ff ffc2 	bl	8006e5c <sbrk_aligned>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	4604      	mov	r4, r0
 8006edc:	d14d      	bne.n	8006f7a <_malloc_r+0xde>
 8006ede:	6834      	ldr	r4, [r6, #0]
 8006ee0:	4626      	mov	r6, r4
 8006ee2:	2e00      	cmp	r6, #0
 8006ee4:	d140      	bne.n	8006f68 <_malloc_r+0xcc>
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	4631      	mov	r1, r6
 8006eea:	4638      	mov	r0, r7
 8006eec:	eb04 0803 	add.w	r8, r4, r3
 8006ef0:	f000 fc92 	bl	8007818 <_sbrk_r>
 8006ef4:	4580      	cmp	r8, r0
 8006ef6:	d13a      	bne.n	8006f6e <_malloc_r+0xd2>
 8006ef8:	6821      	ldr	r1, [r4, #0]
 8006efa:	3503      	adds	r5, #3
 8006efc:	1a6d      	subs	r5, r5, r1
 8006efe:	f025 0503 	bic.w	r5, r5, #3
 8006f02:	3508      	adds	r5, #8
 8006f04:	2d0c      	cmp	r5, #12
 8006f06:	bf38      	it	cc
 8006f08:	250c      	movcc	r5, #12
 8006f0a:	4629      	mov	r1, r5
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	f7ff ffa5 	bl	8006e5c <sbrk_aligned>
 8006f12:	3001      	adds	r0, #1
 8006f14:	d02b      	beq.n	8006f6e <_malloc_r+0xd2>
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	442b      	add	r3, r5
 8006f1a:	6023      	str	r3, [r4, #0]
 8006f1c:	e00e      	b.n	8006f3c <_malloc_r+0xa0>
 8006f1e:	6822      	ldr	r2, [r4, #0]
 8006f20:	1b52      	subs	r2, r2, r5
 8006f22:	d41e      	bmi.n	8006f62 <_malloc_r+0xc6>
 8006f24:	2a0b      	cmp	r2, #11
 8006f26:	d916      	bls.n	8006f56 <_malloc_r+0xba>
 8006f28:	1961      	adds	r1, r4, r5
 8006f2a:	42a3      	cmp	r3, r4
 8006f2c:	6025      	str	r5, [r4, #0]
 8006f2e:	bf18      	it	ne
 8006f30:	6059      	strne	r1, [r3, #4]
 8006f32:	6863      	ldr	r3, [r4, #4]
 8006f34:	bf08      	it	eq
 8006f36:	6031      	streq	r1, [r6, #0]
 8006f38:	5162      	str	r2, [r4, r5]
 8006f3a:	604b      	str	r3, [r1, #4]
 8006f3c:	4638      	mov	r0, r7
 8006f3e:	f104 060b 	add.w	r6, r4, #11
 8006f42:	f000 ff0f 	bl	8007d64 <__malloc_unlock>
 8006f46:	f026 0607 	bic.w	r6, r6, #7
 8006f4a:	1d23      	adds	r3, r4, #4
 8006f4c:	1af2      	subs	r2, r6, r3
 8006f4e:	d0b6      	beq.n	8006ebe <_malloc_r+0x22>
 8006f50:	1b9b      	subs	r3, r3, r6
 8006f52:	50a3      	str	r3, [r4, r2]
 8006f54:	e7b3      	b.n	8006ebe <_malloc_r+0x22>
 8006f56:	6862      	ldr	r2, [r4, #4]
 8006f58:	42a3      	cmp	r3, r4
 8006f5a:	bf0c      	ite	eq
 8006f5c:	6032      	streq	r2, [r6, #0]
 8006f5e:	605a      	strne	r2, [r3, #4]
 8006f60:	e7ec      	b.n	8006f3c <_malloc_r+0xa0>
 8006f62:	4623      	mov	r3, r4
 8006f64:	6864      	ldr	r4, [r4, #4]
 8006f66:	e7b2      	b.n	8006ece <_malloc_r+0x32>
 8006f68:	4634      	mov	r4, r6
 8006f6a:	6876      	ldr	r6, [r6, #4]
 8006f6c:	e7b9      	b.n	8006ee2 <_malloc_r+0x46>
 8006f6e:	230c      	movs	r3, #12
 8006f70:	603b      	str	r3, [r7, #0]
 8006f72:	4638      	mov	r0, r7
 8006f74:	f000 fef6 	bl	8007d64 <__malloc_unlock>
 8006f78:	e7a1      	b.n	8006ebe <_malloc_r+0x22>
 8006f7a:	6025      	str	r5, [r4, #0]
 8006f7c:	e7de      	b.n	8006f3c <_malloc_r+0xa0>
 8006f7e:	bf00      	nop
 8006f80:	200002a4 	.word	0x200002a4

08006f84 <__ssputs_r>:
 8006f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f88:	688e      	ldr	r6, [r1, #8]
 8006f8a:	429e      	cmp	r6, r3
 8006f8c:	4682      	mov	sl, r0
 8006f8e:	460c      	mov	r4, r1
 8006f90:	4690      	mov	r8, r2
 8006f92:	461f      	mov	r7, r3
 8006f94:	d838      	bhi.n	8007008 <__ssputs_r+0x84>
 8006f96:	898a      	ldrh	r2, [r1, #12]
 8006f98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f9c:	d032      	beq.n	8007004 <__ssputs_r+0x80>
 8006f9e:	6825      	ldr	r5, [r4, #0]
 8006fa0:	6909      	ldr	r1, [r1, #16]
 8006fa2:	eba5 0901 	sub.w	r9, r5, r1
 8006fa6:	6965      	ldr	r5, [r4, #20]
 8006fa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	444b      	add	r3, r9
 8006fb4:	106d      	asrs	r5, r5, #1
 8006fb6:	429d      	cmp	r5, r3
 8006fb8:	bf38      	it	cc
 8006fba:	461d      	movcc	r5, r3
 8006fbc:	0553      	lsls	r3, r2, #21
 8006fbe:	d531      	bpl.n	8007024 <__ssputs_r+0xa0>
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	f7ff ff6b 	bl	8006e9c <_malloc_r>
 8006fc6:	4606      	mov	r6, r0
 8006fc8:	b950      	cbnz	r0, 8006fe0 <__ssputs_r+0x5c>
 8006fca:	230c      	movs	r3, #12
 8006fcc:	f8ca 3000 	str.w	r3, [sl]
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fd6:	81a3      	strh	r3, [r4, #12]
 8006fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe0:	6921      	ldr	r1, [r4, #16]
 8006fe2:	464a      	mov	r2, r9
 8006fe4:	f000 fe90 	bl	8007d08 <memcpy>
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff2:	81a3      	strh	r3, [r4, #12]
 8006ff4:	6126      	str	r6, [r4, #16]
 8006ff6:	6165      	str	r5, [r4, #20]
 8006ff8:	444e      	add	r6, r9
 8006ffa:	eba5 0509 	sub.w	r5, r5, r9
 8006ffe:	6026      	str	r6, [r4, #0]
 8007000:	60a5      	str	r5, [r4, #8]
 8007002:	463e      	mov	r6, r7
 8007004:	42be      	cmp	r6, r7
 8007006:	d900      	bls.n	800700a <__ssputs_r+0x86>
 8007008:	463e      	mov	r6, r7
 800700a:	6820      	ldr	r0, [r4, #0]
 800700c:	4632      	mov	r2, r6
 800700e:	4641      	mov	r1, r8
 8007010:	f000 fe88 	bl	8007d24 <memmove>
 8007014:	68a3      	ldr	r3, [r4, #8]
 8007016:	1b9b      	subs	r3, r3, r6
 8007018:	60a3      	str	r3, [r4, #8]
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	4433      	add	r3, r6
 800701e:	6023      	str	r3, [r4, #0]
 8007020:	2000      	movs	r0, #0
 8007022:	e7db      	b.n	8006fdc <__ssputs_r+0x58>
 8007024:	462a      	mov	r2, r5
 8007026:	f000 fea3 	bl	8007d70 <_realloc_r>
 800702a:	4606      	mov	r6, r0
 800702c:	2800      	cmp	r0, #0
 800702e:	d1e1      	bne.n	8006ff4 <__ssputs_r+0x70>
 8007030:	6921      	ldr	r1, [r4, #16]
 8007032:	4650      	mov	r0, sl
 8007034:	f7ff fec6 	bl	8006dc4 <_free_r>
 8007038:	e7c7      	b.n	8006fca <__ssputs_r+0x46>
	...

0800703c <_svfiprintf_r>:
 800703c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007040:	4698      	mov	r8, r3
 8007042:	898b      	ldrh	r3, [r1, #12]
 8007044:	061b      	lsls	r3, r3, #24
 8007046:	b09d      	sub	sp, #116	; 0x74
 8007048:	4607      	mov	r7, r0
 800704a:	460d      	mov	r5, r1
 800704c:	4614      	mov	r4, r2
 800704e:	d50e      	bpl.n	800706e <_svfiprintf_r+0x32>
 8007050:	690b      	ldr	r3, [r1, #16]
 8007052:	b963      	cbnz	r3, 800706e <_svfiprintf_r+0x32>
 8007054:	2140      	movs	r1, #64	; 0x40
 8007056:	f7ff ff21 	bl	8006e9c <_malloc_r>
 800705a:	6028      	str	r0, [r5, #0]
 800705c:	6128      	str	r0, [r5, #16]
 800705e:	b920      	cbnz	r0, 800706a <_svfiprintf_r+0x2e>
 8007060:	230c      	movs	r3, #12
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	f04f 30ff 	mov.w	r0, #4294967295
 8007068:	e0d1      	b.n	800720e <_svfiprintf_r+0x1d2>
 800706a:	2340      	movs	r3, #64	; 0x40
 800706c:	616b      	str	r3, [r5, #20]
 800706e:	2300      	movs	r3, #0
 8007070:	9309      	str	r3, [sp, #36]	; 0x24
 8007072:	2320      	movs	r3, #32
 8007074:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007078:	f8cd 800c 	str.w	r8, [sp, #12]
 800707c:	2330      	movs	r3, #48	; 0x30
 800707e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007228 <_svfiprintf_r+0x1ec>
 8007082:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007086:	f04f 0901 	mov.w	r9, #1
 800708a:	4623      	mov	r3, r4
 800708c:	469a      	mov	sl, r3
 800708e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007092:	b10a      	cbz	r2, 8007098 <_svfiprintf_r+0x5c>
 8007094:	2a25      	cmp	r2, #37	; 0x25
 8007096:	d1f9      	bne.n	800708c <_svfiprintf_r+0x50>
 8007098:	ebba 0b04 	subs.w	fp, sl, r4
 800709c:	d00b      	beq.n	80070b6 <_svfiprintf_r+0x7a>
 800709e:	465b      	mov	r3, fp
 80070a0:	4622      	mov	r2, r4
 80070a2:	4629      	mov	r1, r5
 80070a4:	4638      	mov	r0, r7
 80070a6:	f7ff ff6d 	bl	8006f84 <__ssputs_r>
 80070aa:	3001      	adds	r0, #1
 80070ac:	f000 80aa 	beq.w	8007204 <_svfiprintf_r+0x1c8>
 80070b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070b2:	445a      	add	r2, fp
 80070b4:	9209      	str	r2, [sp, #36]	; 0x24
 80070b6:	f89a 3000 	ldrb.w	r3, [sl]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 80a2 	beq.w	8007204 <_svfiprintf_r+0x1c8>
 80070c0:	2300      	movs	r3, #0
 80070c2:	f04f 32ff 	mov.w	r2, #4294967295
 80070c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070ca:	f10a 0a01 	add.w	sl, sl, #1
 80070ce:	9304      	str	r3, [sp, #16]
 80070d0:	9307      	str	r3, [sp, #28]
 80070d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070d6:	931a      	str	r3, [sp, #104]	; 0x68
 80070d8:	4654      	mov	r4, sl
 80070da:	2205      	movs	r2, #5
 80070dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070e0:	4851      	ldr	r0, [pc, #324]	; (8007228 <_svfiprintf_r+0x1ec>)
 80070e2:	f7f9 f8ad 	bl	8000240 <memchr>
 80070e6:	9a04      	ldr	r2, [sp, #16]
 80070e8:	b9d8      	cbnz	r0, 8007122 <_svfiprintf_r+0xe6>
 80070ea:	06d0      	lsls	r0, r2, #27
 80070ec:	bf44      	itt	mi
 80070ee:	2320      	movmi	r3, #32
 80070f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070f4:	0711      	lsls	r1, r2, #28
 80070f6:	bf44      	itt	mi
 80070f8:	232b      	movmi	r3, #43	; 0x2b
 80070fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007102:	2b2a      	cmp	r3, #42	; 0x2a
 8007104:	d015      	beq.n	8007132 <_svfiprintf_r+0xf6>
 8007106:	9a07      	ldr	r2, [sp, #28]
 8007108:	4654      	mov	r4, sl
 800710a:	2000      	movs	r0, #0
 800710c:	f04f 0c0a 	mov.w	ip, #10
 8007110:	4621      	mov	r1, r4
 8007112:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007116:	3b30      	subs	r3, #48	; 0x30
 8007118:	2b09      	cmp	r3, #9
 800711a:	d94e      	bls.n	80071ba <_svfiprintf_r+0x17e>
 800711c:	b1b0      	cbz	r0, 800714c <_svfiprintf_r+0x110>
 800711e:	9207      	str	r2, [sp, #28]
 8007120:	e014      	b.n	800714c <_svfiprintf_r+0x110>
 8007122:	eba0 0308 	sub.w	r3, r0, r8
 8007126:	fa09 f303 	lsl.w	r3, r9, r3
 800712a:	4313      	orrs	r3, r2
 800712c:	9304      	str	r3, [sp, #16]
 800712e:	46a2      	mov	sl, r4
 8007130:	e7d2      	b.n	80070d8 <_svfiprintf_r+0x9c>
 8007132:	9b03      	ldr	r3, [sp, #12]
 8007134:	1d19      	adds	r1, r3, #4
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	9103      	str	r1, [sp, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	bfbb      	ittet	lt
 800713e:	425b      	neglt	r3, r3
 8007140:	f042 0202 	orrlt.w	r2, r2, #2
 8007144:	9307      	strge	r3, [sp, #28]
 8007146:	9307      	strlt	r3, [sp, #28]
 8007148:	bfb8      	it	lt
 800714a:	9204      	strlt	r2, [sp, #16]
 800714c:	7823      	ldrb	r3, [r4, #0]
 800714e:	2b2e      	cmp	r3, #46	; 0x2e
 8007150:	d10c      	bne.n	800716c <_svfiprintf_r+0x130>
 8007152:	7863      	ldrb	r3, [r4, #1]
 8007154:	2b2a      	cmp	r3, #42	; 0x2a
 8007156:	d135      	bne.n	80071c4 <_svfiprintf_r+0x188>
 8007158:	9b03      	ldr	r3, [sp, #12]
 800715a:	1d1a      	adds	r2, r3, #4
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	9203      	str	r2, [sp, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	bfb8      	it	lt
 8007164:	f04f 33ff 	movlt.w	r3, #4294967295
 8007168:	3402      	adds	r4, #2
 800716a:	9305      	str	r3, [sp, #20]
 800716c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007238 <_svfiprintf_r+0x1fc>
 8007170:	7821      	ldrb	r1, [r4, #0]
 8007172:	2203      	movs	r2, #3
 8007174:	4650      	mov	r0, sl
 8007176:	f7f9 f863 	bl	8000240 <memchr>
 800717a:	b140      	cbz	r0, 800718e <_svfiprintf_r+0x152>
 800717c:	2340      	movs	r3, #64	; 0x40
 800717e:	eba0 000a 	sub.w	r0, r0, sl
 8007182:	fa03 f000 	lsl.w	r0, r3, r0
 8007186:	9b04      	ldr	r3, [sp, #16]
 8007188:	4303      	orrs	r3, r0
 800718a:	3401      	adds	r4, #1
 800718c:	9304      	str	r3, [sp, #16]
 800718e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007192:	4826      	ldr	r0, [pc, #152]	; (800722c <_svfiprintf_r+0x1f0>)
 8007194:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007198:	2206      	movs	r2, #6
 800719a:	f7f9 f851 	bl	8000240 <memchr>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d038      	beq.n	8007214 <_svfiprintf_r+0x1d8>
 80071a2:	4b23      	ldr	r3, [pc, #140]	; (8007230 <_svfiprintf_r+0x1f4>)
 80071a4:	bb1b      	cbnz	r3, 80071ee <_svfiprintf_r+0x1b2>
 80071a6:	9b03      	ldr	r3, [sp, #12]
 80071a8:	3307      	adds	r3, #7
 80071aa:	f023 0307 	bic.w	r3, r3, #7
 80071ae:	3308      	adds	r3, #8
 80071b0:	9303      	str	r3, [sp, #12]
 80071b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071b4:	4433      	add	r3, r6
 80071b6:	9309      	str	r3, [sp, #36]	; 0x24
 80071b8:	e767      	b.n	800708a <_svfiprintf_r+0x4e>
 80071ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80071be:	460c      	mov	r4, r1
 80071c0:	2001      	movs	r0, #1
 80071c2:	e7a5      	b.n	8007110 <_svfiprintf_r+0xd4>
 80071c4:	2300      	movs	r3, #0
 80071c6:	3401      	adds	r4, #1
 80071c8:	9305      	str	r3, [sp, #20]
 80071ca:	4619      	mov	r1, r3
 80071cc:	f04f 0c0a 	mov.w	ip, #10
 80071d0:	4620      	mov	r0, r4
 80071d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071d6:	3a30      	subs	r2, #48	; 0x30
 80071d8:	2a09      	cmp	r2, #9
 80071da:	d903      	bls.n	80071e4 <_svfiprintf_r+0x1a8>
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d0c5      	beq.n	800716c <_svfiprintf_r+0x130>
 80071e0:	9105      	str	r1, [sp, #20]
 80071e2:	e7c3      	b.n	800716c <_svfiprintf_r+0x130>
 80071e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80071e8:	4604      	mov	r4, r0
 80071ea:	2301      	movs	r3, #1
 80071ec:	e7f0      	b.n	80071d0 <_svfiprintf_r+0x194>
 80071ee:	ab03      	add	r3, sp, #12
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	462a      	mov	r2, r5
 80071f4:	4b0f      	ldr	r3, [pc, #60]	; (8007234 <_svfiprintf_r+0x1f8>)
 80071f6:	a904      	add	r1, sp, #16
 80071f8:	4638      	mov	r0, r7
 80071fa:	f3af 8000 	nop.w
 80071fe:	1c42      	adds	r2, r0, #1
 8007200:	4606      	mov	r6, r0
 8007202:	d1d6      	bne.n	80071b2 <_svfiprintf_r+0x176>
 8007204:	89ab      	ldrh	r3, [r5, #12]
 8007206:	065b      	lsls	r3, r3, #25
 8007208:	f53f af2c 	bmi.w	8007064 <_svfiprintf_r+0x28>
 800720c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800720e:	b01d      	add	sp, #116	; 0x74
 8007210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007214:	ab03      	add	r3, sp, #12
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	462a      	mov	r2, r5
 800721a:	4b06      	ldr	r3, [pc, #24]	; (8007234 <_svfiprintf_r+0x1f8>)
 800721c:	a904      	add	r1, sp, #16
 800721e:	4638      	mov	r0, r7
 8007220:	f000 f9d4 	bl	80075cc <_printf_i>
 8007224:	e7eb      	b.n	80071fe <_svfiprintf_r+0x1c2>
 8007226:	bf00      	nop
 8007228:	08008330 	.word	0x08008330
 800722c:	0800833a 	.word	0x0800833a
 8007230:	00000000 	.word	0x00000000
 8007234:	08006f85 	.word	0x08006f85
 8007238:	08008336 	.word	0x08008336

0800723c <__sfputc_r>:
 800723c:	6893      	ldr	r3, [r2, #8]
 800723e:	3b01      	subs	r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	b410      	push	{r4}
 8007244:	6093      	str	r3, [r2, #8]
 8007246:	da08      	bge.n	800725a <__sfputc_r+0x1e>
 8007248:	6994      	ldr	r4, [r2, #24]
 800724a:	42a3      	cmp	r3, r4
 800724c:	db01      	blt.n	8007252 <__sfputc_r+0x16>
 800724e:	290a      	cmp	r1, #10
 8007250:	d103      	bne.n	800725a <__sfputc_r+0x1e>
 8007252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007256:	f000 bb33 	b.w	80078c0 <__swbuf_r>
 800725a:	6813      	ldr	r3, [r2, #0]
 800725c:	1c58      	adds	r0, r3, #1
 800725e:	6010      	str	r0, [r2, #0]
 8007260:	7019      	strb	r1, [r3, #0]
 8007262:	4608      	mov	r0, r1
 8007264:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007268:	4770      	bx	lr

0800726a <__sfputs_r>:
 800726a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726c:	4606      	mov	r6, r0
 800726e:	460f      	mov	r7, r1
 8007270:	4614      	mov	r4, r2
 8007272:	18d5      	adds	r5, r2, r3
 8007274:	42ac      	cmp	r4, r5
 8007276:	d101      	bne.n	800727c <__sfputs_r+0x12>
 8007278:	2000      	movs	r0, #0
 800727a:	e007      	b.n	800728c <__sfputs_r+0x22>
 800727c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007280:	463a      	mov	r2, r7
 8007282:	4630      	mov	r0, r6
 8007284:	f7ff ffda 	bl	800723c <__sfputc_r>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d1f3      	bne.n	8007274 <__sfputs_r+0xa>
 800728c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007290 <_vfiprintf_r>:
 8007290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007294:	460d      	mov	r5, r1
 8007296:	b09d      	sub	sp, #116	; 0x74
 8007298:	4614      	mov	r4, r2
 800729a:	4698      	mov	r8, r3
 800729c:	4606      	mov	r6, r0
 800729e:	b118      	cbz	r0, 80072a8 <_vfiprintf_r+0x18>
 80072a0:	6983      	ldr	r3, [r0, #24]
 80072a2:	b90b      	cbnz	r3, 80072a8 <_vfiprintf_r+0x18>
 80072a4:	f7ff fcd4 	bl	8006c50 <__sinit>
 80072a8:	4b89      	ldr	r3, [pc, #548]	; (80074d0 <_vfiprintf_r+0x240>)
 80072aa:	429d      	cmp	r5, r3
 80072ac:	d11b      	bne.n	80072e6 <_vfiprintf_r+0x56>
 80072ae:	6875      	ldr	r5, [r6, #4]
 80072b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072b2:	07d9      	lsls	r1, r3, #31
 80072b4:	d405      	bmi.n	80072c2 <_vfiprintf_r+0x32>
 80072b6:	89ab      	ldrh	r3, [r5, #12]
 80072b8:	059a      	lsls	r2, r3, #22
 80072ba:	d402      	bmi.n	80072c2 <_vfiprintf_r+0x32>
 80072bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072be:	f7ff fd77 	bl	8006db0 <__retarget_lock_acquire_recursive>
 80072c2:	89ab      	ldrh	r3, [r5, #12]
 80072c4:	071b      	lsls	r3, r3, #28
 80072c6:	d501      	bpl.n	80072cc <_vfiprintf_r+0x3c>
 80072c8:	692b      	ldr	r3, [r5, #16]
 80072ca:	b9eb      	cbnz	r3, 8007308 <_vfiprintf_r+0x78>
 80072cc:	4629      	mov	r1, r5
 80072ce:	4630      	mov	r0, r6
 80072d0:	f000 fb5a 	bl	8007988 <__swsetup_r>
 80072d4:	b1c0      	cbz	r0, 8007308 <_vfiprintf_r+0x78>
 80072d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072d8:	07dc      	lsls	r4, r3, #31
 80072da:	d50e      	bpl.n	80072fa <_vfiprintf_r+0x6a>
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295
 80072e0:	b01d      	add	sp, #116	; 0x74
 80072e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e6:	4b7b      	ldr	r3, [pc, #492]	; (80074d4 <_vfiprintf_r+0x244>)
 80072e8:	429d      	cmp	r5, r3
 80072ea:	d101      	bne.n	80072f0 <_vfiprintf_r+0x60>
 80072ec:	68b5      	ldr	r5, [r6, #8]
 80072ee:	e7df      	b.n	80072b0 <_vfiprintf_r+0x20>
 80072f0:	4b79      	ldr	r3, [pc, #484]	; (80074d8 <_vfiprintf_r+0x248>)
 80072f2:	429d      	cmp	r5, r3
 80072f4:	bf08      	it	eq
 80072f6:	68f5      	ldreq	r5, [r6, #12]
 80072f8:	e7da      	b.n	80072b0 <_vfiprintf_r+0x20>
 80072fa:	89ab      	ldrh	r3, [r5, #12]
 80072fc:	0598      	lsls	r0, r3, #22
 80072fe:	d4ed      	bmi.n	80072dc <_vfiprintf_r+0x4c>
 8007300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007302:	f7ff fd56 	bl	8006db2 <__retarget_lock_release_recursive>
 8007306:	e7e9      	b.n	80072dc <_vfiprintf_r+0x4c>
 8007308:	2300      	movs	r3, #0
 800730a:	9309      	str	r3, [sp, #36]	; 0x24
 800730c:	2320      	movs	r3, #32
 800730e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007312:	f8cd 800c 	str.w	r8, [sp, #12]
 8007316:	2330      	movs	r3, #48	; 0x30
 8007318:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80074dc <_vfiprintf_r+0x24c>
 800731c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007320:	f04f 0901 	mov.w	r9, #1
 8007324:	4623      	mov	r3, r4
 8007326:	469a      	mov	sl, r3
 8007328:	f813 2b01 	ldrb.w	r2, [r3], #1
 800732c:	b10a      	cbz	r2, 8007332 <_vfiprintf_r+0xa2>
 800732e:	2a25      	cmp	r2, #37	; 0x25
 8007330:	d1f9      	bne.n	8007326 <_vfiprintf_r+0x96>
 8007332:	ebba 0b04 	subs.w	fp, sl, r4
 8007336:	d00b      	beq.n	8007350 <_vfiprintf_r+0xc0>
 8007338:	465b      	mov	r3, fp
 800733a:	4622      	mov	r2, r4
 800733c:	4629      	mov	r1, r5
 800733e:	4630      	mov	r0, r6
 8007340:	f7ff ff93 	bl	800726a <__sfputs_r>
 8007344:	3001      	adds	r0, #1
 8007346:	f000 80aa 	beq.w	800749e <_vfiprintf_r+0x20e>
 800734a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800734c:	445a      	add	r2, fp
 800734e:	9209      	str	r2, [sp, #36]	; 0x24
 8007350:	f89a 3000 	ldrb.w	r3, [sl]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 80a2 	beq.w	800749e <_vfiprintf_r+0x20e>
 800735a:	2300      	movs	r3, #0
 800735c:	f04f 32ff 	mov.w	r2, #4294967295
 8007360:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007364:	f10a 0a01 	add.w	sl, sl, #1
 8007368:	9304      	str	r3, [sp, #16]
 800736a:	9307      	str	r3, [sp, #28]
 800736c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007370:	931a      	str	r3, [sp, #104]	; 0x68
 8007372:	4654      	mov	r4, sl
 8007374:	2205      	movs	r2, #5
 8007376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800737a:	4858      	ldr	r0, [pc, #352]	; (80074dc <_vfiprintf_r+0x24c>)
 800737c:	f7f8 ff60 	bl	8000240 <memchr>
 8007380:	9a04      	ldr	r2, [sp, #16]
 8007382:	b9d8      	cbnz	r0, 80073bc <_vfiprintf_r+0x12c>
 8007384:	06d1      	lsls	r1, r2, #27
 8007386:	bf44      	itt	mi
 8007388:	2320      	movmi	r3, #32
 800738a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800738e:	0713      	lsls	r3, r2, #28
 8007390:	bf44      	itt	mi
 8007392:	232b      	movmi	r3, #43	; 0x2b
 8007394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007398:	f89a 3000 	ldrb.w	r3, [sl]
 800739c:	2b2a      	cmp	r3, #42	; 0x2a
 800739e:	d015      	beq.n	80073cc <_vfiprintf_r+0x13c>
 80073a0:	9a07      	ldr	r2, [sp, #28]
 80073a2:	4654      	mov	r4, sl
 80073a4:	2000      	movs	r0, #0
 80073a6:	f04f 0c0a 	mov.w	ip, #10
 80073aa:	4621      	mov	r1, r4
 80073ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073b0:	3b30      	subs	r3, #48	; 0x30
 80073b2:	2b09      	cmp	r3, #9
 80073b4:	d94e      	bls.n	8007454 <_vfiprintf_r+0x1c4>
 80073b6:	b1b0      	cbz	r0, 80073e6 <_vfiprintf_r+0x156>
 80073b8:	9207      	str	r2, [sp, #28]
 80073ba:	e014      	b.n	80073e6 <_vfiprintf_r+0x156>
 80073bc:	eba0 0308 	sub.w	r3, r0, r8
 80073c0:	fa09 f303 	lsl.w	r3, r9, r3
 80073c4:	4313      	orrs	r3, r2
 80073c6:	9304      	str	r3, [sp, #16]
 80073c8:	46a2      	mov	sl, r4
 80073ca:	e7d2      	b.n	8007372 <_vfiprintf_r+0xe2>
 80073cc:	9b03      	ldr	r3, [sp, #12]
 80073ce:	1d19      	adds	r1, r3, #4
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	9103      	str	r1, [sp, #12]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	bfbb      	ittet	lt
 80073d8:	425b      	neglt	r3, r3
 80073da:	f042 0202 	orrlt.w	r2, r2, #2
 80073de:	9307      	strge	r3, [sp, #28]
 80073e0:	9307      	strlt	r3, [sp, #28]
 80073e2:	bfb8      	it	lt
 80073e4:	9204      	strlt	r2, [sp, #16]
 80073e6:	7823      	ldrb	r3, [r4, #0]
 80073e8:	2b2e      	cmp	r3, #46	; 0x2e
 80073ea:	d10c      	bne.n	8007406 <_vfiprintf_r+0x176>
 80073ec:	7863      	ldrb	r3, [r4, #1]
 80073ee:	2b2a      	cmp	r3, #42	; 0x2a
 80073f0:	d135      	bne.n	800745e <_vfiprintf_r+0x1ce>
 80073f2:	9b03      	ldr	r3, [sp, #12]
 80073f4:	1d1a      	adds	r2, r3, #4
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	9203      	str	r2, [sp, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bfb8      	it	lt
 80073fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8007402:	3402      	adds	r4, #2
 8007404:	9305      	str	r3, [sp, #20]
 8007406:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80074ec <_vfiprintf_r+0x25c>
 800740a:	7821      	ldrb	r1, [r4, #0]
 800740c:	2203      	movs	r2, #3
 800740e:	4650      	mov	r0, sl
 8007410:	f7f8 ff16 	bl	8000240 <memchr>
 8007414:	b140      	cbz	r0, 8007428 <_vfiprintf_r+0x198>
 8007416:	2340      	movs	r3, #64	; 0x40
 8007418:	eba0 000a 	sub.w	r0, r0, sl
 800741c:	fa03 f000 	lsl.w	r0, r3, r0
 8007420:	9b04      	ldr	r3, [sp, #16]
 8007422:	4303      	orrs	r3, r0
 8007424:	3401      	adds	r4, #1
 8007426:	9304      	str	r3, [sp, #16]
 8007428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800742c:	482c      	ldr	r0, [pc, #176]	; (80074e0 <_vfiprintf_r+0x250>)
 800742e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007432:	2206      	movs	r2, #6
 8007434:	f7f8 ff04 	bl	8000240 <memchr>
 8007438:	2800      	cmp	r0, #0
 800743a:	d03f      	beq.n	80074bc <_vfiprintf_r+0x22c>
 800743c:	4b29      	ldr	r3, [pc, #164]	; (80074e4 <_vfiprintf_r+0x254>)
 800743e:	bb1b      	cbnz	r3, 8007488 <_vfiprintf_r+0x1f8>
 8007440:	9b03      	ldr	r3, [sp, #12]
 8007442:	3307      	adds	r3, #7
 8007444:	f023 0307 	bic.w	r3, r3, #7
 8007448:	3308      	adds	r3, #8
 800744a:	9303      	str	r3, [sp, #12]
 800744c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800744e:	443b      	add	r3, r7
 8007450:	9309      	str	r3, [sp, #36]	; 0x24
 8007452:	e767      	b.n	8007324 <_vfiprintf_r+0x94>
 8007454:	fb0c 3202 	mla	r2, ip, r2, r3
 8007458:	460c      	mov	r4, r1
 800745a:	2001      	movs	r0, #1
 800745c:	e7a5      	b.n	80073aa <_vfiprintf_r+0x11a>
 800745e:	2300      	movs	r3, #0
 8007460:	3401      	adds	r4, #1
 8007462:	9305      	str	r3, [sp, #20]
 8007464:	4619      	mov	r1, r3
 8007466:	f04f 0c0a 	mov.w	ip, #10
 800746a:	4620      	mov	r0, r4
 800746c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007470:	3a30      	subs	r2, #48	; 0x30
 8007472:	2a09      	cmp	r2, #9
 8007474:	d903      	bls.n	800747e <_vfiprintf_r+0x1ee>
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0c5      	beq.n	8007406 <_vfiprintf_r+0x176>
 800747a:	9105      	str	r1, [sp, #20]
 800747c:	e7c3      	b.n	8007406 <_vfiprintf_r+0x176>
 800747e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007482:	4604      	mov	r4, r0
 8007484:	2301      	movs	r3, #1
 8007486:	e7f0      	b.n	800746a <_vfiprintf_r+0x1da>
 8007488:	ab03      	add	r3, sp, #12
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	462a      	mov	r2, r5
 800748e:	4b16      	ldr	r3, [pc, #88]	; (80074e8 <_vfiprintf_r+0x258>)
 8007490:	a904      	add	r1, sp, #16
 8007492:	4630      	mov	r0, r6
 8007494:	f3af 8000 	nop.w
 8007498:	4607      	mov	r7, r0
 800749a:	1c78      	adds	r0, r7, #1
 800749c:	d1d6      	bne.n	800744c <_vfiprintf_r+0x1bc>
 800749e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074a0:	07d9      	lsls	r1, r3, #31
 80074a2:	d405      	bmi.n	80074b0 <_vfiprintf_r+0x220>
 80074a4:	89ab      	ldrh	r3, [r5, #12]
 80074a6:	059a      	lsls	r2, r3, #22
 80074a8:	d402      	bmi.n	80074b0 <_vfiprintf_r+0x220>
 80074aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074ac:	f7ff fc81 	bl	8006db2 <__retarget_lock_release_recursive>
 80074b0:	89ab      	ldrh	r3, [r5, #12]
 80074b2:	065b      	lsls	r3, r3, #25
 80074b4:	f53f af12 	bmi.w	80072dc <_vfiprintf_r+0x4c>
 80074b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074ba:	e711      	b.n	80072e0 <_vfiprintf_r+0x50>
 80074bc:	ab03      	add	r3, sp, #12
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	462a      	mov	r2, r5
 80074c2:	4b09      	ldr	r3, [pc, #36]	; (80074e8 <_vfiprintf_r+0x258>)
 80074c4:	a904      	add	r1, sp, #16
 80074c6:	4630      	mov	r0, r6
 80074c8:	f000 f880 	bl	80075cc <_printf_i>
 80074cc:	e7e4      	b.n	8007498 <_vfiprintf_r+0x208>
 80074ce:	bf00      	nop
 80074d0:	080082f0 	.word	0x080082f0
 80074d4:	08008310 	.word	0x08008310
 80074d8:	080082d0 	.word	0x080082d0
 80074dc:	08008330 	.word	0x08008330
 80074e0:	0800833a 	.word	0x0800833a
 80074e4:	00000000 	.word	0x00000000
 80074e8:	0800726b 	.word	0x0800726b
 80074ec:	08008336 	.word	0x08008336

080074f0 <_printf_common>:
 80074f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f4:	4616      	mov	r6, r2
 80074f6:	4699      	mov	r9, r3
 80074f8:	688a      	ldr	r2, [r1, #8]
 80074fa:	690b      	ldr	r3, [r1, #16]
 80074fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007500:	4293      	cmp	r3, r2
 8007502:	bfb8      	it	lt
 8007504:	4613      	movlt	r3, r2
 8007506:	6033      	str	r3, [r6, #0]
 8007508:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800750c:	4607      	mov	r7, r0
 800750e:	460c      	mov	r4, r1
 8007510:	b10a      	cbz	r2, 8007516 <_printf_common+0x26>
 8007512:	3301      	adds	r3, #1
 8007514:	6033      	str	r3, [r6, #0]
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	0699      	lsls	r1, r3, #26
 800751a:	bf42      	ittt	mi
 800751c:	6833      	ldrmi	r3, [r6, #0]
 800751e:	3302      	addmi	r3, #2
 8007520:	6033      	strmi	r3, [r6, #0]
 8007522:	6825      	ldr	r5, [r4, #0]
 8007524:	f015 0506 	ands.w	r5, r5, #6
 8007528:	d106      	bne.n	8007538 <_printf_common+0x48>
 800752a:	f104 0a19 	add.w	sl, r4, #25
 800752e:	68e3      	ldr	r3, [r4, #12]
 8007530:	6832      	ldr	r2, [r6, #0]
 8007532:	1a9b      	subs	r3, r3, r2
 8007534:	42ab      	cmp	r3, r5
 8007536:	dc26      	bgt.n	8007586 <_printf_common+0x96>
 8007538:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800753c:	1e13      	subs	r3, r2, #0
 800753e:	6822      	ldr	r2, [r4, #0]
 8007540:	bf18      	it	ne
 8007542:	2301      	movne	r3, #1
 8007544:	0692      	lsls	r2, r2, #26
 8007546:	d42b      	bmi.n	80075a0 <_printf_common+0xb0>
 8007548:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800754c:	4649      	mov	r1, r9
 800754e:	4638      	mov	r0, r7
 8007550:	47c0      	blx	r8
 8007552:	3001      	adds	r0, #1
 8007554:	d01e      	beq.n	8007594 <_printf_common+0xa4>
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	68e5      	ldr	r5, [r4, #12]
 800755a:	6832      	ldr	r2, [r6, #0]
 800755c:	f003 0306 	and.w	r3, r3, #6
 8007560:	2b04      	cmp	r3, #4
 8007562:	bf08      	it	eq
 8007564:	1aad      	subeq	r5, r5, r2
 8007566:	68a3      	ldr	r3, [r4, #8]
 8007568:	6922      	ldr	r2, [r4, #16]
 800756a:	bf0c      	ite	eq
 800756c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007570:	2500      	movne	r5, #0
 8007572:	4293      	cmp	r3, r2
 8007574:	bfc4      	itt	gt
 8007576:	1a9b      	subgt	r3, r3, r2
 8007578:	18ed      	addgt	r5, r5, r3
 800757a:	2600      	movs	r6, #0
 800757c:	341a      	adds	r4, #26
 800757e:	42b5      	cmp	r5, r6
 8007580:	d11a      	bne.n	80075b8 <_printf_common+0xc8>
 8007582:	2000      	movs	r0, #0
 8007584:	e008      	b.n	8007598 <_printf_common+0xa8>
 8007586:	2301      	movs	r3, #1
 8007588:	4652      	mov	r2, sl
 800758a:	4649      	mov	r1, r9
 800758c:	4638      	mov	r0, r7
 800758e:	47c0      	blx	r8
 8007590:	3001      	adds	r0, #1
 8007592:	d103      	bne.n	800759c <_printf_common+0xac>
 8007594:	f04f 30ff 	mov.w	r0, #4294967295
 8007598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800759c:	3501      	adds	r5, #1
 800759e:	e7c6      	b.n	800752e <_printf_common+0x3e>
 80075a0:	18e1      	adds	r1, r4, r3
 80075a2:	1c5a      	adds	r2, r3, #1
 80075a4:	2030      	movs	r0, #48	; 0x30
 80075a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075aa:	4422      	add	r2, r4
 80075ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075b4:	3302      	adds	r3, #2
 80075b6:	e7c7      	b.n	8007548 <_printf_common+0x58>
 80075b8:	2301      	movs	r3, #1
 80075ba:	4622      	mov	r2, r4
 80075bc:	4649      	mov	r1, r9
 80075be:	4638      	mov	r0, r7
 80075c0:	47c0      	blx	r8
 80075c2:	3001      	adds	r0, #1
 80075c4:	d0e6      	beq.n	8007594 <_printf_common+0xa4>
 80075c6:	3601      	adds	r6, #1
 80075c8:	e7d9      	b.n	800757e <_printf_common+0x8e>
	...

080075cc <_printf_i>:
 80075cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075d0:	7e0f      	ldrb	r7, [r1, #24]
 80075d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075d4:	2f78      	cmp	r7, #120	; 0x78
 80075d6:	4691      	mov	r9, r2
 80075d8:	4680      	mov	r8, r0
 80075da:	460c      	mov	r4, r1
 80075dc:	469a      	mov	sl, r3
 80075de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075e2:	d807      	bhi.n	80075f4 <_printf_i+0x28>
 80075e4:	2f62      	cmp	r7, #98	; 0x62
 80075e6:	d80a      	bhi.n	80075fe <_printf_i+0x32>
 80075e8:	2f00      	cmp	r7, #0
 80075ea:	f000 80d8 	beq.w	800779e <_printf_i+0x1d2>
 80075ee:	2f58      	cmp	r7, #88	; 0x58
 80075f0:	f000 80a3 	beq.w	800773a <_printf_i+0x16e>
 80075f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075fc:	e03a      	b.n	8007674 <_printf_i+0xa8>
 80075fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007602:	2b15      	cmp	r3, #21
 8007604:	d8f6      	bhi.n	80075f4 <_printf_i+0x28>
 8007606:	a101      	add	r1, pc, #4	; (adr r1, 800760c <_printf_i+0x40>)
 8007608:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800760c:	08007665 	.word	0x08007665
 8007610:	08007679 	.word	0x08007679
 8007614:	080075f5 	.word	0x080075f5
 8007618:	080075f5 	.word	0x080075f5
 800761c:	080075f5 	.word	0x080075f5
 8007620:	080075f5 	.word	0x080075f5
 8007624:	08007679 	.word	0x08007679
 8007628:	080075f5 	.word	0x080075f5
 800762c:	080075f5 	.word	0x080075f5
 8007630:	080075f5 	.word	0x080075f5
 8007634:	080075f5 	.word	0x080075f5
 8007638:	08007785 	.word	0x08007785
 800763c:	080076a9 	.word	0x080076a9
 8007640:	08007767 	.word	0x08007767
 8007644:	080075f5 	.word	0x080075f5
 8007648:	080075f5 	.word	0x080075f5
 800764c:	080077a7 	.word	0x080077a7
 8007650:	080075f5 	.word	0x080075f5
 8007654:	080076a9 	.word	0x080076a9
 8007658:	080075f5 	.word	0x080075f5
 800765c:	080075f5 	.word	0x080075f5
 8007660:	0800776f 	.word	0x0800776f
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	1d1a      	adds	r2, r3, #4
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	602a      	str	r2, [r5, #0]
 800766c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007670:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007674:	2301      	movs	r3, #1
 8007676:	e0a3      	b.n	80077c0 <_printf_i+0x1f4>
 8007678:	6820      	ldr	r0, [r4, #0]
 800767a:	6829      	ldr	r1, [r5, #0]
 800767c:	0606      	lsls	r6, r0, #24
 800767e:	f101 0304 	add.w	r3, r1, #4
 8007682:	d50a      	bpl.n	800769a <_printf_i+0xce>
 8007684:	680e      	ldr	r6, [r1, #0]
 8007686:	602b      	str	r3, [r5, #0]
 8007688:	2e00      	cmp	r6, #0
 800768a:	da03      	bge.n	8007694 <_printf_i+0xc8>
 800768c:	232d      	movs	r3, #45	; 0x2d
 800768e:	4276      	negs	r6, r6
 8007690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007694:	485e      	ldr	r0, [pc, #376]	; (8007810 <_printf_i+0x244>)
 8007696:	230a      	movs	r3, #10
 8007698:	e019      	b.n	80076ce <_printf_i+0x102>
 800769a:	680e      	ldr	r6, [r1, #0]
 800769c:	602b      	str	r3, [r5, #0]
 800769e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076a2:	bf18      	it	ne
 80076a4:	b236      	sxthne	r6, r6
 80076a6:	e7ef      	b.n	8007688 <_printf_i+0xbc>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	6820      	ldr	r0, [r4, #0]
 80076ac:	1d19      	adds	r1, r3, #4
 80076ae:	6029      	str	r1, [r5, #0]
 80076b0:	0601      	lsls	r1, r0, #24
 80076b2:	d501      	bpl.n	80076b8 <_printf_i+0xec>
 80076b4:	681e      	ldr	r6, [r3, #0]
 80076b6:	e002      	b.n	80076be <_printf_i+0xf2>
 80076b8:	0646      	lsls	r6, r0, #25
 80076ba:	d5fb      	bpl.n	80076b4 <_printf_i+0xe8>
 80076bc:	881e      	ldrh	r6, [r3, #0]
 80076be:	4854      	ldr	r0, [pc, #336]	; (8007810 <_printf_i+0x244>)
 80076c0:	2f6f      	cmp	r7, #111	; 0x6f
 80076c2:	bf0c      	ite	eq
 80076c4:	2308      	moveq	r3, #8
 80076c6:	230a      	movne	r3, #10
 80076c8:	2100      	movs	r1, #0
 80076ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076ce:	6865      	ldr	r5, [r4, #4]
 80076d0:	60a5      	str	r5, [r4, #8]
 80076d2:	2d00      	cmp	r5, #0
 80076d4:	bfa2      	ittt	ge
 80076d6:	6821      	ldrge	r1, [r4, #0]
 80076d8:	f021 0104 	bicge.w	r1, r1, #4
 80076dc:	6021      	strge	r1, [r4, #0]
 80076de:	b90e      	cbnz	r6, 80076e4 <_printf_i+0x118>
 80076e0:	2d00      	cmp	r5, #0
 80076e2:	d04d      	beq.n	8007780 <_printf_i+0x1b4>
 80076e4:	4615      	mov	r5, r2
 80076e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80076ea:	fb03 6711 	mls	r7, r3, r1, r6
 80076ee:	5dc7      	ldrb	r7, [r0, r7]
 80076f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076f4:	4637      	mov	r7, r6
 80076f6:	42bb      	cmp	r3, r7
 80076f8:	460e      	mov	r6, r1
 80076fa:	d9f4      	bls.n	80076e6 <_printf_i+0x11a>
 80076fc:	2b08      	cmp	r3, #8
 80076fe:	d10b      	bne.n	8007718 <_printf_i+0x14c>
 8007700:	6823      	ldr	r3, [r4, #0]
 8007702:	07de      	lsls	r6, r3, #31
 8007704:	d508      	bpl.n	8007718 <_printf_i+0x14c>
 8007706:	6923      	ldr	r3, [r4, #16]
 8007708:	6861      	ldr	r1, [r4, #4]
 800770a:	4299      	cmp	r1, r3
 800770c:	bfde      	ittt	le
 800770e:	2330      	movle	r3, #48	; 0x30
 8007710:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007714:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007718:	1b52      	subs	r2, r2, r5
 800771a:	6122      	str	r2, [r4, #16]
 800771c:	f8cd a000 	str.w	sl, [sp]
 8007720:	464b      	mov	r3, r9
 8007722:	aa03      	add	r2, sp, #12
 8007724:	4621      	mov	r1, r4
 8007726:	4640      	mov	r0, r8
 8007728:	f7ff fee2 	bl	80074f0 <_printf_common>
 800772c:	3001      	adds	r0, #1
 800772e:	d14c      	bne.n	80077ca <_printf_i+0x1fe>
 8007730:	f04f 30ff 	mov.w	r0, #4294967295
 8007734:	b004      	add	sp, #16
 8007736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773a:	4835      	ldr	r0, [pc, #212]	; (8007810 <_printf_i+0x244>)
 800773c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007740:	6829      	ldr	r1, [r5, #0]
 8007742:	6823      	ldr	r3, [r4, #0]
 8007744:	f851 6b04 	ldr.w	r6, [r1], #4
 8007748:	6029      	str	r1, [r5, #0]
 800774a:	061d      	lsls	r5, r3, #24
 800774c:	d514      	bpl.n	8007778 <_printf_i+0x1ac>
 800774e:	07df      	lsls	r7, r3, #31
 8007750:	bf44      	itt	mi
 8007752:	f043 0320 	orrmi.w	r3, r3, #32
 8007756:	6023      	strmi	r3, [r4, #0]
 8007758:	b91e      	cbnz	r6, 8007762 <_printf_i+0x196>
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	f023 0320 	bic.w	r3, r3, #32
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	2310      	movs	r3, #16
 8007764:	e7b0      	b.n	80076c8 <_printf_i+0xfc>
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	f043 0320 	orr.w	r3, r3, #32
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	2378      	movs	r3, #120	; 0x78
 8007770:	4828      	ldr	r0, [pc, #160]	; (8007814 <_printf_i+0x248>)
 8007772:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007776:	e7e3      	b.n	8007740 <_printf_i+0x174>
 8007778:	0659      	lsls	r1, r3, #25
 800777a:	bf48      	it	mi
 800777c:	b2b6      	uxthmi	r6, r6
 800777e:	e7e6      	b.n	800774e <_printf_i+0x182>
 8007780:	4615      	mov	r5, r2
 8007782:	e7bb      	b.n	80076fc <_printf_i+0x130>
 8007784:	682b      	ldr	r3, [r5, #0]
 8007786:	6826      	ldr	r6, [r4, #0]
 8007788:	6961      	ldr	r1, [r4, #20]
 800778a:	1d18      	adds	r0, r3, #4
 800778c:	6028      	str	r0, [r5, #0]
 800778e:	0635      	lsls	r5, r6, #24
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	d501      	bpl.n	8007798 <_printf_i+0x1cc>
 8007794:	6019      	str	r1, [r3, #0]
 8007796:	e002      	b.n	800779e <_printf_i+0x1d2>
 8007798:	0670      	lsls	r0, r6, #25
 800779a:	d5fb      	bpl.n	8007794 <_printf_i+0x1c8>
 800779c:	8019      	strh	r1, [r3, #0]
 800779e:	2300      	movs	r3, #0
 80077a0:	6123      	str	r3, [r4, #16]
 80077a2:	4615      	mov	r5, r2
 80077a4:	e7ba      	b.n	800771c <_printf_i+0x150>
 80077a6:	682b      	ldr	r3, [r5, #0]
 80077a8:	1d1a      	adds	r2, r3, #4
 80077aa:	602a      	str	r2, [r5, #0]
 80077ac:	681d      	ldr	r5, [r3, #0]
 80077ae:	6862      	ldr	r2, [r4, #4]
 80077b0:	2100      	movs	r1, #0
 80077b2:	4628      	mov	r0, r5
 80077b4:	f7f8 fd44 	bl	8000240 <memchr>
 80077b8:	b108      	cbz	r0, 80077be <_printf_i+0x1f2>
 80077ba:	1b40      	subs	r0, r0, r5
 80077bc:	6060      	str	r0, [r4, #4]
 80077be:	6863      	ldr	r3, [r4, #4]
 80077c0:	6123      	str	r3, [r4, #16]
 80077c2:	2300      	movs	r3, #0
 80077c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077c8:	e7a8      	b.n	800771c <_printf_i+0x150>
 80077ca:	6923      	ldr	r3, [r4, #16]
 80077cc:	462a      	mov	r2, r5
 80077ce:	4649      	mov	r1, r9
 80077d0:	4640      	mov	r0, r8
 80077d2:	47d0      	blx	sl
 80077d4:	3001      	adds	r0, #1
 80077d6:	d0ab      	beq.n	8007730 <_printf_i+0x164>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	079b      	lsls	r3, r3, #30
 80077dc:	d413      	bmi.n	8007806 <_printf_i+0x23a>
 80077de:	68e0      	ldr	r0, [r4, #12]
 80077e0:	9b03      	ldr	r3, [sp, #12]
 80077e2:	4298      	cmp	r0, r3
 80077e4:	bfb8      	it	lt
 80077e6:	4618      	movlt	r0, r3
 80077e8:	e7a4      	b.n	8007734 <_printf_i+0x168>
 80077ea:	2301      	movs	r3, #1
 80077ec:	4632      	mov	r2, r6
 80077ee:	4649      	mov	r1, r9
 80077f0:	4640      	mov	r0, r8
 80077f2:	47d0      	blx	sl
 80077f4:	3001      	adds	r0, #1
 80077f6:	d09b      	beq.n	8007730 <_printf_i+0x164>
 80077f8:	3501      	adds	r5, #1
 80077fa:	68e3      	ldr	r3, [r4, #12]
 80077fc:	9903      	ldr	r1, [sp, #12]
 80077fe:	1a5b      	subs	r3, r3, r1
 8007800:	42ab      	cmp	r3, r5
 8007802:	dcf2      	bgt.n	80077ea <_printf_i+0x21e>
 8007804:	e7eb      	b.n	80077de <_printf_i+0x212>
 8007806:	2500      	movs	r5, #0
 8007808:	f104 0619 	add.w	r6, r4, #25
 800780c:	e7f5      	b.n	80077fa <_printf_i+0x22e>
 800780e:	bf00      	nop
 8007810:	08008341 	.word	0x08008341
 8007814:	08008352 	.word	0x08008352

08007818 <_sbrk_r>:
 8007818:	b538      	push	{r3, r4, r5, lr}
 800781a:	4d06      	ldr	r5, [pc, #24]	; (8007834 <_sbrk_r+0x1c>)
 800781c:	2300      	movs	r3, #0
 800781e:	4604      	mov	r4, r0
 8007820:	4608      	mov	r0, r1
 8007822:	602b      	str	r3, [r5, #0]
 8007824:	f7f9 fd50 	bl	80012c8 <_sbrk>
 8007828:	1c43      	adds	r3, r0, #1
 800782a:	d102      	bne.n	8007832 <_sbrk_r+0x1a>
 800782c:	682b      	ldr	r3, [r5, #0]
 800782e:	b103      	cbz	r3, 8007832 <_sbrk_r+0x1a>
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	bd38      	pop	{r3, r4, r5, pc}
 8007834:	200002ac 	.word	0x200002ac

08007838 <__sread>:
 8007838:	b510      	push	{r4, lr}
 800783a:	460c      	mov	r4, r1
 800783c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007840:	f000 fac6 	bl	8007dd0 <_read_r>
 8007844:	2800      	cmp	r0, #0
 8007846:	bfab      	itete	ge
 8007848:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800784a:	89a3      	ldrhlt	r3, [r4, #12]
 800784c:	181b      	addge	r3, r3, r0
 800784e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007852:	bfac      	ite	ge
 8007854:	6563      	strge	r3, [r4, #84]	; 0x54
 8007856:	81a3      	strhlt	r3, [r4, #12]
 8007858:	bd10      	pop	{r4, pc}

0800785a <__swrite>:
 800785a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800785e:	461f      	mov	r7, r3
 8007860:	898b      	ldrh	r3, [r1, #12]
 8007862:	05db      	lsls	r3, r3, #23
 8007864:	4605      	mov	r5, r0
 8007866:	460c      	mov	r4, r1
 8007868:	4616      	mov	r6, r2
 800786a:	d505      	bpl.n	8007878 <__swrite+0x1e>
 800786c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007870:	2302      	movs	r3, #2
 8007872:	2200      	movs	r2, #0
 8007874:	f000 f9d0 	bl	8007c18 <_lseek_r>
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800787e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007882:	81a3      	strh	r3, [r4, #12]
 8007884:	4632      	mov	r2, r6
 8007886:	463b      	mov	r3, r7
 8007888:	4628      	mov	r0, r5
 800788a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800788e:	f000 b869 	b.w	8007964 <_write_r>

08007892 <__sseek>:
 8007892:	b510      	push	{r4, lr}
 8007894:	460c      	mov	r4, r1
 8007896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789a:	f000 f9bd 	bl	8007c18 <_lseek_r>
 800789e:	1c43      	adds	r3, r0, #1
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	bf15      	itete	ne
 80078a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80078a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078ae:	81a3      	strheq	r3, [r4, #12]
 80078b0:	bf18      	it	ne
 80078b2:	81a3      	strhne	r3, [r4, #12]
 80078b4:	bd10      	pop	{r4, pc}

080078b6 <__sclose>:
 80078b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ba:	f000 b8db 	b.w	8007a74 <_close_r>
	...

080078c0 <__swbuf_r>:
 80078c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c2:	460e      	mov	r6, r1
 80078c4:	4614      	mov	r4, r2
 80078c6:	4605      	mov	r5, r0
 80078c8:	b118      	cbz	r0, 80078d2 <__swbuf_r+0x12>
 80078ca:	6983      	ldr	r3, [r0, #24]
 80078cc:	b90b      	cbnz	r3, 80078d2 <__swbuf_r+0x12>
 80078ce:	f7ff f9bf 	bl	8006c50 <__sinit>
 80078d2:	4b21      	ldr	r3, [pc, #132]	; (8007958 <__swbuf_r+0x98>)
 80078d4:	429c      	cmp	r4, r3
 80078d6:	d12b      	bne.n	8007930 <__swbuf_r+0x70>
 80078d8:	686c      	ldr	r4, [r5, #4]
 80078da:	69a3      	ldr	r3, [r4, #24]
 80078dc:	60a3      	str	r3, [r4, #8]
 80078de:	89a3      	ldrh	r3, [r4, #12]
 80078e0:	071a      	lsls	r2, r3, #28
 80078e2:	d52f      	bpl.n	8007944 <__swbuf_r+0x84>
 80078e4:	6923      	ldr	r3, [r4, #16]
 80078e6:	b36b      	cbz	r3, 8007944 <__swbuf_r+0x84>
 80078e8:	6923      	ldr	r3, [r4, #16]
 80078ea:	6820      	ldr	r0, [r4, #0]
 80078ec:	1ac0      	subs	r0, r0, r3
 80078ee:	6963      	ldr	r3, [r4, #20]
 80078f0:	b2f6      	uxtb	r6, r6
 80078f2:	4283      	cmp	r3, r0
 80078f4:	4637      	mov	r7, r6
 80078f6:	dc04      	bgt.n	8007902 <__swbuf_r+0x42>
 80078f8:	4621      	mov	r1, r4
 80078fa:	4628      	mov	r0, r5
 80078fc:	f000 f950 	bl	8007ba0 <_fflush_r>
 8007900:	bb30      	cbnz	r0, 8007950 <__swbuf_r+0x90>
 8007902:	68a3      	ldr	r3, [r4, #8]
 8007904:	3b01      	subs	r3, #1
 8007906:	60a3      	str	r3, [r4, #8]
 8007908:	6823      	ldr	r3, [r4, #0]
 800790a:	1c5a      	adds	r2, r3, #1
 800790c:	6022      	str	r2, [r4, #0]
 800790e:	701e      	strb	r6, [r3, #0]
 8007910:	6963      	ldr	r3, [r4, #20]
 8007912:	3001      	adds	r0, #1
 8007914:	4283      	cmp	r3, r0
 8007916:	d004      	beq.n	8007922 <__swbuf_r+0x62>
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	07db      	lsls	r3, r3, #31
 800791c:	d506      	bpl.n	800792c <__swbuf_r+0x6c>
 800791e:	2e0a      	cmp	r6, #10
 8007920:	d104      	bne.n	800792c <__swbuf_r+0x6c>
 8007922:	4621      	mov	r1, r4
 8007924:	4628      	mov	r0, r5
 8007926:	f000 f93b 	bl	8007ba0 <_fflush_r>
 800792a:	b988      	cbnz	r0, 8007950 <__swbuf_r+0x90>
 800792c:	4638      	mov	r0, r7
 800792e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007930:	4b0a      	ldr	r3, [pc, #40]	; (800795c <__swbuf_r+0x9c>)
 8007932:	429c      	cmp	r4, r3
 8007934:	d101      	bne.n	800793a <__swbuf_r+0x7a>
 8007936:	68ac      	ldr	r4, [r5, #8]
 8007938:	e7cf      	b.n	80078da <__swbuf_r+0x1a>
 800793a:	4b09      	ldr	r3, [pc, #36]	; (8007960 <__swbuf_r+0xa0>)
 800793c:	429c      	cmp	r4, r3
 800793e:	bf08      	it	eq
 8007940:	68ec      	ldreq	r4, [r5, #12]
 8007942:	e7ca      	b.n	80078da <__swbuf_r+0x1a>
 8007944:	4621      	mov	r1, r4
 8007946:	4628      	mov	r0, r5
 8007948:	f000 f81e 	bl	8007988 <__swsetup_r>
 800794c:	2800      	cmp	r0, #0
 800794e:	d0cb      	beq.n	80078e8 <__swbuf_r+0x28>
 8007950:	f04f 37ff 	mov.w	r7, #4294967295
 8007954:	e7ea      	b.n	800792c <__swbuf_r+0x6c>
 8007956:	bf00      	nop
 8007958:	080082f0 	.word	0x080082f0
 800795c:	08008310 	.word	0x08008310
 8007960:	080082d0 	.word	0x080082d0

08007964 <_write_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	4d07      	ldr	r5, [pc, #28]	; (8007984 <_write_r+0x20>)
 8007968:	4604      	mov	r4, r0
 800796a:	4608      	mov	r0, r1
 800796c:	4611      	mov	r1, r2
 800796e:	2200      	movs	r2, #0
 8007970:	602a      	str	r2, [r5, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	f7f9 fc57 	bl	8001226 <_write>
 8007978:	1c43      	adds	r3, r0, #1
 800797a:	d102      	bne.n	8007982 <_write_r+0x1e>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	b103      	cbz	r3, 8007982 <_write_r+0x1e>
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	bd38      	pop	{r3, r4, r5, pc}
 8007984:	200002ac 	.word	0x200002ac

08007988 <__swsetup_r>:
 8007988:	4b32      	ldr	r3, [pc, #200]	; (8007a54 <__swsetup_r+0xcc>)
 800798a:	b570      	push	{r4, r5, r6, lr}
 800798c:	681d      	ldr	r5, [r3, #0]
 800798e:	4606      	mov	r6, r0
 8007990:	460c      	mov	r4, r1
 8007992:	b125      	cbz	r5, 800799e <__swsetup_r+0x16>
 8007994:	69ab      	ldr	r3, [r5, #24]
 8007996:	b913      	cbnz	r3, 800799e <__swsetup_r+0x16>
 8007998:	4628      	mov	r0, r5
 800799a:	f7ff f959 	bl	8006c50 <__sinit>
 800799e:	4b2e      	ldr	r3, [pc, #184]	; (8007a58 <__swsetup_r+0xd0>)
 80079a0:	429c      	cmp	r4, r3
 80079a2:	d10f      	bne.n	80079c4 <__swsetup_r+0x3c>
 80079a4:	686c      	ldr	r4, [r5, #4]
 80079a6:	89a3      	ldrh	r3, [r4, #12]
 80079a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079ac:	0719      	lsls	r1, r3, #28
 80079ae:	d42c      	bmi.n	8007a0a <__swsetup_r+0x82>
 80079b0:	06dd      	lsls	r5, r3, #27
 80079b2:	d411      	bmi.n	80079d8 <__swsetup_r+0x50>
 80079b4:	2309      	movs	r3, #9
 80079b6:	6033      	str	r3, [r6, #0]
 80079b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079bc:	81a3      	strh	r3, [r4, #12]
 80079be:	f04f 30ff 	mov.w	r0, #4294967295
 80079c2:	e03e      	b.n	8007a42 <__swsetup_r+0xba>
 80079c4:	4b25      	ldr	r3, [pc, #148]	; (8007a5c <__swsetup_r+0xd4>)
 80079c6:	429c      	cmp	r4, r3
 80079c8:	d101      	bne.n	80079ce <__swsetup_r+0x46>
 80079ca:	68ac      	ldr	r4, [r5, #8]
 80079cc:	e7eb      	b.n	80079a6 <__swsetup_r+0x1e>
 80079ce:	4b24      	ldr	r3, [pc, #144]	; (8007a60 <__swsetup_r+0xd8>)
 80079d0:	429c      	cmp	r4, r3
 80079d2:	bf08      	it	eq
 80079d4:	68ec      	ldreq	r4, [r5, #12]
 80079d6:	e7e6      	b.n	80079a6 <__swsetup_r+0x1e>
 80079d8:	0758      	lsls	r0, r3, #29
 80079da:	d512      	bpl.n	8007a02 <__swsetup_r+0x7a>
 80079dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079de:	b141      	cbz	r1, 80079f2 <__swsetup_r+0x6a>
 80079e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079e4:	4299      	cmp	r1, r3
 80079e6:	d002      	beq.n	80079ee <__swsetup_r+0x66>
 80079e8:	4630      	mov	r0, r6
 80079ea:	f7ff f9eb 	bl	8006dc4 <_free_r>
 80079ee:	2300      	movs	r3, #0
 80079f0:	6363      	str	r3, [r4, #52]	; 0x34
 80079f2:	89a3      	ldrh	r3, [r4, #12]
 80079f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079f8:	81a3      	strh	r3, [r4, #12]
 80079fa:	2300      	movs	r3, #0
 80079fc:	6063      	str	r3, [r4, #4]
 80079fe:	6923      	ldr	r3, [r4, #16]
 8007a00:	6023      	str	r3, [r4, #0]
 8007a02:	89a3      	ldrh	r3, [r4, #12]
 8007a04:	f043 0308 	orr.w	r3, r3, #8
 8007a08:	81a3      	strh	r3, [r4, #12]
 8007a0a:	6923      	ldr	r3, [r4, #16]
 8007a0c:	b94b      	cbnz	r3, 8007a22 <__swsetup_r+0x9a>
 8007a0e:	89a3      	ldrh	r3, [r4, #12]
 8007a10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a18:	d003      	beq.n	8007a22 <__swsetup_r+0x9a>
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	f000 f933 	bl	8007c88 <__smakebuf_r>
 8007a22:	89a0      	ldrh	r0, [r4, #12]
 8007a24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a28:	f010 0301 	ands.w	r3, r0, #1
 8007a2c:	d00a      	beq.n	8007a44 <__swsetup_r+0xbc>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60a3      	str	r3, [r4, #8]
 8007a32:	6963      	ldr	r3, [r4, #20]
 8007a34:	425b      	negs	r3, r3
 8007a36:	61a3      	str	r3, [r4, #24]
 8007a38:	6923      	ldr	r3, [r4, #16]
 8007a3a:	b943      	cbnz	r3, 8007a4e <__swsetup_r+0xc6>
 8007a3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a40:	d1ba      	bne.n	80079b8 <__swsetup_r+0x30>
 8007a42:	bd70      	pop	{r4, r5, r6, pc}
 8007a44:	0781      	lsls	r1, r0, #30
 8007a46:	bf58      	it	pl
 8007a48:	6963      	ldrpl	r3, [r4, #20]
 8007a4a:	60a3      	str	r3, [r4, #8]
 8007a4c:	e7f4      	b.n	8007a38 <__swsetup_r+0xb0>
 8007a4e:	2000      	movs	r0, #0
 8007a50:	e7f7      	b.n	8007a42 <__swsetup_r+0xba>
 8007a52:	bf00      	nop
 8007a54:	200000a8 	.word	0x200000a8
 8007a58:	080082f0 	.word	0x080082f0
 8007a5c:	08008310 	.word	0x08008310
 8007a60:	080082d0 	.word	0x080082d0

08007a64 <abort>:
 8007a64:	b508      	push	{r3, lr}
 8007a66:	2006      	movs	r0, #6
 8007a68:	f000 f9ec 	bl	8007e44 <raise>
 8007a6c:	2001      	movs	r0, #1
 8007a6e:	f7f9 fbb3 	bl	80011d8 <_exit>
	...

08007a74 <_close_r>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	4d06      	ldr	r5, [pc, #24]	; (8007a90 <_close_r+0x1c>)
 8007a78:	2300      	movs	r3, #0
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	602b      	str	r3, [r5, #0]
 8007a80:	f7f9 fbed 	bl	800125e <_close>
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	d102      	bne.n	8007a8e <_close_r+0x1a>
 8007a88:	682b      	ldr	r3, [r5, #0]
 8007a8a:	b103      	cbz	r3, 8007a8e <_close_r+0x1a>
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	bd38      	pop	{r3, r4, r5, pc}
 8007a90:	200002ac 	.word	0x200002ac

08007a94 <__sflush_r>:
 8007a94:	898a      	ldrh	r2, [r1, #12]
 8007a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	0710      	lsls	r0, r2, #28
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	d458      	bmi.n	8007b54 <__sflush_r+0xc0>
 8007aa2:	684b      	ldr	r3, [r1, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	dc05      	bgt.n	8007ab4 <__sflush_r+0x20>
 8007aa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	dc02      	bgt.n	8007ab4 <__sflush_r+0x20>
 8007aae:	2000      	movs	r0, #0
 8007ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ab6:	2e00      	cmp	r6, #0
 8007ab8:	d0f9      	beq.n	8007aae <__sflush_r+0x1a>
 8007aba:	2300      	movs	r3, #0
 8007abc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ac0:	682f      	ldr	r7, [r5, #0]
 8007ac2:	602b      	str	r3, [r5, #0]
 8007ac4:	d032      	beq.n	8007b2c <__sflush_r+0x98>
 8007ac6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	075a      	lsls	r2, r3, #29
 8007acc:	d505      	bpl.n	8007ada <__sflush_r+0x46>
 8007ace:	6863      	ldr	r3, [r4, #4]
 8007ad0:	1ac0      	subs	r0, r0, r3
 8007ad2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ad4:	b10b      	cbz	r3, 8007ada <__sflush_r+0x46>
 8007ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ad8:	1ac0      	subs	r0, r0, r3
 8007ada:	2300      	movs	r3, #0
 8007adc:	4602      	mov	r2, r0
 8007ade:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ae0:	6a21      	ldr	r1, [r4, #32]
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	47b0      	blx	r6
 8007ae6:	1c43      	adds	r3, r0, #1
 8007ae8:	89a3      	ldrh	r3, [r4, #12]
 8007aea:	d106      	bne.n	8007afa <__sflush_r+0x66>
 8007aec:	6829      	ldr	r1, [r5, #0]
 8007aee:	291d      	cmp	r1, #29
 8007af0:	d82c      	bhi.n	8007b4c <__sflush_r+0xb8>
 8007af2:	4a2a      	ldr	r2, [pc, #168]	; (8007b9c <__sflush_r+0x108>)
 8007af4:	40ca      	lsrs	r2, r1
 8007af6:	07d6      	lsls	r6, r2, #31
 8007af8:	d528      	bpl.n	8007b4c <__sflush_r+0xb8>
 8007afa:	2200      	movs	r2, #0
 8007afc:	6062      	str	r2, [r4, #4]
 8007afe:	04d9      	lsls	r1, r3, #19
 8007b00:	6922      	ldr	r2, [r4, #16]
 8007b02:	6022      	str	r2, [r4, #0]
 8007b04:	d504      	bpl.n	8007b10 <__sflush_r+0x7c>
 8007b06:	1c42      	adds	r2, r0, #1
 8007b08:	d101      	bne.n	8007b0e <__sflush_r+0x7a>
 8007b0a:	682b      	ldr	r3, [r5, #0]
 8007b0c:	b903      	cbnz	r3, 8007b10 <__sflush_r+0x7c>
 8007b0e:	6560      	str	r0, [r4, #84]	; 0x54
 8007b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b12:	602f      	str	r7, [r5, #0]
 8007b14:	2900      	cmp	r1, #0
 8007b16:	d0ca      	beq.n	8007aae <__sflush_r+0x1a>
 8007b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b1c:	4299      	cmp	r1, r3
 8007b1e:	d002      	beq.n	8007b26 <__sflush_r+0x92>
 8007b20:	4628      	mov	r0, r5
 8007b22:	f7ff f94f 	bl	8006dc4 <_free_r>
 8007b26:	2000      	movs	r0, #0
 8007b28:	6360      	str	r0, [r4, #52]	; 0x34
 8007b2a:	e7c1      	b.n	8007ab0 <__sflush_r+0x1c>
 8007b2c:	6a21      	ldr	r1, [r4, #32]
 8007b2e:	2301      	movs	r3, #1
 8007b30:	4628      	mov	r0, r5
 8007b32:	47b0      	blx	r6
 8007b34:	1c41      	adds	r1, r0, #1
 8007b36:	d1c7      	bne.n	8007ac8 <__sflush_r+0x34>
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0c4      	beq.n	8007ac8 <__sflush_r+0x34>
 8007b3e:	2b1d      	cmp	r3, #29
 8007b40:	d001      	beq.n	8007b46 <__sflush_r+0xb2>
 8007b42:	2b16      	cmp	r3, #22
 8007b44:	d101      	bne.n	8007b4a <__sflush_r+0xb6>
 8007b46:	602f      	str	r7, [r5, #0]
 8007b48:	e7b1      	b.n	8007aae <__sflush_r+0x1a>
 8007b4a:	89a3      	ldrh	r3, [r4, #12]
 8007b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b50:	81a3      	strh	r3, [r4, #12]
 8007b52:	e7ad      	b.n	8007ab0 <__sflush_r+0x1c>
 8007b54:	690f      	ldr	r7, [r1, #16]
 8007b56:	2f00      	cmp	r7, #0
 8007b58:	d0a9      	beq.n	8007aae <__sflush_r+0x1a>
 8007b5a:	0793      	lsls	r3, r2, #30
 8007b5c:	680e      	ldr	r6, [r1, #0]
 8007b5e:	bf08      	it	eq
 8007b60:	694b      	ldreq	r3, [r1, #20]
 8007b62:	600f      	str	r7, [r1, #0]
 8007b64:	bf18      	it	ne
 8007b66:	2300      	movne	r3, #0
 8007b68:	eba6 0807 	sub.w	r8, r6, r7
 8007b6c:	608b      	str	r3, [r1, #8]
 8007b6e:	f1b8 0f00 	cmp.w	r8, #0
 8007b72:	dd9c      	ble.n	8007aae <__sflush_r+0x1a>
 8007b74:	6a21      	ldr	r1, [r4, #32]
 8007b76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b78:	4643      	mov	r3, r8
 8007b7a:	463a      	mov	r2, r7
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	47b0      	blx	r6
 8007b80:	2800      	cmp	r0, #0
 8007b82:	dc06      	bgt.n	8007b92 <__sflush_r+0xfe>
 8007b84:	89a3      	ldrh	r3, [r4, #12]
 8007b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b8a:	81a3      	strh	r3, [r4, #12]
 8007b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b90:	e78e      	b.n	8007ab0 <__sflush_r+0x1c>
 8007b92:	4407      	add	r7, r0
 8007b94:	eba8 0800 	sub.w	r8, r8, r0
 8007b98:	e7e9      	b.n	8007b6e <__sflush_r+0xda>
 8007b9a:	bf00      	nop
 8007b9c:	20400001 	.word	0x20400001

08007ba0 <_fflush_r>:
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	690b      	ldr	r3, [r1, #16]
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	b913      	cbnz	r3, 8007bb0 <_fflush_r+0x10>
 8007baa:	2500      	movs	r5, #0
 8007bac:	4628      	mov	r0, r5
 8007bae:	bd38      	pop	{r3, r4, r5, pc}
 8007bb0:	b118      	cbz	r0, 8007bba <_fflush_r+0x1a>
 8007bb2:	6983      	ldr	r3, [r0, #24]
 8007bb4:	b90b      	cbnz	r3, 8007bba <_fflush_r+0x1a>
 8007bb6:	f7ff f84b 	bl	8006c50 <__sinit>
 8007bba:	4b14      	ldr	r3, [pc, #80]	; (8007c0c <_fflush_r+0x6c>)
 8007bbc:	429c      	cmp	r4, r3
 8007bbe:	d11b      	bne.n	8007bf8 <_fflush_r+0x58>
 8007bc0:	686c      	ldr	r4, [r5, #4]
 8007bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0ef      	beq.n	8007baa <_fflush_r+0xa>
 8007bca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bcc:	07d0      	lsls	r0, r2, #31
 8007bce:	d404      	bmi.n	8007bda <_fflush_r+0x3a>
 8007bd0:	0599      	lsls	r1, r3, #22
 8007bd2:	d402      	bmi.n	8007bda <_fflush_r+0x3a>
 8007bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bd6:	f7ff f8eb 	bl	8006db0 <__retarget_lock_acquire_recursive>
 8007bda:	4628      	mov	r0, r5
 8007bdc:	4621      	mov	r1, r4
 8007bde:	f7ff ff59 	bl	8007a94 <__sflush_r>
 8007be2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007be4:	07da      	lsls	r2, r3, #31
 8007be6:	4605      	mov	r5, r0
 8007be8:	d4e0      	bmi.n	8007bac <_fflush_r+0xc>
 8007bea:	89a3      	ldrh	r3, [r4, #12]
 8007bec:	059b      	lsls	r3, r3, #22
 8007bee:	d4dd      	bmi.n	8007bac <_fflush_r+0xc>
 8007bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bf2:	f7ff f8de 	bl	8006db2 <__retarget_lock_release_recursive>
 8007bf6:	e7d9      	b.n	8007bac <_fflush_r+0xc>
 8007bf8:	4b05      	ldr	r3, [pc, #20]	; (8007c10 <_fflush_r+0x70>)
 8007bfa:	429c      	cmp	r4, r3
 8007bfc:	d101      	bne.n	8007c02 <_fflush_r+0x62>
 8007bfe:	68ac      	ldr	r4, [r5, #8]
 8007c00:	e7df      	b.n	8007bc2 <_fflush_r+0x22>
 8007c02:	4b04      	ldr	r3, [pc, #16]	; (8007c14 <_fflush_r+0x74>)
 8007c04:	429c      	cmp	r4, r3
 8007c06:	bf08      	it	eq
 8007c08:	68ec      	ldreq	r4, [r5, #12]
 8007c0a:	e7da      	b.n	8007bc2 <_fflush_r+0x22>
 8007c0c:	080082f0 	.word	0x080082f0
 8007c10:	08008310 	.word	0x08008310
 8007c14:	080082d0 	.word	0x080082d0

08007c18 <_lseek_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4d07      	ldr	r5, [pc, #28]	; (8007c38 <_lseek_r+0x20>)
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	4608      	mov	r0, r1
 8007c20:	4611      	mov	r1, r2
 8007c22:	2200      	movs	r2, #0
 8007c24:	602a      	str	r2, [r5, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	f7f9 fb40 	bl	80012ac <_lseek>
 8007c2c:	1c43      	adds	r3, r0, #1
 8007c2e:	d102      	bne.n	8007c36 <_lseek_r+0x1e>
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	b103      	cbz	r3, 8007c36 <_lseek_r+0x1e>
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	bd38      	pop	{r3, r4, r5, pc}
 8007c38:	200002ac 	.word	0x200002ac

08007c3c <__swhatbuf_r>:
 8007c3c:	b570      	push	{r4, r5, r6, lr}
 8007c3e:	460e      	mov	r6, r1
 8007c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c44:	2900      	cmp	r1, #0
 8007c46:	b096      	sub	sp, #88	; 0x58
 8007c48:	4614      	mov	r4, r2
 8007c4a:	461d      	mov	r5, r3
 8007c4c:	da08      	bge.n	8007c60 <__swhatbuf_r+0x24>
 8007c4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	602a      	str	r2, [r5, #0]
 8007c56:	061a      	lsls	r2, r3, #24
 8007c58:	d410      	bmi.n	8007c7c <__swhatbuf_r+0x40>
 8007c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c5e:	e00e      	b.n	8007c7e <__swhatbuf_r+0x42>
 8007c60:	466a      	mov	r2, sp
 8007c62:	f000 f90b 	bl	8007e7c <_fstat_r>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	dbf1      	blt.n	8007c4e <__swhatbuf_r+0x12>
 8007c6a:	9a01      	ldr	r2, [sp, #4]
 8007c6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c74:	425a      	negs	r2, r3
 8007c76:	415a      	adcs	r2, r3
 8007c78:	602a      	str	r2, [r5, #0]
 8007c7a:	e7ee      	b.n	8007c5a <__swhatbuf_r+0x1e>
 8007c7c:	2340      	movs	r3, #64	; 0x40
 8007c7e:	2000      	movs	r0, #0
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	b016      	add	sp, #88	; 0x58
 8007c84:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c88 <__smakebuf_r>:
 8007c88:	898b      	ldrh	r3, [r1, #12]
 8007c8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c8c:	079d      	lsls	r5, r3, #30
 8007c8e:	4606      	mov	r6, r0
 8007c90:	460c      	mov	r4, r1
 8007c92:	d507      	bpl.n	8007ca4 <__smakebuf_r+0x1c>
 8007c94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	6123      	str	r3, [r4, #16]
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	6163      	str	r3, [r4, #20]
 8007ca0:	b002      	add	sp, #8
 8007ca2:	bd70      	pop	{r4, r5, r6, pc}
 8007ca4:	ab01      	add	r3, sp, #4
 8007ca6:	466a      	mov	r2, sp
 8007ca8:	f7ff ffc8 	bl	8007c3c <__swhatbuf_r>
 8007cac:	9900      	ldr	r1, [sp, #0]
 8007cae:	4605      	mov	r5, r0
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	f7ff f8f3 	bl	8006e9c <_malloc_r>
 8007cb6:	b948      	cbnz	r0, 8007ccc <__smakebuf_r+0x44>
 8007cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cbc:	059a      	lsls	r2, r3, #22
 8007cbe:	d4ef      	bmi.n	8007ca0 <__smakebuf_r+0x18>
 8007cc0:	f023 0303 	bic.w	r3, r3, #3
 8007cc4:	f043 0302 	orr.w	r3, r3, #2
 8007cc8:	81a3      	strh	r3, [r4, #12]
 8007cca:	e7e3      	b.n	8007c94 <__smakebuf_r+0xc>
 8007ccc:	4b0d      	ldr	r3, [pc, #52]	; (8007d04 <__smakebuf_r+0x7c>)
 8007cce:	62b3      	str	r3, [r6, #40]	; 0x28
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	6020      	str	r0, [r4, #0]
 8007cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd8:	81a3      	strh	r3, [r4, #12]
 8007cda:	9b00      	ldr	r3, [sp, #0]
 8007cdc:	6163      	str	r3, [r4, #20]
 8007cde:	9b01      	ldr	r3, [sp, #4]
 8007ce0:	6120      	str	r0, [r4, #16]
 8007ce2:	b15b      	cbz	r3, 8007cfc <__smakebuf_r+0x74>
 8007ce4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f000 f8d9 	bl	8007ea0 <_isatty_r>
 8007cee:	b128      	cbz	r0, 8007cfc <__smakebuf_r+0x74>
 8007cf0:	89a3      	ldrh	r3, [r4, #12]
 8007cf2:	f023 0303 	bic.w	r3, r3, #3
 8007cf6:	f043 0301 	orr.w	r3, r3, #1
 8007cfa:	81a3      	strh	r3, [r4, #12]
 8007cfc:	89a0      	ldrh	r0, [r4, #12]
 8007cfe:	4305      	orrs	r5, r0
 8007d00:	81a5      	strh	r5, [r4, #12]
 8007d02:	e7cd      	b.n	8007ca0 <__smakebuf_r+0x18>
 8007d04:	08006be9 	.word	0x08006be9

08007d08 <memcpy>:
 8007d08:	440a      	add	r2, r1
 8007d0a:	4291      	cmp	r1, r2
 8007d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d10:	d100      	bne.n	8007d14 <memcpy+0xc>
 8007d12:	4770      	bx	lr
 8007d14:	b510      	push	{r4, lr}
 8007d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d1e:	4291      	cmp	r1, r2
 8007d20:	d1f9      	bne.n	8007d16 <memcpy+0xe>
 8007d22:	bd10      	pop	{r4, pc}

08007d24 <memmove>:
 8007d24:	4288      	cmp	r0, r1
 8007d26:	b510      	push	{r4, lr}
 8007d28:	eb01 0402 	add.w	r4, r1, r2
 8007d2c:	d902      	bls.n	8007d34 <memmove+0x10>
 8007d2e:	4284      	cmp	r4, r0
 8007d30:	4623      	mov	r3, r4
 8007d32:	d807      	bhi.n	8007d44 <memmove+0x20>
 8007d34:	1e43      	subs	r3, r0, #1
 8007d36:	42a1      	cmp	r1, r4
 8007d38:	d008      	beq.n	8007d4c <memmove+0x28>
 8007d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d42:	e7f8      	b.n	8007d36 <memmove+0x12>
 8007d44:	4402      	add	r2, r0
 8007d46:	4601      	mov	r1, r0
 8007d48:	428a      	cmp	r2, r1
 8007d4a:	d100      	bne.n	8007d4e <memmove+0x2a>
 8007d4c:	bd10      	pop	{r4, pc}
 8007d4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d56:	e7f7      	b.n	8007d48 <memmove+0x24>

08007d58 <__malloc_lock>:
 8007d58:	4801      	ldr	r0, [pc, #4]	; (8007d60 <__malloc_lock+0x8>)
 8007d5a:	f7ff b829 	b.w	8006db0 <__retarget_lock_acquire_recursive>
 8007d5e:	bf00      	nop
 8007d60:	200002a0 	.word	0x200002a0

08007d64 <__malloc_unlock>:
 8007d64:	4801      	ldr	r0, [pc, #4]	; (8007d6c <__malloc_unlock+0x8>)
 8007d66:	f7ff b824 	b.w	8006db2 <__retarget_lock_release_recursive>
 8007d6a:	bf00      	nop
 8007d6c:	200002a0 	.word	0x200002a0

08007d70 <_realloc_r>:
 8007d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d74:	4680      	mov	r8, r0
 8007d76:	4614      	mov	r4, r2
 8007d78:	460e      	mov	r6, r1
 8007d7a:	b921      	cbnz	r1, 8007d86 <_realloc_r+0x16>
 8007d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d80:	4611      	mov	r1, r2
 8007d82:	f7ff b88b 	b.w	8006e9c <_malloc_r>
 8007d86:	b92a      	cbnz	r2, 8007d94 <_realloc_r+0x24>
 8007d88:	f7ff f81c 	bl	8006dc4 <_free_r>
 8007d8c:	4625      	mov	r5, r4
 8007d8e:	4628      	mov	r0, r5
 8007d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d94:	f000 f894 	bl	8007ec0 <_malloc_usable_size_r>
 8007d98:	4284      	cmp	r4, r0
 8007d9a:	4607      	mov	r7, r0
 8007d9c:	d802      	bhi.n	8007da4 <_realloc_r+0x34>
 8007d9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007da2:	d812      	bhi.n	8007dca <_realloc_r+0x5a>
 8007da4:	4621      	mov	r1, r4
 8007da6:	4640      	mov	r0, r8
 8007da8:	f7ff f878 	bl	8006e9c <_malloc_r>
 8007dac:	4605      	mov	r5, r0
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d0ed      	beq.n	8007d8e <_realloc_r+0x1e>
 8007db2:	42bc      	cmp	r4, r7
 8007db4:	4622      	mov	r2, r4
 8007db6:	4631      	mov	r1, r6
 8007db8:	bf28      	it	cs
 8007dba:	463a      	movcs	r2, r7
 8007dbc:	f7ff ffa4 	bl	8007d08 <memcpy>
 8007dc0:	4631      	mov	r1, r6
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	f7fe fffe 	bl	8006dc4 <_free_r>
 8007dc8:	e7e1      	b.n	8007d8e <_realloc_r+0x1e>
 8007dca:	4635      	mov	r5, r6
 8007dcc:	e7df      	b.n	8007d8e <_realloc_r+0x1e>
	...

08007dd0 <_read_r>:
 8007dd0:	b538      	push	{r3, r4, r5, lr}
 8007dd2:	4d07      	ldr	r5, [pc, #28]	; (8007df0 <_read_r+0x20>)
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	4608      	mov	r0, r1
 8007dd8:	4611      	mov	r1, r2
 8007dda:	2200      	movs	r2, #0
 8007ddc:	602a      	str	r2, [r5, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	f7f9 fa04 	bl	80011ec <_read>
 8007de4:	1c43      	adds	r3, r0, #1
 8007de6:	d102      	bne.n	8007dee <_read_r+0x1e>
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	b103      	cbz	r3, 8007dee <_read_r+0x1e>
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	200002ac 	.word	0x200002ac

08007df4 <_raise_r>:
 8007df4:	291f      	cmp	r1, #31
 8007df6:	b538      	push	{r3, r4, r5, lr}
 8007df8:	4604      	mov	r4, r0
 8007dfa:	460d      	mov	r5, r1
 8007dfc:	d904      	bls.n	8007e08 <_raise_r+0x14>
 8007dfe:	2316      	movs	r3, #22
 8007e00:	6003      	str	r3, [r0, #0]
 8007e02:	f04f 30ff 	mov.w	r0, #4294967295
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e0a:	b112      	cbz	r2, 8007e12 <_raise_r+0x1e>
 8007e0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e10:	b94b      	cbnz	r3, 8007e26 <_raise_r+0x32>
 8007e12:	4620      	mov	r0, r4
 8007e14:	f000 f830 	bl	8007e78 <_getpid_r>
 8007e18:	462a      	mov	r2, r5
 8007e1a:	4601      	mov	r1, r0
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e22:	f000 b817 	b.w	8007e54 <_kill_r>
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d00a      	beq.n	8007e40 <_raise_r+0x4c>
 8007e2a:	1c59      	adds	r1, r3, #1
 8007e2c:	d103      	bne.n	8007e36 <_raise_r+0x42>
 8007e2e:	2316      	movs	r3, #22
 8007e30:	6003      	str	r3, [r0, #0]
 8007e32:	2001      	movs	r0, #1
 8007e34:	e7e7      	b.n	8007e06 <_raise_r+0x12>
 8007e36:	2400      	movs	r4, #0
 8007e38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	4798      	blx	r3
 8007e40:	2000      	movs	r0, #0
 8007e42:	e7e0      	b.n	8007e06 <_raise_r+0x12>

08007e44 <raise>:
 8007e44:	4b02      	ldr	r3, [pc, #8]	; (8007e50 <raise+0xc>)
 8007e46:	4601      	mov	r1, r0
 8007e48:	6818      	ldr	r0, [r3, #0]
 8007e4a:	f7ff bfd3 	b.w	8007df4 <_raise_r>
 8007e4e:	bf00      	nop
 8007e50:	200000a8 	.word	0x200000a8

08007e54 <_kill_r>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	4d07      	ldr	r5, [pc, #28]	; (8007e74 <_kill_r+0x20>)
 8007e58:	2300      	movs	r3, #0
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	4608      	mov	r0, r1
 8007e5e:	4611      	mov	r1, r2
 8007e60:	602b      	str	r3, [r5, #0]
 8007e62:	f7f9 f9a9 	bl	80011b8 <_kill>
 8007e66:	1c43      	adds	r3, r0, #1
 8007e68:	d102      	bne.n	8007e70 <_kill_r+0x1c>
 8007e6a:	682b      	ldr	r3, [r5, #0]
 8007e6c:	b103      	cbz	r3, 8007e70 <_kill_r+0x1c>
 8007e6e:	6023      	str	r3, [r4, #0]
 8007e70:	bd38      	pop	{r3, r4, r5, pc}
 8007e72:	bf00      	nop
 8007e74:	200002ac 	.word	0x200002ac

08007e78 <_getpid_r>:
 8007e78:	f7f9 b996 	b.w	80011a8 <_getpid>

08007e7c <_fstat_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4d07      	ldr	r5, [pc, #28]	; (8007e9c <_fstat_r+0x20>)
 8007e80:	2300      	movs	r3, #0
 8007e82:	4604      	mov	r4, r0
 8007e84:	4608      	mov	r0, r1
 8007e86:	4611      	mov	r1, r2
 8007e88:	602b      	str	r3, [r5, #0]
 8007e8a:	f7f9 f9f4 	bl	8001276 <_fstat>
 8007e8e:	1c43      	adds	r3, r0, #1
 8007e90:	d102      	bne.n	8007e98 <_fstat_r+0x1c>
 8007e92:	682b      	ldr	r3, [r5, #0]
 8007e94:	b103      	cbz	r3, 8007e98 <_fstat_r+0x1c>
 8007e96:	6023      	str	r3, [r4, #0]
 8007e98:	bd38      	pop	{r3, r4, r5, pc}
 8007e9a:	bf00      	nop
 8007e9c:	200002ac 	.word	0x200002ac

08007ea0 <_isatty_r>:
 8007ea0:	b538      	push	{r3, r4, r5, lr}
 8007ea2:	4d06      	ldr	r5, [pc, #24]	; (8007ebc <_isatty_r+0x1c>)
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	4608      	mov	r0, r1
 8007eaa:	602b      	str	r3, [r5, #0]
 8007eac:	f7f9 f9f3 	bl	8001296 <_isatty>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	d102      	bne.n	8007eba <_isatty_r+0x1a>
 8007eb4:	682b      	ldr	r3, [r5, #0]
 8007eb6:	b103      	cbz	r3, 8007eba <_isatty_r+0x1a>
 8007eb8:	6023      	str	r3, [r4, #0]
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	200002ac 	.word	0x200002ac

08007ec0 <_malloc_usable_size_r>:
 8007ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ec4:	1f18      	subs	r0, r3, #4
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bfbc      	itt	lt
 8007eca:	580b      	ldrlt	r3, [r1, r0]
 8007ecc:	18c0      	addlt	r0, r0, r3
 8007ece:	4770      	bx	lr

08007ed0 <_init>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	bf00      	nop
 8007ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ed6:	bc08      	pop	{r3}
 8007ed8:	469e      	mov	lr, r3
 8007eda:	4770      	bx	lr

08007edc <_fini>:
 8007edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ede:	bf00      	nop
 8007ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee2:	bc08      	pop	{r3}
 8007ee4:	469e      	mov	lr, r3
 8007ee6:	4770      	bx	lr
