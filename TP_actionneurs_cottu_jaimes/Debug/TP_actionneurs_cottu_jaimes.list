
TP_actionneurs_cottu_jaimes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b30  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08007d10  08007d10  00017d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008154  08008154  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08008154  08008154  00018154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800815c  0800815c  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800815c  0800815c  0001815c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008160  08008160  00018160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08008164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000010c  08008270  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08008270  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d45  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000281e  00000000  00000000  00034e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  000376a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  000387e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027445  00000000  00000000  00039828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d9b  00000000  00000000  00060c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd4e4  00000000  00000000  00074a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00171eec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005520  00000000  00000000  00171f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000010c 	.word	0x2000010c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007cf8 	.word	0x08007cf8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000110 	.word	0x20000110
 800021c:	08007cf8 	.word	0x08007cf8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
  * @brief  The application entry point.
  * Fonction de gestion de l'interface utilisateur : gestion du shell et du traitement des commandes.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09e      	sub	sp, #120	; 0x78
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];		//!< Contient la commande reconstruite apres chaque interruption UART
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fe74 	bl	80012de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f983 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fb09 	bl	8000c10 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005fe:	f000 f9cb 	bl	8000998 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000602:	f000 fab9 	bl	8000b78 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000606:	f000 fa6b 	bl	8000ae0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 800060a:	463b      	mov	r3, r7
 800060c:	2224      	movs	r2, #36	; 0x24
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f006 f897 	bl	8006744 <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061a:	2240      	movs	r2, #64	; 0x40
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 f890 	bl	8006744 <memset>
 8000624:	4b9e      	ldr	r3, [pc, #632]	; (80008a0 <main+0x2bc>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 800062a:	2240      	movs	r2, #64	; 0x40
 800062c:	2100      	movs	r1, #0
 800062e:	489d      	ldr	r0, [pc, #628]	; (80008a4 <main+0x2c0>)
 8000630:	f006 f888 	bl	8006744 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000634:	2201      	movs	r2, #1
 8000636:	499a      	ldr	r1, [pc, #616]	; (80008a0 <main+0x2bc>)
 8000638:	489b      	ldr	r0, [pc, #620]	; (80008a8 <main+0x2c4>)
 800063a:	f004 f8c5 	bl	80047c8 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 800063e:	200a      	movs	r0, #10
 8000640:	f000 febe 	bl	80013c0 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2266      	movs	r2, #102	; 0x66
 800064a:	4998      	ldr	r1, [pc, #608]	; (80008ac <main+0x2c8>)
 800064c:	4896      	ldr	r0, [pc, #600]	; (80008a8 <main+0x2c4>)
 800064e:	f004 f824 	bl	800469a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	2218      	movs	r2, #24
 8000658:	4995      	ldr	r1, [pc, #596]	; (80008b0 <main+0x2cc>)
 800065a:	4893      	ldr	r0, [pc, #588]	; (80008a8 <main+0x2c4>)
 800065c:	f004 f81d 	bl	800469a <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// uartRxReceived is set to 1 when a new character is received on uart 1
		if(uartRxReceived){
 8000660:	4b94      	ldr	r3, [pc, #592]	; (80008b4 <main+0x2d0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d056      	beq.n	8000716 <main+0x132>
			switch(uartRxBuffer[0]){
 8000668:	4b8d      	ldr	r3, [pc, #564]	; (80008a0 <main+0x2bc>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b0d      	cmp	r3, #13
 800066e:	d002      	beq.n	8000676 <main+0x92>
 8000670:	2b7f      	cmp	r3, #127	; 0x7f
 8000672:	d02d      	beq.n	80006d0 <main+0xec>
 8000674:	e03c      	b.n	80006f0 <main+0x10c>
			// Nouvelle ligne, instruction à traiter
			case ASCII_CR:
				HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	2203      	movs	r2, #3
 800067c:	498e      	ldr	r1, [pc, #568]	; (80008b8 <main+0x2d4>)
 800067e:	488a      	ldr	r0, [pc, #552]	; (80008a8 <main+0x2c4>)
 8000680:	f004 f80b 	bl	800469a <HAL_UART_Transmit>
				cmdBuffer[idx_cmd] = '\0';
 8000684:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800068a:	4413      	add	r3, r2
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
				argc = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	673b      	str	r3, [r7, #112]	; 0x70
				token = strtok(cmdBuffer, " ");
 8000694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000698:	4988      	ldr	r1, [pc, #544]	; (80008bc <main+0x2d8>)
 800069a:	4618      	mov	r0, r3
 800069c:	f006 f88e 	bl	80067bc <strtok>
 80006a0:	66f8      	str	r0, [r7, #108]	; 0x6c
				while(token!=NULL){
 80006a2:	e00d      	b.n	80006c0 <main+0xdc>
					argv[argc++] = token;
 80006a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	673a      	str	r2, [r7, #112]	; 0x70
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	3378      	adds	r3, #120	; 0x78
 80006ae:	443b      	add	r3, r7
 80006b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80006b2:	f843 2c78 	str.w	r2, [r3, #-120]
					token = strtok(NULL, " ");
 80006b6:	4981      	ldr	r1, [pc, #516]	; (80008bc <main+0x2d8>)
 80006b8:	2000      	movs	r0, #0
 80006ba:	f006 f87f 	bl	80067bc <strtok>
 80006be:	66f8      	str	r0, [r7, #108]	; 0x6c
				while(token!=NULL){
 80006c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1ee      	bne.n	80006a4 <main+0xc0>
				}

				idx_cmd = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	677b      	str	r3, [r7, #116]	; 0x74
				newCmdReady = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	66bb      	str	r3, [r7, #104]	; 0x68
				break;
 80006ce:	e01f      	b.n	8000710 <main+0x12c>
				// Suppression du dernier caractère
			case ASCII_DEL:
				cmdBuffer[idx_cmd--] = '\0';
 80006d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006d2:	1e5a      	subs	r2, r3, #1
 80006d4:	677a      	str	r2, [r7, #116]	; 0x74
 80006d6:	3378      	adds	r3, #120	; 0x78
 80006d8:	443b      	add	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
 80006e4:	2201      	movs	r2, #1
 80006e6:	496e      	ldr	r1, [pc, #440]	; (80008a0 <main+0x2bc>)
 80006e8:	486f      	ldr	r0, [pc, #444]	; (80008a8 <main+0x2c4>)
 80006ea:	f003 ffd6 	bl	800469a <HAL_UART_Transmit>
				break;
 80006ee:	e00f      	b.n	8000710 <main+0x12c>
				// Nouveau caractère
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80006f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006f2:	1c5a      	adds	r2, r3, #1
 80006f4:	677a      	str	r2, [r7, #116]	; 0x74
 80006f6:	4a6a      	ldr	r2, [pc, #424]	; (80008a0 <main+0x2bc>)
 80006f8:	7812      	ldrb	r2, [r2, #0]
 80006fa:	3378      	adds	r3, #120	; 0x78
 80006fc:	443b      	add	r3, r7
 80006fe:	f803 2c54 	strb.w	r2, [r3, #-84]
				HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	2201      	movs	r2, #1
 8000708:	4965      	ldr	r1, [pc, #404]	; (80008a0 <main+0x2bc>)
 800070a:	4867      	ldr	r0, [pc, #412]	; (80008a8 <main+0x2c4>)
 800070c:	f003 ffc5 	bl	800469a <HAL_UART_Transmit>
			}
			uartRxReceived = 0;
 8000710:	4b68      	ldr	r3, [pc, #416]	; (80008b4 <main+0x2d0>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
		}

		if(newCmdReady){
 8000716:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0a1      	beq.n	8000660 <main+0x7c>
			if(strcmp(argv[0],"set")==0){
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	4968      	ldr	r1, [pc, #416]	; (80008c0 <main+0x2dc>)
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fd7d 	bl	8000220 <strcmp>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d12d      	bne.n	8000788 <main+0x1a4>
				if(strcmp(argv[1],"PA5")==0){
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4965      	ldr	r1, [pc, #404]	; (80008c4 <main+0x2e0>)
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd75 	bl	8000220 <strcmp>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d11d      	bne.n	8000778 <main+0x194>
					HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	4618      	mov	r0, r3
 8000740:	f005 ffd2 	bl	80066e8 <atoi>
 8000744:	4603      	mov	r3, r0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	461a      	mov	r2, r3
 800074a:	2120      	movs	r1, #32
 800074c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000750:	f001 f9aa 	bl	8001aa8 <HAL_GPIO_WritePin>
					sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	4618      	mov	r0, r3
 8000758:	f005 ffc6 	bl	80066e8 <atoi>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	4959      	ldr	r1, [pc, #356]	; (80008c8 <main+0x2e4>)
 8000762:	4850      	ldr	r0, [pc, #320]	; (80008a4 <main+0x2c0>)
 8000764:	f005 fff6 	bl	8006754 <siprintf>
					HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000768:	f04f 33ff 	mov.w	r3, #4294967295
 800076c:	2220      	movs	r2, #32
 800076e:	494d      	ldr	r1, [pc, #308]	; (80008a4 <main+0x2c0>)
 8000770:	484d      	ldr	r0, [pc, #308]	; (80008a8 <main+0x2c4>)
 8000772:	f003 ff92 	bl	800469a <HAL_UART_Transmit>
 8000776:	e088      	b.n	800088a <main+0x2a6>
				}
				else{
					HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	2215      	movs	r2, #21
 800077e:	4953      	ldr	r1, [pc, #332]	; (80008cc <main+0x2e8>)
 8000780:	4849      	ldr	r0, [pc, #292]	; (80008a8 <main+0x2c4>)
 8000782:	f003 ff8a 	bl	800469a <HAL_UART_Transmit>
 8000786:	e080      	b.n	800088a <main+0x2a6>
				}
			}
			else if(strcmp(argv[0],"get")==0)
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	4951      	ldr	r1, [pc, #324]	; (80008d0 <main+0x2ec>)
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fd47 	bl	8000220 <strcmp>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d107      	bne.n	80007a8 <main+0x1c4>
			{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000798:	f04f 33ff 	mov.w	r3, #4294967295
 800079c:	2215      	movs	r2, #21
 800079e:	494b      	ldr	r1, [pc, #300]	; (80008cc <main+0x2e8>)
 80007a0:	4841      	ldr	r0, [pc, #260]	; (80008a8 <main+0x2c4>)
 80007a2:	f003 ff7a 	bl	800469a <HAL_UART_Transmit>
 80007a6:	e070      	b.n	800088a <main+0x2a6>
			}
			else if(strcmp(argv[0],"pinout")==0)
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	494a      	ldr	r1, [pc, #296]	; (80008d4 <main+0x2f0>)
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fd37 	bl	8000220 <strcmp>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d107      	bne.n	80007c8 <main+0x1e4>
			{
				HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
 80007bc:	223d      	movs	r2, #61	; 0x3d
 80007be:	4946      	ldr	r1, [pc, #280]	; (80008d8 <main+0x2f4>)
 80007c0:	4839      	ldr	r0, [pc, #228]	; (80008a8 <main+0x2c4>)
 80007c2:	f003 ff6a 	bl	800469a <HAL_UART_Transmit>
 80007c6:	e060      	b.n	800088a <main+0x2a6>
			}
			else if(strcmp(argv[0],"start")==0)
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	4944      	ldr	r1, [pc, #272]	; (80008dc <main+0x2f8>)
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fd27 	bl	8000220 <strcmp>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d109      	bne.n	80007ec <main+0x208>
			{
				HAL_UART_Transmit(&huart2, start, sizeof(start), HAL_MAX_DELAY);
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	220c      	movs	r2, #12
 80007de:	4940      	ldr	r1, [pc, #256]	; (80008e0 <main+0x2fc>)
 80007e0:	4831      	ldr	r0, [pc, #196]	; (80008a8 <main+0x2c4>)
 80007e2:	f003 ff5a 	bl	800469a <HAL_UART_Transmit>
				motor_start();
 80007e6:	f000 facf 	bl	8000d88 <motor_start>
 80007ea:	e04e      	b.n	800088a <main+0x2a6>
			}
			else if(strcmp(argv[0],"stop")==0)
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	493d      	ldr	r1, [pc, #244]	; (80008e4 <main+0x300>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fd15 	bl	8000220 <strcmp>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d107      	bne.n	800080c <main+0x228>
			{
				HAL_UART_Transmit(&huart2, stop, sizeof(stop), HAL_MAX_DELAY);
 80007fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000800:	220d      	movs	r2, #13
 8000802:	4939      	ldr	r1, [pc, #228]	; (80008e8 <main+0x304>)
 8000804:	4828      	ldr	r0, [pc, #160]	; (80008a8 <main+0x2c4>)
 8000806:	f003 ff48 	bl	800469a <HAL_UART_Transmit>
 800080a:	e03e      	b.n	800088a <main+0x2a6>
			}
			else if(strcmp(argv[0],"help")==0)
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	4937      	ldr	r1, [pc, #220]	; (80008ec <main+0x308>)
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fd05 	bl	8000220 <strcmp>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d107      	bne.n	800082c <main+0x248>
			{
				HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
 8000820:	22f9      	movs	r2, #249	; 0xf9
 8000822:	4933      	ldr	r1, [pc, #204]	; (80008f0 <main+0x30c>)
 8000824:	4820      	ldr	r0, [pc, #128]	; (80008a8 <main+0x2c4>)
 8000826:	f003 ff38 	bl	800469a <HAL_UART_Transmit>
 800082a:	e02e      	b.n	800088a <main+0x2a6>
			}
			else if(strncmp(argv[0],"speed=",6)==0)
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	2206      	movs	r2, #6
 8000830:	4930      	ldr	r1, [pc, #192]	; (80008f4 <main+0x310>)
 8000832:	4618      	mov	r0, r3
 8000834:	f005 ffae 	bl	8006794 <strncmp>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d11e      	bne.n	800087c <main+0x298>
			{
				HAL_UART_Transmit(&huart2,speed_msg, sizeof(speed_msg), HAL_MAX_DELAY);
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	220d      	movs	r2, #13
 8000844:	492c      	ldr	r1, [pc, #176]	; (80008f8 <main+0x314>)
 8000846:	4818      	ldr	r0, [pc, #96]	; (80008a8 <main+0x2c4>)
 8000848:	f003 ff27 	bl	800469a <HAL_UART_Transmit>
				for(int i=0;i<SPEED_MAX_DIGIT+1;i++){
 800084c:	2300      	movs	r3, #0
 800084e:	667b      	str	r3, [r7, #100]	; 0x64
 8000850:	e00d      	b.n	800086e <main+0x28a>
					speed[i]=cmdBuffer[i+6];					// i+6 car les 6 premiers caracteres sont "speed="
 8000852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000854:	3306      	adds	r3, #6
 8000856:	3378      	adds	r3, #120	; 0x78
 8000858:	443b      	add	r3, r7
 800085a:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800085e:	4619      	mov	r1, r3
 8000860:	4a26      	ldr	r2, [pc, #152]	; (80008fc <main+0x318>)
 8000862:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000864:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int i=0;i<SPEED_MAX_DIGIT+1;i++){
 8000868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800086a:	3301      	adds	r3, #1
 800086c:	667b      	str	r3, [r7, #100]	; 0x64
 800086e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000870:	2b04      	cmp	r3, #4
 8000872:	ddee      	ble.n	8000852 <main+0x26e>
				}
				motor_set_speed(speed);
 8000874:	4821      	ldr	r0, [pc, #132]	; (80008fc <main+0x318>)
 8000876:	f000 faad 	bl	8000dd4 <motor_set_speed>
 800087a:	e006      	b.n	800088a <main+0x2a6>
			}
			else{
				HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	2215      	movs	r2, #21
 8000882:	4912      	ldr	r1, [pc, #72]	; (80008cc <main+0x2e8>)
 8000884:	4808      	ldr	r0, [pc, #32]	; (80008a8 <main+0x2c4>)
 8000886:	f003 ff08 	bl	800469a <HAL_UART_Transmit>
			}
			HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800088a:	f04f 33ff 	mov.w	r3, #4294967295
 800088e:	2218      	movs	r2, #24
 8000890:	4907      	ldr	r1, [pc, #28]	; (80008b0 <main+0x2cc>)
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <main+0x2c4>)
 8000894:	f003 ff01 	bl	800469a <HAL_UART_Transmit>
			newCmdReady = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	66bb      	str	r3, [r7, #104]	; 0x68
		if(uartRxReceived){
 800089c:	e6e0      	b.n	8000660 <main+0x7c>
 800089e:	bf00      	nop
 80008a0:	20000264 	.word	0x20000264
 80008a4:	20000268 	.word	0x20000268
 80008a8:	200001c0 	.word	0x200001c0
 80008ac:	20000018 	.word	0x20000018
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000260 	.word	0x20000260
 80008b8:	20000080 	.word	0x20000080
 80008bc:	08007d10 	.word	0x08007d10
 80008c0:	08007d14 	.word	0x08007d14
 80008c4:	08007d18 	.word	0x08007d18
 80008c8:	08007d1c 	.word	0x08007d1c
 80008cc:	20000084 	.word	0x20000084
 80008d0:	08007d38 	.word	0x08007d38
 80008d4:	08007d3c 	.word	0x08007d3c
 80008d8:	08007e60 	.word	0x08007e60
 80008dc:	08007d44 	.word	0x08007d44
 80008e0:	08007ea0 	.word	0x08007ea0
 80008e4:	08007d4c 	.word	0x08007d4c
 80008e8:	08007eac 	.word	0x08007eac
 80008ec:	08007d54 	.word	0x08007d54
 80008f0:	08007d64 	.word	0x08007d64
 80008f4:	08007d5c 	.word	0x08007d5c
 80008f8:	08007ebc 	.word	0x08007ebc
 80008fc:	20000250 	.word	0x20000250

08000900 <SystemClock_Config>:
/*
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b094      	sub	sp, #80	; 0x50
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0318 	add.w	r3, r7, #24
 800090a:	2238      	movs	r2, #56	; 0x38
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f005 ff18 	bl	8006744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /* Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000922:	2000      	movs	r0, #0
 8000924:	f001 f8f0 	bl	8001b08 <HAL_PWREx_ControlVoltageScaling>

  /* Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000928:	2302      	movs	r3, #2
 800092a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000932:	2340      	movs	r3, #64	; 0x40
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000936:	2302      	movs	r3, #2
 8000938:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800093a:	2302      	movs	r3, #2
 800093c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800093e:	2304      	movs	r3, #4
 8000940:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000942:	2355      	movs	r3, #85	; 0x55
 8000944:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000946:	2302      	movs	r3, #2
 8000948:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800094a:	2302      	movs	r3, #2
 800094c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800094e:	2302      	movs	r3, #2
 8000950:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000952:	f107 0318 	add.w	r3, r7, #24
 8000956:	4618      	mov	r0, r3
 8000958:	f001 f98a 	bl	8001c70 <HAL_RCC_OscConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000962:	f000 f9e1 	bl	8000d28 <Error_Handler>
  }

  /* Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000966:	230f      	movs	r3, #15
 8000968:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096a:	2303      	movs	r3, #3
 800096c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2104      	movs	r1, #4
 800097e:	4618      	mov	r0, r3
 8000980:	f001 fc8e 	bl	80022a0 <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800098a:	f000 f9cd 	bl	8000d28 <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	3750      	adds	r7, #80	; 0x50
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b098      	sub	sp, #96	; 0x60
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
 80009ba:	615a      	str	r2, [r3, #20]
 80009bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2234      	movs	r2, #52	; 0x34
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f005 febd 	bl	8006744 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009ca:	4b43      	ldr	r3, [pc, #268]	; (8000ad8 <MX_TIM1_Init+0x140>)
 80009cc:	4a43      	ldr	r2, [pc, #268]	; (8000adc <MX_TIM1_Init+0x144>)
 80009ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3-1;
 80009d0:	4b41      	ldr	r3, [pc, #260]	; (8000ad8 <MX_TIM1_Init+0x140>)
 80009d2:	2202      	movs	r2, #2
 80009d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80009d6:	4b40      	ldr	r3, [pc, #256]	; (8000ad8 <MX_TIM1_Init+0x140>)
 80009d8:	2220      	movs	r2, #32
 80009da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1749;
 80009dc:	4b3e      	ldr	r3, [pc, #248]	; (8000ad8 <MX_TIM1_Init+0x140>)
 80009de:	f240 62d5 	movw	r2, #1749	; 0x6d5
 80009e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e4:	4b3c      	ldr	r3, [pc, #240]	; (8000ad8 <MX_TIM1_Init+0x140>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ea:	4b3b      	ldr	r3, [pc, #236]	; (8000ad8 <MX_TIM1_Init+0x140>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f0:	4b39      	ldr	r3, [pc, #228]	; (8000ad8 <MX_TIM1_Init+0x140>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009f6:	4838      	ldr	r0, [pc, #224]	; (8000ad8 <MX_TIM1_Init+0x140>)
 80009f8:	f002 f9bb 	bl	8002d72 <HAL_TIM_PWM_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000a02:	f000 f991 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a16:	4619      	mov	r1, r3
 8000a18:	482f      	ldr	r0, [pc, #188]	; (8000ad8 <MX_TIM1_Init+0x140>)
 8000a1a:	f003 fc3b 	bl	8004294 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a24:	f000 f980 	bl	8000d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a28:	2360      	movs	r3, #96	; 0x60
 8000a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1050;
 8000a2c:	f240 431a 	movw	r3, #1050	; 0x41a
 8000a30:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a32:	2300      	movs	r3, #0
 8000a34:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a36:	2300      	movs	r3, #0
 8000a38:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4822      	ldr	r0, [pc, #136]	; (8000ad8 <MX_TIM1_Init+0x140>)
 8000a50:	f002 fc78 	bl	8003344 <HAL_TIM_PWM_ConfigChannel>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000a5a:	f000 f965 	bl	8000d28 <Error_Handler>
  }
  sConfigOC.Pulse = 700;
 8000a5e:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a68:	2204      	movs	r2, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	481a      	ldr	r0, [pc, #104]	; (8000ad8 <MX_TIM1_Init+0x140>)
 8000a6e:	f002 fc69 	bl	8003344 <HAL_TIM_PWM_ConfigChannel>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000a78:	f000 f956 	bl	8000d28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 200;
 8000a88:	23c8      	movs	r3, #200	; 0xc8
 8000a8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000ab0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <MX_TIM1_Init+0x140>)
 8000abc:	f003 fc80 	bl	80043c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8000ac6:	f000 f92f 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aca:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <MX_TIM1_Init+0x140>)
 8000acc:	f000 fa28 	bl	8000f20 <HAL_TIM_MspPostInit>

}
 8000ad0:	bf00      	nop
 8000ad2:	3760      	adds	r7, #96	; 0x60
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000128 	.word	0x20000128
 8000adc:	40012c00 	.word	0x40012c00

08000ae0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170;
 8000b06:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b08:	22aa      	movs	r2, #170	; 0xaa
 8000b0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2;
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b14:	2202      	movs	r2, #2
 8000b16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b24:	4813      	ldr	r0, [pc, #76]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b26:	f002 f825 	bl	8002b74 <HAL_TIM_Base_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b30:	f000 f8fa 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b42:	f002 fd13 	bl	800356c <HAL_TIM_ConfigClockSource>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b4c:	f000 f8ec 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b50:	2300      	movs	r3, #0
 8000b52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b5e:	f003 fb99 	bl	8004294 <HAL_TIMEx_MasterConfigSynchronization>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b68:	f000 f8de 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	3720      	adds	r7, #32
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000174 	.word	0x20000174

08000b78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b7c:	4b22      	ldr	r3, [pc, #136]	; (8000c08 <MX_USART2_UART_Init+0x90>)
 8000b7e:	4a23      	ldr	r2, [pc, #140]	; (8000c0c <MX_USART2_UART_Init+0x94>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b82:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <MX_USART2_UART_Init+0x90>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <MX_USART2_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_USART2_UART_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <MX_USART2_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_USART2_UART_Init+0x90>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <MX_USART2_UART_Init+0x90>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_USART2_UART_Init+0x90>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_USART2_UART_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_USART2_UART_Init+0x90>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_USART2_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc0:	4811      	ldr	r0, [pc, #68]	; (8000c08 <MX_USART2_UART_Init+0x90>)
 8000bc2:	f003 fd1a 	bl	80045fa <HAL_UART_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bcc:	f000 f8ac 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <MX_USART2_UART_Init+0x90>)
 8000bd4:	f005 fcbd 	bl	8006552 <HAL_UARTEx_SetTxFifoThreshold>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bde:	f000 f8a3 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be2:	2100      	movs	r1, #0
 8000be4:	4808      	ldr	r0, [pc, #32]	; (8000c08 <MX_USART2_UART_Init+0x90>)
 8000be6:	f005 fcf2 	bl	80065ce <HAL_UARTEx_SetRxFifoThreshold>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000bf0:	f000 f89a 	bl	8000d28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_USART2_UART_Init+0x90>)
 8000bf6:	f005 fc73 	bl	80064e0 <HAL_UARTEx_DisableFifoMode>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c00:	f000 f892 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200001c0 	.word	0x200001c0
 8000c0c:	40004400 	.word	0x40004400

08000c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <MX_GPIO_Init+0xe4>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	4a32      	ldr	r2, [pc, #200]	; (8000cf4 <MX_GPIO_Init+0xe4>)
 8000c2c:	f043 0304 	orr.w	r3, r3, #4
 8000c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c32:	4b30      	ldr	r3, [pc, #192]	; (8000cf4 <MX_GPIO_Init+0xe4>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <MX_GPIO_Init+0xe4>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	4a2c      	ldr	r2, [pc, #176]	; (8000cf4 <MX_GPIO_Init+0xe4>)
 8000c44:	f043 0320 	orr.w	r3, r3, #32
 8000c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <MX_GPIO_Init+0xe4>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	f003 0320 	and.w	r3, r3, #32
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <MX_GPIO_Init+0xe4>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	4a26      	ldr	r2, [pc, #152]	; (8000cf4 <MX_GPIO_Init+0xe4>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c62:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <MX_GPIO_Init+0xe4>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2108      	movs	r1, #8
 8000c72:	4821      	ldr	r0, [pc, #132]	; (8000cf8 <MX_GPIO_Init+0xe8>)
 8000c74:	f000 ff18 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2120      	movs	r1, #32
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c80:	f000 ff12 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4817      	ldr	r0, [pc, #92]	; (8000cf8 <MX_GPIO_Init+0xe8>)
 8000c9c:	f000 fd82 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISO_RESET_Pin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4810      	ldr	r0, [pc, #64]	; (8000cf8 <MX_GPIO_Init+0xe8>)
 8000cb8:	f000 fd74 	bl	80017a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000cbc:	2320      	movs	r3, #32
 8000cbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd6:	f000 fd65 	bl	80017a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2028      	movs	r0, #40	; 0x28
 8000ce0:	f000 fc6b 	bl	80015ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ce4:	2028      	movs	r0, #40	; 0x28
 8000ce6:	f000 fc82 	bl	80015ee <HAL_NVIC_EnableIRQ>

}
 8000cea:	bf00      	nop
 8000cec:	3720      	adds	r7, #32
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000800 	.word	0x48000800

08000cfc <HAL_UART_RxCpltCallback>:
/**
 * \fn void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart)
 * \brief Gestion des interruptions des périphériques UART:
 * Met le flag de réception a 1 et met le caractère reçu dans uartRxBuffer
 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <HAL_UART_RxCpltCallback+0x20>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4904      	ldr	r1, [pc, #16]	; (8000d20 <HAL_UART_RxCpltCallback+0x24>)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_UART_RxCpltCallback+0x28>)
 8000d10:	f003 fd5a 	bl	80047c8 <HAL_UART_Receive_IT>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000260 	.word	0x20000260
 8000d20:	20000264 	.word	0x20000264
 8000d24:	200001c0 	.word	0x200001c0

08000d28 <Error_Handler>:
/*
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d30:	e7fe      	b.n	8000d30 <Error_Handler+0x8>
	...

08000d34 <HAL_TIM_PeriodElapsedCallback>:
 * \fn void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 * \brief Gestion des interruptions des timers :
 * Désactive le timer 2 et remet la Pin ISO_RESET lorsque le tim2 déclenche son interruption.
 * Termine la séquence d'allumage en démarrant les PWM
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	if(htim==&htim2){
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d109      	bne.n	8000d58 <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000d44:	4806      	ldr	r0, [pc, #24]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d46:	f001 ffe5 	bl	8002d14 <HAL_TIM_Base_Stop_IT>
		HAL_GPIO_WritePin(ISO_RESET_GPIO_Port,ISO_RESET_Pin,0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2108      	movs	r1, #8
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d50:	f000 feaa 	bl	8001aa8 <HAL_GPIO_WritePin>

		//Start les PWM moteurs
		motor_start_PWM();
 8000d54:	f000 f828 	bl	8000da8 <motor_start_PWM>
	}
	//start PWM

}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000174 	.word	0x20000174
 8000d64:	48000800 	.word	0x48000800

08000d68 <HAL_GPIO_EXTI_Callback>:
/**
 * \fn void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 * \brief Gestion des interruptions GPÏO_EXTI :
 * Déclenche la procédure d'allumage du moteur sur appui du bouton utilisateur
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==BUTTON_Pin){
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d78:	d101      	bne.n	8000d7e <HAL_GPIO_EXTI_Callback+0x16>
		motor_start();
 8000d7a:	f000 f805 	bl	8000d88 <motor_start>
	}
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <motor_start>:

/**
 * \fn void motor_start(void)
 * \brief Démarre le timer 2 et met la Pin ISO_RESET à 1 pendant le temps requis (2us). Le reset de ISO_RESET se fait dans l'interruption de tim2
 */
void motor_start(void){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <motor_start+0x18>)
 8000d8e:	f001 ff49 	bl	8002c24 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port,ISO_RESET_Pin,1);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2108      	movs	r1, #8
 8000d96:	4803      	ldr	r0, [pc, #12]	; (8000da4 <motor_start+0x1c>)
 8000d98:	f000 fe86 	bl	8001aa8 <HAL_GPIO_WritePin>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000174 	.word	0x20000174
 8000da4:	48000800 	.word	0x48000800

08000da8 <motor_start_PWM>:

/**
 * \fn void motor_start_PWM(void)
 * \brief Fonction de racourci pour éviter de réécrire le redémarage des PWM à chaque fois
 */
void motor_start_PWM(void){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dac:	2100      	movs	r1, #0
 8000dae:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <motor_start_PWM+0x28>)
 8000db0:	f002 f836 	bl	8002e20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000db4:	2104      	movs	r1, #4
 8000db6:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <motor_start_PWM+0x28>)
 8000db8:	f002 f832 	bl	8002e20 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <motor_start_PWM+0x28>)
 8000dc0:	f003 f9a6 	bl	8004110 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000dc4:	2104      	movs	r1, #4
 8000dc6:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <motor_start_PWM+0x28>)
 8000dc8:	f003 f9a2 	bl	8004110 <HAL_TIMEx_PWMN_Start>
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000128 	.word	0x20000128

08000dd4 <motor_set_speed>:

/**
 * \fn void motor_set_speed(int *speed)
 * \brief Récupère et traite la commande de vitesse du moteur
 */
void motor_set_speed(int *speed){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	int res=0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
	int rapport_cyclique=MONTEE_CINQ_POURCENT; 							//!< Rapport cyclique initial à 5%
 8000de0:	2357      	movs	r3, #87	; 0x57
 8000de2:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<SPEED_MAX_DIGIT+1;i++){
 8000de4:	2300      	movs	r3, #0
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	e011      	b.n	8000e0e <motor_set_speed+0x3a>
		res=res+speed[i]*(10^(SPEED_MAX_DIGIT-i-1));
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	f1c2 0203 	rsb	r2, r2, #3
 8000dfa:	f082 020a 	eor.w	r2, r2, #10
 8000dfe:	fb02 f303 	mul.w	r3, r2, r3
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4413      	add	r3, r2
 8000e06:	617b      	str	r3, [r7, #20]
	for(int i=0;i<SPEED_MAX_DIGIT+1;i++){
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	ddea      	ble.n	8000dea <motor_set_speed+0x16>
	}
	//printf("res : %d",res);
	if(res>SPEED_MAX){
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	dd02      	ble.n	8000e24 <motor_set_speed+0x50>
		res=SPEED_MAX;
 8000e1e:	f240 63cc 	movw	r3, #1740	; 0x6cc
 8000e22:	617b      	str	r3, [r7, #20]
	}
	//methode bourin
	TIM1->CCR1=res;
 8000e24:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <motor_set_speed+0x74>)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2=SPEED_MAX-res;
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f5c3 63d9 	rsb	r3, r3, #1736	; 0x6c8
 8000e30:	3304      	adds	r3, #4
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <motor_set_speed+0x74>)
 8000e34:	6393      	str	r3, [r2, #56]	; 0x38
	HAL_TIM_PWM_Init(&htim1);
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <motor_set_speed+0x78>)
 8000e38:	f001 ff9b 	bl	8002d72 <HAL_TIM_PWM_Init>
	motor_start_PWM();
 8000e3c:	f7ff ffb4 	bl	8000da8 <motor_start_PWM>
	TIM1->CCR2=SPEED_MAX-res;
	HAL_TIM_PWM_Init(&htim1);
	motor_start_PWM();
	 */

}
 8000e40:	bf00      	nop
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40012c00 	.word	0x40012c00
 8000e4c:	20000128 	.word	0x20000128

08000e50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_MspInit+0x44>)
 8000e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_MspInit+0x44>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6613      	str	r3, [r2, #96]	; 0x60
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_MspInit+0x44>)
 8000e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_MspInit+0x44>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e72:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <HAL_MspInit+0x44>)
 8000e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e78:	6593      	str	r3, [r2, #88]	; 0x58
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_MspInit+0x44>)
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e86:	f000 fee3 	bl	8001c50 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000

08000e98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x38>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d10b      	bne.n	8000ec2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eae:	4a09      	ldr	r2, [pc, #36]	; (8000ed4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000eb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eb4:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40012c00 	.word	0x40012c00
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee8:	d113      	bne.n	8000f12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HAL_TIM_Base_MspInit+0x44>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <HAL_TIM_Base_MspInit+0x44>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_TIM_Base_MspInit+0x44>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	201c      	movs	r0, #28
 8000f08:	f000 fb57 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f0c:	201c      	movs	r0, #28
 8000f0e:	f000 fb6e 	bl	80015ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <HAL_TIM_MspPostInit+0x68>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d11d      	bne.n	8000f7e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_TIM_MspPostInit+0x6c>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <HAL_TIM_MspPostInit+0x6c>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_TIM_MspPostInit+0x6c>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000f5a:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000f5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f6c:	2306      	movs	r3, #6
 8000f6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	4619      	mov	r1, r3
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7a:	f000 fc13 	bl	80017a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f7e:	bf00      	nop
 8000f80:	3720      	adds	r7, #32
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40012c00 	.word	0x40012c00
 8000f8c:	40021000 	.word	0x40021000

08000f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b09e      	sub	sp, #120	; 0x78
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	2254      	movs	r2, #84	; 0x54
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f005 fbc7 	bl	8006744 <memset>
  if(huart->Instance==USART2)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a23      	ldr	r2, [pc, #140]	; (8001048 <HAL_UART_MspInit+0xb8>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d13e      	bne.n	800103e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 fb83 	bl	80026d8 <HAL_RCCEx_PeriphCLKConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fd8:	f7ff fea6 	bl	8000d28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <HAL_UART_MspInit+0xbc>)
 8000fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe0:	4a1a      	ldr	r2, [pc, #104]	; (800104c <HAL_UART_MspInit+0xbc>)
 8000fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_UART_MspInit+0xbc>)
 8000fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_UART_MspInit+0xbc>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff8:	4a14      	ldr	r2, [pc, #80]	; (800104c <HAL_UART_MspInit+0xbc>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_UART_MspInit+0xbc>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800100c:	230c      	movs	r3, #12
 800100e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800101c:	2307      	movs	r3, #7
 800101e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001024:	4619      	mov	r1, r3
 8001026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102a:	f000 fbbb 	bl	80017a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2026      	movs	r0, #38	; 0x26
 8001034:	f000 fac1 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001038:	2026      	movs	r0, #38	; 0x26
 800103a:	f000 fad8 	bl	80015ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	3778      	adds	r7, #120	; 0x78
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40004400 	.word	0x40004400
 800104c:	40021000 	.word	0x40021000

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <NMI_Handler+0x4>

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109c:	f000 f972 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <TIM2_IRQHandler+0x10>)
 80010aa:	f001 ffcb 	bl	8003044 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000174 	.word	0x20000174

080010b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <USART2_IRQHandler+0x10>)
 80010be:	f003 fbd9 	bl	8004874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200001c0 	.word	0x200001c0

080010cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 80010d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010d4:	f000 fd00 	bl	8001ad8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	return 1;
 80010e0:	2301      	movs	r3, #1
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <_kill>:

int _kill(int pid, int sig)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010f6:	f005 fafb 	bl	80066f0 <__errno>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2216      	movs	r2, #22
 80010fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <_exit>:

void _exit (int status)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ffe7 	bl	80010ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800111e:	e7fe      	b.n	800111e <_exit+0x12>

08001120 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e00a      	b.n	8001148 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001132:	f3af 8000 	nop.w
 8001136:	4601      	mov	r1, r0
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	1c5a      	adds	r2, r3, #1
 800113c:	60ba      	str	r2, [r7, #8]
 800113e:	b2ca      	uxtb	r2, r1
 8001140:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	dbf0      	blt.n	8001132 <_read+0x12>
	}

return len;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	e009      	b.n	8001180 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	60ba      	str	r2, [r7, #8]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3301      	adds	r3, #1
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	429a      	cmp	r2, r3
 8001186:	dbf1      	blt.n	800116c <_write+0x12>
	}
	return len;
 8001188:	687b      	ldr	r3, [r7, #4]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <_close>:

int _close(int file)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	return -1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ba:	605a      	str	r2, [r3, #4]
	return 0;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <_isatty>:

int _isatty(int file)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
	return 1;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
	return 0;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001204:	4a14      	ldr	r2, [pc, #80]	; (8001258 <_sbrk+0x5c>)
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <_sbrk+0x60>)
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <_sbrk+0x64>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <_sbrk+0x68>)
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d207      	bcs.n	800123c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800122c:	f005 fa60 	bl	80066f0 <__errno>
 8001230:	4603      	mov	r3, r0
 8001232:	220c      	movs	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e009      	b.n	8001250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <_sbrk+0x64>)
 800124c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124e:	68fb      	ldr	r3, [r7, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20020000 	.word	0x20020000
 800125c:	00000400 	.word	0x00000400
 8001260:	200002a8 	.word	0x200002a8
 8001264:	200002c0 	.word	0x200002c0

08001268 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800128c:	480d      	ldr	r0, [pc, #52]	; (80012c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800128e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001292:	490e      	ldr	r1, [pc, #56]	; (80012cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001294:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <LoopForever+0xe>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012a8:	4c0b      	ldr	r4, [pc, #44]	; (80012d8 <LoopForever+0x16>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012b6:	f7ff ffd7 	bl	8001268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ba:	f005 fa1f 	bl	80066fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012be:	f7ff f991 	bl	80005e4 <main>

080012c2 <LoopForever>:

LoopForever:
    b LoopForever
 80012c2:	e7fe      	b.n	80012c2 <LoopForever>
  ldr   r0, =_estack
 80012c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80012d0:	08008164 	.word	0x08008164
  ldr r2, =_sbss
 80012d4:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80012d8:	200002c0 	.word	0x200002c0

080012dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC1_2_IRQHandler>

080012de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 f95b 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f80e 	bl	8001310 <HAL_InitTick>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	71fb      	strb	r3, [r7, #7]
 80012fe:	e001      	b.n	8001304 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001300:	f7ff fda6 	bl	8000e50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001304:	79fb      	ldrb	r3, [r7, #7]

}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <HAL_InitTick+0x68>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d022      	beq.n	800136a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_InitTick+0x6c>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <HAL_InitTick+0x68>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001330:	fbb1 f3f3 	udiv	r3, r1, r3
 8001334:	fbb2 f3f3 	udiv	r3, r2, r3
 8001338:	4618      	mov	r0, r3
 800133a:	f000 f966 	bl	800160a <HAL_SYSTICK_Config>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d10f      	bne.n	8001364 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b0f      	cmp	r3, #15
 8001348:	d809      	bhi.n	800135e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134a:	2200      	movs	r2, #0
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	f04f 30ff 	mov.w	r0, #4294967295
 8001352:	f000 f932 	bl	80015ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <HAL_InitTick+0x70>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	e007      	b.n	800136e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	73fb      	strb	r3, [r7, #15]
 8001362:	e004      	b.n	800136e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e001      	b.n	800136e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200000a4 	.word	0x200000a4
 800137c:	2000009c 	.word	0x2000009c
 8001380:	200000a0 	.word	0x200000a0

08001384 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_IncTick+0x1c>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <HAL_IncTick+0x20>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4413      	add	r3, r2
 8001392:	4a03      	ldr	r2, [pc, #12]	; (80013a0 <HAL_IncTick+0x1c>)
 8001394:	6013      	str	r3, [r2, #0]
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	200002ac 	.word	0x200002ac
 80013a4:	200000a4 	.word	0x200000a4

080013a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <HAL_GetTick+0x14>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	200002ac 	.word	0x200002ac

080013c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c8:	f7ff ffee 	bl	80013a8 <HAL_GetTick>
 80013cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d8:	d004      	beq.n	80013e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_Delay+0x40>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013e4:	bf00      	nop
 80013e6:	f7ff ffdf 	bl	80013a8 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d8f7      	bhi.n	80013e6 <HAL_Delay+0x26>
  {
  }
}
 80013f6:	bf00      	nop
 80013f8:	bf00      	nop
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200000a4 	.word	0x200000a4

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4907      	ldr	r1, [pc, #28]	; (80014a0 <__NVIC_EnableIRQ+0x38>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	; (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f7ff ff8e 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff29 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015c8:	f7ff ff40 	bl	800144c <__NVIC_GetPriorityGrouping>
 80015cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	f7ff ff90 	bl	80014f8 <NVIC_EncodePriority>
 80015d8:	4602      	mov	r2, r0
 80015da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff5f 	bl	80014a4 <__NVIC_SetPriority>
}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff33 	bl	8001468 <__NVIC_EnableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ffa4 	bl	8001560 <SysTick_Config>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001622:	b480      	push	{r7}
 8001624:	b085      	sub	sp, #20
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d005      	beq.n	8001646 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2204      	movs	r2, #4
 800163e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	e037      	b.n	80016b6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 020e 	bic.w	r2, r2, #14
 8001654:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001664:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0201 	bic.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f003 021f 	and.w	r2, r3, #31
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	2101      	movs	r1, #1
 8001684:	fa01 f202 	lsl.w	r2, r1, r2
 8001688:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001692:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00c      	beq.n	80016b6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016aa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016b4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d00d      	beq.n	8001708 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2204      	movs	r2, #4
 80016f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	e047      	b.n	8001798 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 020e 	bic.w	r2, r2, #14
 8001716:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0201 	bic.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001732:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001736:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	2101      	movs	r1, #1
 8001746:	fa01 f202 	lsl.w	r2, r1, r2
 800174a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001754:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00c      	beq.n	8001778 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800176c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001776:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	4798      	blx	r3
    }
  }
  return status;
 8001798:	7bfb      	ldrb	r3, [r7, #15]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017b2:	e15a      	b.n	8001a6a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2101      	movs	r1, #1
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	4013      	ands	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 814c 	beq.w	8001a64 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d005      	beq.n	80017e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d130      	bne.n	8001846 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800181a:	2201      	movs	r2, #1
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	f003 0201 	and.w	r2, r3, #1
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b03      	cmp	r3, #3
 8001850:	d017      	beq.n	8001882 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2203      	movs	r2, #3
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d123      	bne.n	80018d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	08da      	lsrs	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3208      	adds	r2, #8
 8001896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	220f      	movs	r2, #15
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	08da      	lsrs	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3208      	adds	r2, #8
 80018d0:	6939      	ldr	r1, [r7, #16]
 80018d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2203      	movs	r2, #3
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0203 	and.w	r2, r3, #3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80a6 	beq.w	8001a64 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001918:	4b5b      	ldr	r3, [pc, #364]	; (8001a88 <HAL_GPIO_Init+0x2e4>)
 800191a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191c:	4a5a      	ldr	r2, [pc, #360]	; (8001a88 <HAL_GPIO_Init+0x2e4>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6613      	str	r3, [r2, #96]	; 0x60
 8001924:	4b58      	ldr	r3, [pc, #352]	; (8001a88 <HAL_GPIO_Init+0x2e4>)
 8001926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001930:	4a56      	ldr	r2, [pc, #344]	; (8001a8c <HAL_GPIO_Init+0x2e8>)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	3302      	adds	r3, #2
 8001938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	220f      	movs	r2, #15
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800195a:	d01f      	beq.n	800199c <HAL_GPIO_Init+0x1f8>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a4c      	ldr	r2, [pc, #304]	; (8001a90 <HAL_GPIO_Init+0x2ec>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d019      	beq.n	8001998 <HAL_GPIO_Init+0x1f4>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a4b      	ldr	r2, [pc, #300]	; (8001a94 <HAL_GPIO_Init+0x2f0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d013      	beq.n	8001994 <HAL_GPIO_Init+0x1f0>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a4a      	ldr	r2, [pc, #296]	; (8001a98 <HAL_GPIO_Init+0x2f4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00d      	beq.n	8001990 <HAL_GPIO_Init+0x1ec>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a49      	ldr	r2, [pc, #292]	; (8001a9c <HAL_GPIO_Init+0x2f8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d007      	beq.n	800198c <HAL_GPIO_Init+0x1e8>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a48      	ldr	r2, [pc, #288]	; (8001aa0 <HAL_GPIO_Init+0x2fc>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d101      	bne.n	8001988 <HAL_GPIO_Init+0x1e4>
 8001984:	2305      	movs	r3, #5
 8001986:	e00a      	b.n	800199e <HAL_GPIO_Init+0x1fa>
 8001988:	2306      	movs	r3, #6
 800198a:	e008      	b.n	800199e <HAL_GPIO_Init+0x1fa>
 800198c:	2304      	movs	r3, #4
 800198e:	e006      	b.n	800199e <HAL_GPIO_Init+0x1fa>
 8001990:	2303      	movs	r3, #3
 8001992:	e004      	b.n	800199e <HAL_GPIO_Init+0x1fa>
 8001994:	2302      	movs	r3, #2
 8001996:	e002      	b.n	800199e <HAL_GPIO_Init+0x1fa>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_GPIO_Init+0x1fa>
 800199c:	2300      	movs	r3, #0
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	f002 0203 	and.w	r2, r2, #3
 80019a4:	0092      	lsls	r2, r2, #2
 80019a6:	4093      	lsls	r3, r2
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ae:	4937      	ldr	r1, [pc, #220]	; (8001a8c <HAL_GPIO_Init+0x2e8>)
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	3302      	adds	r3, #2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019bc:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <HAL_GPIO_Init+0x300>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019e0:	4a30      	ldr	r2, [pc, #192]	; (8001aa4 <HAL_GPIO_Init+0x300>)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019e6:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <HAL_GPIO_Init+0x300>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a0a:	4a26      	ldr	r2, [pc, #152]	; (8001aa4 <HAL_GPIO_Init+0x300>)
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a10:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <HAL_GPIO_Init+0x300>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a34:	4a1b      	ldr	r2, [pc, #108]	; (8001aa4 <HAL_GPIO_Init+0x300>)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <HAL_GPIO_Init+0x300>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a5e:	4a11      	ldr	r2, [pc, #68]	; (8001aa4 <HAL_GPIO_Init+0x300>)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3301      	adds	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f47f ae9d 	bne.w	80017b4 <HAL_GPIO_Init+0x10>
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	bf00      	nop
 8001a7e:	371c      	adds	r7, #28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	48000400 	.word	0x48000400
 8001a94:	48000800 	.word	0x48000800
 8001a98:	48000c00 	.word	0x48000c00
 8001a9c:	48001000 	.word	0x48001000
 8001aa0:	48001400 	.word	0x48001400
 8001aa4:	40010400 	.word	0x40010400

08001aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab8:	787b      	ldrb	r3, [r7, #1]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f936 	bl	8000d68 <HAL_GPIO_EXTI_Callback>
  }
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40010400 	.word	0x40010400

08001b08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d141      	bne.n	8001b9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b16:	4b4b      	ldr	r3, [pc, #300]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b22:	d131      	bne.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b24:	4b47      	ldr	r3, [pc, #284]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b2a:	4a46      	ldr	r2, [pc, #280]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b34:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b3c:	4a41      	ldr	r2, [pc, #260]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b44:	4b40      	ldr	r3, [pc, #256]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2232      	movs	r2, #50	; 0x32
 8001b4a:	fb02 f303 	mul.w	r3, r2, r3
 8001b4e:	4a3f      	ldr	r2, [pc, #252]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b50:	fba2 2303 	umull	r2, r3, r2, r3
 8001b54:	0c9b      	lsrs	r3, r3, #18
 8001b56:	3301      	adds	r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b5a:	e002      	b.n	8001b62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b62:	4b38      	ldr	r3, [pc, #224]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6e:	d102      	bne.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f2      	bne.n	8001b5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b76:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b82:	d158      	bne.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e057      	b.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b88:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b8e:	4a2d      	ldr	r2, [pc, #180]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b98:	e04d      	b.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba0:	d141      	bne.n	8001c26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bae:	d131      	bne.n	8001c14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bb0:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bb6:	4a23      	ldr	r2, [pc, #140]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bc8:	4a1e      	ldr	r2, [pc, #120]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2232      	movs	r2, #50	; 0x32
 8001bd6:	fb02 f303 	mul.w	r3, r2, r3
 8001bda:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001be0:	0c9b      	lsrs	r3, r3, #18
 8001be2:	3301      	adds	r3, #1
 8001be4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001be6:	e002      	b.n	8001bee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfa:	d102      	bne.n	8001c02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f2      	bne.n	8001be8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0e:	d112      	bne.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e011      	b.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c24:	e007      	b.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	40007000 	.word	0x40007000
 8001c48:	2000009c 	.word	0x2000009c
 8001c4c:	431bde83 	.word	0x431bde83

08001c50 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5e:	6093      	str	r3, [r2, #8]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40007000 	.word	0x40007000

08001c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e306      	b.n	8002290 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d075      	beq.n	8001d7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c8e:	4b97      	ldr	r3, [pc, #604]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c98:	4b94      	ldr	r3, [pc, #592]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	2b0c      	cmp	r3, #12
 8001ca6:	d102      	bne.n	8001cae <HAL_RCC_OscConfig+0x3e>
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d002      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x44>
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d10b      	bne.n	8001ccc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb4:	4b8d      	ldr	r3, [pc, #564]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d05b      	beq.n	8001d78 <HAL_RCC_OscConfig+0x108>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d157      	bne.n	8001d78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e2e1      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd4:	d106      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x74>
 8001cd6:	4b85      	ldr	r3, [pc, #532]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a84      	ldr	r2, [pc, #528]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e01d      	b.n	8001d20 <HAL_RCC_OscConfig+0xb0>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x98>
 8001cee:	4b7f      	ldr	r3, [pc, #508]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7e      	ldr	r2, [pc, #504]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b7c      	ldr	r3, [pc, #496]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a7b      	ldr	r2, [pc, #492]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0xb0>
 8001d08:	4b78      	ldr	r3, [pc, #480]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a77      	ldr	r2, [pc, #476]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b75      	ldr	r3, [pc, #468]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a74      	ldr	r2, [pc, #464]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d013      	beq.n	8001d50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff fb3e 	bl	80013a8 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff fb3a 	bl	80013a8 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e2a6      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d42:	4b6a      	ldr	r3, [pc, #424]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0xc0>
 8001d4e:	e014      	b.n	8001d7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff fb2a 	bl	80013a8 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff fb26 	bl	80013a8 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e292      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d6a:	4b60      	ldr	r3, [pc, #384]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0xe8>
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d075      	beq.n	8001e72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d86:	4b59      	ldr	r3, [pc, #356]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d90:	4b56      	ldr	r3, [pc, #344]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	2b0c      	cmp	r3, #12
 8001d9e:	d102      	bne.n	8001da6 <HAL_RCC_OscConfig+0x136>
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d002      	beq.n	8001dac <HAL_RCC_OscConfig+0x13c>
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d11f      	bne.n	8001dec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dac:	4b4f      	ldr	r3, [pc, #316]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x154>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e265      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc4:	4b49      	ldr	r3, [pc, #292]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	061b      	lsls	r3, r3, #24
 8001dd2:	4946      	ldr	r1, [pc, #280]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001dd8:	4b45      	ldr	r3, [pc, #276]	; (8001ef0 <HAL_RCC_OscConfig+0x280>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fa97 	bl	8001310 <HAL_InitTick>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d043      	beq.n	8001e70 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e251      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d023      	beq.n	8001e3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df4:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a3c      	ldr	r2, [pc, #240]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff fad2 	bl	80013a8 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e08:	f7ff face 	bl	80013a8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e23a      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e1a:	4b34      	ldr	r3, [pc, #208]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e26:	4b31      	ldr	r3, [pc, #196]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	061b      	lsls	r3, r3, #24
 8001e34:	492d      	ldr	r1, [pc, #180]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	604b      	str	r3, [r1, #4]
 8001e3a:	e01a      	b.n	8001e72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a2a      	ldr	r2, [pc, #168]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001e42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7ff faae 	bl	80013a8 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e50:	f7ff faaa 	bl	80013a8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e216      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e62:	4b22      	ldr	r3, [pc, #136]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x1e0>
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d041      	beq.n	8001f02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d01c      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e86:	4b19      	ldr	r3, [pc, #100]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8c:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e96:	f7ff fa87 	bl	80013a8 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9e:	f7ff fa83 	bl	80013a8 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e1ef      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0ef      	beq.n	8001e9e <HAL_RCC_OscConfig+0x22e>
 8001ebe:	e020      	b.n	8001f02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_RCC_OscConfig+0x27c>)
 8001ec8:	f023 0301 	bic.w	r3, r3, #1
 8001ecc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7ff fa6a 	bl	80013a8 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed6:	e00d      	b.n	8001ef4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fa66 	bl	80013a8 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d906      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e1d2      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	200000a0 	.word	0x200000a0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ef4:	4b8c      	ldr	r3, [pc, #560]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1ea      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 80a6 	beq.w	800205c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f10:	2300      	movs	r3, #0
 8001f12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f14:	4b84      	ldr	r3, [pc, #528]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_OscConfig+0x2b4>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x2b6>
 8001f24:	2300      	movs	r3, #0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00d      	beq.n	8001f46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	4b7f      	ldr	r3, [pc, #508]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	4a7e      	ldr	r2, [pc, #504]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f34:	6593      	str	r3, [r2, #88]	; 0x58
 8001f36:	4b7c      	ldr	r3, [pc, #496]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f42:	2301      	movs	r3, #1
 8001f44:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f46:	4b79      	ldr	r3, [pc, #484]	; (800212c <HAL_RCC_OscConfig+0x4bc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d118      	bne.n	8001f84 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f52:	4b76      	ldr	r3, [pc, #472]	; (800212c <HAL_RCC_OscConfig+0x4bc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a75      	ldr	r2, [pc, #468]	; (800212c <HAL_RCC_OscConfig+0x4bc>)
 8001f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fa23 	bl	80013a8 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f66:	f7ff fa1f 	bl	80013a8 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e18b      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f78:	4b6c      	ldr	r3, [pc, #432]	; (800212c <HAL_RCC_OscConfig+0x4bc>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d108      	bne.n	8001f9e <HAL_RCC_OscConfig+0x32e>
 8001f8c:	4b66      	ldr	r3, [pc, #408]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f92:	4a65      	ldr	r2, [pc, #404]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f9c:	e024      	b.n	8001fe8 <HAL_RCC_OscConfig+0x378>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d110      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x358>
 8001fa6:	4b60      	ldr	r3, [pc, #384]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	4a5e      	ldr	r2, [pc, #376]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb6:	4b5c      	ldr	r3, [pc, #368]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	4a5a      	ldr	r2, [pc, #360]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc6:	e00f      	b.n	8001fe8 <HAL_RCC_OscConfig+0x378>
 8001fc8:	4b57      	ldr	r3, [pc, #348]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	4a56      	ldr	r2, [pc, #344]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd8:	4b53      	ldr	r3, [pc, #332]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fde:	4a52      	ldr	r2, [pc, #328]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8001fe0:	f023 0304 	bic.w	r3, r3, #4
 8001fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d016      	beq.n	800201e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7ff f9da 	bl	80013a8 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff6:	e00a      	b.n	800200e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff8:	f7ff f9d6 	bl	80013a8 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e140      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200e:	4b46      	ldr	r3, [pc, #280]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0ed      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x388>
 800201c:	e015      	b.n	800204a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201e:	f7ff f9c3 	bl	80013a8 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7ff f9bf 	bl	80013a8 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e129      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800203c:	4b3a      	ldr	r3, [pc, #232]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1ed      	bne.n	8002026 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800204a:	7ffb      	ldrb	r3, [r7, #31]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d105      	bne.n	800205c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002050:	4b35      	ldr	r3, [pc, #212]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	4a34      	ldr	r2, [pc, #208]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8002056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800205a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d03c      	beq.n	80020e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01c      	beq.n	80020aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002070:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8002072:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002076:	4a2c      	ldr	r2, [pc, #176]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002080:	f7ff f992 	bl	80013a8 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002088:	f7ff f98e 	bl	80013a8 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e0fa      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800209a:	4b23      	ldr	r3, [pc, #140]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 800209c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0ef      	beq.n	8002088 <HAL_RCC_OscConfig+0x418>
 80020a8:	e01b      	b.n	80020e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020aa:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 80020ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020b0:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 80020b2:	f023 0301 	bic.w	r3, r3, #1
 80020b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ba:	f7ff f975 	bl	80013a8 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020c2:	f7ff f971 	bl	80013a8 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e0dd      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 80020d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1ef      	bne.n	80020c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80d1 	beq.w	800228e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b0c      	cmp	r3, #12
 80020f6:	f000 808b 	beq.w	8002210 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d15e      	bne.n	80021c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a08      	ldr	r2, [pc, #32]	; (8002128 <HAL_RCC_OscConfig+0x4b8>)
 8002108:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800210c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210e:	f7ff f94b 	bl	80013a8 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002114:	e00c      	b.n	8002130 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002116:	f7ff f947 	bl	80013a8 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d905      	bls.n	8002130 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e0b3      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
 8002128:	40021000 	.word	0x40021000
 800212c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002130:	4b59      	ldr	r3, [pc, #356]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1ec      	bne.n	8002116 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800213c:	4b56      	ldr	r3, [pc, #344]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	4b56      	ldr	r3, [pc, #344]	; (800229c <HAL_RCC_OscConfig+0x62c>)
 8002142:	4013      	ands	r3, r2
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6a11      	ldr	r1, [r2, #32]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800214c:	3a01      	subs	r2, #1
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	4311      	orrs	r1, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002156:	0212      	lsls	r2, r2, #8
 8002158:	4311      	orrs	r1, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800215e:	0852      	lsrs	r2, r2, #1
 8002160:	3a01      	subs	r2, #1
 8002162:	0552      	lsls	r2, r2, #21
 8002164:	4311      	orrs	r1, r2
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800216a:	0852      	lsrs	r2, r2, #1
 800216c:	3a01      	subs	r2, #1
 800216e:	0652      	lsls	r2, r2, #25
 8002170:	4311      	orrs	r1, r2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002176:	06d2      	lsls	r2, r2, #27
 8002178:	430a      	orrs	r2, r1
 800217a:	4947      	ldr	r1, [pc, #284]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 800217c:	4313      	orrs	r3, r2
 800217e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002180:	4b45      	ldr	r3, [pc, #276]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a44      	ldr	r2, [pc, #272]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 8002186:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800218c:	4b42      	ldr	r3, [pc, #264]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a41      	ldr	r2, [pc, #260]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 8002192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002196:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7ff f906 	bl	80013a8 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a0:	f7ff f902 	bl	80013a8 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e06e      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b2:	4b39      	ldr	r3, [pc, #228]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x530>
 80021be:	e066      	b.n	800228e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c0:	4b35      	ldr	r3, [pc, #212]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a34      	ldr	r2, [pc, #208]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 80021c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021cc:	4b32      	ldr	r3, [pc, #200]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a31      	ldr	r2, [pc, #196]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 80021d2:	f023 0303 	bic.w	r3, r3, #3
 80021d6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80021d8:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4a2e      	ldr	r2, [pc, #184]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 80021de:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7ff f8de 	bl	80013a8 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f0:	f7ff f8da 	bl	80013a8 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e046      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002202:	4b25      	ldr	r3, [pc, #148]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x580>
 800220e:	e03e      	b.n	800228e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e039      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800221c:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <HAL_RCC_OscConfig+0x628>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f003 0203 	and.w	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	429a      	cmp	r2, r3
 800222e:	d12c      	bne.n	800228a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	3b01      	subs	r3, #1
 800223c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d123      	bne.n	800228a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800224e:	429a      	cmp	r2, r3
 8002250:	d11b      	bne.n	800228a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800225e:	429a      	cmp	r2, r3
 8002260:	d113      	bne.n	800228a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	085b      	lsrs	r3, r3, #1
 800226e:	3b01      	subs	r3, #1
 8002270:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002272:	429a      	cmp	r2, r3
 8002274:	d109      	bne.n	800228a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002280:	085b      	lsrs	r3, r3, #1
 8002282:	3b01      	subs	r3, #1
 8002284:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3720      	adds	r7, #32
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000
 800229c:	019f800c 	.word	0x019f800c

080022a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e11e      	b.n	80024f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b8:	4b91      	ldr	r3, [pc, #580]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d910      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b8e      	ldr	r3, [pc, #568]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 020f 	bic.w	r2, r3, #15
 80022ce:	498c      	ldr	r1, [pc, #560]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b8a      	ldr	r3, [pc, #552]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e106      	b.n	80024f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d073      	beq.n	80023dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d129      	bne.n	8002350 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fc:	4b81      	ldr	r3, [pc, #516]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0f4      	b.n	80024f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800230c:	f000 f99e 	bl	800264c <RCC_GetSysClockFreqFromPLLSource>
 8002310:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4a7c      	ldr	r2, [pc, #496]	; (8002508 <HAL_RCC_ClockConfig+0x268>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d93f      	bls.n	800239a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800231a:	4b7a      	ldr	r3, [pc, #488]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800232e:	2b00      	cmp	r3, #0
 8002330:	d033      	beq.n	800239a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002336:	2b00      	cmp	r3, #0
 8002338:	d12f      	bne.n	800239a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800233a:	4b72      	ldr	r3, [pc, #456]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002342:	4a70      	ldr	r2, [pc, #448]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 8002344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002348:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e024      	b.n	800239a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d107      	bne.n	8002368 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002358:	4b6a      	ldr	r3, [pc, #424]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0c6      	b.n	80024f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002368:	4b66      	ldr	r3, [pc, #408]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0be      	b.n	80024f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002378:	f000 f8ce 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 800237c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4a61      	ldr	r2, [pc, #388]	; (8002508 <HAL_RCC_ClockConfig+0x268>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d909      	bls.n	800239a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002386:	4b5f      	ldr	r3, [pc, #380]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800238e:	4a5d      	ldr	r2, [pc, #372]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 8002390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002394:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800239a:	4b5a      	ldr	r3, [pc, #360]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f023 0203 	bic.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4957      	ldr	r1, [pc, #348]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ac:	f7fe fffc 	bl	80013a8 <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b4:	f7fe fff8 	bl	80013a8 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e095      	b.n	80024f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	4b4e      	ldr	r3, [pc, #312]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 020c 	and.w	r2, r3, #12
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	429a      	cmp	r2, r3
 80023da:	d1eb      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d023      	beq.n	8002430 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f4:	4b43      	ldr	r3, [pc, #268]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a42      	ldr	r2, [pc, #264]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 80023fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800240c:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002414:	4a3b      	ldr	r2, [pc, #236]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 8002416:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800241a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241c:	4b39      	ldr	r3, [pc, #228]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	4936      	ldr	r1, [pc, #216]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
 800242e:	e008      	b.n	8002442 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2b80      	cmp	r3, #128	; 0x80
 8002434:	d105      	bne.n	8002442 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002436:	4b33      	ldr	r3, [pc, #204]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	4a32      	ldr	r2, [pc, #200]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800243c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002440:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002442:	4b2f      	ldr	r3, [pc, #188]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d21d      	bcs.n	800248c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002450:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f023 020f 	bic.w	r2, r3, #15
 8002458:	4929      	ldr	r1, [pc, #164]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002460:	f7fe ffa2 	bl	80013a8 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7fe ff9e 	bl	80013a8 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e03b      	b.n	80024f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d1ed      	bne.n	8002468 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002498:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4917      	ldr	r1, [pc, #92]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024b6:	4b13      	ldr	r3, [pc, #76]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	490f      	ldr	r1, [pc, #60]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024ca:	f000 f825 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 80024ce:	4602      	mov	r2, r0
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <HAL_RCC_ClockConfig+0x264>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	490c      	ldr	r1, [pc, #48]	; (800250c <HAL_RCC_ClockConfig+0x26c>)
 80024dc:	5ccb      	ldrb	r3, [r1, r3]
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	fa22 f303 	lsr.w	r3, r2, r3
 80024e6:	4a0a      	ldr	r2, [pc, #40]	; (8002510 <HAL_RCC_ClockConfig+0x270>)
 80024e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_RCC_ClockConfig+0x274>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe ff0e 	bl	8001310 <HAL_InitTick>
 80024f4:	4603      	mov	r3, r0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40022000 	.word	0x40022000
 8002504:	40021000 	.word	0x40021000
 8002508:	04c4b400 	.word	0x04c4b400
 800250c:	08007ecc 	.word	0x08007ecc
 8002510:	2000009c 	.word	0x2000009c
 8002514:	200000a0 	.word	0x200000a0

08002518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800251e:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b04      	cmp	r3, #4
 8002528:	d102      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800252a:	4b2a      	ldr	r3, [pc, #168]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	e047      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b08      	cmp	r3, #8
 800253a:	d102      	bne.n	8002542 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800253c:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	e03e      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002542:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b0c      	cmp	r3, #12
 800254c:	d136      	bne.n	80025bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800254e:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002558:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	3301      	adds	r3, #1
 8002564:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d10c      	bne.n	8002586 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800256c:	4a1a      	ldr	r2, [pc, #104]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	fbb2 f3f3 	udiv	r3, r2, r3
 8002574:	4a16      	ldr	r2, [pc, #88]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002576:	68d2      	ldr	r2, [r2, #12]
 8002578:	0a12      	lsrs	r2, r2, #8
 800257a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	617b      	str	r3, [r7, #20]
      break;
 8002584:	e00c      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002586:	4a13      	ldr	r2, [pc, #76]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	fbb2 f3f3 	udiv	r3, r2, r3
 800258e:	4a10      	ldr	r2, [pc, #64]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002590:	68d2      	ldr	r2, [r2, #12]
 8002592:	0a12      	lsrs	r2, r2, #8
 8002594:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002598:	fb02 f303 	mul.w	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]
      break;
 800259e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0e5b      	lsrs	r3, r3, #25
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	3301      	adds	r3, #1
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	e001      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025c0:	693b      	ldr	r3, [r7, #16]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	00f42400 	.word	0x00f42400
 80025d8:	016e3600 	.word	0x016e3600

080025dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	2000009c 	.word	0x2000009c

080025f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025f8:	f7ff fff0 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4904      	ldr	r1, [pc, #16]	; (800261c <HAL_RCC_GetPCLK1Freq+0x28>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000
 800261c:	08007edc 	.word	0x08007edc

08002620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002624:	f7ff ffda 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_RCC_GetPCLK2Freq+0x24>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	0adb      	lsrs	r3, r3, #11
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4904      	ldr	r1, [pc, #16]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002636:	5ccb      	ldrb	r3, [r1, r3]
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	08007edc 	.word	0x08007edc

0800264c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002652:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	3301      	adds	r3, #1
 8002668:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b03      	cmp	r3, #3
 800266e:	d10c      	bne.n	800268a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002670:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	fbb2 f3f3 	udiv	r3, r2, r3
 8002678:	4a14      	ldr	r2, [pc, #80]	; (80026cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800267a:	68d2      	ldr	r2, [r2, #12]
 800267c:	0a12      	lsrs	r2, r2, #8
 800267e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	617b      	str	r3, [r7, #20]
    break;
 8002688:	e00c      	b.n	80026a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	4a0e      	ldr	r2, [pc, #56]	; (80026cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002694:	68d2      	ldr	r2, [r2, #12]
 8002696:	0a12      	lsrs	r2, r2, #8
 8002698:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800269c:	fb02 f303 	mul.w	r3, r2, r3
 80026a0:	617b      	str	r3, [r7, #20]
    break;
 80026a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026a4:	4b09      	ldr	r3, [pc, #36]	; (80026cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	0e5b      	lsrs	r3, r3, #25
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	3301      	adds	r3, #1
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80026be:	687b      	ldr	r3, [r7, #4]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	371c      	adds	r7, #28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	40021000 	.word	0x40021000
 80026d0:	016e3600 	.word	0x016e3600
 80026d4:	00f42400 	.word	0x00f42400

080026d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026e0:	2300      	movs	r3, #0
 80026e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026e4:	2300      	movs	r3, #0
 80026e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 8098 	beq.w	8002826 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f6:	2300      	movs	r3, #0
 80026f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fa:	4b43      	ldr	r3, [pc, #268]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10d      	bne.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002706:	4b40      	ldr	r3, [pc, #256]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270a:	4a3f      	ldr	r2, [pc, #252]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800270c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002710:	6593      	str	r3, [r2, #88]	; 0x58
 8002712:	4b3d      	ldr	r3, [pc, #244]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800271e:	2301      	movs	r3, #1
 8002720:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002722:	4b3a      	ldr	r3, [pc, #232]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a39      	ldr	r2, [pc, #228]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800272e:	f7fe fe3b 	bl	80013a8 <HAL_GetTick>
 8002732:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002734:	e009      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002736:	f7fe fe37 	bl	80013a8 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d902      	bls.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	74fb      	strb	r3, [r7, #19]
        break;
 8002748:	e005      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800274a:	4b30      	ldr	r3, [pc, #192]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0ef      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002756:	7cfb      	ldrb	r3, [r7, #19]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d159      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800275c:	4b2a      	ldr	r3, [pc, #168]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002766:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d01e      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	429a      	cmp	r2, r3
 8002776:	d019      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002782:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002784:	4b20      	ldr	r3, [pc, #128]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278a:	4a1f      	ldr	r2, [pc, #124]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002794:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279a:	4a1b      	ldr	r2, [pc, #108]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800279c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027a4:	4a18      	ldr	r2, [pc, #96]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d016      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7fe fdf7 	bl	80013a8 <HAL_GetTick>
 80027ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027bc:	e00b      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7fe fdf3 	bl	80013a8 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d902      	bls.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	74fb      	strb	r3, [r7, #19]
            break;
 80027d4:	e006      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d6:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0ec      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10b      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ea:	4b07      	ldr	r3, [pc, #28]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f8:	4903      	ldr	r1, [pc, #12]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002800:	e008      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002802:	7cfb      	ldrb	r3, [r7, #19]
 8002804:	74bb      	strb	r3, [r7, #18]
 8002806:	e005      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002808:	40021000 	.word	0x40021000
 800280c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002814:	7c7b      	ldrb	r3, [r7, #17]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d105      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281a:	4ba7      	ldr	r3, [pc, #668]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	4aa6      	ldr	r2, [pc, #664]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002824:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002832:	4ba1      	ldr	r3, [pc, #644]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002838:	f023 0203 	bic.w	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	499d      	ldr	r1, [pc, #628]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002854:	4b98      	ldr	r3, [pc, #608]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f023 020c 	bic.w	r2, r3, #12
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	4995      	ldr	r1, [pc, #596]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002876:	4b90      	ldr	r3, [pc, #576]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	498c      	ldr	r1, [pc, #560]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002898:	4b87      	ldr	r3, [pc, #540]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	4984      	ldr	r1, [pc, #528]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028ba:	4b7f      	ldr	r3, [pc, #508]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	497b      	ldr	r1, [pc, #492]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028dc:	4b76      	ldr	r3, [pc, #472]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	4973      	ldr	r1, [pc, #460]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028fe:	4b6e      	ldr	r3, [pc, #440]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002904:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	496a      	ldr	r1, [pc, #424]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002920:	4b65      	ldr	r3, [pc, #404]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	4962      	ldr	r1, [pc, #392]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002942:	4b5d      	ldr	r3, [pc, #372]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002948:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	4959      	ldr	r1, [pc, #356]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002964:	4b54      	ldr	r3, [pc, #336]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002966:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800296a:	f023 0203 	bic.w	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	4951      	ldr	r1, [pc, #324]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002986:	4b4c      	ldr	r3, [pc, #304]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	4948      	ldr	r1, [pc, #288]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d015      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029a8:	4b43      	ldr	r3, [pc, #268]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4940      	ldr	r1, [pc, #256]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029c6:	d105      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c8:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a3a      	ldr	r2, [pc, #232]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d015      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029e0:	4b35      	ldr	r3, [pc, #212]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ee:	4932      	ldr	r1, [pc, #200]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029fe:	d105      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a00:	4b2d      	ldr	r3, [pc, #180]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a2c      	ldr	r2, [pc, #176]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a0a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d015      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a18:	4b27      	ldr	r3, [pc, #156]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	4924      	ldr	r1, [pc, #144]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a36:	d105      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a38:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4a1e      	ldr	r2, [pc, #120]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d015      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	4916      	ldr	r1, [pc, #88]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a6e:	d105      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d019      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	4908      	ldr	r1, [pc, #32]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aa6:	d109      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a02      	ldr	r2, [pc, #8]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ab2:	60d3      	str	r3, [r2, #12]
 8002ab4:	e002      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d015      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ac8:	4b29      	ldr	r3, [pc, #164]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ace:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	4926      	ldr	r1, [pc, #152]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ae8:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a20      	ldr	r2, [pc, #128]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d015      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b00:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0e:	4918      	ldr	r1, [pc, #96]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1e:	d105      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d015      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b38:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b46:	490a      	ldr	r1, [pc, #40]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b56:	d105      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b64:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000

08002b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e049      	b.n	8002c1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fe f99c 	bl	8000ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f000 fe18 	bl	80037e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d001      	beq.n	8002c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e054      	b.n	8002ce6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a26      	ldr	r2, [pc, #152]	; (8002cf4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d022      	beq.n	8002ca4 <HAL_TIM_Base_Start_IT+0x80>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c66:	d01d      	beq.n	8002ca4 <HAL_TIM_Base_Start_IT+0x80>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a22      	ldr	r2, [pc, #136]	; (8002cf8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d018      	beq.n	8002ca4 <HAL_TIM_Base_Start_IT+0x80>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <HAL_TIM_Base_Start_IT+0xd8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d013      	beq.n	8002ca4 <HAL_TIM_Base_Start_IT+0x80>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1f      	ldr	r2, [pc, #124]	; (8002d00 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d00e      	beq.n	8002ca4 <HAL_TIM_Base_Start_IT+0x80>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1e      	ldr	r2, [pc, #120]	; (8002d04 <HAL_TIM_Base_Start_IT+0xe0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d009      	beq.n	8002ca4 <HAL_TIM_Base_Start_IT+0x80>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a1c      	ldr	r2, [pc, #112]	; (8002d08 <HAL_TIM_Base_Start_IT+0xe4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d004      	beq.n	8002ca4 <HAL_TIM_Base_Start_IT+0x80>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a1b      	ldr	r2, [pc, #108]	; (8002d0c <HAL_TIM_Base_Start_IT+0xe8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d115      	bne.n	8002cd0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_TIM_Base_Start_IT+0xec>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b06      	cmp	r3, #6
 8002cb4:	d015      	beq.n	8002ce2 <HAL_TIM_Base_Start_IT+0xbe>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbc:	d011      	beq.n	8002ce2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0201 	orr.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cce:	e008      	b.n	8002ce2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e000      	b.n	8002ce4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40012c00 	.word	0x40012c00
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	40000800 	.word	0x40000800
 8002d00:	40000c00 	.word	0x40000c00
 8002d04:	40013400 	.word	0x40013400
 8002d08:	40014000 	.word	0x40014000
 8002d0c:	40015000 	.word	0x40015000
 8002d10:	00010007 	.word	0x00010007

08002d14 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0201 	bic.w	r2, r2, #1
 8002d2a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6a1a      	ldr	r2, [r3, #32]
 8002d32:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10f      	bne.n	8002d5c <HAL_TIM_Base_Stop_IT+0x48>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6a1a      	ldr	r2, [r3, #32]
 8002d42:	f244 4344 	movw	r3, #17476	; 0x4444
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d107      	bne.n	8002d5c <HAL_TIM_Base_Stop_IT+0x48>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0201 	bic.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e049      	b.n	8002e18 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d106      	bne.n	8002d9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7fe f87d 	bl	8000e98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3304      	adds	r3, #4
 8002dae:	4619      	mov	r1, r3
 8002db0:	4610      	mov	r0, r2
 8002db2:	f000 fd19 	bl	80037e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d109      	bne.n	8002e44 <HAL_TIM_PWM_Start+0x24>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	bf14      	ite	ne
 8002e3c:	2301      	movne	r3, #1
 8002e3e:	2300      	moveq	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	e03c      	b.n	8002ebe <HAL_TIM_PWM_Start+0x9e>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d109      	bne.n	8002e5e <HAL_TIM_PWM_Start+0x3e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	bf14      	ite	ne
 8002e56:	2301      	movne	r3, #1
 8002e58:	2300      	moveq	r3, #0
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	e02f      	b.n	8002ebe <HAL_TIM_PWM_Start+0x9e>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d109      	bne.n	8002e78 <HAL_TIM_PWM_Start+0x58>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	bf14      	ite	ne
 8002e70:	2301      	movne	r3, #1
 8002e72:	2300      	moveq	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e022      	b.n	8002ebe <HAL_TIM_PWM_Start+0x9e>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2b0c      	cmp	r3, #12
 8002e7c:	d109      	bne.n	8002e92 <HAL_TIM_PWM_Start+0x72>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	bf14      	ite	ne
 8002e8a:	2301      	movne	r3, #1
 8002e8c:	2300      	moveq	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	e015      	b.n	8002ebe <HAL_TIM_PWM_Start+0x9e>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d109      	bne.n	8002eac <HAL_TIM_PWM_Start+0x8c>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	bf14      	ite	ne
 8002ea4:	2301      	movne	r3, #1
 8002ea6:	2300      	moveq	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e008      	b.n	8002ebe <HAL_TIM_PWM_Start+0x9e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	bf14      	ite	ne
 8002eb8:	2301      	movne	r3, #1
 8002eba:	2300      	moveq	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0a6      	b.n	8003014 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d104      	bne.n	8002ed6 <HAL_TIM_PWM_Start+0xb6>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ed4:	e023      	b.n	8002f1e <HAL_TIM_PWM_Start+0xfe>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d104      	bne.n	8002ee6 <HAL_TIM_PWM_Start+0xc6>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ee4:	e01b      	b.n	8002f1e <HAL_TIM_PWM_Start+0xfe>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d104      	bne.n	8002ef6 <HAL_TIM_PWM_Start+0xd6>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef4:	e013      	b.n	8002f1e <HAL_TIM_PWM_Start+0xfe>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b0c      	cmp	r3, #12
 8002efa:	d104      	bne.n	8002f06 <HAL_TIM_PWM_Start+0xe6>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2202      	movs	r2, #2
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f04:	e00b      	b.n	8002f1e <HAL_TIM_PWM_Start+0xfe>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b10      	cmp	r3, #16
 8002f0a:	d104      	bne.n	8002f16 <HAL_TIM_PWM_Start+0xf6>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f14:	e003      	b.n	8002f1e <HAL_TIM_PWM_Start+0xfe>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2201      	movs	r2, #1
 8002f24:	6839      	ldr	r1, [r7, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f001 f8cc 	bl	80040c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a3a      	ldr	r2, [pc, #232]	; (800301c <HAL_TIM_PWM_Start+0x1fc>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d018      	beq.n	8002f68 <HAL_TIM_PWM_Start+0x148>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a39      	ldr	r2, [pc, #228]	; (8003020 <HAL_TIM_PWM_Start+0x200>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d013      	beq.n	8002f68 <HAL_TIM_PWM_Start+0x148>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a37      	ldr	r2, [pc, #220]	; (8003024 <HAL_TIM_PWM_Start+0x204>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00e      	beq.n	8002f68 <HAL_TIM_PWM_Start+0x148>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a36      	ldr	r2, [pc, #216]	; (8003028 <HAL_TIM_PWM_Start+0x208>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d009      	beq.n	8002f68 <HAL_TIM_PWM_Start+0x148>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a34      	ldr	r2, [pc, #208]	; (800302c <HAL_TIM_PWM_Start+0x20c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d004      	beq.n	8002f68 <HAL_TIM_PWM_Start+0x148>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a33      	ldr	r2, [pc, #204]	; (8003030 <HAL_TIM_PWM_Start+0x210>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d101      	bne.n	8002f6c <HAL_TIM_PWM_Start+0x14c>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <HAL_TIM_PWM_Start+0x14e>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a25      	ldr	r2, [pc, #148]	; (800301c <HAL_TIM_PWM_Start+0x1fc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d022      	beq.n	8002fd2 <HAL_TIM_PWM_Start+0x1b2>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f94:	d01d      	beq.n	8002fd2 <HAL_TIM_PWM_Start+0x1b2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a26      	ldr	r2, [pc, #152]	; (8003034 <HAL_TIM_PWM_Start+0x214>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d018      	beq.n	8002fd2 <HAL_TIM_PWM_Start+0x1b2>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a24      	ldr	r2, [pc, #144]	; (8003038 <HAL_TIM_PWM_Start+0x218>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <HAL_TIM_PWM_Start+0x1b2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a23      	ldr	r2, [pc, #140]	; (800303c <HAL_TIM_PWM_Start+0x21c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00e      	beq.n	8002fd2 <HAL_TIM_PWM_Start+0x1b2>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a19      	ldr	r2, [pc, #100]	; (8003020 <HAL_TIM_PWM_Start+0x200>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d009      	beq.n	8002fd2 <HAL_TIM_PWM_Start+0x1b2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a18      	ldr	r2, [pc, #96]	; (8003024 <HAL_TIM_PWM_Start+0x204>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d004      	beq.n	8002fd2 <HAL_TIM_PWM_Start+0x1b2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a18      	ldr	r2, [pc, #96]	; (8003030 <HAL_TIM_PWM_Start+0x210>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d115      	bne.n	8002ffe <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_TIM_PWM_Start+0x220>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b06      	cmp	r3, #6
 8002fe2:	d015      	beq.n	8003010 <HAL_TIM_PWM_Start+0x1f0>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fea:	d011      	beq.n	8003010 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffc:	e008      	b.n	8003010 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0201 	orr.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	e000      	b.n	8003012 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003010:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40012c00 	.word	0x40012c00
 8003020:	40013400 	.word	0x40013400
 8003024:	40014000 	.word	0x40014000
 8003028:	40014400 	.word	0x40014400
 800302c:	40014800 	.word	0x40014800
 8003030:	40015000 	.word	0x40015000
 8003034:	40000400 	.word	0x40000400
 8003038:	40000800 	.word	0x40000800
 800303c:	40000c00 	.word	0x40000c00
 8003040:	00010007 	.word	0x00010007

08003044 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b02      	cmp	r3, #2
 8003058:	d122      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b02      	cmp	r3, #2
 8003066:	d11b      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0202 	mvn.w	r2, #2
 8003070:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fb90 	bl	80037ac <HAL_TIM_IC_CaptureCallback>
 800308c:	e005      	b.n	800309a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fb82 	bl	8003798 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fb93 	bl	80037c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d122      	bne.n	80030f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d11b      	bne.n	80030f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0204 	mvn.w	r2, #4
 80030c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2202      	movs	r2, #2
 80030ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fb66 	bl	80037ac <HAL_TIM_IC_CaptureCallback>
 80030e0:	e005      	b.n	80030ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fb58 	bl	8003798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fb69 	bl	80037c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d122      	bne.n	8003148 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b08      	cmp	r3, #8
 800310e:	d11b      	bne.n	8003148 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0208 	mvn.w	r2, #8
 8003118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2204      	movs	r2, #4
 800311e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fb3c 	bl	80037ac <HAL_TIM_IC_CaptureCallback>
 8003134:	e005      	b.n	8003142 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fb2e 	bl	8003798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fb3f 	bl	80037c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b10      	cmp	r3, #16
 8003154:	d122      	bne.n	800319c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b10      	cmp	r3, #16
 8003162:	d11b      	bne.n	800319c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0210 	mvn.w	r2, #16
 800316c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2208      	movs	r2, #8
 8003172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fb12 	bl	80037ac <HAL_TIM_IC_CaptureCallback>
 8003188:	e005      	b.n	8003196 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fb04 	bl	8003798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fb15 	bl	80037c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d10e      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d107      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0201 	mvn.w	r2, #1
 80031c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fd fdb6 	bl	8000d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d2:	2b80      	cmp	r3, #128	; 0x80
 80031d4:	d10e      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e0:	2b80      	cmp	r3, #128	; 0x80
 80031e2:	d107      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f001 f9a2 	bl	8004538 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003202:	d10e      	bne.n	8003222 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320e:	2b80      	cmp	r3, #128	; 0x80
 8003210:	d107      	bne.n	8003222 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800321a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f001 f995 	bl	800454c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322c:	2b40      	cmp	r3, #64	; 0x40
 800322e:	d10e      	bne.n	800324e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323a:	2b40      	cmp	r3, #64	; 0x40
 800323c:	d107      	bne.n	800324e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 fac3 	bl	80037d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b20      	cmp	r3, #32
 800325a:	d10e      	bne.n	800327a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	2b20      	cmp	r3, #32
 8003268:	d107      	bne.n	800327a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f06f 0220 	mvn.w	r2, #32
 8003272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f001 f955 	bl	8004524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003284:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003288:	d10f      	bne.n	80032aa <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003294:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003298:	d107      	bne.n	80032aa <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80032a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f001 f95b 	bl	8004560 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032b8:	d10f      	bne.n	80032da <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032c8:	d107      	bne.n	80032da <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80032d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f001 f94d 	bl	8004574 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e8:	d10f      	bne.n	800330a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032f8:	d107      	bne.n	800330a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f001 f93f 	bl	8004588 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003314:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003318:	d10f      	bne.n	800333a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003324:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003328:	d107      	bne.n	800333a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f001 f931 	bl	800459c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800335e:	2302      	movs	r3, #2
 8003360:	e0ff      	b.n	8003562 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b14      	cmp	r3, #20
 800336e:	f200 80f0 	bhi.w	8003552 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	080033cd 	.word	0x080033cd
 800337c:	08003553 	.word	0x08003553
 8003380:	08003553 	.word	0x08003553
 8003384:	08003553 	.word	0x08003553
 8003388:	0800340d 	.word	0x0800340d
 800338c:	08003553 	.word	0x08003553
 8003390:	08003553 	.word	0x08003553
 8003394:	08003553 	.word	0x08003553
 8003398:	0800344f 	.word	0x0800344f
 800339c:	08003553 	.word	0x08003553
 80033a0:	08003553 	.word	0x08003553
 80033a4:	08003553 	.word	0x08003553
 80033a8:	0800348f 	.word	0x0800348f
 80033ac:	08003553 	.word	0x08003553
 80033b0:	08003553 	.word	0x08003553
 80033b4:	08003553 	.word	0x08003553
 80033b8:	080034d1 	.word	0x080034d1
 80033bc:	08003553 	.word	0x08003553
 80033c0:	08003553 	.word	0x08003553
 80033c4:	08003553 	.word	0x08003553
 80033c8:	08003511 	.word	0x08003511
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fab0 	bl	8003938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699a      	ldr	r2, [r3, #24]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0208 	orr.w	r2, r2, #8
 80033e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0204 	bic.w	r2, r2, #4
 80033f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6999      	ldr	r1, [r3, #24]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	619a      	str	r2, [r3, #24]
      break;
 800340a:	e0a5      	b.n	8003558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fb2a 	bl	8003a6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6999      	ldr	r1, [r3, #24]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	021a      	lsls	r2, r3, #8
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	619a      	str	r2, [r3, #24]
      break;
 800344c:	e084      	b.n	8003558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fb9d 	bl	8003b94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69da      	ldr	r2, [r3, #28]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0208 	orr.w	r2, r2, #8
 8003468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0204 	bic.w	r2, r2, #4
 8003478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69d9      	ldr	r1, [r3, #28]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	61da      	str	r2, [r3, #28]
      break;
 800348c:	e064      	b.n	8003558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fc0f 	bl	8003cb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69da      	ldr	r2, [r3, #28]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69d9      	ldr	r1, [r3, #28]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	021a      	lsls	r2, r3, #8
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	61da      	str	r2, [r3, #28]
      break;
 80034ce:	e043      	b.n	8003558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fc82 	bl	8003de0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0208 	orr.w	r2, r2, #8
 80034ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0204 	bic.w	r2, r2, #4
 80034fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800350e:	e023      	b.n	8003558 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	4618      	mov	r0, r3
 8003518:	f000 fccc 	bl	8003eb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800352a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	021a      	lsls	r2, r3, #8
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003550:	e002      	b.n	8003558 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	75fb      	strb	r3, [r7, #23]
      break;
 8003556:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003560:	7dfb      	ldrb	r3, [r7, #23]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop

0800356c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_TIM_ConfigClockSource+0x1c>
 8003584:	2302      	movs	r3, #2
 8003586:	e0f6      	b.n	8003776 <HAL_TIM_ConfigClockSource+0x20a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80035a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a6f      	ldr	r2, [pc, #444]	; (8003780 <HAL_TIM_ConfigClockSource+0x214>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	f000 80c1 	beq.w	800374a <HAL_TIM_ConfigClockSource+0x1de>
 80035c8:	4a6d      	ldr	r2, [pc, #436]	; (8003780 <HAL_TIM_ConfigClockSource+0x214>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	f200 80c6 	bhi.w	800375c <HAL_TIM_ConfigClockSource+0x1f0>
 80035d0:	4a6c      	ldr	r2, [pc, #432]	; (8003784 <HAL_TIM_ConfigClockSource+0x218>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	f000 80b9 	beq.w	800374a <HAL_TIM_ConfigClockSource+0x1de>
 80035d8:	4a6a      	ldr	r2, [pc, #424]	; (8003784 <HAL_TIM_ConfigClockSource+0x218>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	f200 80be 	bhi.w	800375c <HAL_TIM_ConfigClockSource+0x1f0>
 80035e0:	4a69      	ldr	r2, [pc, #420]	; (8003788 <HAL_TIM_ConfigClockSource+0x21c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	f000 80b1 	beq.w	800374a <HAL_TIM_ConfigClockSource+0x1de>
 80035e8:	4a67      	ldr	r2, [pc, #412]	; (8003788 <HAL_TIM_ConfigClockSource+0x21c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	f200 80b6 	bhi.w	800375c <HAL_TIM_ConfigClockSource+0x1f0>
 80035f0:	4a66      	ldr	r2, [pc, #408]	; (800378c <HAL_TIM_ConfigClockSource+0x220>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	f000 80a9 	beq.w	800374a <HAL_TIM_ConfigClockSource+0x1de>
 80035f8:	4a64      	ldr	r2, [pc, #400]	; (800378c <HAL_TIM_ConfigClockSource+0x220>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	f200 80ae 	bhi.w	800375c <HAL_TIM_ConfigClockSource+0x1f0>
 8003600:	4a63      	ldr	r2, [pc, #396]	; (8003790 <HAL_TIM_ConfigClockSource+0x224>)
 8003602:	4293      	cmp	r3, r2
 8003604:	f000 80a1 	beq.w	800374a <HAL_TIM_ConfigClockSource+0x1de>
 8003608:	4a61      	ldr	r2, [pc, #388]	; (8003790 <HAL_TIM_ConfigClockSource+0x224>)
 800360a:	4293      	cmp	r3, r2
 800360c:	f200 80a6 	bhi.w	800375c <HAL_TIM_ConfigClockSource+0x1f0>
 8003610:	4a60      	ldr	r2, [pc, #384]	; (8003794 <HAL_TIM_ConfigClockSource+0x228>)
 8003612:	4293      	cmp	r3, r2
 8003614:	f000 8099 	beq.w	800374a <HAL_TIM_ConfigClockSource+0x1de>
 8003618:	4a5e      	ldr	r2, [pc, #376]	; (8003794 <HAL_TIM_ConfigClockSource+0x228>)
 800361a:	4293      	cmp	r3, r2
 800361c:	f200 809e 	bhi.w	800375c <HAL_TIM_ConfigClockSource+0x1f0>
 8003620:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003624:	f000 8091 	beq.w	800374a <HAL_TIM_ConfigClockSource+0x1de>
 8003628:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800362c:	f200 8096 	bhi.w	800375c <HAL_TIM_ConfigClockSource+0x1f0>
 8003630:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003634:	f000 8089 	beq.w	800374a <HAL_TIM_ConfigClockSource+0x1de>
 8003638:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800363c:	f200 808e 	bhi.w	800375c <HAL_TIM_ConfigClockSource+0x1f0>
 8003640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003644:	d03e      	beq.n	80036c4 <HAL_TIM_ConfigClockSource+0x158>
 8003646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800364a:	f200 8087 	bhi.w	800375c <HAL_TIM_ConfigClockSource+0x1f0>
 800364e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003652:	f000 8086 	beq.w	8003762 <HAL_TIM_ConfigClockSource+0x1f6>
 8003656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365a:	d87f      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x1f0>
 800365c:	2b70      	cmp	r3, #112	; 0x70
 800365e:	d01a      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x12a>
 8003660:	2b70      	cmp	r3, #112	; 0x70
 8003662:	d87b      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x1f0>
 8003664:	2b60      	cmp	r3, #96	; 0x60
 8003666:	d050      	beq.n	800370a <HAL_TIM_ConfigClockSource+0x19e>
 8003668:	2b60      	cmp	r3, #96	; 0x60
 800366a:	d877      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x1f0>
 800366c:	2b50      	cmp	r3, #80	; 0x50
 800366e:	d03c      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0x17e>
 8003670:	2b50      	cmp	r3, #80	; 0x50
 8003672:	d873      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x1f0>
 8003674:	2b40      	cmp	r3, #64	; 0x40
 8003676:	d058      	beq.n	800372a <HAL_TIM_ConfigClockSource+0x1be>
 8003678:	2b40      	cmp	r3, #64	; 0x40
 800367a:	d86f      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x1f0>
 800367c:	2b30      	cmp	r3, #48	; 0x30
 800367e:	d064      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x1de>
 8003680:	2b30      	cmp	r3, #48	; 0x30
 8003682:	d86b      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x1f0>
 8003684:	2b20      	cmp	r3, #32
 8003686:	d060      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x1de>
 8003688:	2b20      	cmp	r3, #32
 800368a:	d867      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x1f0>
 800368c:	2b00      	cmp	r3, #0
 800368e:	d05c      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x1de>
 8003690:	2b10      	cmp	r3, #16
 8003692:	d05a      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x1de>
 8003694:	e062      	b.n	800375c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6899      	ldr	r1, [r3, #8]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f000 fced 	bl	8004084 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	609a      	str	r2, [r3, #8]
      break;
 80036c2:	e04f      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	6899      	ldr	r1, [r3, #8]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f000 fcd6 	bl	8004084 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036e6:	609a      	str	r2, [r3, #8]
      break;
 80036e8:	e03c      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	6859      	ldr	r1, [r3, #4]
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	461a      	mov	r2, r3
 80036f8:	f000 fc48 	bl	8003f8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2150      	movs	r1, #80	; 0x50
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fca1 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003708:	e02c      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6859      	ldr	r1, [r3, #4]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	461a      	mov	r2, r3
 8003718:	f000 fc67 	bl	8003fea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2160      	movs	r1, #96	; 0x60
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fc91 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003728:	e01c      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	6859      	ldr	r1, [r3, #4]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	461a      	mov	r2, r3
 8003738:	f000 fc28 	bl	8003f8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2140      	movs	r1, #64	; 0x40
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fc81 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003748:	e00c      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4619      	mov	r1, r3
 8003754:	4610      	mov	r0, r2
 8003756:	f000 fc78 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 800375a:	e003      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      break;
 8003760:	e000      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003774:	7bfb      	ldrb	r3, [r7, #15]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	00100070 	.word	0x00100070
 8003784:	00100060 	.word	0x00100060
 8003788:	00100050 	.word	0x00100050
 800378c:	00100040 	.word	0x00100040
 8003790:	00100030 	.word	0x00100030
 8003794:	00100020 	.word	0x00100020

08003798 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a46      	ldr	r2, [pc, #280]	; (8003914 <TIM_Base_SetConfig+0x12c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d017      	beq.n	8003830 <TIM_Base_SetConfig+0x48>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003806:	d013      	beq.n	8003830 <TIM_Base_SetConfig+0x48>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a43      	ldr	r2, [pc, #268]	; (8003918 <TIM_Base_SetConfig+0x130>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d00f      	beq.n	8003830 <TIM_Base_SetConfig+0x48>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a42      	ldr	r2, [pc, #264]	; (800391c <TIM_Base_SetConfig+0x134>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00b      	beq.n	8003830 <TIM_Base_SetConfig+0x48>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a41      	ldr	r2, [pc, #260]	; (8003920 <TIM_Base_SetConfig+0x138>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d007      	beq.n	8003830 <TIM_Base_SetConfig+0x48>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a40      	ldr	r2, [pc, #256]	; (8003924 <TIM_Base_SetConfig+0x13c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d003      	beq.n	8003830 <TIM_Base_SetConfig+0x48>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a3f      	ldr	r2, [pc, #252]	; (8003928 <TIM_Base_SetConfig+0x140>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d108      	bne.n	8003842 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a33      	ldr	r2, [pc, #204]	; (8003914 <TIM_Base_SetConfig+0x12c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d023      	beq.n	8003892 <TIM_Base_SetConfig+0xaa>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003850:	d01f      	beq.n	8003892 <TIM_Base_SetConfig+0xaa>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a30      	ldr	r2, [pc, #192]	; (8003918 <TIM_Base_SetConfig+0x130>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01b      	beq.n	8003892 <TIM_Base_SetConfig+0xaa>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a2f      	ldr	r2, [pc, #188]	; (800391c <TIM_Base_SetConfig+0x134>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d017      	beq.n	8003892 <TIM_Base_SetConfig+0xaa>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a2e      	ldr	r2, [pc, #184]	; (8003920 <TIM_Base_SetConfig+0x138>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <TIM_Base_SetConfig+0xaa>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a2d      	ldr	r2, [pc, #180]	; (8003924 <TIM_Base_SetConfig+0x13c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00f      	beq.n	8003892 <TIM_Base_SetConfig+0xaa>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a2d      	ldr	r2, [pc, #180]	; (800392c <TIM_Base_SetConfig+0x144>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00b      	beq.n	8003892 <TIM_Base_SetConfig+0xaa>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a2c      	ldr	r2, [pc, #176]	; (8003930 <TIM_Base_SetConfig+0x148>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d007      	beq.n	8003892 <TIM_Base_SetConfig+0xaa>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a2b      	ldr	r2, [pc, #172]	; (8003934 <TIM_Base_SetConfig+0x14c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d003      	beq.n	8003892 <TIM_Base_SetConfig+0xaa>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a26      	ldr	r2, [pc, #152]	; (8003928 <TIM_Base_SetConfig+0x140>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d108      	bne.n	80038a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a12      	ldr	r2, [pc, #72]	; (8003914 <TIM_Base_SetConfig+0x12c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d013      	beq.n	80038f8 <TIM_Base_SetConfig+0x110>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a14      	ldr	r2, [pc, #80]	; (8003924 <TIM_Base_SetConfig+0x13c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00f      	beq.n	80038f8 <TIM_Base_SetConfig+0x110>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a14      	ldr	r2, [pc, #80]	; (800392c <TIM_Base_SetConfig+0x144>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00b      	beq.n	80038f8 <TIM_Base_SetConfig+0x110>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a13      	ldr	r2, [pc, #76]	; (8003930 <TIM_Base_SetConfig+0x148>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d007      	beq.n	80038f8 <TIM_Base_SetConfig+0x110>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a12      	ldr	r2, [pc, #72]	; (8003934 <TIM_Base_SetConfig+0x14c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d003      	beq.n	80038f8 <TIM_Base_SetConfig+0x110>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a0d      	ldr	r2, [pc, #52]	; (8003928 <TIM_Base_SetConfig+0x140>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d103      	bne.n	8003900 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	615a      	str	r2, [r3, #20]
}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40012c00 	.word	0x40012c00
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800
 8003920:	40000c00 	.word	0x40000c00
 8003924:	40013400 	.word	0x40013400
 8003928:	40015000 	.word	0x40015000
 800392c:	40014000 	.word	0x40014000
 8003930:	40014400 	.word	0x40014400
 8003934:	40014800 	.word	0x40014800

08003938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	f023 0201 	bic.w	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0303 	bic.w	r3, r3, #3
 8003972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f023 0302 	bic.w	r3, r3, #2
 8003984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a30      	ldr	r2, [pc, #192]	; (8003a54 <TIM_OC1_SetConfig+0x11c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d013      	beq.n	80039c0 <TIM_OC1_SetConfig+0x88>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a2f      	ldr	r2, [pc, #188]	; (8003a58 <TIM_OC1_SetConfig+0x120>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00f      	beq.n	80039c0 <TIM_OC1_SetConfig+0x88>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a2e      	ldr	r2, [pc, #184]	; (8003a5c <TIM_OC1_SetConfig+0x124>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00b      	beq.n	80039c0 <TIM_OC1_SetConfig+0x88>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a2d      	ldr	r2, [pc, #180]	; (8003a60 <TIM_OC1_SetConfig+0x128>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d007      	beq.n	80039c0 <TIM_OC1_SetConfig+0x88>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a2c      	ldr	r2, [pc, #176]	; (8003a64 <TIM_OC1_SetConfig+0x12c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d003      	beq.n	80039c0 <TIM_OC1_SetConfig+0x88>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a2b      	ldr	r2, [pc, #172]	; (8003a68 <TIM_OC1_SetConfig+0x130>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d10c      	bne.n	80039da <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f023 0308 	bic.w	r3, r3, #8
 80039c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f023 0304 	bic.w	r3, r3, #4
 80039d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a1d      	ldr	r2, [pc, #116]	; (8003a54 <TIM_OC1_SetConfig+0x11c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d013      	beq.n	8003a0a <TIM_OC1_SetConfig+0xd2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a1c      	ldr	r2, [pc, #112]	; (8003a58 <TIM_OC1_SetConfig+0x120>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00f      	beq.n	8003a0a <TIM_OC1_SetConfig+0xd2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a1b      	ldr	r2, [pc, #108]	; (8003a5c <TIM_OC1_SetConfig+0x124>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00b      	beq.n	8003a0a <TIM_OC1_SetConfig+0xd2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a1a      	ldr	r2, [pc, #104]	; (8003a60 <TIM_OC1_SetConfig+0x128>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d007      	beq.n	8003a0a <TIM_OC1_SetConfig+0xd2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a19      	ldr	r2, [pc, #100]	; (8003a64 <TIM_OC1_SetConfig+0x12c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d003      	beq.n	8003a0a <TIM_OC1_SetConfig+0xd2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a18      	ldr	r2, [pc, #96]	; (8003a68 <TIM_OC1_SetConfig+0x130>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d111      	bne.n	8003a2e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	621a      	str	r2, [r3, #32]
}
 8003a48:	bf00      	nop
 8003a4a:	371c      	adds	r7, #28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40013400 	.word	0x40013400
 8003a5c:	40014000 	.word	0x40014000
 8003a60:	40014400 	.word	0x40014400
 8003a64:	40014800 	.word	0x40014800
 8003a68:	40015000 	.word	0x40015000

08003a6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f023 0210 	bic.w	r2, r3, #16
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f023 0320 	bic.w	r3, r3, #32
 8003aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a2c      	ldr	r2, [pc, #176]	; (8003b7c <TIM_OC2_SetConfig+0x110>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d007      	beq.n	8003ae0 <TIM_OC2_SetConfig+0x74>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a2b      	ldr	r2, [pc, #172]	; (8003b80 <TIM_OC2_SetConfig+0x114>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d003      	beq.n	8003ae0 <TIM_OC2_SetConfig+0x74>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a2a      	ldr	r2, [pc, #168]	; (8003b84 <TIM_OC2_SetConfig+0x118>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d10d      	bne.n	8003afc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003afa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a1f      	ldr	r2, [pc, #124]	; (8003b7c <TIM_OC2_SetConfig+0x110>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d013      	beq.n	8003b2c <TIM_OC2_SetConfig+0xc0>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a1e      	ldr	r2, [pc, #120]	; (8003b80 <TIM_OC2_SetConfig+0x114>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d00f      	beq.n	8003b2c <TIM_OC2_SetConfig+0xc0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a1e      	ldr	r2, [pc, #120]	; (8003b88 <TIM_OC2_SetConfig+0x11c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00b      	beq.n	8003b2c <TIM_OC2_SetConfig+0xc0>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <TIM_OC2_SetConfig+0x120>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d007      	beq.n	8003b2c <TIM_OC2_SetConfig+0xc0>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a1c      	ldr	r2, [pc, #112]	; (8003b90 <TIM_OC2_SetConfig+0x124>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d003      	beq.n	8003b2c <TIM_OC2_SetConfig+0xc0>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a17      	ldr	r2, [pc, #92]	; (8003b84 <TIM_OC2_SetConfig+0x118>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d113      	bne.n	8003b54 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	621a      	str	r2, [r3, #32]
}
 8003b6e:	bf00      	nop
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40013400 	.word	0x40013400
 8003b84:	40015000 	.word	0x40015000
 8003b88:	40014000 	.word	0x40014000
 8003b8c:	40014400 	.word	0x40014400
 8003b90:	40014800 	.word	0x40014800

08003b94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0303 	bic.w	r3, r3, #3
 8003bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a2b      	ldr	r2, [pc, #172]	; (8003ca0 <TIM_OC3_SetConfig+0x10c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d007      	beq.n	8003c06 <TIM_OC3_SetConfig+0x72>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a2a      	ldr	r2, [pc, #168]	; (8003ca4 <TIM_OC3_SetConfig+0x110>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d003      	beq.n	8003c06 <TIM_OC3_SetConfig+0x72>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a29      	ldr	r2, [pc, #164]	; (8003ca8 <TIM_OC3_SetConfig+0x114>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d10d      	bne.n	8003c22 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a1e      	ldr	r2, [pc, #120]	; (8003ca0 <TIM_OC3_SetConfig+0x10c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <TIM_OC3_SetConfig+0xbe>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ca4 <TIM_OC3_SetConfig+0x110>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00f      	beq.n	8003c52 <TIM_OC3_SetConfig+0xbe>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a1d      	ldr	r2, [pc, #116]	; (8003cac <TIM_OC3_SetConfig+0x118>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00b      	beq.n	8003c52 <TIM_OC3_SetConfig+0xbe>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a1c      	ldr	r2, [pc, #112]	; (8003cb0 <TIM_OC3_SetConfig+0x11c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d007      	beq.n	8003c52 <TIM_OC3_SetConfig+0xbe>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a1b      	ldr	r2, [pc, #108]	; (8003cb4 <TIM_OC3_SetConfig+0x120>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d003      	beq.n	8003c52 <TIM_OC3_SetConfig+0xbe>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a16      	ldr	r2, [pc, #88]	; (8003ca8 <TIM_OC3_SetConfig+0x114>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d113      	bne.n	8003c7a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	621a      	str	r2, [r3, #32]
}
 8003c94:	bf00      	nop
 8003c96:	371c      	adds	r7, #28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	40012c00 	.word	0x40012c00
 8003ca4:	40013400 	.word	0x40013400
 8003ca8:	40015000 	.word	0x40015000
 8003cac:	40014000 	.word	0x40014000
 8003cb0:	40014400 	.word	0x40014400
 8003cb4:	40014800 	.word	0x40014800

08003cb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	031b      	lsls	r3, r3, #12
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a2c      	ldr	r2, [pc, #176]	; (8003dc8 <TIM_OC4_SetConfig+0x110>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d007      	beq.n	8003d2c <TIM_OC4_SetConfig+0x74>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a2b      	ldr	r2, [pc, #172]	; (8003dcc <TIM_OC4_SetConfig+0x114>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d003      	beq.n	8003d2c <TIM_OC4_SetConfig+0x74>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a2a      	ldr	r2, [pc, #168]	; (8003dd0 <TIM_OC4_SetConfig+0x118>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d10d      	bne.n	8003d48 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	031b      	lsls	r3, r3, #12
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a1f      	ldr	r2, [pc, #124]	; (8003dc8 <TIM_OC4_SetConfig+0x110>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d013      	beq.n	8003d78 <TIM_OC4_SetConfig+0xc0>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a1e      	ldr	r2, [pc, #120]	; (8003dcc <TIM_OC4_SetConfig+0x114>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00f      	beq.n	8003d78 <TIM_OC4_SetConfig+0xc0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a1e      	ldr	r2, [pc, #120]	; (8003dd4 <TIM_OC4_SetConfig+0x11c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00b      	beq.n	8003d78 <TIM_OC4_SetConfig+0xc0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a1d      	ldr	r2, [pc, #116]	; (8003dd8 <TIM_OC4_SetConfig+0x120>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d007      	beq.n	8003d78 <TIM_OC4_SetConfig+0xc0>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <TIM_OC4_SetConfig+0x124>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d003      	beq.n	8003d78 <TIM_OC4_SetConfig+0xc0>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a17      	ldr	r2, [pc, #92]	; (8003dd0 <TIM_OC4_SetConfig+0x118>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d113      	bne.n	8003da0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d7e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d86:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	019b      	lsls	r3, r3, #6
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	019b      	lsls	r3, r3, #6
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	621a      	str	r2, [r3, #32]
}
 8003dba:	bf00      	nop
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40012c00 	.word	0x40012c00
 8003dcc:	40013400 	.word	0x40013400
 8003dd0:	40015000 	.word	0x40015000
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	40014400 	.word	0x40014400
 8003ddc:	40014800 	.word	0x40014800

08003de0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <TIM_OC5_SetConfig+0xbc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d013      	beq.n	8003e62 <TIM_OC5_SetConfig+0x82>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a18      	ldr	r2, [pc, #96]	; (8003ea0 <TIM_OC5_SetConfig+0xc0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d00f      	beq.n	8003e62 <TIM_OC5_SetConfig+0x82>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a17      	ldr	r2, [pc, #92]	; (8003ea4 <TIM_OC5_SetConfig+0xc4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00b      	beq.n	8003e62 <TIM_OC5_SetConfig+0x82>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a16      	ldr	r2, [pc, #88]	; (8003ea8 <TIM_OC5_SetConfig+0xc8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d007      	beq.n	8003e62 <TIM_OC5_SetConfig+0x82>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a15      	ldr	r2, [pc, #84]	; (8003eac <TIM_OC5_SetConfig+0xcc>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d003      	beq.n	8003e62 <TIM_OC5_SetConfig+0x82>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a14      	ldr	r2, [pc, #80]	; (8003eb0 <TIM_OC5_SetConfig+0xd0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d109      	bne.n	8003e76 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	021b      	lsls	r3, r3, #8
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	621a      	str	r2, [r3, #32]
}
 8003e90:	bf00      	nop
 8003e92:	371c      	adds	r7, #28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	40012c00 	.word	0x40012c00
 8003ea0:	40013400 	.word	0x40013400
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	40014400 	.word	0x40014400
 8003eac:	40014800 	.word	0x40014800
 8003eb0:	40015000 	.word	0x40015000

08003eb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	021b      	lsls	r3, r3, #8
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003efa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	051b      	lsls	r3, r3, #20
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <TIM_OC6_SetConfig+0xc0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d013      	beq.n	8003f38 <TIM_OC6_SetConfig+0x84>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a19      	ldr	r2, [pc, #100]	; (8003f78 <TIM_OC6_SetConfig+0xc4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00f      	beq.n	8003f38 <TIM_OC6_SetConfig+0x84>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <TIM_OC6_SetConfig+0xc8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00b      	beq.n	8003f38 <TIM_OC6_SetConfig+0x84>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a17      	ldr	r2, [pc, #92]	; (8003f80 <TIM_OC6_SetConfig+0xcc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d007      	beq.n	8003f38 <TIM_OC6_SetConfig+0x84>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a16      	ldr	r2, [pc, #88]	; (8003f84 <TIM_OC6_SetConfig+0xd0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_OC6_SetConfig+0x84>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <TIM_OC6_SetConfig+0xd4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d109      	bne.n	8003f4c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	029b      	lsls	r3, r3, #10
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	621a      	str	r2, [r3, #32]
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40013400 	.word	0x40013400
 8003f7c:	40014000 	.word	0x40014000
 8003f80:	40014400 	.word	0x40014400
 8003f84:	40014800 	.word	0x40014800
 8003f88:	40015000 	.word	0x40015000

08003f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f023 0201 	bic.w	r2, r3, #1
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f023 030a 	bic.w	r3, r3, #10
 8003fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	621a      	str	r2, [r3, #32]
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b087      	sub	sp, #28
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f023 0210 	bic.w	r2, r3, #16
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004014:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	031b      	lsls	r3, r3, #12
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004026:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	621a      	str	r2, [r3, #32]
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800404a:	b480      	push	{r7}
 800404c:	b085      	sub	sp, #20
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004064:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	f043 0307 	orr.w	r3, r3, #7
 8004070:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	609a      	str	r2, [r3, #8]
}
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800409e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	021a      	lsls	r2, r3, #8
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	609a      	str	r2, [r3, #8]
}
 80040b8:	bf00      	nop
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f003 031f 	and.w	r3, r3, #31
 80040d6:	2201      	movs	r2, #1
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a1a      	ldr	r2, [r3, #32]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	43db      	mvns	r3, r3
 80040e6:	401a      	ands	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a1a      	ldr	r2, [r3, #32]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 031f 	and.w	r3, r3, #31
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	fa01 f303 	lsl.w	r3, r1, r3
 80040fc:	431a      	orrs	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	621a      	str	r2, [r3, #32]
}
 8004102:	bf00      	nop
 8004104:	371c      	adds	r7, #28
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
	...

08004110 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d109      	bne.n	8004134 <HAL_TIMEx_PWMN_Start+0x24>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b01      	cmp	r3, #1
 800412a:	bf14      	ite	ne
 800412c:	2301      	movne	r3, #1
 800412e:	2300      	moveq	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	e022      	b.n	800417a <HAL_TIMEx_PWMN_Start+0x6a>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2b04      	cmp	r3, #4
 8004138:	d109      	bne.n	800414e <HAL_TIMEx_PWMN_Start+0x3e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b01      	cmp	r3, #1
 8004144:	bf14      	ite	ne
 8004146:	2301      	movne	r3, #1
 8004148:	2300      	moveq	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	e015      	b.n	800417a <HAL_TIMEx_PWMN_Start+0x6a>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b08      	cmp	r3, #8
 8004152:	d109      	bne.n	8004168 <HAL_TIMEx_PWMN_Start+0x58>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	bf14      	ite	ne
 8004160:	2301      	movne	r3, #1
 8004162:	2300      	moveq	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	e008      	b.n	800417a <HAL_TIMEx_PWMN_Start+0x6a>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b01      	cmp	r3, #1
 8004172:	bf14      	ite	ne
 8004174:	2301      	movne	r3, #1
 8004176:	2300      	moveq	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e073      	b.n	800426a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d104      	bne.n	8004192 <HAL_TIMEx_PWMN_Start+0x82>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004190:	e013      	b.n	80041ba <HAL_TIMEx_PWMN_Start+0xaa>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b04      	cmp	r3, #4
 8004196:	d104      	bne.n	80041a2 <HAL_TIMEx_PWMN_Start+0x92>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041a0:	e00b      	b.n	80041ba <HAL_TIMEx_PWMN_Start+0xaa>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d104      	bne.n	80041b2 <HAL_TIMEx_PWMN_Start+0xa2>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041b0:	e003      	b.n	80041ba <HAL_TIMEx_PWMN_Start+0xaa>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2202      	movs	r2, #2
 80041b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2204      	movs	r2, #4
 80041c0:	6839      	ldr	r1, [r7, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 f9f4 	bl	80045b0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a25      	ldr	r2, [pc, #148]	; (8004274 <HAL_TIMEx_PWMN_Start+0x164>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d022      	beq.n	8004228 <HAL_TIMEx_PWMN_Start+0x118>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ea:	d01d      	beq.n	8004228 <HAL_TIMEx_PWMN_Start+0x118>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a21      	ldr	r2, [pc, #132]	; (8004278 <HAL_TIMEx_PWMN_Start+0x168>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d018      	beq.n	8004228 <HAL_TIMEx_PWMN_Start+0x118>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a20      	ldr	r2, [pc, #128]	; (800427c <HAL_TIMEx_PWMN_Start+0x16c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d013      	beq.n	8004228 <HAL_TIMEx_PWMN_Start+0x118>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1e      	ldr	r2, [pc, #120]	; (8004280 <HAL_TIMEx_PWMN_Start+0x170>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00e      	beq.n	8004228 <HAL_TIMEx_PWMN_Start+0x118>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a1d      	ldr	r2, [pc, #116]	; (8004284 <HAL_TIMEx_PWMN_Start+0x174>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d009      	beq.n	8004228 <HAL_TIMEx_PWMN_Start+0x118>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a1b      	ldr	r2, [pc, #108]	; (8004288 <HAL_TIMEx_PWMN_Start+0x178>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d004      	beq.n	8004228 <HAL_TIMEx_PWMN_Start+0x118>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a1a      	ldr	r2, [pc, #104]	; (800428c <HAL_TIMEx_PWMN_Start+0x17c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d115      	bne.n	8004254 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	4b18      	ldr	r3, [pc, #96]	; (8004290 <HAL_TIMEx_PWMN_Start+0x180>)
 8004230:	4013      	ands	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b06      	cmp	r3, #6
 8004238:	d015      	beq.n	8004266 <HAL_TIMEx_PWMN_Start+0x156>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004240:	d011      	beq.n	8004266 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0201 	orr.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004252:	e008      	b.n	8004266 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	e000      	b.n	8004268 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004266:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40000400 	.word	0x40000400
 800427c:	40000800 	.word	0x40000800
 8004280:	40000c00 	.word	0x40000c00
 8004284:	40013400 	.word	0x40013400
 8004288:	40014000 	.word	0x40014000
 800428c:	40015000 	.word	0x40015000
 8004290:	00010007 	.word	0x00010007

08004294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e074      	b.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a34      	ldr	r2, [pc, #208]	; (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d009      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a33      	ldr	r2, [pc, #204]	; (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d004      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a31      	ldr	r2, [pc, #196]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d108      	bne.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a21      	ldr	r2, [pc, #132]	; (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d022      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432c:	d01d      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1f      	ldr	r2, [pc, #124]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d018      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1d      	ldr	r2, [pc, #116]	; (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1c      	ldr	r2, [pc, #112]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00e      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a15      	ldr	r2, [pc, #84]	; (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d009      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a18      	ldr	r2, [pc, #96]	; (80043bc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d004      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a11      	ldr	r2, [pc, #68]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d10c      	bne.n	8004384 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004370:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	4313      	orrs	r3, r2
 800437a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40012c00 	.word	0x40012c00
 80043a8:	40013400 	.word	0x40013400
 80043ac:	40015000 	.word	0x40015000
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40000800 	.word	0x40000800
 80043b8:	40000c00 	.word	0x40000c00
 80043bc:	40014000 	.word	0x40014000

080043c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043d8:	2302      	movs	r3, #2
 80043da:	e096      	b.n	800450a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	041b      	lsls	r3, r3, #16
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2f      	ldr	r2, [pc, #188]	; (8004518 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d009      	beq.n	8004474 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2d      	ldr	r2, [pc, #180]	; (800451c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a2c      	ldr	r2, [pc, #176]	; (8004520 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d106      	bne.n	8004482 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a24      	ldr	r2, [pc, #144]	; (8004518 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d009      	beq.n	80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a22      	ldr	r2, [pc, #136]	; (800451c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d004      	beq.n	80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a21      	ldr	r2, [pc, #132]	; (8004520 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d12b      	bne.n	80044f8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044aa:	051b      	lsls	r3, r3, #20
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a11      	ldr	r2, [pc, #68]	; (8004518 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d009      	beq.n	80044ea <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a10      	ldr	r2, [pc, #64]	; (800451c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d004      	beq.n	80044ea <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a0e      	ldr	r2, [pc, #56]	; (8004520 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d106      	bne.n	80044f8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40012c00 	.word	0x40012c00
 800451c:	40013400 	.word	0x40013400
 8004520:	40015000 	.word	0x40015000

08004524 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 031f 	and.w	r3, r3, #31
 80045c2:	2204      	movs	r2, #4
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a1a      	ldr	r2, [r3, #32]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	43db      	mvns	r3, r3
 80045d2:	401a      	ands	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a1a      	ldr	r2, [r3, #32]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 031f 	and.w	r3, r3, #31
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	fa01 f303 	lsl.w	r3, r1, r3
 80045e8:	431a      	orrs	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	621a      	str	r2, [r3, #32]
}
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b082      	sub	sp, #8
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e042      	b.n	8004692 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fc fcb6 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2224      	movs	r2, #36	; 0x24
 8004628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0201 	bic.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 fc51 	bl	8004ee4 <UART_SetConfig>
 8004642:	4603      	mov	r3, r0
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e022      	b.n	8004692 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 ff41 	bl	80054dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004668:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004678:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0201 	orr.w	r2, r2, #1
 8004688:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 ffc8 	bl	8005620 <UART_CheckIdleState>
 8004690:	4603      	mov	r3, r0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b08a      	sub	sp, #40	; 0x28
 800469e:	af02      	add	r7, sp, #8
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	603b      	str	r3, [r7, #0]
 80046a6:	4613      	mov	r3, r2
 80046a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	f040 8083 	bne.w	80047bc <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <HAL_UART_Transmit+0x28>
 80046bc:	88fb      	ldrh	r3, [r7, #6]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e07b      	b.n	80047be <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_UART_Transmit+0x3a>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e074      	b.n	80047be <HAL_UART_Transmit+0x124>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2221      	movs	r2, #33	; 0x21
 80046e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ec:	f7fc fe5c 	bl	80013a8 <HAL_GetTick>
 80046f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	88fa      	ldrh	r2, [r7, #6]
 80046f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	88fa      	ldrh	r2, [r7, #6]
 80046fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470a:	d108      	bne.n	800471e <HAL_UART_Transmit+0x84>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d104      	bne.n	800471e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004714:	2300      	movs	r3, #0
 8004716:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	e003      	b.n	8004726 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004722:	2300      	movs	r3, #0
 8004724:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800472e:	e02c      	b.n	800478a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2200      	movs	r2, #0
 8004738:	2180      	movs	r1, #128	; 0x80
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 ffbb 	bl	80056b6 <UART_WaitOnFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e039      	b.n	80047be <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10b      	bne.n	8004768 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800475e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	3302      	adds	r3, #2
 8004764:	61bb      	str	r3, [r7, #24]
 8004766:	e007      	b.n	8004778 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	781a      	ldrb	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	3301      	adds	r3, #1
 8004776:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1cc      	bne.n	8004730 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2200      	movs	r2, #0
 800479e:	2140      	movs	r1, #64	; 0x40
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 ff88 	bl	80056b6 <UART_WaitOnFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e006      	b.n	80047be <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	e000      	b.n	80047be <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80047bc:	2302      	movs	r3, #2
  }
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3720      	adds	r7, #32
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	; 0x28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	4613      	mov	r3, r2
 80047d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d142      	bne.n	8004866 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <HAL_UART_Receive_IT+0x24>
 80047e6:	88fb      	ldrh	r3, [r7, #6]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e03b      	b.n	8004868 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_UART_Receive_IT+0x36>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e034      	b.n	8004868 <HAL_UART_Receive_IT+0xa0>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a17      	ldr	r2, [pc, #92]	; (8004870 <HAL_UART_Receive_IT+0xa8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d01f      	beq.n	8004856 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d018      	beq.n	8004856 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	613b      	str	r3, [r7, #16]
   return(result);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	623b      	str	r3, [r7, #32]
 8004844:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	69f9      	ldr	r1, [r7, #28]
 8004848:	6a3a      	ldr	r2, [r7, #32]
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e6      	bne.n	8004824 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004856:	88fb      	ldrh	r3, [r7, #6]
 8004858:	461a      	mov	r2, r3
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 fff3 	bl	8005848 <UART_Start_Receive_IT>
 8004862:	4603      	mov	r3, r0
 8004864:	e000      	b.n	8004868 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004866:	2302      	movs	r3, #2
  }
}
 8004868:	4618      	mov	r0, r3
 800486a:	3728      	adds	r7, #40	; 0x28
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40008000 	.word	0x40008000

08004874 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b0ba      	sub	sp, #232	; 0xe8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800489a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800489e:	f640 030f 	movw	r3, #2063	; 0x80f
 80048a2:	4013      	ands	r3, r2
 80048a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80048a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d11b      	bne.n	80048e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80048b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d015      	beq.n	80048e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80048bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c0:	f003 0320 	and.w	r3, r3, #32
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d105      	bne.n	80048d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80048c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d009      	beq.n	80048e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 82d6 	beq.w	8004e8a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	4798      	blx	r3
      }
      return;
 80048e6:	e2d0      	b.n	8004e8a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 811f 	beq.w	8004b30 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80048f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80048f6:	4b8b      	ldr	r3, [pc, #556]	; (8004b24 <HAL_UART_IRQHandler+0x2b0>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80048fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004902:	4b89      	ldr	r3, [pc, #548]	; (8004b28 <HAL_UART_IRQHandler+0x2b4>)
 8004904:	4013      	ands	r3, r2
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 8112 	beq.w	8004b30 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800490c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d011      	beq.n	800493c <HAL_UART_IRQHandler+0xc8>
 8004918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800491c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00b      	beq.n	800493c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2201      	movs	r2, #1
 800492a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004932:	f043 0201 	orr.w	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800493c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d011      	beq.n	800496c <HAL_UART_IRQHandler+0xf8>
 8004948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00b      	beq.n	800496c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2202      	movs	r2, #2
 800495a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004962:	f043 0204 	orr.w	r2, r3, #4
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800496c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d011      	beq.n	800499c <HAL_UART_IRQHandler+0x128>
 8004978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00b      	beq.n	800499c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2204      	movs	r2, #4
 800498a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004992:	f043 0202 	orr.w	r2, r3, #2
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800499c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d017      	beq.n	80049d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80049a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d105      	bne.n	80049c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80049b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80049b8:	4b5a      	ldr	r3, [pc, #360]	; (8004b24 <HAL_UART_IRQHandler+0x2b0>)
 80049ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00b      	beq.n	80049d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2208      	movs	r2, #8
 80049c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ce:	f043 0208 	orr.w	r2, r3, #8
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d012      	beq.n	8004a0a <HAL_UART_IRQHandler+0x196>
 80049e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00c      	beq.n	8004a0a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a00:	f043 0220 	orr.w	r2, r3, #32
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 823c 	beq.w	8004e8e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d013      	beq.n	8004a4a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d105      	bne.n	8004a3a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d007      	beq.n	8004a4a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b40      	cmp	r3, #64	; 0x40
 8004a60:	d005      	beq.n	8004a6e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d04f      	beq.n	8004b0e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f001 f814 	bl	8005a9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b40      	cmp	r3, #64	; 0x40
 8004a80:	d141      	bne.n	8004b06 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3308      	adds	r3, #8
 8004a88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	3308      	adds	r3, #8
 8004aaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004aae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004aba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004abe:	e841 2300 	strex	r3, r2, [r1]
 8004ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1d9      	bne.n	8004a82 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d013      	beq.n	8004afe <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ada:	4a14      	ldr	r2, [pc, #80]	; (8004b2c <HAL_UART_IRQHandler+0x2b8>)
 8004adc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fc fdf6 	bl	80016d4 <HAL_DMA_Abort_IT>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d017      	beq.n	8004b1e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004af8:	4610      	mov	r0, r2
 8004afa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004afc:	e00f      	b.n	8004b1e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f9da 	bl	8004eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b04:	e00b      	b.n	8004b1e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f9d6 	bl	8004eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b0c:	e007      	b.n	8004b1e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f9d2 	bl	8004eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004b1c:	e1b7      	b.n	8004e8e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1e:	bf00      	nop
    return;
 8004b20:	e1b5      	b.n	8004e8e <HAL_UART_IRQHandler+0x61a>
 8004b22:	bf00      	nop
 8004b24:	10000001 	.word	0x10000001
 8004b28:	04000120 	.word	0x04000120
 8004b2c:	08005b69 	.word	0x08005b69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	f040 814a 	bne.w	8004dce <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 8143 	beq.w	8004dce <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b4c:	f003 0310 	and.w	r3, r3, #16
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 813c 	beq.w	8004dce <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2210      	movs	r2, #16
 8004b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b68:	2b40      	cmp	r3, #64	; 0x40
 8004b6a:	f040 80b5 	bne.w	8004cd8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b7a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8187 	beq.w	8004e92 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	f080 817f 	bcs.w	8004e92 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f040 8086 	bne.w	8004cbc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bbc:	e853 3f00 	ldrex	r3, [r3]
 8004bc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004bda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bde:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004be6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1da      	bne.n	8004bb0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3308      	adds	r3, #8
 8004c00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3308      	adds	r3, #8
 8004c1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e1      	bne.n	8004bfa <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3308      	adds	r3, #8
 8004c56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e3      	bne.n	8004c36 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c84:	e853 3f00 	ldrex	r3, [r3]
 8004c88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c8c:	f023 0310 	bic.w	r3, r3, #16
 8004c90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ca0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ca4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e4      	bne.n	8004c7c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fc fcb3 	bl	8001622 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	4619      	mov	r1, r3
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f8fb 	bl	8004ecc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cd6:	e0dc      	b.n	8004e92 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 80ce 	beq.w	8004e96 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004cfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 80c9 	beq.w	8004e96 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d26:	647b      	str	r3, [r7, #68]	; 0x44
 8004d28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1e4      	bne.n	8004d04 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3308      	adds	r3, #8
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	623b      	str	r3, [r7, #32]
   return(result);
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d50:	f023 0301 	bic.w	r3, r3, #1
 8004d54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d62:	633a      	str	r2, [r7, #48]	; 0x30
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d6a:	e841 2300 	strex	r3, r2, [r1]
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e1      	bne.n	8004d3a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	e853 3f00 	ldrex	r3, [r3]
 8004d96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0310 	bic.w	r3, r3, #16
 8004d9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	69b9      	ldr	r1, [r7, #24]
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	617b      	str	r3, [r7, #20]
   return(result);
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e4      	bne.n	8004d8a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f880 	bl	8004ecc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dcc:	e063      	b.n	8004e96 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00e      	beq.n	8004df8 <HAL_UART_IRQHandler+0x584>
 8004dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d008      	beq.n	8004df8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f001 fb57 	bl	80064a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004df6:	e051      	b.n	8004e9c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d014      	beq.n	8004e2e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d105      	bne.n	8004e1c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004e10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d008      	beq.n	8004e2e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d03a      	beq.n	8004e9a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	4798      	blx	r3
    }
    return;
 8004e2c:	e035      	b.n	8004e9a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d009      	beq.n	8004e4e <HAL_UART_IRQHandler+0x5da>
 8004e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fea4 	bl	8005b94 <UART_EndTransmit_IT>
    return;
 8004e4c:	e026      	b.n	8004e9c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d009      	beq.n	8004e6e <HAL_UART_IRQHandler+0x5fa>
 8004e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f001 fb30 	bl	80064cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e6c:	e016      	b.n	8004e9c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d010      	beq.n	8004e9c <HAL_UART_IRQHandler+0x628>
 8004e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	da0c      	bge.n	8004e9c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f001 fb18 	bl	80064b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e88:	e008      	b.n	8004e9c <HAL_UART_IRQHandler+0x628>
      return;
 8004e8a:	bf00      	nop
 8004e8c:	e006      	b.n	8004e9c <HAL_UART_IRQHandler+0x628>
    return;
 8004e8e:	bf00      	nop
 8004e90:	e004      	b.n	8004e9c <HAL_UART_IRQHandler+0x628>
      return;
 8004e92:	bf00      	nop
 8004e94:	e002      	b.n	8004e9c <HAL_UART_IRQHandler+0x628>
      return;
 8004e96:	bf00      	nop
 8004e98:	e000      	b.n	8004e9c <HAL_UART_IRQHandler+0x628>
    return;
 8004e9a:	bf00      	nop
  }
}
 8004e9c:	37e8      	adds	r7, #232	; 0xe8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop

08004ea4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ee8:	b08c      	sub	sp, #48	; 0x30
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	431a      	orrs	r2, r3
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4baa      	ldr	r3, [pc, #680]	; (80051bc <UART_SetConfig+0x2d8>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a9f      	ldr	r2, [pc, #636]	; (80051c0 <UART_SetConfig+0x2dc>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d004      	beq.n	8004f50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004f5a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	6812      	ldr	r2, [r2, #0]
 8004f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f64:	430b      	orrs	r3, r1
 8004f66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6e:	f023 010f 	bic.w	r1, r3, #15
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a90      	ldr	r2, [pc, #576]	; (80051c4 <UART_SetConfig+0x2e0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d125      	bne.n	8004fd4 <UART_SetConfig+0xf0>
 8004f88:	4b8f      	ldr	r3, [pc, #572]	; (80051c8 <UART_SetConfig+0x2e4>)
 8004f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d81a      	bhi.n	8004fcc <UART_SetConfig+0xe8>
 8004f96:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0xb8>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	08004fad 	.word	0x08004fad
 8004fa0:	08004fbd 	.word	0x08004fbd
 8004fa4:	08004fb5 	.word	0x08004fb5
 8004fa8:	08004fc5 	.word	0x08004fc5
 8004fac:	2301      	movs	r3, #1
 8004fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fb2:	e116      	b.n	80051e2 <UART_SetConfig+0x2fe>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fba:	e112      	b.n	80051e2 <UART_SetConfig+0x2fe>
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fc2:	e10e      	b.n	80051e2 <UART_SetConfig+0x2fe>
 8004fc4:	2308      	movs	r3, #8
 8004fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fca:	e10a      	b.n	80051e2 <UART_SetConfig+0x2fe>
 8004fcc:	2310      	movs	r3, #16
 8004fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fd2:	e106      	b.n	80051e2 <UART_SetConfig+0x2fe>
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a7c      	ldr	r2, [pc, #496]	; (80051cc <UART_SetConfig+0x2e8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d138      	bne.n	8005050 <UART_SetConfig+0x16c>
 8004fde:	4b7a      	ldr	r3, [pc, #488]	; (80051c8 <UART_SetConfig+0x2e4>)
 8004fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe4:	f003 030c 	and.w	r3, r3, #12
 8004fe8:	2b0c      	cmp	r3, #12
 8004fea:	d82d      	bhi.n	8005048 <UART_SetConfig+0x164>
 8004fec:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <UART_SetConfig+0x110>)
 8004fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff2:	bf00      	nop
 8004ff4:	08005029 	.word	0x08005029
 8004ff8:	08005049 	.word	0x08005049
 8004ffc:	08005049 	.word	0x08005049
 8005000:	08005049 	.word	0x08005049
 8005004:	08005039 	.word	0x08005039
 8005008:	08005049 	.word	0x08005049
 800500c:	08005049 	.word	0x08005049
 8005010:	08005049 	.word	0x08005049
 8005014:	08005031 	.word	0x08005031
 8005018:	08005049 	.word	0x08005049
 800501c:	08005049 	.word	0x08005049
 8005020:	08005049 	.word	0x08005049
 8005024:	08005041 	.word	0x08005041
 8005028:	2300      	movs	r3, #0
 800502a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800502e:	e0d8      	b.n	80051e2 <UART_SetConfig+0x2fe>
 8005030:	2302      	movs	r3, #2
 8005032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005036:	e0d4      	b.n	80051e2 <UART_SetConfig+0x2fe>
 8005038:	2304      	movs	r3, #4
 800503a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800503e:	e0d0      	b.n	80051e2 <UART_SetConfig+0x2fe>
 8005040:	2308      	movs	r3, #8
 8005042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005046:	e0cc      	b.n	80051e2 <UART_SetConfig+0x2fe>
 8005048:	2310      	movs	r3, #16
 800504a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800504e:	e0c8      	b.n	80051e2 <UART_SetConfig+0x2fe>
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a5e      	ldr	r2, [pc, #376]	; (80051d0 <UART_SetConfig+0x2ec>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d125      	bne.n	80050a6 <UART_SetConfig+0x1c2>
 800505a:	4b5b      	ldr	r3, [pc, #364]	; (80051c8 <UART_SetConfig+0x2e4>)
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005060:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005064:	2b30      	cmp	r3, #48	; 0x30
 8005066:	d016      	beq.n	8005096 <UART_SetConfig+0x1b2>
 8005068:	2b30      	cmp	r3, #48	; 0x30
 800506a:	d818      	bhi.n	800509e <UART_SetConfig+0x1ba>
 800506c:	2b20      	cmp	r3, #32
 800506e:	d00a      	beq.n	8005086 <UART_SetConfig+0x1a2>
 8005070:	2b20      	cmp	r3, #32
 8005072:	d814      	bhi.n	800509e <UART_SetConfig+0x1ba>
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <UART_SetConfig+0x19a>
 8005078:	2b10      	cmp	r3, #16
 800507a:	d008      	beq.n	800508e <UART_SetConfig+0x1aa>
 800507c:	e00f      	b.n	800509e <UART_SetConfig+0x1ba>
 800507e:	2300      	movs	r3, #0
 8005080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005084:	e0ad      	b.n	80051e2 <UART_SetConfig+0x2fe>
 8005086:	2302      	movs	r3, #2
 8005088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800508c:	e0a9      	b.n	80051e2 <UART_SetConfig+0x2fe>
 800508e:	2304      	movs	r3, #4
 8005090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005094:	e0a5      	b.n	80051e2 <UART_SetConfig+0x2fe>
 8005096:	2308      	movs	r3, #8
 8005098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800509c:	e0a1      	b.n	80051e2 <UART_SetConfig+0x2fe>
 800509e:	2310      	movs	r3, #16
 80050a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050a4:	e09d      	b.n	80051e2 <UART_SetConfig+0x2fe>
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a4a      	ldr	r2, [pc, #296]	; (80051d4 <UART_SetConfig+0x2f0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d125      	bne.n	80050fc <UART_SetConfig+0x218>
 80050b0:	4b45      	ldr	r3, [pc, #276]	; (80051c8 <UART_SetConfig+0x2e4>)
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050ba:	2bc0      	cmp	r3, #192	; 0xc0
 80050bc:	d016      	beq.n	80050ec <UART_SetConfig+0x208>
 80050be:	2bc0      	cmp	r3, #192	; 0xc0
 80050c0:	d818      	bhi.n	80050f4 <UART_SetConfig+0x210>
 80050c2:	2b80      	cmp	r3, #128	; 0x80
 80050c4:	d00a      	beq.n	80050dc <UART_SetConfig+0x1f8>
 80050c6:	2b80      	cmp	r3, #128	; 0x80
 80050c8:	d814      	bhi.n	80050f4 <UART_SetConfig+0x210>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <UART_SetConfig+0x1f0>
 80050ce:	2b40      	cmp	r3, #64	; 0x40
 80050d0:	d008      	beq.n	80050e4 <UART_SetConfig+0x200>
 80050d2:	e00f      	b.n	80050f4 <UART_SetConfig+0x210>
 80050d4:	2300      	movs	r3, #0
 80050d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050da:	e082      	b.n	80051e2 <UART_SetConfig+0x2fe>
 80050dc:	2302      	movs	r3, #2
 80050de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050e2:	e07e      	b.n	80051e2 <UART_SetConfig+0x2fe>
 80050e4:	2304      	movs	r3, #4
 80050e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ea:	e07a      	b.n	80051e2 <UART_SetConfig+0x2fe>
 80050ec:	2308      	movs	r3, #8
 80050ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050f2:	e076      	b.n	80051e2 <UART_SetConfig+0x2fe>
 80050f4:	2310      	movs	r3, #16
 80050f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050fa:	e072      	b.n	80051e2 <UART_SetConfig+0x2fe>
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a35      	ldr	r2, [pc, #212]	; (80051d8 <UART_SetConfig+0x2f4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d12a      	bne.n	800515c <UART_SetConfig+0x278>
 8005106:	4b30      	ldr	r3, [pc, #192]	; (80051c8 <UART_SetConfig+0x2e4>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005114:	d01a      	beq.n	800514c <UART_SetConfig+0x268>
 8005116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800511a:	d81b      	bhi.n	8005154 <UART_SetConfig+0x270>
 800511c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005120:	d00c      	beq.n	800513c <UART_SetConfig+0x258>
 8005122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005126:	d815      	bhi.n	8005154 <UART_SetConfig+0x270>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <UART_SetConfig+0x250>
 800512c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005130:	d008      	beq.n	8005144 <UART_SetConfig+0x260>
 8005132:	e00f      	b.n	8005154 <UART_SetConfig+0x270>
 8005134:	2300      	movs	r3, #0
 8005136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800513a:	e052      	b.n	80051e2 <UART_SetConfig+0x2fe>
 800513c:	2302      	movs	r3, #2
 800513e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005142:	e04e      	b.n	80051e2 <UART_SetConfig+0x2fe>
 8005144:	2304      	movs	r3, #4
 8005146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800514a:	e04a      	b.n	80051e2 <UART_SetConfig+0x2fe>
 800514c:	2308      	movs	r3, #8
 800514e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005152:	e046      	b.n	80051e2 <UART_SetConfig+0x2fe>
 8005154:	2310      	movs	r3, #16
 8005156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800515a:	e042      	b.n	80051e2 <UART_SetConfig+0x2fe>
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a17      	ldr	r2, [pc, #92]	; (80051c0 <UART_SetConfig+0x2dc>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d13a      	bne.n	80051dc <UART_SetConfig+0x2f8>
 8005166:	4b18      	ldr	r3, [pc, #96]	; (80051c8 <UART_SetConfig+0x2e4>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005170:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005174:	d01a      	beq.n	80051ac <UART_SetConfig+0x2c8>
 8005176:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800517a:	d81b      	bhi.n	80051b4 <UART_SetConfig+0x2d0>
 800517c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005180:	d00c      	beq.n	800519c <UART_SetConfig+0x2b8>
 8005182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005186:	d815      	bhi.n	80051b4 <UART_SetConfig+0x2d0>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <UART_SetConfig+0x2b0>
 800518c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005190:	d008      	beq.n	80051a4 <UART_SetConfig+0x2c0>
 8005192:	e00f      	b.n	80051b4 <UART_SetConfig+0x2d0>
 8005194:	2300      	movs	r3, #0
 8005196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800519a:	e022      	b.n	80051e2 <UART_SetConfig+0x2fe>
 800519c:	2302      	movs	r3, #2
 800519e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051a2:	e01e      	b.n	80051e2 <UART_SetConfig+0x2fe>
 80051a4:	2304      	movs	r3, #4
 80051a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051aa:	e01a      	b.n	80051e2 <UART_SetConfig+0x2fe>
 80051ac:	2308      	movs	r3, #8
 80051ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051b2:	e016      	b.n	80051e2 <UART_SetConfig+0x2fe>
 80051b4:	2310      	movs	r3, #16
 80051b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ba:	e012      	b.n	80051e2 <UART_SetConfig+0x2fe>
 80051bc:	cfff69f3 	.word	0xcfff69f3
 80051c0:	40008000 	.word	0x40008000
 80051c4:	40013800 	.word	0x40013800
 80051c8:	40021000 	.word	0x40021000
 80051cc:	40004400 	.word	0x40004400
 80051d0:	40004800 	.word	0x40004800
 80051d4:	40004c00 	.word	0x40004c00
 80051d8:	40005000 	.word	0x40005000
 80051dc:	2310      	movs	r3, #16
 80051de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4aae      	ldr	r2, [pc, #696]	; (80054a0 <UART_SetConfig+0x5bc>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	f040 8097 	bne.w	800531c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051f2:	2b08      	cmp	r3, #8
 80051f4:	d823      	bhi.n	800523e <UART_SetConfig+0x35a>
 80051f6:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <UART_SetConfig+0x318>)
 80051f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fc:	08005221 	.word	0x08005221
 8005200:	0800523f 	.word	0x0800523f
 8005204:	08005229 	.word	0x08005229
 8005208:	0800523f 	.word	0x0800523f
 800520c:	0800522f 	.word	0x0800522f
 8005210:	0800523f 	.word	0x0800523f
 8005214:	0800523f 	.word	0x0800523f
 8005218:	0800523f 	.word	0x0800523f
 800521c:	08005237 	.word	0x08005237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005220:	f7fd f9e8 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8005224:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005226:	e010      	b.n	800524a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005228:	4b9e      	ldr	r3, [pc, #632]	; (80054a4 <UART_SetConfig+0x5c0>)
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800522c:	e00d      	b.n	800524a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800522e:	f7fd f973 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 8005232:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005234:	e009      	b.n	800524a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800523c:	e005      	b.n	800524a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005248:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8130 	beq.w	80054b2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	4a94      	ldr	r2, [pc, #592]	; (80054a8 <UART_SetConfig+0x5c4>)
 8005258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800525c:	461a      	mov	r2, r3
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	fbb3 f3f2 	udiv	r3, r3, r2
 8005264:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	4413      	add	r3, r2
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	429a      	cmp	r2, r3
 8005274:	d305      	bcc.n	8005282 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	429a      	cmp	r2, r3
 8005280:	d903      	bls.n	800528a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005288:	e113      	b.n	80054b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	2200      	movs	r2, #0
 800528e:	60bb      	str	r3, [r7, #8]
 8005290:	60fa      	str	r2, [r7, #12]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	4a84      	ldr	r2, [pc, #528]	; (80054a8 <UART_SetConfig+0x5c4>)
 8005298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800529c:	b29b      	uxth	r3, r3
 800529e:	2200      	movs	r2, #0
 80052a0:	603b      	str	r3, [r7, #0]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052ac:	f7fb f818 	bl	80002e0 <__aeabi_uldivmod>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4610      	mov	r0, r2
 80052b6:	4619      	mov	r1, r3
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	020b      	lsls	r3, r1, #8
 80052c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052c6:	0202      	lsls	r2, r0, #8
 80052c8:	6979      	ldr	r1, [r7, #20]
 80052ca:	6849      	ldr	r1, [r1, #4]
 80052cc:	0849      	lsrs	r1, r1, #1
 80052ce:	2000      	movs	r0, #0
 80052d0:	460c      	mov	r4, r1
 80052d2:	4605      	mov	r5, r0
 80052d4:	eb12 0804 	adds.w	r8, r2, r4
 80052d8:	eb43 0905 	adc.w	r9, r3, r5
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	469a      	mov	sl, r3
 80052e4:	4693      	mov	fp, r2
 80052e6:	4652      	mov	r2, sl
 80052e8:	465b      	mov	r3, fp
 80052ea:	4640      	mov	r0, r8
 80052ec:	4649      	mov	r1, r9
 80052ee:	f7fa fff7 	bl	80002e0 <__aeabi_uldivmod>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4613      	mov	r3, r2
 80052f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005300:	d308      	bcc.n	8005314 <UART_SetConfig+0x430>
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005308:	d204      	bcs.n	8005314 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6a3a      	ldr	r2, [r7, #32]
 8005310:	60da      	str	r2, [r3, #12]
 8005312:	e0ce      	b.n	80054b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800531a:	e0ca      	b.n	80054b2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005324:	d166      	bne.n	80053f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005326:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800532a:	2b08      	cmp	r3, #8
 800532c:	d827      	bhi.n	800537e <UART_SetConfig+0x49a>
 800532e:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <UART_SetConfig+0x450>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	08005359 	.word	0x08005359
 8005338:	08005361 	.word	0x08005361
 800533c:	08005369 	.word	0x08005369
 8005340:	0800537f 	.word	0x0800537f
 8005344:	0800536f 	.word	0x0800536f
 8005348:	0800537f 	.word	0x0800537f
 800534c:	0800537f 	.word	0x0800537f
 8005350:	0800537f 	.word	0x0800537f
 8005354:	08005377 	.word	0x08005377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005358:	f7fd f94c 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 800535c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800535e:	e014      	b.n	800538a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005360:	f7fd f95e 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 8005364:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005366:	e010      	b.n	800538a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005368:	4b4e      	ldr	r3, [pc, #312]	; (80054a4 <UART_SetConfig+0x5c0>)
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800536c:	e00d      	b.n	800538a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800536e:	f7fd f8d3 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 8005372:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005374:	e009      	b.n	800538a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800537c:	e005      	b.n	800538a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005388:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 8090 	beq.w	80054b2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	4a44      	ldr	r2, [pc, #272]	; (80054a8 <UART_SetConfig+0x5c4>)
 8005398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800539c:	461a      	mov	r2, r3
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80053a4:	005a      	lsls	r2, r3, #1
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	085b      	lsrs	r3, r3, #1
 80053ac:	441a      	add	r2, r3
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	2b0f      	cmp	r3, #15
 80053bc:	d916      	bls.n	80053ec <UART_SetConfig+0x508>
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c4:	d212      	bcs.n	80053ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	f023 030f 	bic.w	r3, r3, #15
 80053ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	085b      	lsrs	r3, r3, #1
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	b29a      	uxth	r2, r3
 80053dc:	8bfb      	ldrh	r3, [r7, #30]
 80053de:	4313      	orrs	r3, r2
 80053e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	8bfa      	ldrh	r2, [r7, #30]
 80053e8:	60da      	str	r2, [r3, #12]
 80053ea:	e062      	b.n	80054b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053f2:	e05e      	b.n	80054b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d828      	bhi.n	800544e <UART_SetConfig+0x56a>
 80053fc:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <UART_SetConfig+0x520>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	08005429 	.word	0x08005429
 8005408:	08005431 	.word	0x08005431
 800540c:	08005439 	.word	0x08005439
 8005410:	0800544f 	.word	0x0800544f
 8005414:	0800543f 	.word	0x0800543f
 8005418:	0800544f 	.word	0x0800544f
 800541c:	0800544f 	.word	0x0800544f
 8005420:	0800544f 	.word	0x0800544f
 8005424:	08005447 	.word	0x08005447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005428:	f7fd f8e4 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 800542c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800542e:	e014      	b.n	800545a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005430:	f7fd f8f6 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 8005434:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005436:	e010      	b.n	800545a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005438:	4b1a      	ldr	r3, [pc, #104]	; (80054a4 <UART_SetConfig+0x5c0>)
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800543c:	e00d      	b.n	800545a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800543e:	f7fd f86b 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 8005442:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005444:	e009      	b.n	800545a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800544c:	e005      	b.n	800545a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005458:	bf00      	nop
    }

    if (pclk != 0U)
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	2b00      	cmp	r3, #0
 800545e:	d028      	beq.n	80054b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	4a10      	ldr	r2, [pc, #64]	; (80054a8 <UART_SetConfig+0x5c4>)
 8005466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800546a:	461a      	mov	r2, r3
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	085b      	lsrs	r3, r3, #1
 8005478:	441a      	add	r2, r3
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005482:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	2b0f      	cmp	r3, #15
 8005488:	d910      	bls.n	80054ac <UART_SetConfig+0x5c8>
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005490:	d20c      	bcs.n	80054ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	b29a      	uxth	r2, r3
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60da      	str	r2, [r3, #12]
 800549c:	e009      	b.n	80054b2 <UART_SetConfig+0x5ce>
 800549e:	bf00      	nop
 80054a0:	40008000 	.word	0x40008000
 80054a4:	00f42400 	.word	0x00f42400
 80054a8:	08007ee4 	.word	0x08007ee4
      }
      else
      {
        ret = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2201      	movs	r2, #1
 80054be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2200      	movs	r2, #0
 80054c6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	2200      	movs	r2, #0
 80054cc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80054ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3730      	adds	r7, #48	; 0x30
 80054d6:	46bd      	mov	sp, r7
 80054d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080054dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554e:	f003 0308 	and.w	r3, r3, #8
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	f003 0310 	and.w	r3, r3, #16
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00a      	beq.n	800558e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d01a      	beq.n	80055f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055da:	d10a      	bne.n	80055f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	605a      	str	r2, [r3, #4]
  }
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af02      	add	r7, sp, #8
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005630:	f7fb feba 	bl	80013a8 <HAL_GetTick>
 8005634:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b08      	cmp	r3, #8
 8005642:	d10e      	bne.n	8005662 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f82f 	bl	80056b6 <UART_WaitOnFlagUntilTimeout>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e025      	b.n	80056ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b04      	cmp	r3, #4
 800566e:	d10e      	bne.n	800568e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005670:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f819 	bl	80056b6 <UART_WaitOnFlagUntilTimeout>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e00f      	b.n	80056ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2220      	movs	r2, #32
 8005692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2220      	movs	r2, #32
 800569a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b09c      	sub	sp, #112	; 0x70
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	603b      	str	r3, [r7, #0]
 80056c2:	4613      	mov	r3, r2
 80056c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c6:	e0a9      	b.n	800581c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ce:	f000 80a5 	beq.w	800581c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d2:	f7fb fe69 	bl	80013a8 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056de:	429a      	cmp	r2, r3
 80056e0:	d302      	bcc.n	80056e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80056e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d140      	bne.n	800576a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056fc:	667b      	str	r3, [r7, #100]	; 0x64
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005706:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005708:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800570c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e6      	bne.n	80056e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3308      	adds	r3, #8
 8005720:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800572a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	663b      	str	r3, [r7, #96]	; 0x60
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3308      	adds	r3, #8
 8005738:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800573a:	64ba      	str	r2, [r7, #72]	; 0x48
 800573c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e5      	bne.n	800571a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2220      	movs	r2, #32
 8005752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2220      	movs	r2, #32
 800575a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e069      	b.n	800583e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d051      	beq.n	800581c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005786:	d149      	bne.n	800581c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005790:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	461a      	mov	r2, r3
 80057ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b0:	637b      	str	r3, [r7, #52]	; 0x34
 80057b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057b8:	e841 2300 	strex	r3, r2, [r1]
 80057bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e6      	bne.n	8005792 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3308      	adds	r3, #8
 80057ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	613b      	str	r3, [r7, #16]
   return(result);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f023 0301 	bic.w	r3, r3, #1
 80057da:	66bb      	str	r3, [r7, #104]	; 0x68
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3308      	adds	r3, #8
 80057e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057e4:	623a      	str	r2, [r7, #32]
 80057e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	69f9      	ldr	r1, [r7, #28]
 80057ea:	6a3a      	ldr	r2, [r7, #32]
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e5      	bne.n	80057c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2220      	movs	r2, #32
 8005804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2220      	movs	r2, #32
 800580c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e010      	b.n	800583e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	69da      	ldr	r2, [r3, #28]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	4013      	ands	r3, r2
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	429a      	cmp	r2, r3
 800582a:	bf0c      	ite	eq
 800582c:	2301      	moveq	r3, #1
 800582e:	2300      	movne	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	461a      	mov	r2, r3
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	429a      	cmp	r2, r3
 8005838:	f43f af46 	beq.w	80056c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3770      	adds	r7, #112	; 0x70
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005848:	b480      	push	{r7}
 800584a:	b0a3      	sub	sp, #140	; 0x8c
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	4613      	mov	r3, r2
 8005854:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	88fa      	ldrh	r2, [r7, #6]
 8005860:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	88fa      	ldrh	r2, [r7, #6]
 8005868:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587a:	d10e      	bne.n	800589a <UART_Start_Receive_IT+0x52>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d105      	bne.n	8005890 <UART_Start_Receive_IT+0x48>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f240 12ff 	movw	r2, #511	; 0x1ff
 800588a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800588e:	e02d      	b.n	80058ec <UART_Start_Receive_IT+0xa4>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	22ff      	movs	r2, #255	; 0xff
 8005894:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005898:	e028      	b.n	80058ec <UART_Start_Receive_IT+0xa4>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10d      	bne.n	80058be <UART_Start_Receive_IT+0x76>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d104      	bne.n	80058b4 <UART_Start_Receive_IT+0x6c>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	22ff      	movs	r2, #255	; 0xff
 80058ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058b2:	e01b      	b.n	80058ec <UART_Start_Receive_IT+0xa4>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	227f      	movs	r2, #127	; 0x7f
 80058b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058bc:	e016      	b.n	80058ec <UART_Start_Receive_IT+0xa4>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058c6:	d10d      	bne.n	80058e4 <UART_Start_Receive_IT+0x9c>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <UART_Start_Receive_IT+0x92>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	227f      	movs	r2, #127	; 0x7f
 80058d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058d8:	e008      	b.n	80058ec <UART_Start_Receive_IT+0xa4>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	223f      	movs	r2, #63	; 0x3f
 80058de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058e2:	e003      	b.n	80058ec <UART_Start_Receive_IT+0xa4>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2222      	movs	r2, #34	; 0x22
 80058f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3308      	adds	r3, #8
 8005902:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005906:	e853 3f00 	ldrex	r3, [r3]
 800590a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800590c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	3308      	adds	r3, #8
 800591c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005920:	673a      	str	r2, [r7, #112]	; 0x70
 8005922:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005924:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005926:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005928:	e841 2300 	strex	r3, r2, [r1]
 800592c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800592e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1e3      	bne.n	80058fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800593c:	d153      	bne.n	80059e6 <UART_Start_Receive_IT+0x19e>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005944:	88fa      	ldrh	r2, [r7, #6]
 8005946:	429a      	cmp	r2, r3
 8005948:	d34d      	bcc.n	80059e6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005952:	d107      	bne.n	8005964 <UART_Start_Receive_IT+0x11c>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d103      	bne.n	8005964 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4a4b      	ldr	r2, [pc, #300]	; (8005a8c <UART_Start_Receive_IT+0x244>)
 8005960:	671a      	str	r2, [r3, #112]	; 0x70
 8005962:	e002      	b.n	800596a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4a4a      	ldr	r2, [pc, #296]	; (8005a90 <UART_Start_Receive_IT+0x248>)
 8005968:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d01a      	beq.n	80059b0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800598a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800598e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800599c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800599e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059a4:	e841 2300 	strex	r3, r2, [r1]
 80059a8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e4      	bne.n	800597a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3308      	adds	r3, #8
 80059b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ba:	e853 3f00 	ldrex	r3, [r3]
 80059be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3308      	adds	r3, #8
 80059ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80059d0:	64ba      	str	r2, [r7, #72]	; 0x48
 80059d2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059d8:	e841 2300 	strex	r3, r2, [r1]
 80059dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1e5      	bne.n	80059b0 <UART_Start_Receive_IT+0x168>
 80059e4:	e04a      	b.n	8005a7c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ee:	d107      	bne.n	8005a00 <UART_Start_Receive_IT+0x1b8>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d103      	bne.n	8005a00 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4a26      	ldr	r2, [pc, #152]	; (8005a94 <UART_Start_Receive_IT+0x24c>)
 80059fc:	671a      	str	r2, [r3, #112]	; 0x70
 80059fe:	e002      	b.n	8005a06 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4a25      	ldr	r2, [pc, #148]	; (8005a98 <UART_Start_Receive_IT+0x250>)
 8005a04:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d019      	beq.n	8005a4a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005a2a:	677b      	str	r3, [r7, #116]	; 0x74
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	461a      	mov	r2, r3
 8005a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a34:	637b      	str	r3, [r7, #52]	; 0x34
 8005a36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e6      	bne.n	8005a16 <UART_Start_Receive_IT+0x1ce>
 8005a48:	e018      	b.n	8005a7c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	e853 3f00 	ldrex	r3, [r3]
 8005a56:	613b      	str	r3, [r7, #16]
   return(result);
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f043 0320 	orr.w	r3, r3, #32
 8005a5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	461a      	mov	r2, r3
 8005a66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a68:	623b      	str	r3, [r7, #32]
 8005a6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6c:	69f9      	ldr	r1, [r7, #28]
 8005a6e:	6a3a      	ldr	r2, [r7, #32]
 8005a70:	e841 2300 	strex	r3, r2, [r1]
 8005a74:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e6      	bne.n	8005a4a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	378c      	adds	r7, #140	; 0x8c
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	080061a5 	.word	0x080061a5
 8005a90:	08005ead 	.word	0x08005ead
 8005a94:	08005d4b 	.word	0x08005d4b
 8005a98:	08005beb 	.word	0x08005beb

08005a9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b095      	sub	sp, #84	; 0x54
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac2:	643b      	str	r3, [r7, #64]	; 0x40
 8005ac4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ac8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005aca:	e841 2300 	strex	r3, r2, [r1]
 8005ace:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e6      	bne.n	8005aa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3308      	adds	r3, #8
 8005adc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aec:	f023 0301 	bic.w	r3, r3, #1
 8005af0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3308      	adds	r3, #8
 8005af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005afa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005afc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b02:	e841 2300 	strex	r3, r2, [r1]
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1e3      	bne.n	8005ad6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d118      	bne.n	8005b48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f023 0310 	bic.w	r3, r3, #16
 8005b2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	461a      	mov	r2, r3
 8005b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	6979      	ldr	r1, [r7, #20]
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	613b      	str	r3, [r7, #16]
   return(result);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e6      	bne.n	8005b16 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005b5c:	bf00      	nop
 8005b5e:	3754      	adds	r7, #84	; 0x54
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f7ff f996 	bl	8004eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b8c:	bf00      	nop
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb0:	61fb      	str	r3, [r7, #28]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	61bb      	str	r3, [r7, #24]
 8005bbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	6979      	ldr	r1, [r7, #20]
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e6      	bne.n	8005b9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff f961 	bl	8004ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005be2:	bf00      	nop
 8005be4:	3720      	adds	r7, #32
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b096      	sub	sp, #88	; 0x58
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005bf8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c02:	2b22      	cmp	r3, #34	; 0x22
 8005c04:	f040 8095 	bne.w	8005d32 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c12:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005c16:	b2d9      	uxtb	r1, r3
 8005c18:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c22:	400a      	ands	r2, r1
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d178      	bne.n	8005d42 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c58:	e853 3f00 	ldrex	r3, [r3]
 8005c5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c64:	653b      	str	r3, [r7, #80]	; 0x50
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c76:	e841 2300 	strex	r3, r2, [r1]
 8005c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1e6      	bne.n	8005c50 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3308      	adds	r3, #8
 8005c88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	e853 3f00 	ldrex	r3, [r3]
 8005c90:	623b      	str	r3, [r7, #32]
   return(result);
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	f023 0301 	bic.w	r3, r3, #1
 8005c98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3308      	adds	r3, #8
 8005ca0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ca2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005caa:	e841 2300 	strex	r3, r2, [r1]
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1e5      	bne.n	8005c82 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d12e      	bne.n	8005d2a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0310 	bic.w	r3, r3, #16
 8005ce6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	461a      	mov	r2, r3
 8005cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf0:	61fb      	str	r3, [r7, #28]
 8005cf2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	69b9      	ldr	r1, [r7, #24]
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	617b      	str	r3, [r7, #20]
   return(result);
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e6      	bne.n	8005cd2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	f003 0310 	and.w	r3, r3, #16
 8005d0e:	2b10      	cmp	r3, #16
 8005d10:	d103      	bne.n	8005d1a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2210      	movs	r2, #16
 8005d18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d20:	4619      	mov	r1, r3
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff f8d2 	bl	8004ecc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d28:	e00b      	b.n	8005d42 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fa ffe6 	bl	8000cfc <HAL_UART_RxCpltCallback>
}
 8005d30:	e007      	b.n	8005d42 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	699a      	ldr	r2, [r3, #24]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f042 0208 	orr.w	r2, r2, #8
 8005d40:	619a      	str	r2, [r3, #24]
}
 8005d42:	bf00      	nop
 8005d44:	3758      	adds	r7, #88	; 0x58
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b096      	sub	sp, #88	; 0x58
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d58:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d62:	2b22      	cmp	r3, #34	; 0x22
 8005d64:	f040 8095 	bne.w	8005e92 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d76:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d78:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005d7c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005d80:	4013      	ands	r3, r2
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d86:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8c:	1c9a      	adds	r2, r3, #2
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d178      	bne.n	8005ea2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dce:	643b      	str	r3, [r7, #64]	; 0x40
 8005dd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005dd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e6      	bne.n	8005db0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3308      	adds	r3, #8
 8005de8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	f023 0301 	bic.w	r3, r3, #1
 8005df8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3308      	adds	r3, #8
 8005e00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e0a:	e841 2300 	strex	r3, r2, [r1]
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1e5      	bne.n	8005de2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d12e      	bne.n	8005e8a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	e853 3f00 	ldrex	r3, [r3]
 8005e3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f023 0310 	bic.w	r3, r3, #16
 8005e46:	647b      	str	r3, [r7, #68]	; 0x44
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e50:	61bb      	str	r3, [r7, #24]
 8005e52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e54:	6979      	ldr	r1, [r7, #20]
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	e841 2300 	strex	r3, r2, [r1]
 8005e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e6      	bne.n	8005e32 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	f003 0310 	and.w	r3, r3, #16
 8005e6e:	2b10      	cmp	r3, #16
 8005e70:	d103      	bne.n	8005e7a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2210      	movs	r2, #16
 8005e78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e80:	4619      	mov	r1, r3
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7ff f822 	bl	8004ecc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e88:	e00b      	b.n	8005ea2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fa ff36 	bl	8000cfc <HAL_UART_RxCpltCallback>
}
 8005e90:	e007      	b.n	8005ea2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	699a      	ldr	r2, [r3, #24]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0208 	orr.w	r2, r2, #8
 8005ea0:	619a      	str	r2, [r3, #24]
}
 8005ea2:	bf00      	nop
 8005ea4:	3758      	adds	r7, #88	; 0x58
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
	...

08005eac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b0a6      	sub	sp, #152	; 0x98
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005eba:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee2:	2b22      	cmp	r3, #34	; 0x22
 8005ee4:	f040 814f 	bne.w	8006186 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005eee:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ef2:	e0f6      	b.n	80060e2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005efe:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005f02:	b2d9      	uxtb	r1, r3
 8005f04:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0e:	400a      	ands	r2, r1
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005f3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d053      	beq.n	8005fee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d011      	beq.n	8005f76 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00b      	beq.n	8005f76 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2201      	movs	r2, #1
 8005f64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f6c:	f043 0201 	orr.w	r2, r3, #1
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d011      	beq.n	8005fa6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005f82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00b      	beq.n	8005fa6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2202      	movs	r2, #2
 8005f94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f9c:	f043 0204 	orr.w	r2, r3, #4
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d011      	beq.n	8005fd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005fb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00b      	beq.n	8005fd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2204      	movs	r2, #4
 8005fc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fcc:	f043 0202 	orr.w	r2, r3, #2
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d006      	beq.n	8005fee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7fe ff69 	bl	8004eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d173      	bne.n	80060e2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006002:	e853 3f00 	ldrex	r3, [r3]
 8006006:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800600a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800600e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800601c:	66bb      	str	r3, [r7, #104]	; 0x68
 800601e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006022:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800602a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e4      	bne.n	8005ffa <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3308      	adds	r3, #8
 8006036:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006046:	f023 0301 	bic.w	r3, r3, #1
 800604a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3308      	adds	r3, #8
 8006052:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006054:	657a      	str	r2, [r7, #84]	; 0x54
 8006056:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006058:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800605a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800605c:	e841 2300 	strex	r3, r2, [r1]
 8006060:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e3      	bne.n	8006030 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800607a:	2b01      	cmp	r3, #1
 800607c:	d12e      	bne.n	80060dc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608c:	e853 3f00 	ldrex	r3, [r3]
 8006090:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	f023 0310 	bic.w	r3, r3, #16
 8006098:	67bb      	str	r3, [r7, #120]	; 0x78
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060a2:	643b      	str	r3, [r7, #64]	; 0x40
 80060a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060aa:	e841 2300 	strex	r3, r2, [r1]
 80060ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1e6      	bne.n	8006084 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	f003 0310 	and.w	r3, r3, #16
 80060c0:	2b10      	cmp	r3, #16
 80060c2:	d103      	bne.n	80060cc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2210      	movs	r2, #16
 80060ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7fe fef9 	bl	8004ecc <HAL_UARTEx_RxEventCallback>
 80060da:	e002      	b.n	80060e2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7fa fe0d 	bl	8000cfc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d006      	beq.n	80060f8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80060ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f47f aefe 	bne.w	8005ef4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006102:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006106:	2b00      	cmp	r3, #0
 8006108:	d045      	beq.n	8006196 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006110:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006114:	429a      	cmp	r2, r3
 8006116:	d23e      	bcs.n	8006196 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3308      	adds	r3, #8
 800611e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	e853 3f00 	ldrex	r3, [r3]
 8006126:	61fb      	str	r3, [r7, #28]
   return(result);
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800612e:	673b      	str	r3, [r7, #112]	; 0x70
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3308      	adds	r3, #8
 8006136:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006138:	62fa      	str	r2, [r7, #44]	; 0x2c
 800613a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800613e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006140:	e841 2300 	strex	r3, r2, [r1]
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1e5      	bne.n	8006118 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a14      	ldr	r2, [pc, #80]	; (80061a0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8006150:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	e853 3f00 	ldrex	r3, [r3]
 800615e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f043 0320 	orr.w	r3, r3, #32
 8006166:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	461a      	mov	r2, r3
 800616e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006170:	61bb      	str	r3, [r7, #24]
 8006172:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	6979      	ldr	r1, [r7, #20]
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	613b      	str	r3, [r7, #16]
   return(result);
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e6      	bne.n	8006152 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006184:	e007      	b.n	8006196 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	699a      	ldr	r2, [r3, #24]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f042 0208 	orr.w	r2, r2, #8
 8006194:	619a      	str	r2, [r3, #24]
}
 8006196:	bf00      	nop
 8006198:	3798      	adds	r7, #152	; 0x98
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	08005beb 	.word	0x08005beb

080061a4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b0a8      	sub	sp, #160	; 0xa0
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80061b2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061da:	2b22      	cmp	r3, #34	; 0x22
 80061dc:	f040 8153 	bne.w	8006486 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80061e6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80061ea:	e0fa      	b.n	80063e2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80061fe:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006202:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006206:	4013      	ands	r3, r2
 8006208:	b29a      	uxth	r2, r3
 800620a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800620e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006214:	1c9a      	adds	r2, r3, #2
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006220:	b29b      	uxth	r3, r3
 8006222:	3b01      	subs	r3, #1
 8006224:	b29a      	uxth	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006236:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	2b00      	cmp	r3, #0
 8006240:	d053      	beq.n	80062ea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006242:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d011      	beq.n	8006272 <UART_RxISR_16BIT_FIFOEN+0xce>
 800624e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00b      	beq.n	8006272 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2201      	movs	r2, #1
 8006260:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006268:	f043 0201 	orr.w	r2, r3, #1
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006272:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d011      	beq.n	80062a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800627e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00b      	beq.n	80062a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2202      	movs	r2, #2
 8006290:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006298:	f043 0204 	orr.w	r2, r3, #4
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062a6:	f003 0304 	and.w	r3, r3, #4
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d011      	beq.n	80062d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80062ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00b      	beq.n	80062d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2204      	movs	r2, #4
 80062c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062c8:	f043 0202 	orr.w	r2, r3, #2
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d006      	beq.n	80062ea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7fe fdeb 	bl	8004eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d175      	bne.n	80063e2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062fe:	e853 3f00 	ldrex	r3, [r3]
 8006302:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800630a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006318:	66fb      	str	r3, [r7, #108]	; 0x6c
 800631a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800631e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006320:	e841 2300 	strex	r3, r2, [r1]
 8006324:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006326:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1e4      	bne.n	80062f6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3308      	adds	r3, #8
 8006332:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006336:	e853 3f00 	ldrex	r3, [r3]
 800633a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800633c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800633e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006342:	f023 0301 	bic.w	r3, r3, #1
 8006346:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3308      	adds	r3, #8
 8006350:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006354:	65ba      	str	r2, [r7, #88]	; 0x58
 8006356:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800635a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800635c:	e841 2300 	strex	r3, r2, [r1]
 8006360:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e1      	bne.n	800632c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800637a:	2b01      	cmp	r3, #1
 800637c:	d12e      	bne.n	80063dc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	e853 3f00 	ldrex	r3, [r3]
 8006390:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006394:	f023 0310 	bic.w	r3, r3, #16
 8006398:	67fb      	str	r3, [r7, #124]	; 0x7c
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063a2:	647b      	str	r3, [r7, #68]	; 0x44
 80063a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063aa:	e841 2300 	strex	r3, r2, [r1]
 80063ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1e6      	bne.n	8006384 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	f003 0310 	and.w	r3, r3, #16
 80063c0:	2b10      	cmp	r3, #16
 80063c2:	d103      	bne.n	80063cc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2210      	movs	r2, #16
 80063ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063d2:	4619      	mov	r1, r3
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7fe fd79 	bl	8004ecc <HAL_UARTEx_RxEventCallback>
 80063da:	e002      	b.n	80063e2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7fa fc8d 	bl	8000cfc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80063e2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d006      	beq.n	80063f8 <UART_RxISR_16BIT_FIFOEN+0x254>
 80063ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f47f aefa 	bne.w	80061ec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063fe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006402:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8006406:	2b00      	cmp	r3, #0
 8006408:	d045      	beq.n	8006496 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006410:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006414:	429a      	cmp	r2, r3
 8006416:	d23e      	bcs.n	8006496 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3308      	adds	r3, #8
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	e853 3f00 	ldrex	r3, [r3]
 8006426:	623b      	str	r3, [r7, #32]
   return(result);
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800642e:	677b      	str	r3, [r7, #116]	; 0x74
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3308      	adds	r3, #8
 8006436:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006438:	633a      	str	r2, [r7, #48]	; 0x30
 800643a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800643e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006440:	e841 2300 	strex	r3, r2, [r1]
 8006444:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1e5      	bne.n	8006418 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a14      	ldr	r2, [pc, #80]	; (80064a0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8006450:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	e853 3f00 	ldrex	r3, [r3]
 800645e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f043 0320 	orr.w	r3, r3, #32
 8006466:	673b      	str	r3, [r7, #112]	; 0x70
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	461a      	mov	r2, r3
 800646e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006470:	61fb      	str	r3, [r7, #28]
 8006472:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	69b9      	ldr	r1, [r7, #24]
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	617b      	str	r3, [r7, #20]
   return(result);
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e6      	bne.n	8006452 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006484:	e007      	b.n	8006496 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	699a      	ldr	r2, [r3, #24]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0208 	orr.w	r2, r2, #8
 8006494:	619a      	str	r2, [r3, #24]
}
 8006496:	bf00      	nop
 8006498:	37a0      	adds	r7, #160	; 0xa0
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	08005d4b 	.word	0x08005d4b

080064a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d101      	bne.n	80064f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80064f2:	2302      	movs	r3, #2
 80064f4:	e027      	b.n	8006546 <HAL_UARTEx_DisableFifoMode+0x66>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2224      	movs	r2, #36	; 0x24
 8006502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0201 	bic.w	r2, r2, #1
 800651c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006524:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2220      	movs	r2, #32
 8006538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b084      	sub	sp, #16
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006562:	2b01      	cmp	r3, #1
 8006564:	d101      	bne.n	800656a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006566:	2302      	movs	r3, #2
 8006568:	e02d      	b.n	80065c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2224      	movs	r2, #36	; 0x24
 8006576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0201 	bic.w	r2, r2, #1
 8006590:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f850 	bl	800664c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d101      	bne.n	80065e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065e2:	2302      	movs	r3, #2
 80065e4:	e02d      	b.n	8006642 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2224      	movs	r2, #36	; 0x24
 80065f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0201 	bic.w	r2, r2, #1
 800660c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f812 	bl	800664c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2220      	movs	r2, #32
 8006634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006658:	2b00      	cmp	r3, #0
 800665a:	d108      	bne.n	800666e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800666c:	e031      	b.n	80066d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800666e:	2308      	movs	r3, #8
 8006670:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006672:	2308      	movs	r3, #8
 8006674:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	0e5b      	lsrs	r3, r3, #25
 800667e:	b2db      	uxtb	r3, r3
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	0f5b      	lsrs	r3, r3, #29
 800668e:	b2db      	uxtb	r3, r3
 8006690:	f003 0307 	and.w	r3, r3, #7
 8006694:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006696:	7bbb      	ldrb	r3, [r7, #14]
 8006698:	7b3a      	ldrb	r2, [r7, #12]
 800669a:	4911      	ldr	r1, [pc, #68]	; (80066e0 <UARTEx_SetNbDataToProcess+0x94>)
 800669c:	5c8a      	ldrb	r2, [r1, r2]
 800669e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80066a2:	7b3a      	ldrb	r2, [r7, #12]
 80066a4:	490f      	ldr	r1, [pc, #60]	; (80066e4 <UARTEx_SetNbDataToProcess+0x98>)
 80066a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80066a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	7b7a      	ldrb	r2, [r7, #13]
 80066b8:	4909      	ldr	r1, [pc, #36]	; (80066e0 <UARTEx_SetNbDataToProcess+0x94>)
 80066ba:	5c8a      	ldrb	r2, [r1, r2]
 80066bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80066c0:	7b7a      	ldrb	r2, [r7, #13]
 80066c2:	4908      	ldr	r1, [pc, #32]	; (80066e4 <UARTEx_SetNbDataToProcess+0x98>)
 80066c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80066d2:	bf00      	nop
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	08007efc 	.word	0x08007efc
 80066e4:	08007f04 	.word	0x08007f04

080066e8 <atoi>:
 80066e8:	220a      	movs	r2, #10
 80066ea:	2100      	movs	r1, #0
 80066ec:	f000 b944 	b.w	8006978 <strtol>

080066f0 <__errno>:
 80066f0:	4b01      	ldr	r3, [pc, #4]	; (80066f8 <__errno+0x8>)
 80066f2:	6818      	ldr	r0, [r3, #0]
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	200000a8 	.word	0x200000a8

080066fc <__libc_init_array>:
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	4d0d      	ldr	r5, [pc, #52]	; (8006734 <__libc_init_array+0x38>)
 8006700:	4c0d      	ldr	r4, [pc, #52]	; (8006738 <__libc_init_array+0x3c>)
 8006702:	1b64      	subs	r4, r4, r5
 8006704:	10a4      	asrs	r4, r4, #2
 8006706:	2600      	movs	r6, #0
 8006708:	42a6      	cmp	r6, r4
 800670a:	d109      	bne.n	8006720 <__libc_init_array+0x24>
 800670c:	4d0b      	ldr	r5, [pc, #44]	; (800673c <__libc_init_array+0x40>)
 800670e:	4c0c      	ldr	r4, [pc, #48]	; (8006740 <__libc_init_array+0x44>)
 8006710:	f001 faf2 	bl	8007cf8 <_init>
 8006714:	1b64      	subs	r4, r4, r5
 8006716:	10a4      	asrs	r4, r4, #2
 8006718:	2600      	movs	r6, #0
 800671a:	42a6      	cmp	r6, r4
 800671c:	d105      	bne.n	800672a <__libc_init_array+0x2e>
 800671e:	bd70      	pop	{r4, r5, r6, pc}
 8006720:	f855 3b04 	ldr.w	r3, [r5], #4
 8006724:	4798      	blx	r3
 8006726:	3601      	adds	r6, #1
 8006728:	e7ee      	b.n	8006708 <__libc_init_array+0xc>
 800672a:	f855 3b04 	ldr.w	r3, [r5], #4
 800672e:	4798      	blx	r3
 8006730:	3601      	adds	r6, #1
 8006732:	e7f2      	b.n	800671a <__libc_init_array+0x1e>
 8006734:	0800815c 	.word	0x0800815c
 8006738:	0800815c 	.word	0x0800815c
 800673c:	0800815c 	.word	0x0800815c
 8006740:	08008160 	.word	0x08008160

08006744 <memset>:
 8006744:	4402      	add	r2, r0
 8006746:	4603      	mov	r3, r0
 8006748:	4293      	cmp	r3, r2
 800674a:	d100      	bne.n	800674e <memset+0xa>
 800674c:	4770      	bx	lr
 800674e:	f803 1b01 	strb.w	r1, [r3], #1
 8006752:	e7f9      	b.n	8006748 <memset+0x4>

08006754 <siprintf>:
 8006754:	b40e      	push	{r1, r2, r3}
 8006756:	b500      	push	{lr}
 8006758:	b09c      	sub	sp, #112	; 0x70
 800675a:	ab1d      	add	r3, sp, #116	; 0x74
 800675c:	9002      	str	r0, [sp, #8]
 800675e:	9006      	str	r0, [sp, #24]
 8006760:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006764:	4809      	ldr	r0, [pc, #36]	; (800678c <siprintf+0x38>)
 8006766:	9107      	str	r1, [sp, #28]
 8006768:	9104      	str	r1, [sp, #16]
 800676a:	4909      	ldr	r1, [pc, #36]	; (8006790 <siprintf+0x3c>)
 800676c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006770:	9105      	str	r1, [sp, #20]
 8006772:	6800      	ldr	r0, [r0, #0]
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	a902      	add	r1, sp, #8
 8006778:	f000 fa7c 	bl	8006c74 <_svfiprintf_r>
 800677c:	9b02      	ldr	r3, [sp, #8]
 800677e:	2200      	movs	r2, #0
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	b01c      	add	sp, #112	; 0x70
 8006784:	f85d eb04 	ldr.w	lr, [sp], #4
 8006788:	b003      	add	sp, #12
 800678a:	4770      	bx	lr
 800678c:	200000a8 	.word	0x200000a8
 8006790:	ffff0208 	.word	0xffff0208

08006794 <strncmp>:
 8006794:	b510      	push	{r4, lr}
 8006796:	b17a      	cbz	r2, 80067b8 <strncmp+0x24>
 8006798:	4603      	mov	r3, r0
 800679a:	3901      	subs	r1, #1
 800679c:	1884      	adds	r4, r0, r2
 800679e:	f813 0b01 	ldrb.w	r0, [r3], #1
 80067a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80067a6:	4290      	cmp	r0, r2
 80067a8:	d101      	bne.n	80067ae <strncmp+0x1a>
 80067aa:	42a3      	cmp	r3, r4
 80067ac:	d101      	bne.n	80067b2 <strncmp+0x1e>
 80067ae:	1a80      	subs	r0, r0, r2
 80067b0:	bd10      	pop	{r4, pc}
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d1f3      	bne.n	800679e <strncmp+0xa>
 80067b6:	e7fa      	b.n	80067ae <strncmp+0x1a>
 80067b8:	4610      	mov	r0, r2
 80067ba:	e7f9      	b.n	80067b0 <strncmp+0x1c>

080067bc <strtok>:
 80067bc:	4b16      	ldr	r3, [pc, #88]	; (8006818 <strtok+0x5c>)
 80067be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067c0:	681e      	ldr	r6, [r3, #0]
 80067c2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80067c4:	4605      	mov	r5, r0
 80067c6:	b9fc      	cbnz	r4, 8006808 <strtok+0x4c>
 80067c8:	2050      	movs	r0, #80	; 0x50
 80067ca:	9101      	str	r1, [sp, #4]
 80067cc:	f000 f90e 	bl	80069ec <malloc>
 80067d0:	9901      	ldr	r1, [sp, #4]
 80067d2:	65b0      	str	r0, [r6, #88]	; 0x58
 80067d4:	4602      	mov	r2, r0
 80067d6:	b920      	cbnz	r0, 80067e2 <strtok+0x26>
 80067d8:	4b10      	ldr	r3, [pc, #64]	; (800681c <strtok+0x60>)
 80067da:	4811      	ldr	r0, [pc, #68]	; (8006820 <strtok+0x64>)
 80067dc:	2157      	movs	r1, #87	; 0x57
 80067de:	f000 f8d5 	bl	800698c <__assert_func>
 80067e2:	e9c0 4400 	strd	r4, r4, [r0]
 80067e6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80067ea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80067ee:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80067f2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80067f6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80067fa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80067fe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006802:	6184      	str	r4, [r0, #24]
 8006804:	7704      	strb	r4, [r0, #28]
 8006806:	6244      	str	r4, [r0, #36]	; 0x24
 8006808:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800680a:	2301      	movs	r3, #1
 800680c:	4628      	mov	r0, r5
 800680e:	b002      	add	sp, #8
 8006810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006814:	f000 b806 	b.w	8006824 <__strtok_r>
 8006818:	200000a8 	.word	0x200000a8
 800681c:	08007f10 	.word	0x08007f10
 8006820:	08007f27 	.word	0x08007f27

08006824 <__strtok_r>:
 8006824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006826:	b908      	cbnz	r0, 800682c <__strtok_r+0x8>
 8006828:	6810      	ldr	r0, [r2, #0]
 800682a:	b188      	cbz	r0, 8006850 <__strtok_r+0x2c>
 800682c:	4604      	mov	r4, r0
 800682e:	4620      	mov	r0, r4
 8006830:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006834:	460f      	mov	r7, r1
 8006836:	f817 6b01 	ldrb.w	r6, [r7], #1
 800683a:	b91e      	cbnz	r6, 8006844 <__strtok_r+0x20>
 800683c:	b965      	cbnz	r5, 8006858 <__strtok_r+0x34>
 800683e:	6015      	str	r5, [r2, #0]
 8006840:	4628      	mov	r0, r5
 8006842:	e005      	b.n	8006850 <__strtok_r+0x2c>
 8006844:	42b5      	cmp	r5, r6
 8006846:	d1f6      	bne.n	8006836 <__strtok_r+0x12>
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1f0      	bne.n	800682e <__strtok_r+0xa>
 800684c:	6014      	str	r4, [r2, #0]
 800684e:	7003      	strb	r3, [r0, #0]
 8006850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006852:	461c      	mov	r4, r3
 8006854:	e00c      	b.n	8006870 <__strtok_r+0x4c>
 8006856:	b915      	cbnz	r5, 800685e <__strtok_r+0x3a>
 8006858:	f814 3b01 	ldrb.w	r3, [r4], #1
 800685c:	460e      	mov	r6, r1
 800685e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006862:	42ab      	cmp	r3, r5
 8006864:	d1f7      	bne.n	8006856 <__strtok_r+0x32>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0f3      	beq.n	8006852 <__strtok_r+0x2e>
 800686a:	2300      	movs	r3, #0
 800686c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006870:	6014      	str	r4, [r2, #0]
 8006872:	e7ed      	b.n	8006850 <__strtok_r+0x2c>

08006874 <_strtol_l.constprop.0>:
 8006874:	2b01      	cmp	r3, #1
 8006876:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800687a:	d001      	beq.n	8006880 <_strtol_l.constprop.0+0xc>
 800687c:	2b24      	cmp	r3, #36	; 0x24
 800687e:	d906      	bls.n	800688e <_strtol_l.constprop.0+0x1a>
 8006880:	f7ff ff36 	bl	80066f0 <__errno>
 8006884:	2316      	movs	r3, #22
 8006886:	6003      	str	r3, [r0, #0]
 8006888:	2000      	movs	r0, #0
 800688a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006974 <_strtol_l.constprop.0+0x100>
 8006892:	460d      	mov	r5, r1
 8006894:	462e      	mov	r6, r5
 8006896:	f815 4b01 	ldrb.w	r4, [r5], #1
 800689a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800689e:	f017 0708 	ands.w	r7, r7, #8
 80068a2:	d1f7      	bne.n	8006894 <_strtol_l.constprop.0+0x20>
 80068a4:	2c2d      	cmp	r4, #45	; 0x2d
 80068a6:	d132      	bne.n	800690e <_strtol_l.constprop.0+0x9a>
 80068a8:	782c      	ldrb	r4, [r5, #0]
 80068aa:	2701      	movs	r7, #1
 80068ac:	1cb5      	adds	r5, r6, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d05b      	beq.n	800696a <_strtol_l.constprop.0+0xf6>
 80068b2:	2b10      	cmp	r3, #16
 80068b4:	d109      	bne.n	80068ca <_strtol_l.constprop.0+0x56>
 80068b6:	2c30      	cmp	r4, #48	; 0x30
 80068b8:	d107      	bne.n	80068ca <_strtol_l.constprop.0+0x56>
 80068ba:	782c      	ldrb	r4, [r5, #0]
 80068bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80068c0:	2c58      	cmp	r4, #88	; 0x58
 80068c2:	d14d      	bne.n	8006960 <_strtol_l.constprop.0+0xec>
 80068c4:	786c      	ldrb	r4, [r5, #1]
 80068c6:	2310      	movs	r3, #16
 80068c8:	3502      	adds	r5, #2
 80068ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80068ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80068d2:	f04f 0c00 	mov.w	ip, #0
 80068d6:	fbb8 f9f3 	udiv	r9, r8, r3
 80068da:	4666      	mov	r6, ip
 80068dc:	fb03 8a19 	mls	sl, r3, r9, r8
 80068e0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80068e4:	f1be 0f09 	cmp.w	lr, #9
 80068e8:	d816      	bhi.n	8006918 <_strtol_l.constprop.0+0xa4>
 80068ea:	4674      	mov	r4, lr
 80068ec:	42a3      	cmp	r3, r4
 80068ee:	dd24      	ble.n	800693a <_strtol_l.constprop.0+0xc6>
 80068f0:	f1bc 0f00 	cmp.w	ip, #0
 80068f4:	db1e      	blt.n	8006934 <_strtol_l.constprop.0+0xc0>
 80068f6:	45b1      	cmp	r9, r6
 80068f8:	d31c      	bcc.n	8006934 <_strtol_l.constprop.0+0xc0>
 80068fa:	d101      	bne.n	8006900 <_strtol_l.constprop.0+0x8c>
 80068fc:	45a2      	cmp	sl, r4
 80068fe:	db19      	blt.n	8006934 <_strtol_l.constprop.0+0xc0>
 8006900:	fb06 4603 	mla	r6, r6, r3, r4
 8006904:	f04f 0c01 	mov.w	ip, #1
 8006908:	f815 4b01 	ldrb.w	r4, [r5], #1
 800690c:	e7e8      	b.n	80068e0 <_strtol_l.constprop.0+0x6c>
 800690e:	2c2b      	cmp	r4, #43	; 0x2b
 8006910:	bf04      	itt	eq
 8006912:	782c      	ldrbeq	r4, [r5, #0]
 8006914:	1cb5      	addeq	r5, r6, #2
 8006916:	e7ca      	b.n	80068ae <_strtol_l.constprop.0+0x3a>
 8006918:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800691c:	f1be 0f19 	cmp.w	lr, #25
 8006920:	d801      	bhi.n	8006926 <_strtol_l.constprop.0+0xb2>
 8006922:	3c37      	subs	r4, #55	; 0x37
 8006924:	e7e2      	b.n	80068ec <_strtol_l.constprop.0+0x78>
 8006926:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800692a:	f1be 0f19 	cmp.w	lr, #25
 800692e:	d804      	bhi.n	800693a <_strtol_l.constprop.0+0xc6>
 8006930:	3c57      	subs	r4, #87	; 0x57
 8006932:	e7db      	b.n	80068ec <_strtol_l.constprop.0+0x78>
 8006934:	f04f 3cff 	mov.w	ip, #4294967295
 8006938:	e7e6      	b.n	8006908 <_strtol_l.constprop.0+0x94>
 800693a:	f1bc 0f00 	cmp.w	ip, #0
 800693e:	da05      	bge.n	800694c <_strtol_l.constprop.0+0xd8>
 8006940:	2322      	movs	r3, #34	; 0x22
 8006942:	6003      	str	r3, [r0, #0]
 8006944:	4646      	mov	r6, r8
 8006946:	b942      	cbnz	r2, 800695a <_strtol_l.constprop.0+0xe6>
 8006948:	4630      	mov	r0, r6
 800694a:	e79e      	b.n	800688a <_strtol_l.constprop.0+0x16>
 800694c:	b107      	cbz	r7, 8006950 <_strtol_l.constprop.0+0xdc>
 800694e:	4276      	negs	r6, r6
 8006950:	2a00      	cmp	r2, #0
 8006952:	d0f9      	beq.n	8006948 <_strtol_l.constprop.0+0xd4>
 8006954:	f1bc 0f00 	cmp.w	ip, #0
 8006958:	d000      	beq.n	800695c <_strtol_l.constprop.0+0xe8>
 800695a:	1e69      	subs	r1, r5, #1
 800695c:	6011      	str	r1, [r2, #0]
 800695e:	e7f3      	b.n	8006948 <_strtol_l.constprop.0+0xd4>
 8006960:	2430      	movs	r4, #48	; 0x30
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1b1      	bne.n	80068ca <_strtol_l.constprop.0+0x56>
 8006966:	2308      	movs	r3, #8
 8006968:	e7af      	b.n	80068ca <_strtol_l.constprop.0+0x56>
 800696a:	2c30      	cmp	r4, #48	; 0x30
 800696c:	d0a5      	beq.n	80068ba <_strtol_l.constprop.0+0x46>
 800696e:	230a      	movs	r3, #10
 8006970:	e7ab      	b.n	80068ca <_strtol_l.constprop.0+0x56>
 8006972:	bf00      	nop
 8006974:	08007fc1 	.word	0x08007fc1

08006978 <strtol>:
 8006978:	4613      	mov	r3, r2
 800697a:	460a      	mov	r2, r1
 800697c:	4601      	mov	r1, r0
 800697e:	4802      	ldr	r0, [pc, #8]	; (8006988 <strtol+0x10>)
 8006980:	6800      	ldr	r0, [r0, #0]
 8006982:	f7ff bf77 	b.w	8006874 <_strtol_l.constprop.0>
 8006986:	bf00      	nop
 8006988:	200000a8 	.word	0x200000a8

0800698c <__assert_func>:
 800698c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800698e:	4614      	mov	r4, r2
 8006990:	461a      	mov	r2, r3
 8006992:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <__assert_func+0x2c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4605      	mov	r5, r0
 8006998:	68d8      	ldr	r0, [r3, #12]
 800699a:	b14c      	cbz	r4, 80069b0 <__assert_func+0x24>
 800699c:	4b07      	ldr	r3, [pc, #28]	; (80069bc <__assert_func+0x30>)
 800699e:	9100      	str	r1, [sp, #0]
 80069a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80069a4:	4906      	ldr	r1, [pc, #24]	; (80069c0 <__assert_func+0x34>)
 80069a6:	462b      	mov	r3, r5
 80069a8:	f000 f80e 	bl	80069c8 <fiprintf>
 80069ac:	f000 fe20 	bl	80075f0 <abort>
 80069b0:	4b04      	ldr	r3, [pc, #16]	; (80069c4 <__assert_func+0x38>)
 80069b2:	461c      	mov	r4, r3
 80069b4:	e7f3      	b.n	800699e <__assert_func+0x12>
 80069b6:	bf00      	nop
 80069b8:	200000a8 	.word	0x200000a8
 80069bc:	08007f84 	.word	0x08007f84
 80069c0:	08007f91 	.word	0x08007f91
 80069c4:	08007fbf 	.word	0x08007fbf

080069c8 <fiprintf>:
 80069c8:	b40e      	push	{r1, r2, r3}
 80069ca:	b503      	push	{r0, r1, lr}
 80069cc:	4601      	mov	r1, r0
 80069ce:	ab03      	add	r3, sp, #12
 80069d0:	4805      	ldr	r0, [pc, #20]	; (80069e8 <fiprintf+0x20>)
 80069d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069d6:	6800      	ldr	r0, [r0, #0]
 80069d8:	9301      	str	r3, [sp, #4]
 80069da:	f000 fa75 	bl	8006ec8 <_vfiprintf_r>
 80069de:	b002      	add	sp, #8
 80069e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069e4:	b003      	add	sp, #12
 80069e6:	4770      	bx	lr
 80069e8:	200000a8 	.word	0x200000a8

080069ec <malloc>:
 80069ec:	4b02      	ldr	r3, [pc, #8]	; (80069f8 <malloc+0xc>)
 80069ee:	4601      	mov	r1, r0
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	f000 b86f 	b.w	8006ad4 <_malloc_r>
 80069f6:	bf00      	nop
 80069f8:	200000a8 	.word	0x200000a8

080069fc <_free_r>:
 80069fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069fe:	2900      	cmp	r1, #0
 8006a00:	d044      	beq.n	8006a8c <_free_r+0x90>
 8006a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a06:	9001      	str	r0, [sp, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8006a0e:	bfb8      	it	lt
 8006a10:	18e4      	addlt	r4, r4, r3
 8006a12:	f001 f83d 	bl	8007a90 <__malloc_lock>
 8006a16:	4a1e      	ldr	r2, [pc, #120]	; (8006a90 <_free_r+0x94>)
 8006a18:	9801      	ldr	r0, [sp, #4]
 8006a1a:	6813      	ldr	r3, [r2, #0]
 8006a1c:	b933      	cbnz	r3, 8006a2c <_free_r+0x30>
 8006a1e:	6063      	str	r3, [r4, #4]
 8006a20:	6014      	str	r4, [r2, #0]
 8006a22:	b003      	add	sp, #12
 8006a24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a28:	f001 b838 	b.w	8007a9c <__malloc_unlock>
 8006a2c:	42a3      	cmp	r3, r4
 8006a2e:	d908      	bls.n	8006a42 <_free_r+0x46>
 8006a30:	6825      	ldr	r5, [r4, #0]
 8006a32:	1961      	adds	r1, r4, r5
 8006a34:	428b      	cmp	r3, r1
 8006a36:	bf01      	itttt	eq
 8006a38:	6819      	ldreq	r1, [r3, #0]
 8006a3a:	685b      	ldreq	r3, [r3, #4]
 8006a3c:	1949      	addeq	r1, r1, r5
 8006a3e:	6021      	streq	r1, [r4, #0]
 8006a40:	e7ed      	b.n	8006a1e <_free_r+0x22>
 8006a42:	461a      	mov	r2, r3
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	b10b      	cbz	r3, 8006a4c <_free_r+0x50>
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	d9fa      	bls.n	8006a42 <_free_r+0x46>
 8006a4c:	6811      	ldr	r1, [r2, #0]
 8006a4e:	1855      	adds	r5, r2, r1
 8006a50:	42a5      	cmp	r5, r4
 8006a52:	d10b      	bne.n	8006a6c <_free_r+0x70>
 8006a54:	6824      	ldr	r4, [r4, #0]
 8006a56:	4421      	add	r1, r4
 8006a58:	1854      	adds	r4, r2, r1
 8006a5a:	42a3      	cmp	r3, r4
 8006a5c:	6011      	str	r1, [r2, #0]
 8006a5e:	d1e0      	bne.n	8006a22 <_free_r+0x26>
 8006a60:	681c      	ldr	r4, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	6053      	str	r3, [r2, #4]
 8006a66:	4421      	add	r1, r4
 8006a68:	6011      	str	r1, [r2, #0]
 8006a6a:	e7da      	b.n	8006a22 <_free_r+0x26>
 8006a6c:	d902      	bls.n	8006a74 <_free_r+0x78>
 8006a6e:	230c      	movs	r3, #12
 8006a70:	6003      	str	r3, [r0, #0]
 8006a72:	e7d6      	b.n	8006a22 <_free_r+0x26>
 8006a74:	6825      	ldr	r5, [r4, #0]
 8006a76:	1961      	adds	r1, r4, r5
 8006a78:	428b      	cmp	r3, r1
 8006a7a:	bf04      	itt	eq
 8006a7c:	6819      	ldreq	r1, [r3, #0]
 8006a7e:	685b      	ldreq	r3, [r3, #4]
 8006a80:	6063      	str	r3, [r4, #4]
 8006a82:	bf04      	itt	eq
 8006a84:	1949      	addeq	r1, r1, r5
 8006a86:	6021      	streq	r1, [r4, #0]
 8006a88:	6054      	str	r4, [r2, #4]
 8006a8a:	e7ca      	b.n	8006a22 <_free_r+0x26>
 8006a8c:	b003      	add	sp, #12
 8006a8e:	bd30      	pop	{r4, r5, pc}
 8006a90:	200002b0 	.word	0x200002b0

08006a94 <sbrk_aligned>:
 8006a94:	b570      	push	{r4, r5, r6, lr}
 8006a96:	4e0e      	ldr	r6, [pc, #56]	; (8006ad0 <sbrk_aligned+0x3c>)
 8006a98:	460c      	mov	r4, r1
 8006a9a:	6831      	ldr	r1, [r6, #0]
 8006a9c:	4605      	mov	r5, r0
 8006a9e:	b911      	cbnz	r1, 8006aa6 <sbrk_aligned+0x12>
 8006aa0:	f000 fcd6 	bl	8007450 <_sbrk_r>
 8006aa4:	6030      	str	r0, [r6, #0]
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f000 fcd1 	bl	8007450 <_sbrk_r>
 8006aae:	1c43      	adds	r3, r0, #1
 8006ab0:	d00a      	beq.n	8006ac8 <sbrk_aligned+0x34>
 8006ab2:	1cc4      	adds	r4, r0, #3
 8006ab4:	f024 0403 	bic.w	r4, r4, #3
 8006ab8:	42a0      	cmp	r0, r4
 8006aba:	d007      	beq.n	8006acc <sbrk_aligned+0x38>
 8006abc:	1a21      	subs	r1, r4, r0
 8006abe:	4628      	mov	r0, r5
 8006ac0:	f000 fcc6 	bl	8007450 <_sbrk_r>
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	d101      	bne.n	8006acc <sbrk_aligned+0x38>
 8006ac8:	f04f 34ff 	mov.w	r4, #4294967295
 8006acc:	4620      	mov	r0, r4
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	200002b4 	.word	0x200002b4

08006ad4 <_malloc_r>:
 8006ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad8:	1ccd      	adds	r5, r1, #3
 8006ada:	f025 0503 	bic.w	r5, r5, #3
 8006ade:	3508      	adds	r5, #8
 8006ae0:	2d0c      	cmp	r5, #12
 8006ae2:	bf38      	it	cc
 8006ae4:	250c      	movcc	r5, #12
 8006ae6:	2d00      	cmp	r5, #0
 8006ae8:	4607      	mov	r7, r0
 8006aea:	db01      	blt.n	8006af0 <_malloc_r+0x1c>
 8006aec:	42a9      	cmp	r1, r5
 8006aee:	d905      	bls.n	8006afc <_malloc_r+0x28>
 8006af0:	230c      	movs	r3, #12
 8006af2:	603b      	str	r3, [r7, #0]
 8006af4:	2600      	movs	r6, #0
 8006af6:	4630      	mov	r0, r6
 8006af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006afc:	4e2e      	ldr	r6, [pc, #184]	; (8006bb8 <_malloc_r+0xe4>)
 8006afe:	f000 ffc7 	bl	8007a90 <__malloc_lock>
 8006b02:	6833      	ldr	r3, [r6, #0]
 8006b04:	461c      	mov	r4, r3
 8006b06:	bb34      	cbnz	r4, 8006b56 <_malloc_r+0x82>
 8006b08:	4629      	mov	r1, r5
 8006b0a:	4638      	mov	r0, r7
 8006b0c:	f7ff ffc2 	bl	8006a94 <sbrk_aligned>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	4604      	mov	r4, r0
 8006b14:	d14d      	bne.n	8006bb2 <_malloc_r+0xde>
 8006b16:	6834      	ldr	r4, [r6, #0]
 8006b18:	4626      	mov	r6, r4
 8006b1a:	2e00      	cmp	r6, #0
 8006b1c:	d140      	bne.n	8006ba0 <_malloc_r+0xcc>
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	4631      	mov	r1, r6
 8006b22:	4638      	mov	r0, r7
 8006b24:	eb04 0803 	add.w	r8, r4, r3
 8006b28:	f000 fc92 	bl	8007450 <_sbrk_r>
 8006b2c:	4580      	cmp	r8, r0
 8006b2e:	d13a      	bne.n	8006ba6 <_malloc_r+0xd2>
 8006b30:	6821      	ldr	r1, [r4, #0]
 8006b32:	3503      	adds	r5, #3
 8006b34:	1a6d      	subs	r5, r5, r1
 8006b36:	f025 0503 	bic.w	r5, r5, #3
 8006b3a:	3508      	adds	r5, #8
 8006b3c:	2d0c      	cmp	r5, #12
 8006b3e:	bf38      	it	cc
 8006b40:	250c      	movcc	r5, #12
 8006b42:	4629      	mov	r1, r5
 8006b44:	4638      	mov	r0, r7
 8006b46:	f7ff ffa5 	bl	8006a94 <sbrk_aligned>
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	d02b      	beq.n	8006ba6 <_malloc_r+0xd2>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	442b      	add	r3, r5
 8006b52:	6023      	str	r3, [r4, #0]
 8006b54:	e00e      	b.n	8006b74 <_malloc_r+0xa0>
 8006b56:	6822      	ldr	r2, [r4, #0]
 8006b58:	1b52      	subs	r2, r2, r5
 8006b5a:	d41e      	bmi.n	8006b9a <_malloc_r+0xc6>
 8006b5c:	2a0b      	cmp	r2, #11
 8006b5e:	d916      	bls.n	8006b8e <_malloc_r+0xba>
 8006b60:	1961      	adds	r1, r4, r5
 8006b62:	42a3      	cmp	r3, r4
 8006b64:	6025      	str	r5, [r4, #0]
 8006b66:	bf18      	it	ne
 8006b68:	6059      	strne	r1, [r3, #4]
 8006b6a:	6863      	ldr	r3, [r4, #4]
 8006b6c:	bf08      	it	eq
 8006b6e:	6031      	streq	r1, [r6, #0]
 8006b70:	5162      	str	r2, [r4, r5]
 8006b72:	604b      	str	r3, [r1, #4]
 8006b74:	4638      	mov	r0, r7
 8006b76:	f104 060b 	add.w	r6, r4, #11
 8006b7a:	f000 ff8f 	bl	8007a9c <__malloc_unlock>
 8006b7e:	f026 0607 	bic.w	r6, r6, #7
 8006b82:	1d23      	adds	r3, r4, #4
 8006b84:	1af2      	subs	r2, r6, r3
 8006b86:	d0b6      	beq.n	8006af6 <_malloc_r+0x22>
 8006b88:	1b9b      	subs	r3, r3, r6
 8006b8a:	50a3      	str	r3, [r4, r2]
 8006b8c:	e7b3      	b.n	8006af6 <_malloc_r+0x22>
 8006b8e:	6862      	ldr	r2, [r4, #4]
 8006b90:	42a3      	cmp	r3, r4
 8006b92:	bf0c      	ite	eq
 8006b94:	6032      	streq	r2, [r6, #0]
 8006b96:	605a      	strne	r2, [r3, #4]
 8006b98:	e7ec      	b.n	8006b74 <_malloc_r+0xa0>
 8006b9a:	4623      	mov	r3, r4
 8006b9c:	6864      	ldr	r4, [r4, #4]
 8006b9e:	e7b2      	b.n	8006b06 <_malloc_r+0x32>
 8006ba0:	4634      	mov	r4, r6
 8006ba2:	6876      	ldr	r6, [r6, #4]
 8006ba4:	e7b9      	b.n	8006b1a <_malloc_r+0x46>
 8006ba6:	230c      	movs	r3, #12
 8006ba8:	603b      	str	r3, [r7, #0]
 8006baa:	4638      	mov	r0, r7
 8006bac:	f000 ff76 	bl	8007a9c <__malloc_unlock>
 8006bb0:	e7a1      	b.n	8006af6 <_malloc_r+0x22>
 8006bb2:	6025      	str	r5, [r4, #0]
 8006bb4:	e7de      	b.n	8006b74 <_malloc_r+0xa0>
 8006bb6:	bf00      	nop
 8006bb8:	200002b0 	.word	0x200002b0

08006bbc <__ssputs_r>:
 8006bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc0:	688e      	ldr	r6, [r1, #8]
 8006bc2:	429e      	cmp	r6, r3
 8006bc4:	4682      	mov	sl, r0
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	4690      	mov	r8, r2
 8006bca:	461f      	mov	r7, r3
 8006bcc:	d838      	bhi.n	8006c40 <__ssputs_r+0x84>
 8006bce:	898a      	ldrh	r2, [r1, #12]
 8006bd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bd4:	d032      	beq.n	8006c3c <__ssputs_r+0x80>
 8006bd6:	6825      	ldr	r5, [r4, #0]
 8006bd8:	6909      	ldr	r1, [r1, #16]
 8006bda:	eba5 0901 	sub.w	r9, r5, r1
 8006bde:	6965      	ldr	r5, [r4, #20]
 8006be0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006be4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006be8:	3301      	adds	r3, #1
 8006bea:	444b      	add	r3, r9
 8006bec:	106d      	asrs	r5, r5, #1
 8006bee:	429d      	cmp	r5, r3
 8006bf0:	bf38      	it	cc
 8006bf2:	461d      	movcc	r5, r3
 8006bf4:	0553      	lsls	r3, r2, #21
 8006bf6:	d531      	bpl.n	8006c5c <__ssputs_r+0xa0>
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	f7ff ff6b 	bl	8006ad4 <_malloc_r>
 8006bfe:	4606      	mov	r6, r0
 8006c00:	b950      	cbnz	r0, 8006c18 <__ssputs_r+0x5c>
 8006c02:	230c      	movs	r3, #12
 8006c04:	f8ca 3000 	str.w	r3, [sl]
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c0e:	81a3      	strh	r3, [r4, #12]
 8006c10:	f04f 30ff 	mov.w	r0, #4294967295
 8006c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c18:	6921      	ldr	r1, [r4, #16]
 8006c1a:	464a      	mov	r2, r9
 8006c1c:	f000 ff10 	bl	8007a40 <memcpy>
 8006c20:	89a3      	ldrh	r3, [r4, #12]
 8006c22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2a:	81a3      	strh	r3, [r4, #12]
 8006c2c:	6126      	str	r6, [r4, #16]
 8006c2e:	6165      	str	r5, [r4, #20]
 8006c30:	444e      	add	r6, r9
 8006c32:	eba5 0509 	sub.w	r5, r5, r9
 8006c36:	6026      	str	r6, [r4, #0]
 8006c38:	60a5      	str	r5, [r4, #8]
 8006c3a:	463e      	mov	r6, r7
 8006c3c:	42be      	cmp	r6, r7
 8006c3e:	d900      	bls.n	8006c42 <__ssputs_r+0x86>
 8006c40:	463e      	mov	r6, r7
 8006c42:	6820      	ldr	r0, [r4, #0]
 8006c44:	4632      	mov	r2, r6
 8006c46:	4641      	mov	r1, r8
 8006c48:	f000 ff08 	bl	8007a5c <memmove>
 8006c4c:	68a3      	ldr	r3, [r4, #8]
 8006c4e:	1b9b      	subs	r3, r3, r6
 8006c50:	60a3      	str	r3, [r4, #8]
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	4433      	add	r3, r6
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	2000      	movs	r0, #0
 8006c5a:	e7db      	b.n	8006c14 <__ssputs_r+0x58>
 8006c5c:	462a      	mov	r2, r5
 8006c5e:	f000 ff23 	bl	8007aa8 <_realloc_r>
 8006c62:	4606      	mov	r6, r0
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d1e1      	bne.n	8006c2c <__ssputs_r+0x70>
 8006c68:	6921      	ldr	r1, [r4, #16]
 8006c6a:	4650      	mov	r0, sl
 8006c6c:	f7ff fec6 	bl	80069fc <_free_r>
 8006c70:	e7c7      	b.n	8006c02 <__ssputs_r+0x46>
	...

08006c74 <_svfiprintf_r>:
 8006c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c78:	4698      	mov	r8, r3
 8006c7a:	898b      	ldrh	r3, [r1, #12]
 8006c7c:	061b      	lsls	r3, r3, #24
 8006c7e:	b09d      	sub	sp, #116	; 0x74
 8006c80:	4607      	mov	r7, r0
 8006c82:	460d      	mov	r5, r1
 8006c84:	4614      	mov	r4, r2
 8006c86:	d50e      	bpl.n	8006ca6 <_svfiprintf_r+0x32>
 8006c88:	690b      	ldr	r3, [r1, #16]
 8006c8a:	b963      	cbnz	r3, 8006ca6 <_svfiprintf_r+0x32>
 8006c8c:	2140      	movs	r1, #64	; 0x40
 8006c8e:	f7ff ff21 	bl	8006ad4 <_malloc_r>
 8006c92:	6028      	str	r0, [r5, #0]
 8006c94:	6128      	str	r0, [r5, #16]
 8006c96:	b920      	cbnz	r0, 8006ca2 <_svfiprintf_r+0x2e>
 8006c98:	230c      	movs	r3, #12
 8006c9a:	603b      	str	r3, [r7, #0]
 8006c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006ca0:	e0d1      	b.n	8006e46 <_svfiprintf_r+0x1d2>
 8006ca2:	2340      	movs	r3, #64	; 0x40
 8006ca4:	616b      	str	r3, [r5, #20]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8006caa:	2320      	movs	r3, #32
 8006cac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cb4:	2330      	movs	r3, #48	; 0x30
 8006cb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e60 <_svfiprintf_r+0x1ec>
 8006cba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cbe:	f04f 0901 	mov.w	r9, #1
 8006cc2:	4623      	mov	r3, r4
 8006cc4:	469a      	mov	sl, r3
 8006cc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cca:	b10a      	cbz	r2, 8006cd0 <_svfiprintf_r+0x5c>
 8006ccc:	2a25      	cmp	r2, #37	; 0x25
 8006cce:	d1f9      	bne.n	8006cc4 <_svfiprintf_r+0x50>
 8006cd0:	ebba 0b04 	subs.w	fp, sl, r4
 8006cd4:	d00b      	beq.n	8006cee <_svfiprintf_r+0x7a>
 8006cd6:	465b      	mov	r3, fp
 8006cd8:	4622      	mov	r2, r4
 8006cda:	4629      	mov	r1, r5
 8006cdc:	4638      	mov	r0, r7
 8006cde:	f7ff ff6d 	bl	8006bbc <__ssputs_r>
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	f000 80aa 	beq.w	8006e3c <_svfiprintf_r+0x1c8>
 8006ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cea:	445a      	add	r2, fp
 8006cec:	9209      	str	r2, [sp, #36]	; 0x24
 8006cee:	f89a 3000 	ldrb.w	r3, [sl]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 80a2 	beq.w	8006e3c <_svfiprintf_r+0x1c8>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006cfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d02:	f10a 0a01 	add.w	sl, sl, #1
 8006d06:	9304      	str	r3, [sp, #16]
 8006d08:	9307      	str	r3, [sp, #28]
 8006d0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d0e:	931a      	str	r3, [sp, #104]	; 0x68
 8006d10:	4654      	mov	r4, sl
 8006d12:	2205      	movs	r2, #5
 8006d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d18:	4851      	ldr	r0, [pc, #324]	; (8006e60 <_svfiprintf_r+0x1ec>)
 8006d1a:	f7f9 fa91 	bl	8000240 <memchr>
 8006d1e:	9a04      	ldr	r2, [sp, #16]
 8006d20:	b9d8      	cbnz	r0, 8006d5a <_svfiprintf_r+0xe6>
 8006d22:	06d0      	lsls	r0, r2, #27
 8006d24:	bf44      	itt	mi
 8006d26:	2320      	movmi	r3, #32
 8006d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d2c:	0711      	lsls	r1, r2, #28
 8006d2e:	bf44      	itt	mi
 8006d30:	232b      	movmi	r3, #43	; 0x2b
 8006d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d36:	f89a 3000 	ldrb.w	r3, [sl]
 8006d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d3c:	d015      	beq.n	8006d6a <_svfiprintf_r+0xf6>
 8006d3e:	9a07      	ldr	r2, [sp, #28]
 8006d40:	4654      	mov	r4, sl
 8006d42:	2000      	movs	r0, #0
 8006d44:	f04f 0c0a 	mov.w	ip, #10
 8006d48:	4621      	mov	r1, r4
 8006d4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d4e:	3b30      	subs	r3, #48	; 0x30
 8006d50:	2b09      	cmp	r3, #9
 8006d52:	d94e      	bls.n	8006df2 <_svfiprintf_r+0x17e>
 8006d54:	b1b0      	cbz	r0, 8006d84 <_svfiprintf_r+0x110>
 8006d56:	9207      	str	r2, [sp, #28]
 8006d58:	e014      	b.n	8006d84 <_svfiprintf_r+0x110>
 8006d5a:	eba0 0308 	sub.w	r3, r0, r8
 8006d5e:	fa09 f303 	lsl.w	r3, r9, r3
 8006d62:	4313      	orrs	r3, r2
 8006d64:	9304      	str	r3, [sp, #16]
 8006d66:	46a2      	mov	sl, r4
 8006d68:	e7d2      	b.n	8006d10 <_svfiprintf_r+0x9c>
 8006d6a:	9b03      	ldr	r3, [sp, #12]
 8006d6c:	1d19      	adds	r1, r3, #4
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	9103      	str	r1, [sp, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	bfbb      	ittet	lt
 8006d76:	425b      	neglt	r3, r3
 8006d78:	f042 0202 	orrlt.w	r2, r2, #2
 8006d7c:	9307      	strge	r3, [sp, #28]
 8006d7e:	9307      	strlt	r3, [sp, #28]
 8006d80:	bfb8      	it	lt
 8006d82:	9204      	strlt	r2, [sp, #16]
 8006d84:	7823      	ldrb	r3, [r4, #0]
 8006d86:	2b2e      	cmp	r3, #46	; 0x2e
 8006d88:	d10c      	bne.n	8006da4 <_svfiprintf_r+0x130>
 8006d8a:	7863      	ldrb	r3, [r4, #1]
 8006d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d8e:	d135      	bne.n	8006dfc <_svfiprintf_r+0x188>
 8006d90:	9b03      	ldr	r3, [sp, #12]
 8006d92:	1d1a      	adds	r2, r3, #4
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	9203      	str	r2, [sp, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	bfb8      	it	lt
 8006d9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006da0:	3402      	adds	r4, #2
 8006da2:	9305      	str	r3, [sp, #20]
 8006da4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e70 <_svfiprintf_r+0x1fc>
 8006da8:	7821      	ldrb	r1, [r4, #0]
 8006daa:	2203      	movs	r2, #3
 8006dac:	4650      	mov	r0, sl
 8006dae:	f7f9 fa47 	bl	8000240 <memchr>
 8006db2:	b140      	cbz	r0, 8006dc6 <_svfiprintf_r+0x152>
 8006db4:	2340      	movs	r3, #64	; 0x40
 8006db6:	eba0 000a 	sub.w	r0, r0, sl
 8006dba:	fa03 f000 	lsl.w	r0, r3, r0
 8006dbe:	9b04      	ldr	r3, [sp, #16]
 8006dc0:	4303      	orrs	r3, r0
 8006dc2:	3401      	adds	r4, #1
 8006dc4:	9304      	str	r3, [sp, #16]
 8006dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dca:	4826      	ldr	r0, [pc, #152]	; (8006e64 <_svfiprintf_r+0x1f0>)
 8006dcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dd0:	2206      	movs	r2, #6
 8006dd2:	f7f9 fa35 	bl	8000240 <memchr>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d038      	beq.n	8006e4c <_svfiprintf_r+0x1d8>
 8006dda:	4b23      	ldr	r3, [pc, #140]	; (8006e68 <_svfiprintf_r+0x1f4>)
 8006ddc:	bb1b      	cbnz	r3, 8006e26 <_svfiprintf_r+0x1b2>
 8006dde:	9b03      	ldr	r3, [sp, #12]
 8006de0:	3307      	adds	r3, #7
 8006de2:	f023 0307 	bic.w	r3, r3, #7
 8006de6:	3308      	adds	r3, #8
 8006de8:	9303      	str	r3, [sp, #12]
 8006dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dec:	4433      	add	r3, r6
 8006dee:	9309      	str	r3, [sp, #36]	; 0x24
 8006df0:	e767      	b.n	8006cc2 <_svfiprintf_r+0x4e>
 8006df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006df6:	460c      	mov	r4, r1
 8006df8:	2001      	movs	r0, #1
 8006dfa:	e7a5      	b.n	8006d48 <_svfiprintf_r+0xd4>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	3401      	adds	r4, #1
 8006e00:	9305      	str	r3, [sp, #20]
 8006e02:	4619      	mov	r1, r3
 8006e04:	f04f 0c0a 	mov.w	ip, #10
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e0e:	3a30      	subs	r2, #48	; 0x30
 8006e10:	2a09      	cmp	r2, #9
 8006e12:	d903      	bls.n	8006e1c <_svfiprintf_r+0x1a8>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0c5      	beq.n	8006da4 <_svfiprintf_r+0x130>
 8006e18:	9105      	str	r1, [sp, #20]
 8006e1a:	e7c3      	b.n	8006da4 <_svfiprintf_r+0x130>
 8006e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e20:	4604      	mov	r4, r0
 8006e22:	2301      	movs	r3, #1
 8006e24:	e7f0      	b.n	8006e08 <_svfiprintf_r+0x194>
 8006e26:	ab03      	add	r3, sp, #12
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	462a      	mov	r2, r5
 8006e2c:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <_svfiprintf_r+0x1f8>)
 8006e2e:	a904      	add	r1, sp, #16
 8006e30:	4638      	mov	r0, r7
 8006e32:	f3af 8000 	nop.w
 8006e36:	1c42      	adds	r2, r0, #1
 8006e38:	4606      	mov	r6, r0
 8006e3a:	d1d6      	bne.n	8006dea <_svfiprintf_r+0x176>
 8006e3c:	89ab      	ldrh	r3, [r5, #12]
 8006e3e:	065b      	lsls	r3, r3, #25
 8006e40:	f53f af2c 	bmi.w	8006c9c <_svfiprintf_r+0x28>
 8006e44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e46:	b01d      	add	sp, #116	; 0x74
 8006e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4c:	ab03      	add	r3, sp, #12
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	462a      	mov	r2, r5
 8006e52:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <_svfiprintf_r+0x1f8>)
 8006e54:	a904      	add	r1, sp, #16
 8006e56:	4638      	mov	r0, r7
 8006e58:	f000 f9d4 	bl	8007204 <_printf_i>
 8006e5c:	e7eb      	b.n	8006e36 <_svfiprintf_r+0x1c2>
 8006e5e:	bf00      	nop
 8006e60:	080080c1 	.word	0x080080c1
 8006e64:	080080cb 	.word	0x080080cb
 8006e68:	00000000 	.word	0x00000000
 8006e6c:	08006bbd 	.word	0x08006bbd
 8006e70:	080080c7 	.word	0x080080c7

08006e74 <__sfputc_r>:
 8006e74:	6893      	ldr	r3, [r2, #8]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	b410      	push	{r4}
 8006e7c:	6093      	str	r3, [r2, #8]
 8006e7e:	da08      	bge.n	8006e92 <__sfputc_r+0x1e>
 8006e80:	6994      	ldr	r4, [r2, #24]
 8006e82:	42a3      	cmp	r3, r4
 8006e84:	db01      	blt.n	8006e8a <__sfputc_r+0x16>
 8006e86:	290a      	cmp	r1, #10
 8006e88:	d103      	bne.n	8006e92 <__sfputc_r+0x1e>
 8006e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e8e:	f000 baef 	b.w	8007470 <__swbuf_r>
 8006e92:	6813      	ldr	r3, [r2, #0]
 8006e94:	1c58      	adds	r0, r3, #1
 8006e96:	6010      	str	r0, [r2, #0]
 8006e98:	7019      	strb	r1, [r3, #0]
 8006e9a:	4608      	mov	r0, r1
 8006e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <__sfputs_r>:
 8006ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea4:	4606      	mov	r6, r0
 8006ea6:	460f      	mov	r7, r1
 8006ea8:	4614      	mov	r4, r2
 8006eaa:	18d5      	adds	r5, r2, r3
 8006eac:	42ac      	cmp	r4, r5
 8006eae:	d101      	bne.n	8006eb4 <__sfputs_r+0x12>
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	e007      	b.n	8006ec4 <__sfputs_r+0x22>
 8006eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eb8:	463a      	mov	r2, r7
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f7ff ffda 	bl	8006e74 <__sfputc_r>
 8006ec0:	1c43      	adds	r3, r0, #1
 8006ec2:	d1f3      	bne.n	8006eac <__sfputs_r+0xa>
 8006ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ec8 <_vfiprintf_r>:
 8006ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ecc:	460d      	mov	r5, r1
 8006ece:	b09d      	sub	sp, #116	; 0x74
 8006ed0:	4614      	mov	r4, r2
 8006ed2:	4698      	mov	r8, r3
 8006ed4:	4606      	mov	r6, r0
 8006ed6:	b118      	cbz	r0, 8006ee0 <_vfiprintf_r+0x18>
 8006ed8:	6983      	ldr	r3, [r0, #24]
 8006eda:	b90b      	cbnz	r3, 8006ee0 <_vfiprintf_r+0x18>
 8006edc:	f000 fcaa 	bl	8007834 <__sinit>
 8006ee0:	4b89      	ldr	r3, [pc, #548]	; (8007108 <_vfiprintf_r+0x240>)
 8006ee2:	429d      	cmp	r5, r3
 8006ee4:	d11b      	bne.n	8006f1e <_vfiprintf_r+0x56>
 8006ee6:	6875      	ldr	r5, [r6, #4]
 8006ee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006eea:	07d9      	lsls	r1, r3, #31
 8006eec:	d405      	bmi.n	8006efa <_vfiprintf_r+0x32>
 8006eee:	89ab      	ldrh	r3, [r5, #12]
 8006ef0:	059a      	lsls	r2, r3, #22
 8006ef2:	d402      	bmi.n	8006efa <_vfiprintf_r+0x32>
 8006ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ef6:	f000 fd3b 	bl	8007970 <__retarget_lock_acquire_recursive>
 8006efa:	89ab      	ldrh	r3, [r5, #12]
 8006efc:	071b      	lsls	r3, r3, #28
 8006efe:	d501      	bpl.n	8006f04 <_vfiprintf_r+0x3c>
 8006f00:	692b      	ldr	r3, [r5, #16]
 8006f02:	b9eb      	cbnz	r3, 8006f40 <_vfiprintf_r+0x78>
 8006f04:	4629      	mov	r1, r5
 8006f06:	4630      	mov	r0, r6
 8006f08:	f000 fb04 	bl	8007514 <__swsetup_r>
 8006f0c:	b1c0      	cbz	r0, 8006f40 <_vfiprintf_r+0x78>
 8006f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f10:	07dc      	lsls	r4, r3, #31
 8006f12:	d50e      	bpl.n	8006f32 <_vfiprintf_r+0x6a>
 8006f14:	f04f 30ff 	mov.w	r0, #4294967295
 8006f18:	b01d      	add	sp, #116	; 0x74
 8006f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1e:	4b7b      	ldr	r3, [pc, #492]	; (800710c <_vfiprintf_r+0x244>)
 8006f20:	429d      	cmp	r5, r3
 8006f22:	d101      	bne.n	8006f28 <_vfiprintf_r+0x60>
 8006f24:	68b5      	ldr	r5, [r6, #8]
 8006f26:	e7df      	b.n	8006ee8 <_vfiprintf_r+0x20>
 8006f28:	4b79      	ldr	r3, [pc, #484]	; (8007110 <_vfiprintf_r+0x248>)
 8006f2a:	429d      	cmp	r5, r3
 8006f2c:	bf08      	it	eq
 8006f2e:	68f5      	ldreq	r5, [r6, #12]
 8006f30:	e7da      	b.n	8006ee8 <_vfiprintf_r+0x20>
 8006f32:	89ab      	ldrh	r3, [r5, #12]
 8006f34:	0598      	lsls	r0, r3, #22
 8006f36:	d4ed      	bmi.n	8006f14 <_vfiprintf_r+0x4c>
 8006f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f3a:	f000 fd1a 	bl	8007972 <__retarget_lock_release_recursive>
 8006f3e:	e7e9      	b.n	8006f14 <_vfiprintf_r+0x4c>
 8006f40:	2300      	movs	r3, #0
 8006f42:	9309      	str	r3, [sp, #36]	; 0x24
 8006f44:	2320      	movs	r3, #32
 8006f46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f4e:	2330      	movs	r3, #48	; 0x30
 8006f50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007114 <_vfiprintf_r+0x24c>
 8006f54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f58:	f04f 0901 	mov.w	r9, #1
 8006f5c:	4623      	mov	r3, r4
 8006f5e:	469a      	mov	sl, r3
 8006f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f64:	b10a      	cbz	r2, 8006f6a <_vfiprintf_r+0xa2>
 8006f66:	2a25      	cmp	r2, #37	; 0x25
 8006f68:	d1f9      	bne.n	8006f5e <_vfiprintf_r+0x96>
 8006f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8006f6e:	d00b      	beq.n	8006f88 <_vfiprintf_r+0xc0>
 8006f70:	465b      	mov	r3, fp
 8006f72:	4622      	mov	r2, r4
 8006f74:	4629      	mov	r1, r5
 8006f76:	4630      	mov	r0, r6
 8006f78:	f7ff ff93 	bl	8006ea2 <__sfputs_r>
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	f000 80aa 	beq.w	80070d6 <_vfiprintf_r+0x20e>
 8006f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f84:	445a      	add	r2, fp
 8006f86:	9209      	str	r2, [sp, #36]	; 0x24
 8006f88:	f89a 3000 	ldrb.w	r3, [sl]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 80a2 	beq.w	80070d6 <_vfiprintf_r+0x20e>
 8006f92:	2300      	movs	r3, #0
 8006f94:	f04f 32ff 	mov.w	r2, #4294967295
 8006f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f9c:	f10a 0a01 	add.w	sl, sl, #1
 8006fa0:	9304      	str	r3, [sp, #16]
 8006fa2:	9307      	str	r3, [sp, #28]
 8006fa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fa8:	931a      	str	r3, [sp, #104]	; 0x68
 8006faa:	4654      	mov	r4, sl
 8006fac:	2205      	movs	r2, #5
 8006fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb2:	4858      	ldr	r0, [pc, #352]	; (8007114 <_vfiprintf_r+0x24c>)
 8006fb4:	f7f9 f944 	bl	8000240 <memchr>
 8006fb8:	9a04      	ldr	r2, [sp, #16]
 8006fba:	b9d8      	cbnz	r0, 8006ff4 <_vfiprintf_r+0x12c>
 8006fbc:	06d1      	lsls	r1, r2, #27
 8006fbe:	bf44      	itt	mi
 8006fc0:	2320      	movmi	r3, #32
 8006fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fc6:	0713      	lsls	r3, r2, #28
 8006fc8:	bf44      	itt	mi
 8006fca:	232b      	movmi	r3, #43	; 0x2b
 8006fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8006fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8006fd6:	d015      	beq.n	8007004 <_vfiprintf_r+0x13c>
 8006fd8:	9a07      	ldr	r2, [sp, #28]
 8006fda:	4654      	mov	r4, sl
 8006fdc:	2000      	movs	r0, #0
 8006fde:	f04f 0c0a 	mov.w	ip, #10
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fe8:	3b30      	subs	r3, #48	; 0x30
 8006fea:	2b09      	cmp	r3, #9
 8006fec:	d94e      	bls.n	800708c <_vfiprintf_r+0x1c4>
 8006fee:	b1b0      	cbz	r0, 800701e <_vfiprintf_r+0x156>
 8006ff0:	9207      	str	r2, [sp, #28]
 8006ff2:	e014      	b.n	800701e <_vfiprintf_r+0x156>
 8006ff4:	eba0 0308 	sub.w	r3, r0, r8
 8006ff8:	fa09 f303 	lsl.w	r3, r9, r3
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	9304      	str	r3, [sp, #16]
 8007000:	46a2      	mov	sl, r4
 8007002:	e7d2      	b.n	8006faa <_vfiprintf_r+0xe2>
 8007004:	9b03      	ldr	r3, [sp, #12]
 8007006:	1d19      	adds	r1, r3, #4
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	9103      	str	r1, [sp, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	bfbb      	ittet	lt
 8007010:	425b      	neglt	r3, r3
 8007012:	f042 0202 	orrlt.w	r2, r2, #2
 8007016:	9307      	strge	r3, [sp, #28]
 8007018:	9307      	strlt	r3, [sp, #28]
 800701a:	bfb8      	it	lt
 800701c:	9204      	strlt	r2, [sp, #16]
 800701e:	7823      	ldrb	r3, [r4, #0]
 8007020:	2b2e      	cmp	r3, #46	; 0x2e
 8007022:	d10c      	bne.n	800703e <_vfiprintf_r+0x176>
 8007024:	7863      	ldrb	r3, [r4, #1]
 8007026:	2b2a      	cmp	r3, #42	; 0x2a
 8007028:	d135      	bne.n	8007096 <_vfiprintf_r+0x1ce>
 800702a:	9b03      	ldr	r3, [sp, #12]
 800702c:	1d1a      	adds	r2, r3, #4
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	9203      	str	r2, [sp, #12]
 8007032:	2b00      	cmp	r3, #0
 8007034:	bfb8      	it	lt
 8007036:	f04f 33ff 	movlt.w	r3, #4294967295
 800703a:	3402      	adds	r4, #2
 800703c:	9305      	str	r3, [sp, #20]
 800703e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007124 <_vfiprintf_r+0x25c>
 8007042:	7821      	ldrb	r1, [r4, #0]
 8007044:	2203      	movs	r2, #3
 8007046:	4650      	mov	r0, sl
 8007048:	f7f9 f8fa 	bl	8000240 <memchr>
 800704c:	b140      	cbz	r0, 8007060 <_vfiprintf_r+0x198>
 800704e:	2340      	movs	r3, #64	; 0x40
 8007050:	eba0 000a 	sub.w	r0, r0, sl
 8007054:	fa03 f000 	lsl.w	r0, r3, r0
 8007058:	9b04      	ldr	r3, [sp, #16]
 800705a:	4303      	orrs	r3, r0
 800705c:	3401      	adds	r4, #1
 800705e:	9304      	str	r3, [sp, #16]
 8007060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007064:	482c      	ldr	r0, [pc, #176]	; (8007118 <_vfiprintf_r+0x250>)
 8007066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800706a:	2206      	movs	r2, #6
 800706c:	f7f9 f8e8 	bl	8000240 <memchr>
 8007070:	2800      	cmp	r0, #0
 8007072:	d03f      	beq.n	80070f4 <_vfiprintf_r+0x22c>
 8007074:	4b29      	ldr	r3, [pc, #164]	; (800711c <_vfiprintf_r+0x254>)
 8007076:	bb1b      	cbnz	r3, 80070c0 <_vfiprintf_r+0x1f8>
 8007078:	9b03      	ldr	r3, [sp, #12]
 800707a:	3307      	adds	r3, #7
 800707c:	f023 0307 	bic.w	r3, r3, #7
 8007080:	3308      	adds	r3, #8
 8007082:	9303      	str	r3, [sp, #12]
 8007084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007086:	443b      	add	r3, r7
 8007088:	9309      	str	r3, [sp, #36]	; 0x24
 800708a:	e767      	b.n	8006f5c <_vfiprintf_r+0x94>
 800708c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007090:	460c      	mov	r4, r1
 8007092:	2001      	movs	r0, #1
 8007094:	e7a5      	b.n	8006fe2 <_vfiprintf_r+0x11a>
 8007096:	2300      	movs	r3, #0
 8007098:	3401      	adds	r4, #1
 800709a:	9305      	str	r3, [sp, #20]
 800709c:	4619      	mov	r1, r3
 800709e:	f04f 0c0a 	mov.w	ip, #10
 80070a2:	4620      	mov	r0, r4
 80070a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070a8:	3a30      	subs	r2, #48	; 0x30
 80070aa:	2a09      	cmp	r2, #9
 80070ac:	d903      	bls.n	80070b6 <_vfiprintf_r+0x1ee>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d0c5      	beq.n	800703e <_vfiprintf_r+0x176>
 80070b2:	9105      	str	r1, [sp, #20]
 80070b4:	e7c3      	b.n	800703e <_vfiprintf_r+0x176>
 80070b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80070ba:	4604      	mov	r4, r0
 80070bc:	2301      	movs	r3, #1
 80070be:	e7f0      	b.n	80070a2 <_vfiprintf_r+0x1da>
 80070c0:	ab03      	add	r3, sp, #12
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	462a      	mov	r2, r5
 80070c6:	4b16      	ldr	r3, [pc, #88]	; (8007120 <_vfiprintf_r+0x258>)
 80070c8:	a904      	add	r1, sp, #16
 80070ca:	4630      	mov	r0, r6
 80070cc:	f3af 8000 	nop.w
 80070d0:	4607      	mov	r7, r0
 80070d2:	1c78      	adds	r0, r7, #1
 80070d4:	d1d6      	bne.n	8007084 <_vfiprintf_r+0x1bc>
 80070d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070d8:	07d9      	lsls	r1, r3, #31
 80070da:	d405      	bmi.n	80070e8 <_vfiprintf_r+0x220>
 80070dc:	89ab      	ldrh	r3, [r5, #12]
 80070de:	059a      	lsls	r2, r3, #22
 80070e0:	d402      	bmi.n	80070e8 <_vfiprintf_r+0x220>
 80070e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070e4:	f000 fc45 	bl	8007972 <__retarget_lock_release_recursive>
 80070e8:	89ab      	ldrh	r3, [r5, #12]
 80070ea:	065b      	lsls	r3, r3, #25
 80070ec:	f53f af12 	bmi.w	8006f14 <_vfiprintf_r+0x4c>
 80070f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070f2:	e711      	b.n	8006f18 <_vfiprintf_r+0x50>
 80070f4:	ab03      	add	r3, sp, #12
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	462a      	mov	r2, r5
 80070fa:	4b09      	ldr	r3, [pc, #36]	; (8007120 <_vfiprintf_r+0x258>)
 80070fc:	a904      	add	r1, sp, #16
 80070fe:	4630      	mov	r0, r6
 8007100:	f000 f880 	bl	8007204 <_printf_i>
 8007104:	e7e4      	b.n	80070d0 <_vfiprintf_r+0x208>
 8007106:	bf00      	nop
 8007108:	08008114 	.word	0x08008114
 800710c:	08008134 	.word	0x08008134
 8007110:	080080f4 	.word	0x080080f4
 8007114:	080080c1 	.word	0x080080c1
 8007118:	080080cb 	.word	0x080080cb
 800711c:	00000000 	.word	0x00000000
 8007120:	08006ea3 	.word	0x08006ea3
 8007124:	080080c7 	.word	0x080080c7

08007128 <_printf_common>:
 8007128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800712c:	4616      	mov	r6, r2
 800712e:	4699      	mov	r9, r3
 8007130:	688a      	ldr	r2, [r1, #8]
 8007132:	690b      	ldr	r3, [r1, #16]
 8007134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007138:	4293      	cmp	r3, r2
 800713a:	bfb8      	it	lt
 800713c:	4613      	movlt	r3, r2
 800713e:	6033      	str	r3, [r6, #0]
 8007140:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007144:	4607      	mov	r7, r0
 8007146:	460c      	mov	r4, r1
 8007148:	b10a      	cbz	r2, 800714e <_printf_common+0x26>
 800714a:	3301      	adds	r3, #1
 800714c:	6033      	str	r3, [r6, #0]
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	0699      	lsls	r1, r3, #26
 8007152:	bf42      	ittt	mi
 8007154:	6833      	ldrmi	r3, [r6, #0]
 8007156:	3302      	addmi	r3, #2
 8007158:	6033      	strmi	r3, [r6, #0]
 800715a:	6825      	ldr	r5, [r4, #0]
 800715c:	f015 0506 	ands.w	r5, r5, #6
 8007160:	d106      	bne.n	8007170 <_printf_common+0x48>
 8007162:	f104 0a19 	add.w	sl, r4, #25
 8007166:	68e3      	ldr	r3, [r4, #12]
 8007168:	6832      	ldr	r2, [r6, #0]
 800716a:	1a9b      	subs	r3, r3, r2
 800716c:	42ab      	cmp	r3, r5
 800716e:	dc26      	bgt.n	80071be <_printf_common+0x96>
 8007170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007174:	1e13      	subs	r3, r2, #0
 8007176:	6822      	ldr	r2, [r4, #0]
 8007178:	bf18      	it	ne
 800717a:	2301      	movne	r3, #1
 800717c:	0692      	lsls	r2, r2, #26
 800717e:	d42b      	bmi.n	80071d8 <_printf_common+0xb0>
 8007180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007184:	4649      	mov	r1, r9
 8007186:	4638      	mov	r0, r7
 8007188:	47c0      	blx	r8
 800718a:	3001      	adds	r0, #1
 800718c:	d01e      	beq.n	80071cc <_printf_common+0xa4>
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	68e5      	ldr	r5, [r4, #12]
 8007192:	6832      	ldr	r2, [r6, #0]
 8007194:	f003 0306 	and.w	r3, r3, #6
 8007198:	2b04      	cmp	r3, #4
 800719a:	bf08      	it	eq
 800719c:	1aad      	subeq	r5, r5, r2
 800719e:	68a3      	ldr	r3, [r4, #8]
 80071a0:	6922      	ldr	r2, [r4, #16]
 80071a2:	bf0c      	ite	eq
 80071a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071a8:	2500      	movne	r5, #0
 80071aa:	4293      	cmp	r3, r2
 80071ac:	bfc4      	itt	gt
 80071ae:	1a9b      	subgt	r3, r3, r2
 80071b0:	18ed      	addgt	r5, r5, r3
 80071b2:	2600      	movs	r6, #0
 80071b4:	341a      	adds	r4, #26
 80071b6:	42b5      	cmp	r5, r6
 80071b8:	d11a      	bne.n	80071f0 <_printf_common+0xc8>
 80071ba:	2000      	movs	r0, #0
 80071bc:	e008      	b.n	80071d0 <_printf_common+0xa8>
 80071be:	2301      	movs	r3, #1
 80071c0:	4652      	mov	r2, sl
 80071c2:	4649      	mov	r1, r9
 80071c4:	4638      	mov	r0, r7
 80071c6:	47c0      	blx	r8
 80071c8:	3001      	adds	r0, #1
 80071ca:	d103      	bne.n	80071d4 <_printf_common+0xac>
 80071cc:	f04f 30ff 	mov.w	r0, #4294967295
 80071d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071d4:	3501      	adds	r5, #1
 80071d6:	e7c6      	b.n	8007166 <_printf_common+0x3e>
 80071d8:	18e1      	adds	r1, r4, r3
 80071da:	1c5a      	adds	r2, r3, #1
 80071dc:	2030      	movs	r0, #48	; 0x30
 80071de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071e2:	4422      	add	r2, r4
 80071e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071ec:	3302      	adds	r3, #2
 80071ee:	e7c7      	b.n	8007180 <_printf_common+0x58>
 80071f0:	2301      	movs	r3, #1
 80071f2:	4622      	mov	r2, r4
 80071f4:	4649      	mov	r1, r9
 80071f6:	4638      	mov	r0, r7
 80071f8:	47c0      	blx	r8
 80071fa:	3001      	adds	r0, #1
 80071fc:	d0e6      	beq.n	80071cc <_printf_common+0xa4>
 80071fe:	3601      	adds	r6, #1
 8007200:	e7d9      	b.n	80071b6 <_printf_common+0x8e>
	...

08007204 <_printf_i>:
 8007204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007208:	7e0f      	ldrb	r7, [r1, #24]
 800720a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800720c:	2f78      	cmp	r7, #120	; 0x78
 800720e:	4691      	mov	r9, r2
 8007210:	4680      	mov	r8, r0
 8007212:	460c      	mov	r4, r1
 8007214:	469a      	mov	sl, r3
 8007216:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800721a:	d807      	bhi.n	800722c <_printf_i+0x28>
 800721c:	2f62      	cmp	r7, #98	; 0x62
 800721e:	d80a      	bhi.n	8007236 <_printf_i+0x32>
 8007220:	2f00      	cmp	r7, #0
 8007222:	f000 80d8 	beq.w	80073d6 <_printf_i+0x1d2>
 8007226:	2f58      	cmp	r7, #88	; 0x58
 8007228:	f000 80a3 	beq.w	8007372 <_printf_i+0x16e>
 800722c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007234:	e03a      	b.n	80072ac <_printf_i+0xa8>
 8007236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800723a:	2b15      	cmp	r3, #21
 800723c:	d8f6      	bhi.n	800722c <_printf_i+0x28>
 800723e:	a101      	add	r1, pc, #4	; (adr r1, 8007244 <_printf_i+0x40>)
 8007240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007244:	0800729d 	.word	0x0800729d
 8007248:	080072b1 	.word	0x080072b1
 800724c:	0800722d 	.word	0x0800722d
 8007250:	0800722d 	.word	0x0800722d
 8007254:	0800722d 	.word	0x0800722d
 8007258:	0800722d 	.word	0x0800722d
 800725c:	080072b1 	.word	0x080072b1
 8007260:	0800722d 	.word	0x0800722d
 8007264:	0800722d 	.word	0x0800722d
 8007268:	0800722d 	.word	0x0800722d
 800726c:	0800722d 	.word	0x0800722d
 8007270:	080073bd 	.word	0x080073bd
 8007274:	080072e1 	.word	0x080072e1
 8007278:	0800739f 	.word	0x0800739f
 800727c:	0800722d 	.word	0x0800722d
 8007280:	0800722d 	.word	0x0800722d
 8007284:	080073df 	.word	0x080073df
 8007288:	0800722d 	.word	0x0800722d
 800728c:	080072e1 	.word	0x080072e1
 8007290:	0800722d 	.word	0x0800722d
 8007294:	0800722d 	.word	0x0800722d
 8007298:	080073a7 	.word	0x080073a7
 800729c:	682b      	ldr	r3, [r5, #0]
 800729e:	1d1a      	adds	r2, r3, #4
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	602a      	str	r2, [r5, #0]
 80072a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072ac:	2301      	movs	r3, #1
 80072ae:	e0a3      	b.n	80073f8 <_printf_i+0x1f4>
 80072b0:	6820      	ldr	r0, [r4, #0]
 80072b2:	6829      	ldr	r1, [r5, #0]
 80072b4:	0606      	lsls	r6, r0, #24
 80072b6:	f101 0304 	add.w	r3, r1, #4
 80072ba:	d50a      	bpl.n	80072d2 <_printf_i+0xce>
 80072bc:	680e      	ldr	r6, [r1, #0]
 80072be:	602b      	str	r3, [r5, #0]
 80072c0:	2e00      	cmp	r6, #0
 80072c2:	da03      	bge.n	80072cc <_printf_i+0xc8>
 80072c4:	232d      	movs	r3, #45	; 0x2d
 80072c6:	4276      	negs	r6, r6
 80072c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072cc:	485e      	ldr	r0, [pc, #376]	; (8007448 <_printf_i+0x244>)
 80072ce:	230a      	movs	r3, #10
 80072d0:	e019      	b.n	8007306 <_printf_i+0x102>
 80072d2:	680e      	ldr	r6, [r1, #0]
 80072d4:	602b      	str	r3, [r5, #0]
 80072d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072da:	bf18      	it	ne
 80072dc:	b236      	sxthne	r6, r6
 80072de:	e7ef      	b.n	80072c0 <_printf_i+0xbc>
 80072e0:	682b      	ldr	r3, [r5, #0]
 80072e2:	6820      	ldr	r0, [r4, #0]
 80072e4:	1d19      	adds	r1, r3, #4
 80072e6:	6029      	str	r1, [r5, #0]
 80072e8:	0601      	lsls	r1, r0, #24
 80072ea:	d501      	bpl.n	80072f0 <_printf_i+0xec>
 80072ec:	681e      	ldr	r6, [r3, #0]
 80072ee:	e002      	b.n	80072f6 <_printf_i+0xf2>
 80072f0:	0646      	lsls	r6, r0, #25
 80072f2:	d5fb      	bpl.n	80072ec <_printf_i+0xe8>
 80072f4:	881e      	ldrh	r6, [r3, #0]
 80072f6:	4854      	ldr	r0, [pc, #336]	; (8007448 <_printf_i+0x244>)
 80072f8:	2f6f      	cmp	r7, #111	; 0x6f
 80072fa:	bf0c      	ite	eq
 80072fc:	2308      	moveq	r3, #8
 80072fe:	230a      	movne	r3, #10
 8007300:	2100      	movs	r1, #0
 8007302:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007306:	6865      	ldr	r5, [r4, #4]
 8007308:	60a5      	str	r5, [r4, #8]
 800730a:	2d00      	cmp	r5, #0
 800730c:	bfa2      	ittt	ge
 800730e:	6821      	ldrge	r1, [r4, #0]
 8007310:	f021 0104 	bicge.w	r1, r1, #4
 8007314:	6021      	strge	r1, [r4, #0]
 8007316:	b90e      	cbnz	r6, 800731c <_printf_i+0x118>
 8007318:	2d00      	cmp	r5, #0
 800731a:	d04d      	beq.n	80073b8 <_printf_i+0x1b4>
 800731c:	4615      	mov	r5, r2
 800731e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007322:	fb03 6711 	mls	r7, r3, r1, r6
 8007326:	5dc7      	ldrb	r7, [r0, r7]
 8007328:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800732c:	4637      	mov	r7, r6
 800732e:	42bb      	cmp	r3, r7
 8007330:	460e      	mov	r6, r1
 8007332:	d9f4      	bls.n	800731e <_printf_i+0x11a>
 8007334:	2b08      	cmp	r3, #8
 8007336:	d10b      	bne.n	8007350 <_printf_i+0x14c>
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	07de      	lsls	r6, r3, #31
 800733c:	d508      	bpl.n	8007350 <_printf_i+0x14c>
 800733e:	6923      	ldr	r3, [r4, #16]
 8007340:	6861      	ldr	r1, [r4, #4]
 8007342:	4299      	cmp	r1, r3
 8007344:	bfde      	ittt	le
 8007346:	2330      	movle	r3, #48	; 0x30
 8007348:	f805 3c01 	strble.w	r3, [r5, #-1]
 800734c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007350:	1b52      	subs	r2, r2, r5
 8007352:	6122      	str	r2, [r4, #16]
 8007354:	f8cd a000 	str.w	sl, [sp]
 8007358:	464b      	mov	r3, r9
 800735a:	aa03      	add	r2, sp, #12
 800735c:	4621      	mov	r1, r4
 800735e:	4640      	mov	r0, r8
 8007360:	f7ff fee2 	bl	8007128 <_printf_common>
 8007364:	3001      	adds	r0, #1
 8007366:	d14c      	bne.n	8007402 <_printf_i+0x1fe>
 8007368:	f04f 30ff 	mov.w	r0, #4294967295
 800736c:	b004      	add	sp, #16
 800736e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007372:	4835      	ldr	r0, [pc, #212]	; (8007448 <_printf_i+0x244>)
 8007374:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007378:	6829      	ldr	r1, [r5, #0]
 800737a:	6823      	ldr	r3, [r4, #0]
 800737c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007380:	6029      	str	r1, [r5, #0]
 8007382:	061d      	lsls	r5, r3, #24
 8007384:	d514      	bpl.n	80073b0 <_printf_i+0x1ac>
 8007386:	07df      	lsls	r7, r3, #31
 8007388:	bf44      	itt	mi
 800738a:	f043 0320 	orrmi.w	r3, r3, #32
 800738e:	6023      	strmi	r3, [r4, #0]
 8007390:	b91e      	cbnz	r6, 800739a <_printf_i+0x196>
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	f023 0320 	bic.w	r3, r3, #32
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	2310      	movs	r3, #16
 800739c:	e7b0      	b.n	8007300 <_printf_i+0xfc>
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	f043 0320 	orr.w	r3, r3, #32
 80073a4:	6023      	str	r3, [r4, #0]
 80073a6:	2378      	movs	r3, #120	; 0x78
 80073a8:	4828      	ldr	r0, [pc, #160]	; (800744c <_printf_i+0x248>)
 80073aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073ae:	e7e3      	b.n	8007378 <_printf_i+0x174>
 80073b0:	0659      	lsls	r1, r3, #25
 80073b2:	bf48      	it	mi
 80073b4:	b2b6      	uxthmi	r6, r6
 80073b6:	e7e6      	b.n	8007386 <_printf_i+0x182>
 80073b8:	4615      	mov	r5, r2
 80073ba:	e7bb      	b.n	8007334 <_printf_i+0x130>
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	6826      	ldr	r6, [r4, #0]
 80073c0:	6961      	ldr	r1, [r4, #20]
 80073c2:	1d18      	adds	r0, r3, #4
 80073c4:	6028      	str	r0, [r5, #0]
 80073c6:	0635      	lsls	r5, r6, #24
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	d501      	bpl.n	80073d0 <_printf_i+0x1cc>
 80073cc:	6019      	str	r1, [r3, #0]
 80073ce:	e002      	b.n	80073d6 <_printf_i+0x1d2>
 80073d0:	0670      	lsls	r0, r6, #25
 80073d2:	d5fb      	bpl.n	80073cc <_printf_i+0x1c8>
 80073d4:	8019      	strh	r1, [r3, #0]
 80073d6:	2300      	movs	r3, #0
 80073d8:	6123      	str	r3, [r4, #16]
 80073da:	4615      	mov	r5, r2
 80073dc:	e7ba      	b.n	8007354 <_printf_i+0x150>
 80073de:	682b      	ldr	r3, [r5, #0]
 80073e0:	1d1a      	adds	r2, r3, #4
 80073e2:	602a      	str	r2, [r5, #0]
 80073e4:	681d      	ldr	r5, [r3, #0]
 80073e6:	6862      	ldr	r2, [r4, #4]
 80073e8:	2100      	movs	r1, #0
 80073ea:	4628      	mov	r0, r5
 80073ec:	f7f8 ff28 	bl	8000240 <memchr>
 80073f0:	b108      	cbz	r0, 80073f6 <_printf_i+0x1f2>
 80073f2:	1b40      	subs	r0, r0, r5
 80073f4:	6060      	str	r0, [r4, #4]
 80073f6:	6863      	ldr	r3, [r4, #4]
 80073f8:	6123      	str	r3, [r4, #16]
 80073fa:	2300      	movs	r3, #0
 80073fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007400:	e7a8      	b.n	8007354 <_printf_i+0x150>
 8007402:	6923      	ldr	r3, [r4, #16]
 8007404:	462a      	mov	r2, r5
 8007406:	4649      	mov	r1, r9
 8007408:	4640      	mov	r0, r8
 800740a:	47d0      	blx	sl
 800740c:	3001      	adds	r0, #1
 800740e:	d0ab      	beq.n	8007368 <_printf_i+0x164>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	079b      	lsls	r3, r3, #30
 8007414:	d413      	bmi.n	800743e <_printf_i+0x23a>
 8007416:	68e0      	ldr	r0, [r4, #12]
 8007418:	9b03      	ldr	r3, [sp, #12]
 800741a:	4298      	cmp	r0, r3
 800741c:	bfb8      	it	lt
 800741e:	4618      	movlt	r0, r3
 8007420:	e7a4      	b.n	800736c <_printf_i+0x168>
 8007422:	2301      	movs	r3, #1
 8007424:	4632      	mov	r2, r6
 8007426:	4649      	mov	r1, r9
 8007428:	4640      	mov	r0, r8
 800742a:	47d0      	blx	sl
 800742c:	3001      	adds	r0, #1
 800742e:	d09b      	beq.n	8007368 <_printf_i+0x164>
 8007430:	3501      	adds	r5, #1
 8007432:	68e3      	ldr	r3, [r4, #12]
 8007434:	9903      	ldr	r1, [sp, #12]
 8007436:	1a5b      	subs	r3, r3, r1
 8007438:	42ab      	cmp	r3, r5
 800743a:	dcf2      	bgt.n	8007422 <_printf_i+0x21e>
 800743c:	e7eb      	b.n	8007416 <_printf_i+0x212>
 800743e:	2500      	movs	r5, #0
 8007440:	f104 0619 	add.w	r6, r4, #25
 8007444:	e7f5      	b.n	8007432 <_printf_i+0x22e>
 8007446:	bf00      	nop
 8007448:	080080d2 	.word	0x080080d2
 800744c:	080080e3 	.word	0x080080e3

08007450 <_sbrk_r>:
 8007450:	b538      	push	{r3, r4, r5, lr}
 8007452:	4d06      	ldr	r5, [pc, #24]	; (800746c <_sbrk_r+0x1c>)
 8007454:	2300      	movs	r3, #0
 8007456:	4604      	mov	r4, r0
 8007458:	4608      	mov	r0, r1
 800745a:	602b      	str	r3, [r5, #0]
 800745c:	f7f9 fece 	bl	80011fc <_sbrk>
 8007460:	1c43      	adds	r3, r0, #1
 8007462:	d102      	bne.n	800746a <_sbrk_r+0x1a>
 8007464:	682b      	ldr	r3, [r5, #0]
 8007466:	b103      	cbz	r3, 800746a <_sbrk_r+0x1a>
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	bd38      	pop	{r3, r4, r5, pc}
 800746c:	200002bc 	.word	0x200002bc

08007470 <__swbuf_r>:
 8007470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007472:	460e      	mov	r6, r1
 8007474:	4614      	mov	r4, r2
 8007476:	4605      	mov	r5, r0
 8007478:	b118      	cbz	r0, 8007482 <__swbuf_r+0x12>
 800747a:	6983      	ldr	r3, [r0, #24]
 800747c:	b90b      	cbnz	r3, 8007482 <__swbuf_r+0x12>
 800747e:	f000 f9d9 	bl	8007834 <__sinit>
 8007482:	4b21      	ldr	r3, [pc, #132]	; (8007508 <__swbuf_r+0x98>)
 8007484:	429c      	cmp	r4, r3
 8007486:	d12b      	bne.n	80074e0 <__swbuf_r+0x70>
 8007488:	686c      	ldr	r4, [r5, #4]
 800748a:	69a3      	ldr	r3, [r4, #24]
 800748c:	60a3      	str	r3, [r4, #8]
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	071a      	lsls	r2, r3, #28
 8007492:	d52f      	bpl.n	80074f4 <__swbuf_r+0x84>
 8007494:	6923      	ldr	r3, [r4, #16]
 8007496:	b36b      	cbz	r3, 80074f4 <__swbuf_r+0x84>
 8007498:	6923      	ldr	r3, [r4, #16]
 800749a:	6820      	ldr	r0, [r4, #0]
 800749c:	1ac0      	subs	r0, r0, r3
 800749e:	6963      	ldr	r3, [r4, #20]
 80074a0:	b2f6      	uxtb	r6, r6
 80074a2:	4283      	cmp	r3, r0
 80074a4:	4637      	mov	r7, r6
 80074a6:	dc04      	bgt.n	80074b2 <__swbuf_r+0x42>
 80074a8:	4621      	mov	r1, r4
 80074aa:	4628      	mov	r0, r5
 80074ac:	f000 f92e 	bl	800770c <_fflush_r>
 80074b0:	bb30      	cbnz	r0, 8007500 <__swbuf_r+0x90>
 80074b2:	68a3      	ldr	r3, [r4, #8]
 80074b4:	3b01      	subs	r3, #1
 80074b6:	60a3      	str	r3, [r4, #8]
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	6022      	str	r2, [r4, #0]
 80074be:	701e      	strb	r6, [r3, #0]
 80074c0:	6963      	ldr	r3, [r4, #20]
 80074c2:	3001      	adds	r0, #1
 80074c4:	4283      	cmp	r3, r0
 80074c6:	d004      	beq.n	80074d2 <__swbuf_r+0x62>
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	07db      	lsls	r3, r3, #31
 80074cc:	d506      	bpl.n	80074dc <__swbuf_r+0x6c>
 80074ce:	2e0a      	cmp	r6, #10
 80074d0:	d104      	bne.n	80074dc <__swbuf_r+0x6c>
 80074d2:	4621      	mov	r1, r4
 80074d4:	4628      	mov	r0, r5
 80074d6:	f000 f919 	bl	800770c <_fflush_r>
 80074da:	b988      	cbnz	r0, 8007500 <__swbuf_r+0x90>
 80074dc:	4638      	mov	r0, r7
 80074de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074e0:	4b0a      	ldr	r3, [pc, #40]	; (800750c <__swbuf_r+0x9c>)
 80074e2:	429c      	cmp	r4, r3
 80074e4:	d101      	bne.n	80074ea <__swbuf_r+0x7a>
 80074e6:	68ac      	ldr	r4, [r5, #8]
 80074e8:	e7cf      	b.n	800748a <__swbuf_r+0x1a>
 80074ea:	4b09      	ldr	r3, [pc, #36]	; (8007510 <__swbuf_r+0xa0>)
 80074ec:	429c      	cmp	r4, r3
 80074ee:	bf08      	it	eq
 80074f0:	68ec      	ldreq	r4, [r5, #12]
 80074f2:	e7ca      	b.n	800748a <__swbuf_r+0x1a>
 80074f4:	4621      	mov	r1, r4
 80074f6:	4628      	mov	r0, r5
 80074f8:	f000 f80c 	bl	8007514 <__swsetup_r>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d0cb      	beq.n	8007498 <__swbuf_r+0x28>
 8007500:	f04f 37ff 	mov.w	r7, #4294967295
 8007504:	e7ea      	b.n	80074dc <__swbuf_r+0x6c>
 8007506:	bf00      	nop
 8007508:	08008114 	.word	0x08008114
 800750c:	08008134 	.word	0x08008134
 8007510:	080080f4 	.word	0x080080f4

08007514 <__swsetup_r>:
 8007514:	4b32      	ldr	r3, [pc, #200]	; (80075e0 <__swsetup_r+0xcc>)
 8007516:	b570      	push	{r4, r5, r6, lr}
 8007518:	681d      	ldr	r5, [r3, #0]
 800751a:	4606      	mov	r6, r0
 800751c:	460c      	mov	r4, r1
 800751e:	b125      	cbz	r5, 800752a <__swsetup_r+0x16>
 8007520:	69ab      	ldr	r3, [r5, #24]
 8007522:	b913      	cbnz	r3, 800752a <__swsetup_r+0x16>
 8007524:	4628      	mov	r0, r5
 8007526:	f000 f985 	bl	8007834 <__sinit>
 800752a:	4b2e      	ldr	r3, [pc, #184]	; (80075e4 <__swsetup_r+0xd0>)
 800752c:	429c      	cmp	r4, r3
 800752e:	d10f      	bne.n	8007550 <__swsetup_r+0x3c>
 8007530:	686c      	ldr	r4, [r5, #4]
 8007532:	89a3      	ldrh	r3, [r4, #12]
 8007534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007538:	0719      	lsls	r1, r3, #28
 800753a:	d42c      	bmi.n	8007596 <__swsetup_r+0x82>
 800753c:	06dd      	lsls	r5, r3, #27
 800753e:	d411      	bmi.n	8007564 <__swsetup_r+0x50>
 8007540:	2309      	movs	r3, #9
 8007542:	6033      	str	r3, [r6, #0]
 8007544:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007548:	81a3      	strh	r3, [r4, #12]
 800754a:	f04f 30ff 	mov.w	r0, #4294967295
 800754e:	e03e      	b.n	80075ce <__swsetup_r+0xba>
 8007550:	4b25      	ldr	r3, [pc, #148]	; (80075e8 <__swsetup_r+0xd4>)
 8007552:	429c      	cmp	r4, r3
 8007554:	d101      	bne.n	800755a <__swsetup_r+0x46>
 8007556:	68ac      	ldr	r4, [r5, #8]
 8007558:	e7eb      	b.n	8007532 <__swsetup_r+0x1e>
 800755a:	4b24      	ldr	r3, [pc, #144]	; (80075ec <__swsetup_r+0xd8>)
 800755c:	429c      	cmp	r4, r3
 800755e:	bf08      	it	eq
 8007560:	68ec      	ldreq	r4, [r5, #12]
 8007562:	e7e6      	b.n	8007532 <__swsetup_r+0x1e>
 8007564:	0758      	lsls	r0, r3, #29
 8007566:	d512      	bpl.n	800758e <__swsetup_r+0x7a>
 8007568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800756a:	b141      	cbz	r1, 800757e <__swsetup_r+0x6a>
 800756c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007570:	4299      	cmp	r1, r3
 8007572:	d002      	beq.n	800757a <__swsetup_r+0x66>
 8007574:	4630      	mov	r0, r6
 8007576:	f7ff fa41 	bl	80069fc <_free_r>
 800757a:	2300      	movs	r3, #0
 800757c:	6363      	str	r3, [r4, #52]	; 0x34
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007584:	81a3      	strh	r3, [r4, #12]
 8007586:	2300      	movs	r3, #0
 8007588:	6063      	str	r3, [r4, #4]
 800758a:	6923      	ldr	r3, [r4, #16]
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	f043 0308 	orr.w	r3, r3, #8
 8007594:	81a3      	strh	r3, [r4, #12]
 8007596:	6923      	ldr	r3, [r4, #16]
 8007598:	b94b      	cbnz	r3, 80075ae <__swsetup_r+0x9a>
 800759a:	89a3      	ldrh	r3, [r4, #12]
 800759c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80075a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075a4:	d003      	beq.n	80075ae <__swsetup_r+0x9a>
 80075a6:	4621      	mov	r1, r4
 80075a8:	4630      	mov	r0, r6
 80075aa:	f000 fa09 	bl	80079c0 <__smakebuf_r>
 80075ae:	89a0      	ldrh	r0, [r4, #12]
 80075b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075b4:	f010 0301 	ands.w	r3, r0, #1
 80075b8:	d00a      	beq.n	80075d0 <__swsetup_r+0xbc>
 80075ba:	2300      	movs	r3, #0
 80075bc:	60a3      	str	r3, [r4, #8]
 80075be:	6963      	ldr	r3, [r4, #20]
 80075c0:	425b      	negs	r3, r3
 80075c2:	61a3      	str	r3, [r4, #24]
 80075c4:	6923      	ldr	r3, [r4, #16]
 80075c6:	b943      	cbnz	r3, 80075da <__swsetup_r+0xc6>
 80075c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075cc:	d1ba      	bne.n	8007544 <__swsetup_r+0x30>
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	0781      	lsls	r1, r0, #30
 80075d2:	bf58      	it	pl
 80075d4:	6963      	ldrpl	r3, [r4, #20]
 80075d6:	60a3      	str	r3, [r4, #8]
 80075d8:	e7f4      	b.n	80075c4 <__swsetup_r+0xb0>
 80075da:	2000      	movs	r0, #0
 80075dc:	e7f7      	b.n	80075ce <__swsetup_r+0xba>
 80075de:	bf00      	nop
 80075e0:	200000a8 	.word	0x200000a8
 80075e4:	08008114 	.word	0x08008114
 80075e8:	08008134 	.word	0x08008134
 80075ec:	080080f4 	.word	0x080080f4

080075f0 <abort>:
 80075f0:	b508      	push	{r3, lr}
 80075f2:	2006      	movs	r0, #6
 80075f4:	f000 fab0 	bl	8007b58 <raise>
 80075f8:	2001      	movs	r0, #1
 80075fa:	f7f9 fd87 	bl	800110c <_exit>
	...

08007600 <__sflush_r>:
 8007600:	898a      	ldrh	r2, [r1, #12]
 8007602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007606:	4605      	mov	r5, r0
 8007608:	0710      	lsls	r0, r2, #28
 800760a:	460c      	mov	r4, r1
 800760c:	d458      	bmi.n	80076c0 <__sflush_r+0xc0>
 800760e:	684b      	ldr	r3, [r1, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	dc05      	bgt.n	8007620 <__sflush_r+0x20>
 8007614:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007616:	2b00      	cmp	r3, #0
 8007618:	dc02      	bgt.n	8007620 <__sflush_r+0x20>
 800761a:	2000      	movs	r0, #0
 800761c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007622:	2e00      	cmp	r6, #0
 8007624:	d0f9      	beq.n	800761a <__sflush_r+0x1a>
 8007626:	2300      	movs	r3, #0
 8007628:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800762c:	682f      	ldr	r7, [r5, #0]
 800762e:	602b      	str	r3, [r5, #0]
 8007630:	d032      	beq.n	8007698 <__sflush_r+0x98>
 8007632:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007634:	89a3      	ldrh	r3, [r4, #12]
 8007636:	075a      	lsls	r2, r3, #29
 8007638:	d505      	bpl.n	8007646 <__sflush_r+0x46>
 800763a:	6863      	ldr	r3, [r4, #4]
 800763c:	1ac0      	subs	r0, r0, r3
 800763e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007640:	b10b      	cbz	r3, 8007646 <__sflush_r+0x46>
 8007642:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007644:	1ac0      	subs	r0, r0, r3
 8007646:	2300      	movs	r3, #0
 8007648:	4602      	mov	r2, r0
 800764a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800764c:	6a21      	ldr	r1, [r4, #32]
 800764e:	4628      	mov	r0, r5
 8007650:	47b0      	blx	r6
 8007652:	1c43      	adds	r3, r0, #1
 8007654:	89a3      	ldrh	r3, [r4, #12]
 8007656:	d106      	bne.n	8007666 <__sflush_r+0x66>
 8007658:	6829      	ldr	r1, [r5, #0]
 800765a:	291d      	cmp	r1, #29
 800765c:	d82c      	bhi.n	80076b8 <__sflush_r+0xb8>
 800765e:	4a2a      	ldr	r2, [pc, #168]	; (8007708 <__sflush_r+0x108>)
 8007660:	40ca      	lsrs	r2, r1
 8007662:	07d6      	lsls	r6, r2, #31
 8007664:	d528      	bpl.n	80076b8 <__sflush_r+0xb8>
 8007666:	2200      	movs	r2, #0
 8007668:	6062      	str	r2, [r4, #4]
 800766a:	04d9      	lsls	r1, r3, #19
 800766c:	6922      	ldr	r2, [r4, #16]
 800766e:	6022      	str	r2, [r4, #0]
 8007670:	d504      	bpl.n	800767c <__sflush_r+0x7c>
 8007672:	1c42      	adds	r2, r0, #1
 8007674:	d101      	bne.n	800767a <__sflush_r+0x7a>
 8007676:	682b      	ldr	r3, [r5, #0]
 8007678:	b903      	cbnz	r3, 800767c <__sflush_r+0x7c>
 800767a:	6560      	str	r0, [r4, #84]	; 0x54
 800767c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800767e:	602f      	str	r7, [r5, #0]
 8007680:	2900      	cmp	r1, #0
 8007682:	d0ca      	beq.n	800761a <__sflush_r+0x1a>
 8007684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007688:	4299      	cmp	r1, r3
 800768a:	d002      	beq.n	8007692 <__sflush_r+0x92>
 800768c:	4628      	mov	r0, r5
 800768e:	f7ff f9b5 	bl	80069fc <_free_r>
 8007692:	2000      	movs	r0, #0
 8007694:	6360      	str	r0, [r4, #52]	; 0x34
 8007696:	e7c1      	b.n	800761c <__sflush_r+0x1c>
 8007698:	6a21      	ldr	r1, [r4, #32]
 800769a:	2301      	movs	r3, #1
 800769c:	4628      	mov	r0, r5
 800769e:	47b0      	blx	r6
 80076a0:	1c41      	adds	r1, r0, #1
 80076a2:	d1c7      	bne.n	8007634 <__sflush_r+0x34>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0c4      	beq.n	8007634 <__sflush_r+0x34>
 80076aa:	2b1d      	cmp	r3, #29
 80076ac:	d001      	beq.n	80076b2 <__sflush_r+0xb2>
 80076ae:	2b16      	cmp	r3, #22
 80076b0:	d101      	bne.n	80076b6 <__sflush_r+0xb6>
 80076b2:	602f      	str	r7, [r5, #0]
 80076b4:	e7b1      	b.n	800761a <__sflush_r+0x1a>
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076bc:	81a3      	strh	r3, [r4, #12]
 80076be:	e7ad      	b.n	800761c <__sflush_r+0x1c>
 80076c0:	690f      	ldr	r7, [r1, #16]
 80076c2:	2f00      	cmp	r7, #0
 80076c4:	d0a9      	beq.n	800761a <__sflush_r+0x1a>
 80076c6:	0793      	lsls	r3, r2, #30
 80076c8:	680e      	ldr	r6, [r1, #0]
 80076ca:	bf08      	it	eq
 80076cc:	694b      	ldreq	r3, [r1, #20]
 80076ce:	600f      	str	r7, [r1, #0]
 80076d0:	bf18      	it	ne
 80076d2:	2300      	movne	r3, #0
 80076d4:	eba6 0807 	sub.w	r8, r6, r7
 80076d8:	608b      	str	r3, [r1, #8]
 80076da:	f1b8 0f00 	cmp.w	r8, #0
 80076de:	dd9c      	ble.n	800761a <__sflush_r+0x1a>
 80076e0:	6a21      	ldr	r1, [r4, #32]
 80076e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076e4:	4643      	mov	r3, r8
 80076e6:	463a      	mov	r2, r7
 80076e8:	4628      	mov	r0, r5
 80076ea:	47b0      	blx	r6
 80076ec:	2800      	cmp	r0, #0
 80076ee:	dc06      	bgt.n	80076fe <__sflush_r+0xfe>
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076f6:	81a3      	strh	r3, [r4, #12]
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	e78e      	b.n	800761c <__sflush_r+0x1c>
 80076fe:	4407      	add	r7, r0
 8007700:	eba8 0800 	sub.w	r8, r8, r0
 8007704:	e7e9      	b.n	80076da <__sflush_r+0xda>
 8007706:	bf00      	nop
 8007708:	20400001 	.word	0x20400001

0800770c <_fflush_r>:
 800770c:	b538      	push	{r3, r4, r5, lr}
 800770e:	690b      	ldr	r3, [r1, #16]
 8007710:	4605      	mov	r5, r0
 8007712:	460c      	mov	r4, r1
 8007714:	b913      	cbnz	r3, 800771c <_fflush_r+0x10>
 8007716:	2500      	movs	r5, #0
 8007718:	4628      	mov	r0, r5
 800771a:	bd38      	pop	{r3, r4, r5, pc}
 800771c:	b118      	cbz	r0, 8007726 <_fflush_r+0x1a>
 800771e:	6983      	ldr	r3, [r0, #24]
 8007720:	b90b      	cbnz	r3, 8007726 <_fflush_r+0x1a>
 8007722:	f000 f887 	bl	8007834 <__sinit>
 8007726:	4b14      	ldr	r3, [pc, #80]	; (8007778 <_fflush_r+0x6c>)
 8007728:	429c      	cmp	r4, r3
 800772a:	d11b      	bne.n	8007764 <_fflush_r+0x58>
 800772c:	686c      	ldr	r4, [r5, #4]
 800772e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d0ef      	beq.n	8007716 <_fflush_r+0xa>
 8007736:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007738:	07d0      	lsls	r0, r2, #31
 800773a:	d404      	bmi.n	8007746 <_fflush_r+0x3a>
 800773c:	0599      	lsls	r1, r3, #22
 800773e:	d402      	bmi.n	8007746 <_fflush_r+0x3a>
 8007740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007742:	f000 f915 	bl	8007970 <__retarget_lock_acquire_recursive>
 8007746:	4628      	mov	r0, r5
 8007748:	4621      	mov	r1, r4
 800774a:	f7ff ff59 	bl	8007600 <__sflush_r>
 800774e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007750:	07da      	lsls	r2, r3, #31
 8007752:	4605      	mov	r5, r0
 8007754:	d4e0      	bmi.n	8007718 <_fflush_r+0xc>
 8007756:	89a3      	ldrh	r3, [r4, #12]
 8007758:	059b      	lsls	r3, r3, #22
 800775a:	d4dd      	bmi.n	8007718 <_fflush_r+0xc>
 800775c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800775e:	f000 f908 	bl	8007972 <__retarget_lock_release_recursive>
 8007762:	e7d9      	b.n	8007718 <_fflush_r+0xc>
 8007764:	4b05      	ldr	r3, [pc, #20]	; (800777c <_fflush_r+0x70>)
 8007766:	429c      	cmp	r4, r3
 8007768:	d101      	bne.n	800776e <_fflush_r+0x62>
 800776a:	68ac      	ldr	r4, [r5, #8]
 800776c:	e7df      	b.n	800772e <_fflush_r+0x22>
 800776e:	4b04      	ldr	r3, [pc, #16]	; (8007780 <_fflush_r+0x74>)
 8007770:	429c      	cmp	r4, r3
 8007772:	bf08      	it	eq
 8007774:	68ec      	ldreq	r4, [r5, #12]
 8007776:	e7da      	b.n	800772e <_fflush_r+0x22>
 8007778:	08008114 	.word	0x08008114
 800777c:	08008134 	.word	0x08008134
 8007780:	080080f4 	.word	0x080080f4

08007784 <std>:
 8007784:	2300      	movs	r3, #0
 8007786:	b510      	push	{r4, lr}
 8007788:	4604      	mov	r4, r0
 800778a:	e9c0 3300 	strd	r3, r3, [r0]
 800778e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007792:	6083      	str	r3, [r0, #8]
 8007794:	8181      	strh	r1, [r0, #12]
 8007796:	6643      	str	r3, [r0, #100]	; 0x64
 8007798:	81c2      	strh	r2, [r0, #14]
 800779a:	6183      	str	r3, [r0, #24]
 800779c:	4619      	mov	r1, r3
 800779e:	2208      	movs	r2, #8
 80077a0:	305c      	adds	r0, #92	; 0x5c
 80077a2:	f7fe ffcf 	bl	8006744 <memset>
 80077a6:	4b05      	ldr	r3, [pc, #20]	; (80077bc <std+0x38>)
 80077a8:	6263      	str	r3, [r4, #36]	; 0x24
 80077aa:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <std+0x3c>)
 80077ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80077ae:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <std+0x40>)
 80077b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077b2:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <std+0x44>)
 80077b4:	6224      	str	r4, [r4, #32]
 80077b6:	6323      	str	r3, [r4, #48]	; 0x30
 80077b8:	bd10      	pop	{r4, pc}
 80077ba:	bf00      	nop
 80077bc:	08007b91 	.word	0x08007b91
 80077c0:	08007bb3 	.word	0x08007bb3
 80077c4:	08007beb 	.word	0x08007beb
 80077c8:	08007c0f 	.word	0x08007c0f

080077cc <_cleanup_r>:
 80077cc:	4901      	ldr	r1, [pc, #4]	; (80077d4 <_cleanup_r+0x8>)
 80077ce:	f000 b8af 	b.w	8007930 <_fwalk_reent>
 80077d2:	bf00      	nop
 80077d4:	0800770d 	.word	0x0800770d

080077d8 <__sfmoreglue>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	2268      	movs	r2, #104	; 0x68
 80077dc:	1e4d      	subs	r5, r1, #1
 80077de:	4355      	muls	r5, r2
 80077e0:	460e      	mov	r6, r1
 80077e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077e6:	f7ff f975 	bl	8006ad4 <_malloc_r>
 80077ea:	4604      	mov	r4, r0
 80077ec:	b140      	cbz	r0, 8007800 <__sfmoreglue+0x28>
 80077ee:	2100      	movs	r1, #0
 80077f0:	e9c0 1600 	strd	r1, r6, [r0]
 80077f4:	300c      	adds	r0, #12
 80077f6:	60a0      	str	r0, [r4, #8]
 80077f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077fc:	f7fe ffa2 	bl	8006744 <memset>
 8007800:	4620      	mov	r0, r4
 8007802:	bd70      	pop	{r4, r5, r6, pc}

08007804 <__sfp_lock_acquire>:
 8007804:	4801      	ldr	r0, [pc, #4]	; (800780c <__sfp_lock_acquire+0x8>)
 8007806:	f000 b8b3 	b.w	8007970 <__retarget_lock_acquire_recursive>
 800780a:	bf00      	nop
 800780c:	200002b9 	.word	0x200002b9

08007810 <__sfp_lock_release>:
 8007810:	4801      	ldr	r0, [pc, #4]	; (8007818 <__sfp_lock_release+0x8>)
 8007812:	f000 b8ae 	b.w	8007972 <__retarget_lock_release_recursive>
 8007816:	bf00      	nop
 8007818:	200002b9 	.word	0x200002b9

0800781c <__sinit_lock_acquire>:
 800781c:	4801      	ldr	r0, [pc, #4]	; (8007824 <__sinit_lock_acquire+0x8>)
 800781e:	f000 b8a7 	b.w	8007970 <__retarget_lock_acquire_recursive>
 8007822:	bf00      	nop
 8007824:	200002ba 	.word	0x200002ba

08007828 <__sinit_lock_release>:
 8007828:	4801      	ldr	r0, [pc, #4]	; (8007830 <__sinit_lock_release+0x8>)
 800782a:	f000 b8a2 	b.w	8007972 <__retarget_lock_release_recursive>
 800782e:	bf00      	nop
 8007830:	200002ba 	.word	0x200002ba

08007834 <__sinit>:
 8007834:	b510      	push	{r4, lr}
 8007836:	4604      	mov	r4, r0
 8007838:	f7ff fff0 	bl	800781c <__sinit_lock_acquire>
 800783c:	69a3      	ldr	r3, [r4, #24]
 800783e:	b11b      	cbz	r3, 8007848 <__sinit+0x14>
 8007840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007844:	f7ff bff0 	b.w	8007828 <__sinit_lock_release>
 8007848:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800784c:	6523      	str	r3, [r4, #80]	; 0x50
 800784e:	4b13      	ldr	r3, [pc, #76]	; (800789c <__sinit+0x68>)
 8007850:	4a13      	ldr	r2, [pc, #76]	; (80078a0 <__sinit+0x6c>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	62a2      	str	r2, [r4, #40]	; 0x28
 8007856:	42a3      	cmp	r3, r4
 8007858:	bf04      	itt	eq
 800785a:	2301      	moveq	r3, #1
 800785c:	61a3      	streq	r3, [r4, #24]
 800785e:	4620      	mov	r0, r4
 8007860:	f000 f820 	bl	80078a4 <__sfp>
 8007864:	6060      	str	r0, [r4, #4]
 8007866:	4620      	mov	r0, r4
 8007868:	f000 f81c 	bl	80078a4 <__sfp>
 800786c:	60a0      	str	r0, [r4, #8]
 800786e:	4620      	mov	r0, r4
 8007870:	f000 f818 	bl	80078a4 <__sfp>
 8007874:	2200      	movs	r2, #0
 8007876:	60e0      	str	r0, [r4, #12]
 8007878:	2104      	movs	r1, #4
 800787a:	6860      	ldr	r0, [r4, #4]
 800787c:	f7ff ff82 	bl	8007784 <std>
 8007880:	68a0      	ldr	r0, [r4, #8]
 8007882:	2201      	movs	r2, #1
 8007884:	2109      	movs	r1, #9
 8007886:	f7ff ff7d 	bl	8007784 <std>
 800788a:	68e0      	ldr	r0, [r4, #12]
 800788c:	2202      	movs	r2, #2
 800788e:	2112      	movs	r1, #18
 8007890:	f7ff ff78 	bl	8007784 <std>
 8007894:	2301      	movs	r3, #1
 8007896:	61a3      	str	r3, [r4, #24]
 8007898:	e7d2      	b.n	8007840 <__sinit+0xc>
 800789a:	bf00      	nop
 800789c:	08007f0c 	.word	0x08007f0c
 80078a0:	080077cd 	.word	0x080077cd

080078a4 <__sfp>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	4607      	mov	r7, r0
 80078a8:	f7ff ffac 	bl	8007804 <__sfp_lock_acquire>
 80078ac:	4b1e      	ldr	r3, [pc, #120]	; (8007928 <__sfp+0x84>)
 80078ae:	681e      	ldr	r6, [r3, #0]
 80078b0:	69b3      	ldr	r3, [r6, #24]
 80078b2:	b913      	cbnz	r3, 80078ba <__sfp+0x16>
 80078b4:	4630      	mov	r0, r6
 80078b6:	f7ff ffbd 	bl	8007834 <__sinit>
 80078ba:	3648      	adds	r6, #72	; 0x48
 80078bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078c0:	3b01      	subs	r3, #1
 80078c2:	d503      	bpl.n	80078cc <__sfp+0x28>
 80078c4:	6833      	ldr	r3, [r6, #0]
 80078c6:	b30b      	cbz	r3, 800790c <__sfp+0x68>
 80078c8:	6836      	ldr	r6, [r6, #0]
 80078ca:	e7f7      	b.n	80078bc <__sfp+0x18>
 80078cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078d0:	b9d5      	cbnz	r5, 8007908 <__sfp+0x64>
 80078d2:	4b16      	ldr	r3, [pc, #88]	; (800792c <__sfp+0x88>)
 80078d4:	60e3      	str	r3, [r4, #12]
 80078d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078da:	6665      	str	r5, [r4, #100]	; 0x64
 80078dc:	f000 f847 	bl	800796e <__retarget_lock_init_recursive>
 80078e0:	f7ff ff96 	bl	8007810 <__sfp_lock_release>
 80078e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078ec:	6025      	str	r5, [r4, #0]
 80078ee:	61a5      	str	r5, [r4, #24]
 80078f0:	2208      	movs	r2, #8
 80078f2:	4629      	mov	r1, r5
 80078f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078f8:	f7fe ff24 	bl	8006744 <memset>
 80078fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007900:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007904:	4620      	mov	r0, r4
 8007906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007908:	3468      	adds	r4, #104	; 0x68
 800790a:	e7d9      	b.n	80078c0 <__sfp+0x1c>
 800790c:	2104      	movs	r1, #4
 800790e:	4638      	mov	r0, r7
 8007910:	f7ff ff62 	bl	80077d8 <__sfmoreglue>
 8007914:	4604      	mov	r4, r0
 8007916:	6030      	str	r0, [r6, #0]
 8007918:	2800      	cmp	r0, #0
 800791a:	d1d5      	bne.n	80078c8 <__sfp+0x24>
 800791c:	f7ff ff78 	bl	8007810 <__sfp_lock_release>
 8007920:	230c      	movs	r3, #12
 8007922:	603b      	str	r3, [r7, #0]
 8007924:	e7ee      	b.n	8007904 <__sfp+0x60>
 8007926:	bf00      	nop
 8007928:	08007f0c 	.word	0x08007f0c
 800792c:	ffff0001 	.word	0xffff0001

08007930 <_fwalk_reent>:
 8007930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007934:	4606      	mov	r6, r0
 8007936:	4688      	mov	r8, r1
 8007938:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800793c:	2700      	movs	r7, #0
 800793e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007942:	f1b9 0901 	subs.w	r9, r9, #1
 8007946:	d505      	bpl.n	8007954 <_fwalk_reent+0x24>
 8007948:	6824      	ldr	r4, [r4, #0]
 800794a:	2c00      	cmp	r4, #0
 800794c:	d1f7      	bne.n	800793e <_fwalk_reent+0xe>
 800794e:	4638      	mov	r0, r7
 8007950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007954:	89ab      	ldrh	r3, [r5, #12]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d907      	bls.n	800796a <_fwalk_reent+0x3a>
 800795a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800795e:	3301      	adds	r3, #1
 8007960:	d003      	beq.n	800796a <_fwalk_reent+0x3a>
 8007962:	4629      	mov	r1, r5
 8007964:	4630      	mov	r0, r6
 8007966:	47c0      	blx	r8
 8007968:	4307      	orrs	r7, r0
 800796a:	3568      	adds	r5, #104	; 0x68
 800796c:	e7e9      	b.n	8007942 <_fwalk_reent+0x12>

0800796e <__retarget_lock_init_recursive>:
 800796e:	4770      	bx	lr

08007970 <__retarget_lock_acquire_recursive>:
 8007970:	4770      	bx	lr

08007972 <__retarget_lock_release_recursive>:
 8007972:	4770      	bx	lr

08007974 <__swhatbuf_r>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	460e      	mov	r6, r1
 8007978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800797c:	2900      	cmp	r1, #0
 800797e:	b096      	sub	sp, #88	; 0x58
 8007980:	4614      	mov	r4, r2
 8007982:	461d      	mov	r5, r3
 8007984:	da08      	bge.n	8007998 <__swhatbuf_r+0x24>
 8007986:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	602a      	str	r2, [r5, #0]
 800798e:	061a      	lsls	r2, r3, #24
 8007990:	d410      	bmi.n	80079b4 <__swhatbuf_r+0x40>
 8007992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007996:	e00e      	b.n	80079b6 <__swhatbuf_r+0x42>
 8007998:	466a      	mov	r2, sp
 800799a:	f000 f95f 	bl	8007c5c <_fstat_r>
 800799e:	2800      	cmp	r0, #0
 80079a0:	dbf1      	blt.n	8007986 <__swhatbuf_r+0x12>
 80079a2:	9a01      	ldr	r2, [sp, #4]
 80079a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80079a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80079ac:	425a      	negs	r2, r3
 80079ae:	415a      	adcs	r2, r3
 80079b0:	602a      	str	r2, [r5, #0]
 80079b2:	e7ee      	b.n	8007992 <__swhatbuf_r+0x1e>
 80079b4:	2340      	movs	r3, #64	; 0x40
 80079b6:	2000      	movs	r0, #0
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	b016      	add	sp, #88	; 0x58
 80079bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080079c0 <__smakebuf_r>:
 80079c0:	898b      	ldrh	r3, [r1, #12]
 80079c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079c4:	079d      	lsls	r5, r3, #30
 80079c6:	4606      	mov	r6, r0
 80079c8:	460c      	mov	r4, r1
 80079ca:	d507      	bpl.n	80079dc <__smakebuf_r+0x1c>
 80079cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	6123      	str	r3, [r4, #16]
 80079d4:	2301      	movs	r3, #1
 80079d6:	6163      	str	r3, [r4, #20]
 80079d8:	b002      	add	sp, #8
 80079da:	bd70      	pop	{r4, r5, r6, pc}
 80079dc:	ab01      	add	r3, sp, #4
 80079de:	466a      	mov	r2, sp
 80079e0:	f7ff ffc8 	bl	8007974 <__swhatbuf_r>
 80079e4:	9900      	ldr	r1, [sp, #0]
 80079e6:	4605      	mov	r5, r0
 80079e8:	4630      	mov	r0, r6
 80079ea:	f7ff f873 	bl	8006ad4 <_malloc_r>
 80079ee:	b948      	cbnz	r0, 8007a04 <__smakebuf_r+0x44>
 80079f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079f4:	059a      	lsls	r2, r3, #22
 80079f6:	d4ef      	bmi.n	80079d8 <__smakebuf_r+0x18>
 80079f8:	f023 0303 	bic.w	r3, r3, #3
 80079fc:	f043 0302 	orr.w	r3, r3, #2
 8007a00:	81a3      	strh	r3, [r4, #12]
 8007a02:	e7e3      	b.n	80079cc <__smakebuf_r+0xc>
 8007a04:	4b0d      	ldr	r3, [pc, #52]	; (8007a3c <__smakebuf_r+0x7c>)
 8007a06:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	6020      	str	r0, [r4, #0]
 8007a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a10:	81a3      	strh	r3, [r4, #12]
 8007a12:	9b00      	ldr	r3, [sp, #0]
 8007a14:	6163      	str	r3, [r4, #20]
 8007a16:	9b01      	ldr	r3, [sp, #4]
 8007a18:	6120      	str	r0, [r4, #16]
 8007a1a:	b15b      	cbz	r3, 8007a34 <__smakebuf_r+0x74>
 8007a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a20:	4630      	mov	r0, r6
 8007a22:	f000 f92d 	bl	8007c80 <_isatty_r>
 8007a26:	b128      	cbz	r0, 8007a34 <__smakebuf_r+0x74>
 8007a28:	89a3      	ldrh	r3, [r4, #12]
 8007a2a:	f023 0303 	bic.w	r3, r3, #3
 8007a2e:	f043 0301 	orr.w	r3, r3, #1
 8007a32:	81a3      	strh	r3, [r4, #12]
 8007a34:	89a0      	ldrh	r0, [r4, #12]
 8007a36:	4305      	orrs	r5, r0
 8007a38:	81a5      	strh	r5, [r4, #12]
 8007a3a:	e7cd      	b.n	80079d8 <__smakebuf_r+0x18>
 8007a3c:	080077cd 	.word	0x080077cd

08007a40 <memcpy>:
 8007a40:	440a      	add	r2, r1
 8007a42:	4291      	cmp	r1, r2
 8007a44:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a48:	d100      	bne.n	8007a4c <memcpy+0xc>
 8007a4a:	4770      	bx	lr
 8007a4c:	b510      	push	{r4, lr}
 8007a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a56:	4291      	cmp	r1, r2
 8007a58:	d1f9      	bne.n	8007a4e <memcpy+0xe>
 8007a5a:	bd10      	pop	{r4, pc}

08007a5c <memmove>:
 8007a5c:	4288      	cmp	r0, r1
 8007a5e:	b510      	push	{r4, lr}
 8007a60:	eb01 0402 	add.w	r4, r1, r2
 8007a64:	d902      	bls.n	8007a6c <memmove+0x10>
 8007a66:	4284      	cmp	r4, r0
 8007a68:	4623      	mov	r3, r4
 8007a6a:	d807      	bhi.n	8007a7c <memmove+0x20>
 8007a6c:	1e43      	subs	r3, r0, #1
 8007a6e:	42a1      	cmp	r1, r4
 8007a70:	d008      	beq.n	8007a84 <memmove+0x28>
 8007a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a7a:	e7f8      	b.n	8007a6e <memmove+0x12>
 8007a7c:	4402      	add	r2, r0
 8007a7e:	4601      	mov	r1, r0
 8007a80:	428a      	cmp	r2, r1
 8007a82:	d100      	bne.n	8007a86 <memmove+0x2a>
 8007a84:	bd10      	pop	{r4, pc}
 8007a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a8e:	e7f7      	b.n	8007a80 <memmove+0x24>

08007a90 <__malloc_lock>:
 8007a90:	4801      	ldr	r0, [pc, #4]	; (8007a98 <__malloc_lock+0x8>)
 8007a92:	f7ff bf6d 	b.w	8007970 <__retarget_lock_acquire_recursive>
 8007a96:	bf00      	nop
 8007a98:	200002b8 	.word	0x200002b8

08007a9c <__malloc_unlock>:
 8007a9c:	4801      	ldr	r0, [pc, #4]	; (8007aa4 <__malloc_unlock+0x8>)
 8007a9e:	f7ff bf68 	b.w	8007972 <__retarget_lock_release_recursive>
 8007aa2:	bf00      	nop
 8007aa4:	200002b8 	.word	0x200002b8

08007aa8 <_realloc_r>:
 8007aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aac:	4680      	mov	r8, r0
 8007aae:	4614      	mov	r4, r2
 8007ab0:	460e      	mov	r6, r1
 8007ab2:	b921      	cbnz	r1, 8007abe <_realloc_r+0x16>
 8007ab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab8:	4611      	mov	r1, r2
 8007aba:	f7ff b80b 	b.w	8006ad4 <_malloc_r>
 8007abe:	b92a      	cbnz	r2, 8007acc <_realloc_r+0x24>
 8007ac0:	f7fe ff9c 	bl	80069fc <_free_r>
 8007ac4:	4625      	mov	r5, r4
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007acc:	f000 f8fa 	bl	8007cc4 <_malloc_usable_size_r>
 8007ad0:	4284      	cmp	r4, r0
 8007ad2:	4607      	mov	r7, r0
 8007ad4:	d802      	bhi.n	8007adc <_realloc_r+0x34>
 8007ad6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ada:	d812      	bhi.n	8007b02 <_realloc_r+0x5a>
 8007adc:	4621      	mov	r1, r4
 8007ade:	4640      	mov	r0, r8
 8007ae0:	f7fe fff8 	bl	8006ad4 <_malloc_r>
 8007ae4:	4605      	mov	r5, r0
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d0ed      	beq.n	8007ac6 <_realloc_r+0x1e>
 8007aea:	42bc      	cmp	r4, r7
 8007aec:	4622      	mov	r2, r4
 8007aee:	4631      	mov	r1, r6
 8007af0:	bf28      	it	cs
 8007af2:	463a      	movcs	r2, r7
 8007af4:	f7ff ffa4 	bl	8007a40 <memcpy>
 8007af8:	4631      	mov	r1, r6
 8007afa:	4640      	mov	r0, r8
 8007afc:	f7fe ff7e 	bl	80069fc <_free_r>
 8007b00:	e7e1      	b.n	8007ac6 <_realloc_r+0x1e>
 8007b02:	4635      	mov	r5, r6
 8007b04:	e7df      	b.n	8007ac6 <_realloc_r+0x1e>

08007b06 <_raise_r>:
 8007b06:	291f      	cmp	r1, #31
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	460d      	mov	r5, r1
 8007b0e:	d904      	bls.n	8007b1a <_raise_r+0x14>
 8007b10:	2316      	movs	r3, #22
 8007b12:	6003      	str	r3, [r0, #0]
 8007b14:	f04f 30ff 	mov.w	r0, #4294967295
 8007b18:	bd38      	pop	{r3, r4, r5, pc}
 8007b1a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b1c:	b112      	cbz	r2, 8007b24 <_raise_r+0x1e>
 8007b1e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b22:	b94b      	cbnz	r3, 8007b38 <_raise_r+0x32>
 8007b24:	4620      	mov	r0, r4
 8007b26:	f000 f831 	bl	8007b8c <_getpid_r>
 8007b2a:	462a      	mov	r2, r5
 8007b2c:	4601      	mov	r1, r0
 8007b2e:	4620      	mov	r0, r4
 8007b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b34:	f000 b818 	b.w	8007b68 <_kill_r>
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d00a      	beq.n	8007b52 <_raise_r+0x4c>
 8007b3c:	1c59      	adds	r1, r3, #1
 8007b3e:	d103      	bne.n	8007b48 <_raise_r+0x42>
 8007b40:	2316      	movs	r3, #22
 8007b42:	6003      	str	r3, [r0, #0]
 8007b44:	2001      	movs	r0, #1
 8007b46:	e7e7      	b.n	8007b18 <_raise_r+0x12>
 8007b48:	2400      	movs	r4, #0
 8007b4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b4e:	4628      	mov	r0, r5
 8007b50:	4798      	blx	r3
 8007b52:	2000      	movs	r0, #0
 8007b54:	e7e0      	b.n	8007b18 <_raise_r+0x12>
	...

08007b58 <raise>:
 8007b58:	4b02      	ldr	r3, [pc, #8]	; (8007b64 <raise+0xc>)
 8007b5a:	4601      	mov	r1, r0
 8007b5c:	6818      	ldr	r0, [r3, #0]
 8007b5e:	f7ff bfd2 	b.w	8007b06 <_raise_r>
 8007b62:	bf00      	nop
 8007b64:	200000a8 	.word	0x200000a8

08007b68 <_kill_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4d07      	ldr	r5, [pc, #28]	; (8007b88 <_kill_r+0x20>)
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	4604      	mov	r4, r0
 8007b70:	4608      	mov	r0, r1
 8007b72:	4611      	mov	r1, r2
 8007b74:	602b      	str	r3, [r5, #0]
 8007b76:	f7f9 fab9 	bl	80010ec <_kill>
 8007b7a:	1c43      	adds	r3, r0, #1
 8007b7c:	d102      	bne.n	8007b84 <_kill_r+0x1c>
 8007b7e:	682b      	ldr	r3, [r5, #0]
 8007b80:	b103      	cbz	r3, 8007b84 <_kill_r+0x1c>
 8007b82:	6023      	str	r3, [r4, #0]
 8007b84:	bd38      	pop	{r3, r4, r5, pc}
 8007b86:	bf00      	nop
 8007b88:	200002bc 	.word	0x200002bc

08007b8c <_getpid_r>:
 8007b8c:	f7f9 baa6 	b.w	80010dc <_getpid>

08007b90 <__sread>:
 8007b90:	b510      	push	{r4, lr}
 8007b92:	460c      	mov	r4, r1
 8007b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b98:	f000 f89c 	bl	8007cd4 <_read_r>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	bfab      	itete	ge
 8007ba0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ba2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ba4:	181b      	addge	r3, r3, r0
 8007ba6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007baa:	bfac      	ite	ge
 8007bac:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bae:	81a3      	strhlt	r3, [r4, #12]
 8007bb0:	bd10      	pop	{r4, pc}

08007bb2 <__swrite>:
 8007bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb6:	461f      	mov	r7, r3
 8007bb8:	898b      	ldrh	r3, [r1, #12]
 8007bba:	05db      	lsls	r3, r3, #23
 8007bbc:	4605      	mov	r5, r0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	4616      	mov	r6, r2
 8007bc2:	d505      	bpl.n	8007bd0 <__swrite+0x1e>
 8007bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc8:	2302      	movs	r3, #2
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f000 f868 	bl	8007ca0 <_lseek_r>
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bda:	81a3      	strh	r3, [r4, #12]
 8007bdc:	4632      	mov	r2, r6
 8007bde:	463b      	mov	r3, r7
 8007be0:	4628      	mov	r0, r5
 8007be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007be6:	f000 b817 	b.w	8007c18 <_write_r>

08007bea <__sseek>:
 8007bea:	b510      	push	{r4, lr}
 8007bec:	460c      	mov	r4, r1
 8007bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf2:	f000 f855 	bl	8007ca0 <_lseek_r>
 8007bf6:	1c43      	adds	r3, r0, #1
 8007bf8:	89a3      	ldrh	r3, [r4, #12]
 8007bfa:	bf15      	itete	ne
 8007bfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c06:	81a3      	strheq	r3, [r4, #12]
 8007c08:	bf18      	it	ne
 8007c0a:	81a3      	strhne	r3, [r4, #12]
 8007c0c:	bd10      	pop	{r4, pc}

08007c0e <__sclose>:
 8007c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c12:	f000 b813 	b.w	8007c3c <_close_r>
	...

08007c18 <_write_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4d07      	ldr	r5, [pc, #28]	; (8007c38 <_write_r+0x20>)
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	4608      	mov	r0, r1
 8007c20:	4611      	mov	r1, r2
 8007c22:	2200      	movs	r2, #0
 8007c24:	602a      	str	r2, [r5, #0]
 8007c26:	461a      	mov	r2, r3
 8007c28:	f7f9 fa97 	bl	800115a <_write>
 8007c2c:	1c43      	adds	r3, r0, #1
 8007c2e:	d102      	bne.n	8007c36 <_write_r+0x1e>
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	b103      	cbz	r3, 8007c36 <_write_r+0x1e>
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	bd38      	pop	{r3, r4, r5, pc}
 8007c38:	200002bc 	.word	0x200002bc

08007c3c <_close_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4d06      	ldr	r5, [pc, #24]	; (8007c58 <_close_r+0x1c>)
 8007c40:	2300      	movs	r3, #0
 8007c42:	4604      	mov	r4, r0
 8007c44:	4608      	mov	r0, r1
 8007c46:	602b      	str	r3, [r5, #0]
 8007c48:	f7f9 faa3 	bl	8001192 <_close>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_close_r+0x1a>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_close_r+0x1a>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	200002bc 	.word	0x200002bc

08007c5c <_fstat_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4d07      	ldr	r5, [pc, #28]	; (8007c7c <_fstat_r+0x20>)
 8007c60:	2300      	movs	r3, #0
 8007c62:	4604      	mov	r4, r0
 8007c64:	4608      	mov	r0, r1
 8007c66:	4611      	mov	r1, r2
 8007c68:	602b      	str	r3, [r5, #0]
 8007c6a:	f7f9 fa9e 	bl	80011aa <_fstat>
 8007c6e:	1c43      	adds	r3, r0, #1
 8007c70:	d102      	bne.n	8007c78 <_fstat_r+0x1c>
 8007c72:	682b      	ldr	r3, [r5, #0]
 8007c74:	b103      	cbz	r3, 8007c78 <_fstat_r+0x1c>
 8007c76:	6023      	str	r3, [r4, #0]
 8007c78:	bd38      	pop	{r3, r4, r5, pc}
 8007c7a:	bf00      	nop
 8007c7c:	200002bc 	.word	0x200002bc

08007c80 <_isatty_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4d06      	ldr	r5, [pc, #24]	; (8007c9c <_isatty_r+0x1c>)
 8007c84:	2300      	movs	r3, #0
 8007c86:	4604      	mov	r4, r0
 8007c88:	4608      	mov	r0, r1
 8007c8a:	602b      	str	r3, [r5, #0]
 8007c8c:	f7f9 fa9d 	bl	80011ca <_isatty>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_isatty_r+0x1a>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_isatty_r+0x1a>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	200002bc 	.word	0x200002bc

08007ca0 <_lseek_r>:
 8007ca0:	b538      	push	{r3, r4, r5, lr}
 8007ca2:	4d07      	ldr	r5, [pc, #28]	; (8007cc0 <_lseek_r+0x20>)
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	4608      	mov	r0, r1
 8007ca8:	4611      	mov	r1, r2
 8007caa:	2200      	movs	r2, #0
 8007cac:	602a      	str	r2, [r5, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	f7f9 fa96 	bl	80011e0 <_lseek>
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	d102      	bne.n	8007cbe <_lseek_r+0x1e>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	b103      	cbz	r3, 8007cbe <_lseek_r+0x1e>
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	bd38      	pop	{r3, r4, r5, pc}
 8007cc0:	200002bc 	.word	0x200002bc

08007cc4 <_malloc_usable_size_r>:
 8007cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cc8:	1f18      	subs	r0, r3, #4
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bfbc      	itt	lt
 8007cce:	580b      	ldrlt	r3, [r1, r0]
 8007cd0:	18c0      	addlt	r0, r0, r3
 8007cd2:	4770      	bx	lr

08007cd4 <_read_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4d07      	ldr	r5, [pc, #28]	; (8007cf4 <_read_r+0x20>)
 8007cd8:	4604      	mov	r4, r0
 8007cda:	4608      	mov	r0, r1
 8007cdc:	4611      	mov	r1, r2
 8007cde:	2200      	movs	r2, #0
 8007ce0:	602a      	str	r2, [r5, #0]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	f7f9 fa1c 	bl	8001120 <_read>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d102      	bne.n	8007cf2 <_read_r+0x1e>
 8007cec:	682b      	ldr	r3, [r5, #0]
 8007cee:	b103      	cbz	r3, 8007cf2 <_read_r+0x1e>
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	200002bc 	.word	0x200002bc

08007cf8 <_init>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	bf00      	nop
 8007cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfe:	bc08      	pop	{r3}
 8007d00:	469e      	mov	lr, r3
 8007d02:	4770      	bx	lr

08007d04 <_fini>:
 8007d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d06:	bf00      	nop
 8007d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0a:	bc08      	pop	{r3}
 8007d0c:	469e      	mov	lr, r3
 8007d0e:	4770      	bx	lr
