/**
 * \file motor_cmd.c
 * \brief Fichier contenant les fonctions de gestion du moteur
 * \date 25/10/2022*
 *
 * \author Baptiste Cottu , Diego jaimes
 */

#include "motor_cmd.h"
#include "main.h"
#include <stdio.h>
#include <stdlib.h>

#define GRADATION_UN_POURCENT 17			//!< Montée en douceur tout les 1%. (17 correspond à un rapport cyclique de 1%)

extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;


/**
 * \fn void motor_start(void)
 * \brief Démarre le timer 2 et met la Pin ISO_RESET à 1 pendant le temps requis (2us). Le reset de ISO_RESET se fait dans l'interruption de tim2
 */
void motor_start(void){
	motor_stop_PWM();
	printf("moteur start entered\r\n");
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port,ISO_RESET_Pin,1);
	HAL_Delay(1);
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port,ISO_RESET_Pin,0);
	motor_start_PWM();
}

void motor_stop_PWM(void){
	printf("moteur_stop_entered\r\n");
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
	TIM1->CCR1=660;
	TIM1->CCR2=SPEED_MAX-660;
	HAL_TIM_PWM_Init(&htim1);
}

/**
 * \fn void motor_start_PWM(void)
 * \brief Fonction de racourci pour éviter de réécrire le redémarage des PWM à chaque fois
 */
void motor_start_PWM(void){
	printf("start_PWM\r\n");
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
}

/**
 * \fn void motor_set_speed(int *speed)
 * \brief Récupère et traite la commande de vitesse du moteur
 */
void motor_set_speed(int speed){
	printf("motor_speed_entered\r\n");
	if(speed>SPEED_MAX){
		speed=SPEED_MAX;
	}
	else if (speed<0){
		speed=0;
	}
	printf("consigne appliquée : %d\r\n",speed);								// verification de res dans la console

	/*//methode bourin
	TIM1->CCR1=speed;
	TIM1->CCR2=SPEED_MAX-speed;
	HAL_TIM_PWM_Init(&htim1);
	motor_start_PWM();*/

	// methode gradation du rapport cyclique
	int rapport_cyclique=0;

	// en montée
	rapport_cyclique= TIM1->CCR1;						//<! prise en compte de la vitesse actuelle
	if (speed>rapport_cyclique){
		while(rapport_cyclique<speed){
			TIM1->CCR1=rapport_cyclique;
			TIM1->CCR2=SPEED_MAX-rapport_cyclique;
			HAL_TIM_PWM_Init(&htim1);
			motor_start_PWM();
			HAL_Delay(500);
			rapport_cyclique=rapport_cyclique+GRADATION_UN_POURCENT;
		}
	}

	// en descente
	else if (speed<rapport_cyclique){
		while(rapport_cyclique>speed){
			TIM1->CCR1=rapport_cyclique;
			TIM1->CCR2=SPEED_MAX-rapport_cyclique;
			HAL_TIM_PWM_Init(&htim1);
			motor_start_PWM();
			HAL_Delay(500);
			rapport_cyclique=rapport_cyclique-GRADATION_UN_POURCENT;
		}
	}
}
